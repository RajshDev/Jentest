using IOAS.DataModel;
using ICSREMP.DataModel;
using IOAS.Infrastructure;
using IOAS.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.IO;
using System.Globalization;
using IOAS.Controllers;
using System.Web.Configuration;
using System.Data.SqlClient;

namespace IOAS.GenericServices
{
    public class RequirementService
    {
        CoreAccountsService CoreAccount = new CoreAccountsService();
        ErrorHandler WriteLog = new ErrorHandler();
        decimal MedicalDeduction = Convert.ToDecimal(WebConfigurationManager.AppSettings["MedicalAmt"]);
        private static string OfferLetter = WebConfigurationManager.AppSettings["RCTOfferLetter"];

        public static int getAppointmentType(string Category)
        {
            return Category == "CON" ? 1 : Category == "STE" ? 2 : Category == "OSG" ? 3 : 0;
        }

        public static string getAppointmentType(int categoryid)
        {
            return categoryid == 1 ? "CON" : categoryid == 2 ? "STE" : categoryid == 3 ? "OSG" : "";
        }

        public static string CommitmentNo(string AppRefNo, int? OrderId = null)
        {
            string CommitmentNumber = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OrderId > 0)
                    {
                        CommitmentNumber = (from c in context.tblRCTCommitmentRequest
                                            where c.OrderId == OrderId && (c.Status == "Commitment Booked" || c.Status == "Commitment Withdrawn")
                                            && (c.RequestType == "Add Commitment" || c.RequestType == "New Commitment" || c.RequestType == "Withdraw Commitment")
                                            orderby c.RecruitmentRequestId descending
                                            select c.CommitmentNumber).FirstOrDefault();
                    }

                    CommitmentNumber = (from c in context.tblRCTCommitmentRequest
                                        where c.ReferenceNumber == AppRefNo
                                        && c.Status == "Commitment Booked" && c.RequestType == "New Appointment"
                                        orderby c.RecruitmentRequestId descending
                                        select c.CommitmentNumber).FirstOrDefault();

                }
                return CommitmentNumber;
            }
            catch (Exception ex)
            {
                return CommitmentNumber;
            }
        }

        public static int getTypeofAppointment(int appid, string apptype)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (appid > 0 && !string.IsNullOrEmpty(apptype))
                    {
                        var typeofappointment = (from c in context.vw_RCTOverAllApplicationEntry
                                                 where c.ApplicationId == appid && c.Category == apptype && c.ApplicationType == "New"
                                                 select c.TypeofAppointmentinInt).FirstOrDefault();
                        return typeofappointment ?? 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public static string getDesignationName(int designationId)
        {
            string Designation = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var desQuery = (from d in context.tblRCTDesignation where d.DesignationId == designationId select d).FirstOrDefault();
                    Designation = desQuery != null ? desQuery.Designation : "";
                }
                return Designation;
            }
            catch (Exception ex)
            {
                return Designation;
            }
        }

        public static Tuple<string, string> getSalaryLevelName_Description(int salarylevelId)
        {
            string levelrange = string.Empty;
            string description = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var salQuery = (from d in context.tblRCTSalaryLevel
                                    where d.SalaryLevelId == salarylevelId
                                    select d).FirstOrDefault();
                    if (salQuery != null)
                    {
                        levelrange = salQuery.LevelRange;
                        description = salQuery.Description;
                    }
                }
                return Tuple.Create(levelrange, description);
            }
            catch (Exception ex)
            {
                return Tuple.Create(levelrange, description);
            }
        }

        public static decimal getEmployeeCTC(int AppId, int? OrderId = null)
        {
            decimal? EmployerCTC = 0;
            using (var context = new IOASDBEntities())
            {
                if (OrderId > 0)
                    EmployerCTC = (from c in context.tblRCTSalaryCalcDetails where c.OrderId == OrderId orderby c.SalaryDetailsId descending select c.EmployerCTC).FirstOrDefault();
                else
                    EmployerCTC = (from c in context.tblRCTSalaryCalcDetails where c.ID == AppId && c.IsCurrentVersion == true orderby c.SalaryDetailsId descending select c.EmployerCTC).FirstOrDefault();
            }
            return EmployerCTC ?? 0;
        }

        public static decimal getEmployeeLWFAmount(int AppId, int? OrderId = null)
        {
            decimal lwfamount = 0;
            using (var context = new IOASDBEntities())
            {
                if (OrderId > 0)
                {
                    lwfamount = (from c in context.tblRCTSalaryCalcDetails
                                 from s in context.tblRCTStatutory
                                 where c.StatutoryId == s.StatutoryId && c.OrderId == OrderId
                                 orderby c.SalaryDetailsId descending
                                 select s.LWFEmployerContribution).FirstOrDefault() ?? 0;
                }
                else
                {
                    lwfamount = (from c in context.tblRCTSalaryCalcDetails
                                 from s in context.tblRCTStatutory
                                 where c.StatutoryId == s.StatutoryId && c.ID == AppId && c.IsCurrentVersion == true
                                 orderby c.SalaryDetailsId descending
                                 select s.LWFEmployerContribution).FirstOrDefault() ?? 0;
                }
            }
            return lwfamount;
        }

        public static Tuple<decimal, decimal> getGSTAgencyFee(int VendorId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var agQuery = (from c in context.tblSalaryAgencyMaster
                                   where c.SalaryAgencyId == VendorId
                                   select new { c.GSTPercentage, c.Agencyfee }).FirstOrDefault();
                    if (agQuery != null)
                        return Tuple.Create(agQuery.GSTPercentage ?? 0, agQuery.Agencyfee ?? 0);
                }
                return Tuple.Create((Decimal)0, (Decimal)0);
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return Tuple.Create((Decimal)0, (Decimal)0);
            }
        }

        public static decimal getCONGSTPercentage(int AppId, int? OrderId = null)
        {
            decimal gst = 0;
            using (var context = new IOASDBEntities())
            {
                if (OrderId > 0)
                    gst = (from c in context.tblOrder where c.OrderId == OrderId select c.GST).FirstOrDefault() ?? 0;
                else
                    gst = (from c in context.tblRCTConsultantAppointment where c.ConsultantAppointmentId == AppId select c.GSTPercentage).FirstOrDefault() ?? 0;
            }
            return gst;
        }

        public static ProjectDetails getProjectSummary(int ProjectId)
        {
            try
            {
                ProjectDetails prjModel = new ProjectDetails();
                using (var context = new IOASDBEntities())
                {

                    var qryProject = (from prj in context.tblProject
                                      where prj.ProjectId == ProjectId
                                      select prj).FirstOrDefault();
                    if (qryProject.SponsoringAgency > 0)
                    {
                        var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == qryProject.SponsoringAgency).FirstOrDefault();
                        if (AgencyQry != null)
                            prjModel.SponsoringAgency = AgencyQry.AgencyName;
                    }

                    if (qryProject != null)
                    {
                        string pType = Common.getprojectTypeName(qryProject.ProjectType ?? 0);
                        if (qryProject.ProjectType == 1 && qryProject.ProjectSubType != 1)
                            pType += qryProject.SponProjectCategory == "1" ? "-PFMS" : qryProject.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                        else if (qryProject.ProjectType == 1 && qryProject.ProjectSubType == 1)
                            pType += " - Internal";
                        prjModel.ProjectType = pType;
                        prjModel.ProjectTitle = qryProject.ProjectTitle;
                        prjModel.PIId = qryProject.PIName;
                        prjModel.PIName = Common.GetPIName(qryProject.PIName ?? 0, false);
                        prjModel.ProjectStartDate = String.Format("{0:dd-MMM-yyyy}", qryProject.TentativeStartDate);
                        prjModel.ProjectClosureDate = string.Format("{0:dd-MMM-yyyy}", Common.GetProjectDueDate(ProjectId) ?? qryProject.TentativeCloseDate);
                        prjModel.ProjectNumber = qryProject.ProjectNumber;
                        prjModel.ProjectID = qryProject.ProjectId;
                        if (qryProject.PIName > 0)
                        {
                            var qryPIDetails = (from prj in context.vwFacultyStaffDetails
                                                where prj.UserId == qryProject.PIName
                                                select prj).FirstOrDefault();
                            if (qryPIDetails != null)
                            {
                                prjModel.Email = qryPIDetails.Email;
                                prjModel.Phone = qryPIDetails.ContactNumber;
                                prjModel.PIDepartmentCode = qryPIDetails.DepartmentCode;
                                prjModel.PIDepartmentName = qryPIDetails.DepartmentName;
                                prjModel.PICode = qryPIDetails.EmployeeId;
                                prjModel.PIDesignation = qryPIDetails.Designation;
                            }
                        }
                    }

                }
                return prjModel;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                ProjectDetails prjModel = new ProjectDetails();
                return prjModel;
            }
        }

        public static ProjectDetails getPIDetails(int PIID)
        {
            ProjectDetails model = new ProjectDetails();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var piQuery = (from p in context.vwFacultyStaffDetails where p.UserId == PIID select p).FirstOrDefault();
                    if (piQuery != null)
                    {
                        model.PIName = piQuery.FirstName;
                        model.Email = piQuery.Email;
                        model.Phone = piQuery.ContactNumber;
                        model.PIDepartmentCode = piQuery.DepartmentCode;
                        model.PIDepartmentName = piQuery.DepartmentName;
                        model.PICode = piQuery.EmployeeId;
                        model.PIDesignation = piQuery.Designation;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public FillDesignationModel getDesignationDetails(int DesignationID)
        {
            try
            {
                FillDesignationModel model = new FillDesignationModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from d in context.tblRCTDesignation
                                 where d.RecordStatus == "Active" && d.DesignationId == DesignationID
                                 select d).FirstOrDefault();
                    if (query != null)
                    {
                        model.DestinationID = query.DesignationId;
                        model.DesignationCode = query.DesignationCode;
                        model.Designation = query.Designation;
                        model.MinSalary = query.IsNotValid == true ? "0" : Convert.ToString(decimal.Round(query.PayStructureMinMum ?? 0, 2));
                        model.MaxSalary = query.IsNotValid == true ? "0" : Convert.ToString(decimal.Round(query.PayStructureMaximum ?? 0, 2));
                        model.HRA = query.HRA ?? false;
                        model.HRAPercentage = query.HRABasic ?? 0;
                        model.Medical = query.Medical ?? false;
                        model.MedicalAmount = query.MedicalDeduction ?? 0;
                        model.GateScore = query.GateScore ?? false;
                        if (query.IsNotValid != true)
                        {
                            string markpercentage = "", experience = "", department = "", qualification = "";
                            var querydet = (from dd in context.tblRCTDesignationDetail
                                            from qw in context.tblRCTQualificationList
                                            from c in context.tblCodeControl
                                            from cc in context.tblCodeControl
                                            where dd.Qualification == qw.QualificationId && c.CodeValAbbr == dd.Marks && c.CodeName == "Markstype"
                                            && cc.CodeValAbbr == dd.RelevantExperience && cc.CodeName == "RelevantExperienceType" && dd.IsCurrentVersion == true
                                            && dd.DesignationId == DesignationID
                                            select new
                                            {
                                                SalaryLevelDetailId = 0,
                                                qw.Qualification,
                                                mark = c.CodeValDetail,
                                                exp = cc.CodeValDetail,
                                                dd.CGPA,
                                                dd.DesignationDetailId
                                            }).ToList();
                            if (query.SalaryLevel > 0)
                            {
                                var salquery = context.tblRCTSalaryLevel.Where(m => m.SalaryLevelId == query.SalaryLevel).FirstOrDefault();
                                if (salquery != null)
                                {
                                    model.MinSalary = Convert.ToString(salquery.MinSalary ?? 0);
                                    model.MaxSalary = Convert.ToString(salquery.MaxSalary ?? 0);
                                    model.SalaryLevel = salquery.LevelRange;
                                    model.SalaryLevelId = salquery.SalaryLevelId;
                                    model.SalaryLevelDescription = salquery.Description;
                                }
                                querydet = (from d in context.tblRCTSalaryLevelDetail
                                            from q in context.tblRCTQualificationList
                                            from mr in context.tblCodeControl
                                            from c in context.tblCodeControl
                                            from r in context.tblCodeControl
                                            where d.Qualification == q.QualificationId && mr.CodeName == "Markstype" && mr.CodeValAbbr == d.Marks
                                            && c.CodeName == "CGPAType" && c.CodeValAbbr == d.CGPA
                                            && r.CodeName == "RelevantExperienceType" && r.CodeValAbbr == d.RelevantExperience
                                            && d.SalaryLevelId == query.SalaryLevel && d.IsCurrentVersion == true
                                            orderby d.SalaryLevelDetailId
                                            select new
                                            {
                                                d.SalaryLevelDetailId,
                                                q.Qualification,
                                                mark = mr.CodeValDetail,
                                                exp = r.CodeValDetail,
                                                d.CGPA,
                                                DesignationDetailId = 0
                                            }).ToList();
                            }

                            if (querydet.Count > 0)
                            {
                                qualification = string.Join(",", querydet.Select(m => m.Qualification).ToArray());
                                markpercentage = string.Join(",", querydet.Select(m => m.mark).ToArray());
                                experience = string.Join(",", querydet.Select(m => m.exp).ToArray());
                                querydet.ForEach(m =>
                                {
                                    var querydepart = (from C in context.tblRCTQualificationDetail
                                                       from D in context.tblRCTCourseList
                                                       where C.CourseId == D.CourseId && C.DesignationDetailId == m.DesignationDetailId
                                                       select D.CourseName).ToArray();
                                    department += string.Join("/", querydepart) + ",";
                                });
                            }
                            model.AgeLimit = "Age Limit: 18 to " + query.AgeLimit;
                            model.Mark = "Mark Percentage:" + markpercentage;
                            model.Experience = "Experience: " + experience + " years of working experience";
                            model.Department = "Departments: " + department;
                            model.Qualification = "Qualification: " + qualification + " degree in " + department + "" + model.AgeLimit + "" + model.Mark + "" + model.Experience;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                FillDesignationModel Model = new FillDesignationModel();
                return Model;
            }
        }

        #region Announcement

        public static Tuple<int, string> AnnouncementEntry(AnnouncementMasterModel model, int logged_in_userId, string button)
        {
            try
            {
                int res = 0;
                int AnnouncementID = 0, Status = 0;
                string errMsg = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var query = (from D in context.tblRCTAnnouncementMaster
                                         where D.AnnouncementID == model.AnnouncementID
                                         select D).FirstOrDefault();
                            if (query != null)
                            {
                                AnnouncementID = query.AnnouncementID;
                                Status = query.Status ?? 0;
                                if (query.Status == 1 || query.Status == 2)
                                {
                                    query.AnnouncementTitle = model.AnnouncementTitle;
                                    query.AnnouncementCategory = Common.GetCodeControlAbbrId("Announcement Category", model.AnnouncementCategory);
                                    query.Upt_TS = DateTime.Now;
                                    query.Upt_User = logged_in_userId;
                                    query.Status = button == "Save as drafts" ? 1 : 2;
                                    query.RequestedBy = Common.GetCodeControlAbbrId("Announcement Requestedby", model.AnnouncementRequestBy);
                                    query.DAComments = model.DAComments;
                                    query.ModeOfRequest = Common.GetCodeControlAbbrId("ModeOfRequest", model.ModeOfRequest);
                                    query.RequestReceiveDate = model.RequestReceiveDate;
                                    query.ClosureDate = model.AnnouncementClosureDate;
                                    query.FlowApprover = model.FlowApprover;
                                    if (model.AnnouncementCategory == "Project wise")
                                        query.ProjectID = model.ProjectId;
                                    query.PIName = model.PIId;
                                    if (model.DeanNote != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.DeanNote.FileName;
                                        model.DeanNote.UploadFile("RCTAnnouncementDocuments", docName);
                                        query.NoteDocument = docName;
                                    }
                                    context.SaveChanges();
                                    var queryplatform = (from D in context.tblRCTAnnouncementPlatform
                                                         where D.AnnouncementID == model.AnnouncementID
                                                         select D).FirstOrDefault();
                                    if (queryplatform != null)
                                    {
                                        queryplatform.Naukri = model.Naukri;
                                        queryplatform.indeed = model.indeed;
                                        queryplatform.linkedin = model.linkedin;
                                        queryplatform.Recruitmentportal = model.Recruitmentportal;
                                        queryplatform.Others = model.Others;
                                        context.SaveChanges();
                                    }
                                    context.tblRCTAnnouncementDetails.Where(x => x.AnnouncementID == model.AnnouncementID && x.isCurrentVersion == true)
                                     .ToList()
                                     .ForEach(m =>
                                     {
                                         m.isCurrentVersion = false;
                                     });
                                    if (model.DesignationDetails != null)
                                    {
                                        foreach (var item in model.DesignationDetails)
                                        {
                                            tblRCTAnnouncementDetails details = new tblRCTAnnouncementDetails();
                                            details.AnnouncementID = model.AnnouncementID;
                                            details.Destination = item.DesignationID;
                                            details.DestinationCode = item.DesignationCode;
                                            details.DestinationName = item.Designation;
                                            if (model.AnnouncementCategory == "Project wise")
                                            {
                                                details.ProjectID = model.ProjectId;
                                                details.ProjectNumber = item.ProjectNumber;
                                            }
                                            else
                                            {
                                                details.ProjectID = item.ProjectID;
                                                details.ProjectNumber = item.ProjectNumber;
                                            }
                                            details.Vacancies = item.Vacancies;
                                            details.Qualification = item.Qualification;
                                            details.MinSalary = item.MinSalary;
                                            details.MaxSalary = item.MaxSalary;
                                            details.isCurrentVersion = true;
                                            context.tblRCTAnnouncementDetails.Add(details);
                                            context.SaveChanges();
                                        }
                                    }

                                    Status = query.Status ?? 0;

                                    #region Status
                                    tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                                    status.AnnouncementID = model.AnnouncementID;
                                    status.PresentStatus = Status;
                                    status.NewStatus = Status;
                                    status.preBy = Common.GetPIName(logged_in_userId);
                                    status.Crt_By = logged_in_userId;
                                    status.Crt_TS = DateTime.Now;
                                    status.Message = "Announcement updated by user";
                                    context.tblRCTAnnouncementStatusLog.Add(status);
                                    context.SaveChanges();
                                    #endregion

                                    if (button == "Save as drafts")
                                        errMsg = "Draft Announcement Saved Successfully";
                                    else
                                        errMsg = "Sent for approval";
                                }
                                else if (query.Status == 4)
                                {
                                    query.Status = 5;
                                    query.Upt_TS = DateTime.Now;
                                    query.Upt_User = logged_in_userId;
                                    context.SaveChanges();
                                    #region Status
                                    tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                                    status.AnnouncementID = model.AnnouncementID;
                                    status.PresentStatus = model.StatusID;
                                    status.NewStatus = query.Status;
                                    status.preBy = Common.GetPIName(logged_in_userId);
                                    status.Crt_By = logged_in_userId;
                                    status.Crt_TS = DateTime.Now;
                                    status.Message = "Announcement posted";
                                    context.tblRCTAnnouncementStatusLog.Add(status);
                                    context.SaveChanges();
                                    #endregion
                                    errMsg = "Announcement posted";
                                }
                                else if (query.Status == 5 && model.isRepost)
                                {
                                    query.ClosureDate = model.AnnouncementClosureDate;
                                    if (model.AnnouncementClosureDate.Value.AddDays(+1) <= DateTime.Now)
                                    {
                                        query.Status = 6;
                                        //Status = query.Status ?? 0;
                                    }
                                    query.Upt_TS = DateTime.Now;
                                    query.Upt_User = logged_in_userId;
                                    context.SaveChanges();
                                    #region Status
                                    tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                                    status.AnnouncementID = model.AnnouncementID;
                                    status.PresentStatus = model.StatusID;
                                    status.NewStatus = Status;
                                    status.preBy = Common.GetPIName(logged_in_userId);
                                    status.Crt_By = logged_in_userId;
                                    status.Crt_TS = DateTime.Now;
                                    status.Message = "Announcement re-posted by user";
                                    context.tblRCTAnnouncementStatusLog.Add(status);
                                    context.SaveChanges();
                                    #endregion
                                    errMsg = "Announcement re-posted";

                                }
                                else if (query.Status == 6)
                                {
                                    query.InterviewScheduleDate = model.InterviewDate;
                                    query.Upt_TS = DateTime.Now;
                                    query.Upt_User = logged_in_userId;
                                    query.Remark = model.Remarks;
                                    if (string.IsNullOrEmpty(query.FlowApprover2))
                                        query.FlowApprover2 = model.FlowApprover2;
                                    if (model.RemarkDocument != null)
                                    {
                                        string filename = System.IO.Path.GetFileName(model.RemarkDocument.FileName);
                                        filename = Guid.NewGuid().ToString() + "_" + filename;
                                        model.RemarkDocument.UploadFile("RCTAnnouncementDocuments", filename);
                                        query.RemarkDoc = filename;
                                    }
                                    if (model.ShortlistDeanNote != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.ShortlistDeanNote.FileName;
                                        model.ShortlistDeanNote.UploadFile("RCTAnnouncementDocuments", docName);
                                        query.ShortlistNoteDocument = docName;
                                    }
                                    context.SaveChanges();
                                    var querydetails = (from a in context.tblRCTAnnouncementDetails
                                                        where a.AnnouncementID == AnnouncementID && a.isCurrentVersion == true
                                                        select a).ToList();
                                    if (querydetails != null)
                                    {
                                        for (var i = 0; i < querydetails.Count; i++)
                                        {
                                            string fileName = "";
                                            querydetails[i].ShortlistedApplicantsNumber = model.DesignationDetails[i].ShortlistedApplicant;
                                            if (model.DesignationDetails[i].ShortlistedApplicantFile != null)
                                            {
                                                fileName = Guid.NewGuid().ToString() + "_" + System.IO.Path.GetFileName(model.DesignationDetails[i].ShortlistedApplicantFile.FileName);
                                                model.DesignationDetails[i].ShortlistedApplicantFile.UploadFile("RCTAnnouncementDocuments", fileName);
                                                querydetails[i].ShortlistedApplicantsDoc = fileName;
                                            }
                                            querydetails[i].TotalApplicantsNumber = model.DesignationDetails[i].TotalApplicant;
                                            if (model.DesignationDetails[i].TotalApplicantFile != null)
                                            {
                                                fileName = Guid.NewGuid().ToString() + "_" + System.IO.Path.GetFileName(model.DesignationDetails[i].TotalApplicantFile.FileName);
                                                model.DesignationDetails[i].TotalApplicantFile.UploadFile("RCTAnnouncementDocuments", fileName);
                                                querydetails[i].TotalApplicantsDoc = fileName;
                                            }
                                            context.SaveChanges();
                                        }
                                    }

                                    var queryCommitee = (from a in context.tblRCTCommitteeMemberDetails where a.AnnouncementID == AnnouncementID select a).ToList();
                                    if (queryCommitee.Count > 0)
                                    {
                                        context.tblRCTCommitteeMemberDetails.RemoveRange(context.tblRCTCommitteeMemberDetails.Where(m => m.AnnouncementID == AnnouncementID));
                                        context.SaveChanges();
                                    }

                                    if (model.CommiteeMemberDetails != null)
                                    {
                                        foreach (var item in model.CommiteeMemberDetails)
                                        {
                                            tblRCTCommitteeMemberDetails Commitee = new tblRCTCommitteeMemberDetails();
                                            Commitee.AnnouncementID = model.AnnouncementID;
                                            Commitee.Name = item.PIName;
                                            Commitee.DestinationName = item.PIDesignation;
                                            Commitee.DepartmentName = item.PIDepartment;
                                            Commitee.Institution = item.PIInstitution == "Member" ? 1 : item.PIInstitution == "Chairperson" ? 2 : 0;
                                            Commitee.PIUserID = item.UserID;
                                            context.tblRCTCommitteeMemberDetails.Add(Commitee);
                                            context.SaveChanges();
                                        }
                                    }

                                    #region Status
                                    tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                                    status.AnnouncementID = model.AnnouncementID;
                                    status.PresentStatus = model.StatusID;
                                    status.NewStatus = model.StatusID;
                                    status.preBy = Common.GetPIName(logged_in_userId);
                                    status.Crt_By = logged_in_userId;
                                    status.Crt_TS = DateTime.Now;
                                    status.Message = "Shortlisted candidate details saved";
                                    context.tblRCTAnnouncementStatusLog.Add(status);
                                    context.SaveChanges();
                                    #endregion

                                    errMsg = "Sent for shortlisted candidate approval";
                                }
                                else if (query.Status == 10)
                                {
                                    query.Upt_TS = DateTime.Now;
                                    query.Upt_User = logged_in_userId;
                                    query.Remark2 = model.Remarks2;
                                    if (string.IsNullOrEmpty(query.FlowApprover3))
                                        query.FlowApprover3 = model.FlowApprover3;
                                    if (model.SelectionlistDeanNote != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.SelectionlistDeanNote.FileName;
                                        model.SelectionlistDeanNote.UploadFile("RCTAnnouncementDocuments", docName);
                                        query.SelectionlistNoteDocument = docName;
                                    }
                                    context.SaveChanges();
                                    var querydetail = (from a in context.tblRCTAnnouncementDetails
                                                       where a.AnnouncementID == AnnouncementID && a.isCurrentVersion == true
                                                       select a).ToList();
                                    if (querydetail != null)
                                    {
                                        for (int i = 0; i < querydetail.Count; i++)
                                        {
                                            querydetail[i].SelectedApplicantsNumber = model.DesignationDetails[i].SelectedApplicant;
                                            if (model.DesignationDetails[i].SelectedApplicantFile != null)
                                            {
                                                string fileName = string.Empty;
                                                fileName = Guid.NewGuid().ToString() + "_" + System.IO.Path.GetFileName(model.DesignationDetails[i].SelectedApplicantFile.FileName);
                                                model.DesignationDetails[i].SelectedApplicantFile.UploadFile("RCTAnnouncementDocuments", fileName);
                                                querydetail[i].SelectedApplicantsDoc = fileName;
                                            }
                                            context.SaveChanges();
                                        }
                                    }
                                    #region Status
                                    tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                                    status.AnnouncementID = model.AnnouncementID;
                                    status.PresentStatus = model.StatusID;
                                    status.NewStatus = query.Status;
                                    status.preBy = Common.GetPIName(logged_in_userId);
                                    status.Crt_By = logged_in_userId;
                                    status.Crt_TS = DateTime.Now;
                                    status.Message = "Selected candidate draft saved";
                                    context.tblRCTAnnouncementStatusLog.Add(status);
                                    context.SaveChanges();
                                    #endregion

                                    errMsg = "Sent for selected candidate approval";

                                }
                            }
                            else
                            {
                                var SeqNo = (from R in context.tblRCTAnnouncementMaster where R.Crt_TS.Value.Year == DateTime.Now.Year select R.YearlySeq).Max() ?? 0;
                                tblRCTAnnouncementMaster create = new tblRCTAnnouncementMaster();
                                create.AnnouncementTitle = model.AnnouncementTitle;
                                create.AnnouncementCategory = Common.GetCodeControlAbbrId("Announcement Category", model.AnnouncementCategory);
                                create.Status = button == "Save as drafts" ? 1 : 2;
                                create.DraftedDate = DateTime.Now;
                                create.Crt_TS = DateTime.Now;
                                create.Crt_User = logged_in_userId;
                                create.RequestedBy = Common.GetCodeControlAbbrId("Announcement Requestedby", model.AnnouncementRequestBy);
                                create.DAComments = model.DAComments;
                                create.ModeOfRequest = Common.GetCodeControlAbbrId("ModeOfRequest", model.ModeOfRequest);
                                create.RequestReceiveDate = model.RequestReceiveDate;
                                create.ClosureDate = model.AnnouncementClosureDate;
                                if (model.AnnouncementCategory == "Project wise")
                                    create.ProjectID = model.ProjectId;
                                create.PIName = model.PIId;
                                create.FlowApprover = model.FlowApprover;
                                if (model.DeanNote != null)
                                {
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + model.DeanNote.FileName;
                                    model.DeanNote.UploadFile("RCTAnnouncementDocuments", docName);
                                    create.NoteDocument = docName;
                                }
                                context.tblRCTAnnouncementMaster.Add(create);
                                context.SaveChanges();

                                AnnouncementID = create.AnnouncementID;
                                if (AnnouncementID > 0 && create.Status == 1)
                                    errMsg = "Draft Announcement Saved Successfully";
                                if (AnnouncementID > 0 && create.Status == 2)
                                    errMsg = "Announcement Saved Successfully and sent for approval";

                                var updateref = (from R in context.tblRCTAnnouncementMaster
                                                 where R.AnnouncementID == AnnouncementID
                                                 select R).FirstOrDefault();
                                if (updateref != null)
                                {
                                    SeqNo = SeqNo + 1;
                                    updateref.YearlySeq = SeqNo;
                                    updateref.RefNo = "ICSR/PR/Advt." + SeqNo + "/" + DateTime.Now.Year;
                                    if (model.AnnouncementRequestBy == "Department Announcement")
                                        updateref.RefNo = "ICSR/PR/Dept.Advt." + SeqNo + "/" + DateTime.Now.Year;
                                    context.SaveChanges();
                                }

                                tblRCTAnnouncementPlatform platform = new tblRCTAnnouncementPlatform();
                                platform.AnnouncementID = AnnouncementID;
                                platform.Naukri = model.Naukri;
                                platform.indeed = model.indeed;
                                platform.linkedin = model.linkedin;
                                platform.Recruitmentportal = model.Recruitmentportal;
                                platform.Others = model.Others;
                                context.tblRCTAnnouncementPlatform.Add(platform);
                                context.SaveChanges();

                                if (model.DesignationDetails != null)
                                {
                                    foreach (var item in model.DesignationDetails)
                                    {
                                        tblRCTAnnouncementDetails details = new tblRCTAnnouncementDetails();
                                        details.AnnouncementID = AnnouncementID;
                                        details.Destination = item.DesignationID;
                                        details.DestinationCode = item.DesignationCode;
                                        details.DestinationName = item.Designation;
                                        if (model.AnnouncementCategory == "Project wise")
                                        {
                                            details.ProjectID = model.ProjectId;
                                            details.ProjectNumber = item.ProjectNumber;
                                        }
                                        else
                                        {
                                            details.ProjectID = item.ProjectID;
                                            details.ProjectNumber = item.ProjectNumber;
                                        }
                                        details.Vacancies = item.Vacancies;
                                        details.Qualification = item.Qualification;
                                        details.MinSalary = item.MinSalary;
                                        details.MaxSalary = item.MaxSalary;
                                        details.isCurrentVersion = true;
                                        context.tblRCTAnnouncementDetails.Add(details);
                                        context.SaveChanges();
                                    }
                                }

                                #region Status
                                tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                                status.AnnouncementID = AnnouncementID;
                                status.NewStatus = create.Status;
                                status.preBy = Common.GetPIName(logged_in_userId);
                                status.Crt_By = logged_in_userId;
                                status.Crt_TS = DateTime.Now;
                                status.Message = "Announcement created by user";
                                context.tblRCTAnnouncementStatusLog.Add(status);
                                context.SaveChanges();
                                #endregion
                                Status = create.Status ?? 0;
                            }

                            transaction.Commit();
                            if (Status == 2 || Status == 6 || Status == 10)
                            {
                                RequirementService RQS = new RequirementService();
                                var Data = RQS.AnnouncementWFInit(AnnouncementID, logged_in_userId);
                                if (!Data.Item1)
                                {
                                    errMsg = Data.Item2;
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            ErrorHandler errWrite = new ErrorHandler();
                            errWrite.SendErrorToText(ex);
                            return Tuple.Create(0, errMsg);
                        }
                    }
                }
                return Tuple.Create(res, errMsg);
            }
            catch (Exception ex)
            {
                ErrorHandler errWrite = new ErrorHandler();
                errWrite.SendErrorToText(ex);
                return Tuple.Create(0, "");
            }
        }

        public AnnouncementMasterModel GetEditAnnouncement(int AnnouncementID)
        {
            AnnouncementMasterModel model = new AnnouncementMasterModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from A in context.tblRCTAnnouncementMaster
                                 join P in context.tblRCTAnnouncementPlatform on A.AnnouncementID equals P.AnnouncementID
                                 where A.AnnouncementID == AnnouncementID
                                 select new { A, P }).FirstOrDefault();
                    if (query != null)
                    {
                        model.AnnouncementID = query.A.AnnouncementID;
                        model.RefNo = query.A.RefNo;
                        model.AnnouncementTitle = query.A.AnnouncementTitle;
                        model.AnnouncementCategory = Common.GetCodeControlDes(query.A.AnnouncementCategory ?? 0, "Announcement Category");
                        if (model.AnnouncementCategory == "Project wise")
                        {
                            model.ProjectId = query.A.ProjectID ?? 0;
                            model.ProjectNumber = Common.GetProjectNumber(query.A.ProjectID ?? 0);
                        }
                        var querypi = (from v in context.vwFacultyStaffDetails where v.UserId == query.A.PIName select v).FirstOrDefault();
                        if (querypi != null)
                        {
                            model.PIId = query.A.PIName;
                            model.PIName = querypi.FirstName;
                            model.PIDepartment = querypi.DepartmentName;
                        }
                        model.Status = Common.GetCodeControlName(query.A.Status ?? 0, "Status Of Announcement");
                        model.StatusID = query.A.Status ?? 0;
                        model.DraftDate = query.A.DraftedDate ?? DateTime.Now;
                        model.AnnouncementRequestBy = Common.GetCodeControlDes(query.A.RequestedBy ?? 0, "Announcement Requestedby");
                        model.DAComments = query.A.DAComments;
                        model.ModeOfRequest = Common.GetCodeControlName(query.A.ModeOfRequest ?? 0, "ModeOfRequest");
                        model.RequestReceiveDate = query.A.RequestReceiveDate ?? DateTime.Now;
                        model.AnnouncementClosureDate = query.A.ClosureDate ?? DateTime.Now;
                        if (model.StatusID > 6)
                        {
                            model.InterviewDate = query.A.InterviewScheduleDate ?? DateTime.Now;
                            model.strInterviewDate = query.A.InterviewScheduleDate != null ? string.Format("{0:dd-MMMM-yyyy}", query.A.InterviewScheduleDate ?? DateTime.Now) : null;
                        }
                        model.strRequestReceiveDate = string.Format("{0:dd-MMMM-yyyy}", query.A.RequestReceiveDate ?? DateTime.Now);
                        model.strAnnouncementClosureDate = string.Format("{0:dd-MMMM-yyyy}", query.A.ClosureDate ?? DateTime.Now);
                        model.Naukri = query.P.Naukri;
                        model.indeed = query.P.indeed;
                        model.linkedin = query.P.linkedin;
                        model.Recruitmentportal = query.P.Recruitmentportal;
                        model.Others = query.P.Others;
                        model.Remarks = query.A.Remark;
                        model.Remarks2 = query.A.Remark2;
                        model.RemarkDocumentDoc = query.A.RemarkDoc;
                        model.DesignationDetails = (from c in context.tblRCTAnnouncementDetails
                                                    where c.AnnouncementID == AnnouncementID && c.isCurrentVersion == true
                                                    orderby c.DestinationDeatailID
                                                    select new DesignationDetailsModel()
                                                    {
                                                        DestinationDeatailID = c.DestinationDeatailID,
                                                        DesignationID = c.Destination ?? 0,
                                                        DesignationCode = c.DestinationCode,
                                                        Designation = c.DestinationName,
                                                        ProjectNumber = c.ProjectNumber,
                                                        Vacancies = c.Vacancies ?? 0,
                                                        ProjectID = c.ProjectID ?? 0,
                                                        Qualification = c.Qualification,
                                                        MinSalary = c.MinSalary,
                                                        MaxSalary = c.MaxSalary,
                                                        FixedSalary = 0,
                                                        TotalApplicant = c.TotalApplicantsNumber,
                                                        ShortlistedApplicant = c.ShortlistedApplicantsNumber,
                                                        SelectedApplicant = c.SelectedApplicantsNumber,
                                                        SelectedApplicantDoc = c.SelectedApplicantsDoc,
                                                        ShortlistedApplicantDoc = c.ShortlistedApplicantsDoc,
                                                        TotalApplicantDoc = c.TotalApplicantsDoc,
                                                    }).ToList();
                        if (model.DesignationDetails[0].SelectedApplicantDoc != null)
                            model.isSelectionlist = false;
                        else
                            model.isSelectionlist = true;

                        model.CommiteeMemberDetails = (from M in context.tblRCTCommitteeMemberDetails
                                                       where M.AnnouncementID == AnnouncementID
                                                       orderby M.CommitteeMemberDetailID
                                                       select M).AsEnumerable().Select(x => new CommiteeMemberDetailsModel
                                                       {
                                                           CommiteeMemberDetailID = x.CommitteeMemberDetailID,
                                                           UserID = x.PIUserID ?? 0,
                                                           PIName = x.Name,
                                                           PIDesignation = Convert.ToString(x.DestinationName),
                                                           PIDepartment = Convert.ToString(x.DepartmentName),
                                                           PIInstitution = x.Institution == 1 ? "Member" : x.Institution == 2 ? "Chairperson" : "",

                                                       }).ToList();
                        if (model.CommiteeMemberDetails.Count == 0)
                            model.isShortlist = true;
                        model.FlowApprover = query.A.FlowApprover;
                        model.FlowApprover2 = query.A.FlowApprover2;
                        model.FlowApprover3 = query.A.FlowApprover3;
                        model.DeanNoteDocPath = query.A.NoteDocument;
                        model.SelectionlistDeanNoteDocPath = query.A.SelectionlistNoteDocument;
                        model.ShortlistDeanNoteDocPath = query.A.ShortlistNoteDocument;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }

        public SearchAnnouncementModel GetAnnouncementList(int page, int pageSize, SearchAnnouncementModel model, DateFilterModel RequestReceivedDate, DateFilterModel ClosureDate)
        {
            try
            {
                SearchAnnouncementModel list = new SearchAnnouncementModel();
                List<AnnouncementMasterModel> AnnouncementList = new List<AnnouncementMasterModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    if (model.ToDate != null)
                        model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-2);
                    if (RequestReceivedDate.to != null)
                        RequestReceivedDate.to = RequestReceivedDate.to.Value.Date.AddDays(1).AddTicks(-2);
                    if (ClosureDate.to != null)
                        ClosureDate.to = ClosureDate.to.Value.Date.AddDays(1).AddTicks(-2);

                    var QryAnnouncementList = (from b in context.tblRCTAnnouncementMaster
                                               from p in context.tblCodeControl
                                               join pi in context.vwFacultyStaffDetails on b.PIName equals pi.UserId into lft
                                               from j in lft.DefaultIfEmpty()
                                               orderby b.AnnouncementID descending
                                               where p.CodeName == "Status Of Announcement" && b.Status == p.CodeValAbbr
                                               && (b.AnnouncementTitle.Contains(model.AnnouncementTitle) || model.AnnouncementTitle == null)
                                               && (p.CodeValDetail.Contains(model.Status) || model.Status == null)
                                               && (b.RefNo == model.SearchINAdvertisementNo || model.SearchINAdvertisementNo == null)
                                               && ((b.Crt_TS >= model.FromDate && b.Crt_TS <= model.ToDate) || (model.FromDate == null || model.ToDate == null))
                                               && ((b.RequestReceiveDate >= RequestReceivedDate.@from && b.RequestReceiveDate <= RequestReceivedDate.to) || (RequestReceivedDate.@from == null && RequestReceivedDate.to == null))
                                               && ((b.ClosureDate >= ClosureDate.@from && b.ClosureDate <= ClosureDate.to) || (ClosureDate.@from == null && ClosureDate.to == null))
                                               && (j == null || string.IsNullOrEmpty(model.PIName) || (j.FirstName.Contains(model.PIName) || j.DepartmentName.Contains(model.PIName)))
                                               select new
                                               {
                                                   b.AnnouncementID,
                                                   b.RefNo,
                                                   b.Status,
                                                   b.AnnouncementTitle,
                                                   b.RequestedBy,
                                                   b.AnnouncementCategory,
                                                   p.CodeValDetail,
                                                   b.RequestReceiveDate,
                                                   b.ClosureDate,
                                                   FirstName = j == null ? "" : j.FirstName,
                                                   DepartmentName = j == null ? "" : j.DepartmentName
                                               }).ToList();

                    if (model.SearchINStatus == null)
                    {
                        list.TotalRecords = QryAnnouncementList.Where(x => x.Status != 13).Count();
                        QryAnnouncementList = QryAnnouncementList.Where(x => x.Status != 13).Skip(skiprec).Take(pageSize).ToList();
                    }
                    else if (model.SearchINStatus != null)
                    {
                        list.TotalRecords = QryAnnouncementList.Where(x => x.Status == 13).Count();
                        QryAnnouncementList = QryAnnouncementList.Where(x => x.CodeValDetail == model.SearchINStatus).Skip(skiprec).Take(pageSize).ToList();
                    }
                    if (QryAnnouncementList != null)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < QryAnnouncementList.Count; i++)
                        {
                            AnnouncementList.Add(new AnnouncementMasterModel()
                            {
                                SNo = sno + i,
                                AnnouncementID = QryAnnouncementList[i].AnnouncementID,
                                RefNo = QryAnnouncementList[i].RefNo,
                                AnnouncementTitle = QryAnnouncementList[i].AnnouncementTitle,
                                AnnouncementRequestBy = Common.GetCodeControlDes(QryAnnouncementList[i].RequestedBy ?? 0, "Announcement Requestedby"),
                                AnnouncementCategory = Common.GetCodeControlDes(QryAnnouncementList[i].AnnouncementCategory ?? 0, "Announcement Category"),
                                strRequestReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QryAnnouncementList[i].RequestReceiveDate ?? DateTime.Now),
                                strAnnouncementClosureDate = string.Format("{0:dd-MMMM-yyyy}", QryAnnouncementList[i].ClosureDate ?? DateTime.Now),
                                RequestReceiveDate = QryAnnouncementList[i].RequestReceiveDate ?? DateTime.Now,
                                AnnouncementClosureDate = QryAnnouncementList[i].ClosureDate ?? DateTime.Now,
                                Status = QryAnnouncementList[i].CodeValDetail,
                                StatusID = QryAnnouncementList[i].Status ?? 0,
                                PIName = QryAnnouncementList[i].FirstName,
                                PIDepartment = QryAnnouncementList[i].DepartmentName
                            });
                        }
                    }

                    //list.TotalRecords = (from b in context.tblRCTAnnouncementMaster
                    //                     from p in context.tblCodeControl
                    //                     join pi in context.vwFacultyStaffDetails on b.PIName equals pi.UserId into lft
                    //                     from j in lft.DefaultIfEmpty()
                    //                     orderby b.AnnouncementID descending
                    //                     where p.CodeName == "Status Of Announcement" && b.Status == p.CodeValAbbr
                    //                     && (b.AnnouncementTitle.Contains(model.AnnouncementTitle) || model.AnnouncementTitle == null)
                    //                     && (p.CodeValDetail.Contains(model.Status) || model.Status == null)
                    //                     && (p.CodeValDetail.Contains(model.SearchINStatus) || model.SearchINStatus == null)
                    //                     && (b.RefNo == model.SearchINAdvertisementNo || model.SearchINAdvertisementNo == null)
                    //                     && ((b.Crt_TS >= model.FromDate && b.Crt_TS <= model.ToDate) || (model.FromDate == null || model.ToDate == null))
                    //                     && ((b.RequestReceiveDate >= RequestReceivedDate.@from && b.RequestReceiveDate <= RequestReceivedDate.to) || (RequestReceivedDate.@from == null && RequestReceivedDate.to == null))
                    //                     && ((b.ClosureDate >= ClosureDate.@from && b.ClosureDate <= ClosureDate.to) || (ClosureDate.@from == null && ClosureDate.to == null))
                    //                     && (j == null || string.IsNullOrEmpty(model.PIName) || (j.FirstName.Contains(model.PIName) || j.DepartmentName.Contains(model.PIName)))
                    //                     select new
                    //                     {
                    //                         b.RefNo,
                    //                         b.Status,
                    //                         b.AnnouncementTitle,
                    //                         b.AnnouncementID,
                    //                         b.RequestedBy,
                    //                         b.AnnouncementCategory,
                    //                         p.CodeValDetail,
                    //                         b.RequestReceiveDate,
                    //                         b.ClosureDate,
                    //                     }).Count();
                    list.AnnouncementList = AnnouncementList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchAnnouncementModel list = new SearchAnnouncementModel();
                return list;
            }
        }

        public int AnnouncementCancel(int AnnouncementID, string CancelReason, int Upt_user)
        {
            int res = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from a in context.tblRCTAnnouncementMaster where a.AnnouncementID == AnnouncementID select a).FirstOrDefault();
                    if (query != null)
                    {
                        #region CancelStatus
                        tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                        status.AnnouncementID = AnnouncementID;
                        status.PresentStatus = query.Status;
                        status.NewStatus = 13;
                        status.preBy = Common.GetPIName(Upt_user);
                        status.Crt_By = Upt_user;
                        status.Crt_TS = DateTime.Now;
                        status.Message = "Announcement cancelled";
                        context.tblRCTAnnouncementStatusLog.Add(status);
                        context.SaveChanges();
                        #endregion
                        query.Status = 13;
                        query.CanceledReason = CancelReason;
                        query.Upt_TS = DateTime.Now;
                        query.Upt_User = Upt_user;
                        context.SaveChanges();
                        res = 1;
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                return res;
            }
        }

        public AnnouncementMasterModel GetAnnouncementDetails(int AnnouncementID)
        {
            AnnouncementMasterModel model = new AnnouncementMasterModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from A in context.tblRCTAnnouncementMaster
                                 join P in context.tblRCTAnnouncementPlatform on A.AnnouncementID equals P.AnnouncementID
                                 where A.AnnouncementID == AnnouncementID
                                 select new { A, P }).FirstOrDefault();
                    if (query != null)
                    {
                        model.AnnouncementID = query.A.AnnouncementID;
                        model.RefNo = query.A.RefNo;
                        model.AnnouncementTitle = query.A.AnnouncementTitle;
                        model.AnnouncementCategory = Common.GetCodeControlDes(query.A.AnnouncementCategory ?? 0, "Announcement Category");
                        var querypi = (from dept in context.vwFacultyStaffDetails where dept.UserId == query.A.PIName select dept).FirstOrDefault();
                        if (querypi != null)
                        {
                            model.PIId = query.A.PIName;
                            model.PIName = querypi.FirstName;
                            model.PIDepartment = querypi.DepartmentName;
                        }
                        model.Status = Common.GetCodeControlName(query.A.Status ?? 0, "Status Of Announcement");
                        model.StatusID = query.A.Status ?? 0;
                        model.AnnouncementRequestBy = Common.GetCodeControlDes(query.A.RequestedBy ?? 0, "Announcement Requestedby");
                        model.DAComments = query.A.DAComments;
                        model.ModeOfRequest = Common.GetCodeControlName(query.A.ModeOfRequest ?? 0, "ModeOfRequest");
                        model.RequestReceiveDate = query.A.RequestReceiveDate ?? DateTime.Now;
                        model.AnnouncementClosureDate = query.A.ClosureDate ?? DateTime.Now;
                        model.strRequestReceiveDate = string.Format("{0:dd-MMMM-yyyy}", query.A.RequestReceiveDate ?? DateTime.Now);
                        model.strAnnouncementClosureDate = string.Format("{0:dd-MMMM-yyyy}", query.A.ClosureDate ?? DateTime.Now);
                        model.strInterviewDate = string.Format("{0:dd MMMM yyyy (dddd)}", query.A.InterviewScheduleDate ?? DateTime.Now);
                        List<string> list = new List<string>();
                        if (query.P.Naukri == true)
                            list.Add("Naukri");
                        if (query.P.indeed == true)
                            list.Add("Indeed");
                        if (query.P.linkedin == true)
                            list.Add("LinkedIn");
                        if (query.P.Recruitmentportal == true)
                            list.Add("Recruitment portal");
                        if (query.P.Others == true)
                            list.Add("Others");
                        model.PortalsPlatform = list.Count > 0 ? string.Join(",", list) : null;
                        model.Remarks = query.A.Remark;
                        model.Remarks2 = query.A.Remark2;
                        model.RemarkDocumentDoc = query.A.RemarkDoc;
                        model.FlowApprover = query.A.FlowApprover;
                        model.FlowApprover2 = query.A.FlowApprover2;
                        model.FlowApprover3 = query.A.FlowApprover3;
                        model.DeanNoteDocPath = query.A.NoteDocument;
                        model.ShortlistDeanNoteDocPath = query.A.ShortlistNoteDocument;
                        model.SelectionlistDeanNoteDocPath = query.A.SelectionlistNoteDocument;
                        model.DesignationDetails = (from c in context.tblRCTAnnouncementDetails
                                                    where c.AnnouncementID == AnnouncementID && c.isCurrentVersion == true
                                                    orderby c.DestinationDeatailID
                                                    select new DesignationDetailsModel()
                                                    {
                                                        DestinationDeatailID = c.DestinationDeatailID,
                                                        DesignationCode = c.DestinationCode,
                                                        Designation = c.DestinationName,
                                                        ProjectNumber = c.ProjectNumber,
                                                        Vacancies = c.Vacancies ?? 0,
                                                        ProjectID = c.ProjectID ?? 0,
                                                        Qualification = c.Qualification,
                                                        MinSalary = c.MinSalary,
                                                        MaxSalary = c.MaxSalary,
                                                        FixedSalary = 0,
                                                        TotalApplicant = c.TotalApplicantsNumber ?? 0,
                                                        ShortlistedApplicant = c.ShortlistedApplicantsNumber ?? 0,
                                                        SelectedApplicant = c.SelectedApplicantsNumber ?? 0,
                                                        SelectedApplicantDoc = c.SelectedApplicantsDoc,
                                                        ShortlistedApplicantDoc = c.ShortlistedApplicantsDoc,
                                                        TotalApplicantDoc = c.TotalApplicantsDoc,
                                                    }).ToList();
                        model.CommiteeMemberDetails = (from m in context.tblRCTCommitteeMemberDetails
                                                       where m.AnnouncementID == AnnouncementID
                                                       orderby m.CommitteeMemberDetailID
                                                       select new CommiteeMemberDetailsModel()
                                                       {
                                                           CommiteeMemberDetailID = m.CommitteeMemberDetailID,
                                                           PIName = m.Name,
                                                           PIDesignation = m.DestinationName,
                                                           PIDepartment = m.DepartmentName,
                                                           PIInstitution = m.Institution == 1 ? "Member" : m.Institution == 2 ? "Chairperson" : "",
                                                           UserID = m.PIUserID ?? 0
                                                       }).ToList();
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        #region Announcement WorkFlow

        public static bool ValidateAnnouncementStatus(int id)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    return context.tblRCTAnnouncementMaster.Where(a => a.AnnouncementID == id && (a.Status == 2 || a.Status == 6 || a.Status == 10)).Any();
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public Tuple<bool, string> AnnouncementWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    if (ValidateAnnouncementStatus(id))
                    {
                        var query = IOAScontext.tblRCTAnnouncementMaster.Where(m => m.AnnouncementID == id).FirstOrDefault();
                        if (query != null)
                        {
                            int PreStatus = query.Status ?? 0;
                            int NewStatus = 0;
                            string Type = "";
                            if (query.Status == 2)
                            {
                                Type = "Announcement Note";
                                if (query.FlowApprover == "CMAdmin")
                                    Type = "Announcement CMNote";
                                else if (query.FlowApprover == "DeanFlow")
                                    Type = "Announcement DeanNote";
                            }
                            if (query.Status == 6)
                            {
                                Type = "Announcement Shortlist Note";
                                if (query.FlowApprover2 == "CMAdmin")
                                    Type = "Announcement Shortlist CMNote";
                                else if (query.FlowApprover2 == "DeanFlow")
                                    Type = "Announcement Shortlist DeanNote";
                            }
                            if (query.Status == 10)
                            {
                                Type = "Announcement Selectlist Note";
                                if (query.FlowApprover3 == "CMAdmin")
                                    Type = "Announcement Selectlist CMNote";
                                else if (query.FlowApprover3 == "DeanFlow")
                                    Type = "Announcement Selectlist DeanNote";
                            }
                            var fw = CoreAccount.ProcessTrigger(191, Type, 0, id, logged_in_user, "AnnouncementID", query.RefNo);

                            if (String.IsNullOrEmpty(fw.errorMsg))
                            {
                                if (Type == "Announcement Note" || Type == "Announcement CMNote" || Type == "Announcement DeanNote")
                                    query.Status = 3;
                                else if (Type == "Announcement Shortlist Note" || Type == "Announcement Shortlist CMNote" || Type == "Announcement Shortlist DeanNote")
                                    query.Status = 7;
                                else if (Type == "Announcement Selectlist Note" || Type == "Announcement Selectlist CMNote" || Type == "Announcement Selectlist DeanNote")
                                    query.Status = 11;
                                NewStatus = query.Status ?? 0;
                                query.Upt_User = logged_in_user;
                                query.Upt_TS = DateTime.Now;

                                tblRCTAnnouncementStatusLog status = new tblRCTAnnouncementStatusLog();
                                status.AnnouncementID = id;
                                status.PresentStatus = PreStatus;
                                status.NewStatus = NewStatus;
                                status.preBy = Common.GetPIName(logged_in_user);
                                status.Crt_By = logged_in_user;
                                status.Crt_TS = DateTime.Now;
                                if (PreStatus == 2)
                                    status.Message = "Sent for approval";
                                if (PreStatus == 6)
                                    status.Message = "Shortlist candidate approval";
                                if (PreStatus == 10)
                                    status.Message = "Selected candidate approval";
                                IOAScontext.tblRCTAnnouncementStatusLog.Add(status);
                                IOAScontext.SaveChanges();
                                return Tuple.Create(true, "");
                            }
                            else
                                return Tuple.Create(false, fw.errorMsg);
                        }
                        return Tuple.Create(false, "Something went wrong please contact administrator");
                    }
                    else
                        return Tuple.Create(false, "This announcement already approved");


                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        #endregion

        #endregion

        #region STE

        public Tuple<int, int, string> PostSTE(STEModel model, int logged_in_userId)
        {
            try
            {
                int res = 0, STEID = 0;
                string errMsg = string.Empty, prestatus = string.Empty, newstatus = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (model.STEId == 0)//new draft appointment Or direct save
                            {
                                tblRCTSTE add = new tblRCTSTE();
                                add.TypeofAppointment = model.TypeofappointmentId;
                                add.EmployeeCategory = model.EmployeeType;
                                if (model.EmployeeType.Contains("New"))
                                    add.NIDNumber = model.NIDNumber;
                                if (model.EmployeeType.Contains("Old"))
                                    add.OldNumber = model.OldEmployeeNumber;
                                if (model.PersonImage != null)
                                {
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + model.PersonImage.FileName;
                                    model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                    add.CandidateImage = docName;
                                }
                                else if (!string.IsNullOrEmpty(model.PersonImagePath))
                                {
                                    add.CandidateImage = model.PersonImagePath;
                                }

                                if (model.Resume != null)
                                {
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + model.Resume.FileName;
                                    model.Resume.UploadFile("Requirement", docName);
                                    add.ResumeFile = docName;
                                }
                                add.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                if (model.isDraftbtn)
                                {
                                    add.Status = "Draft";
                                }
                                else
                                {
                                    add.bcc = model.bcc;
                                    add.ToMail = model.ToMail;
                                }
                                newstatus = add.Status;
                                add.ProfessionalType = model.ProfessionalId;
                                add.Name = model.Name;
                                add.NameoftheGuardian = model.Nameoftheguardian;
                                add.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                add.PANNo = model.PAN;
                                add.DateofBirth = model.DateofBirth;
                                add.Age = model.Age;
                                add.Sex = model.Sex;
                                add.Caste = model.Caste;
                                add.ContactNumber = model.ContactNumber;
                                add.AlternativeContactNumber = model.AlternativeContactNumber;
                                add.EmergencyContact = model.EmergencyContactNo;
                                add.Email = model.Email;
                                add.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                add.PresentAddress = model.PresentAddress;
                                add.PermanentAddress = model.PermanentAddress;
                                add.Bloodgroup = model.BloodGroup;
                                add.BloodgroupRH = model.BloodGroupRH;
                                add.StaffCategory = model.StaffCategory;
                                add.Nationality = model.Nationality;
                                add.PhysicallyChallenged = model.PhysicallyChallenged == 1 ? "Yes" : model.PhysicallyChallenged == 2 ? "No" : "";
                                add.RelatedIIT = model.RelatedIITMadras;
                                add.Relationship = model.Relationship;
                                add.RelationshipDetails = model.RelationshipName;
                                add.ApplicationEntryDate = model.ApplicationEntryDate == null ? DateTime.Now : model.ApplicationEntryDate;
                                add.ApplicationReceiveDate = model.ApplicationReceiveDate;
                                add.ConsolidatedPay = model.isConsolidatePay == "ConsolidatedPay" ? true : false;
                                add.Fellowship = model.isConsolidatePay == "FellowshipPay" ? true : false;
                                add.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                add.PPONo = model.PPONo;
                                add.CSIRStaffPayMode = model.CSIRStaff;
                                model.MsPhd = model.MsPhdType > 0 ? true : false;
                                add.MsPhd = model.MsPhdType > 0 ? true : false;
                                add.MsPhdType = model.MsPhdType;
                                add.PhdDetail = model.PhdDetail;
                                add.ProjectId = model.ProjectId;
                                add.DesignationId = model.DesignationId;
                                add.SalaryLevelId = model.SalaryLevelId;
                                //if (model.MsPhd || model.TypeofappointmentId == 2)
                                //{
                                //    STE.Medical = 3;
                                //    STE.MedicalAmmount = 0;
                                //    if (model.TypeofappointmentId == 2)
                                //    {
                                //        STE.HRA = 0;
                                //    }
                                //}
                                //else
                                //{
                                //    STE.Medical = model.Medical;
                                //    STE.MedicalAmmount = model.MedicalAmmount;
                                //    STE.HRA = model.HRA;
                                //}
                                add.Salary = model.Salary;
                                //STE.isHaveHRA = model.isHRA;
                                //STE.CommitmentAmount = model.CommitmentAmount;
                                add.AppointmentStartdate = model.Appointmentstartdate;
                                add.AppointmentEnddate = model.AppointmentEndDate;
                                var data = Common.calRCTCommitmentAmount(context, model.Appointmentstartdate ?? DateTime.Now, model.AppointmentEndDate ?? DateTime.Now, model.Salary ?? 0, model.HRA, model.Medical ?? 0, model.DesignationId ?? 0, model.MsPhd, model.TypeofappointmentId ?? 0);
                                if (data != null)
                                {
                                    int Medical = 3;
                                    decimal MedicalAmount = 0;
                                    add.CommitmentAmount = data.Item1;
                                    add.isHaveHRA = data.Item2;
                                    add.HRA = data.Item3;
                                    add.HRAPercentage = data.Item5;
                                    if (data.Item4)
                                    {
                                        Medical = model.Medical ?? 0;
                                        MedicalAmount = model.MedicalAmmount;
                                    }
                                    add.Medical = Medical;
                                    add.MedicalAmmount = MedicalAmount;
                                }
                                add.SalaryPayHigh = model.SalaryPayHigh;
                                add.BankAccountNumber = model.BankAccountNo;
                                add.BankName = model.BankName;
                                add.BankId = model.BankId;
                                add.IFSCCode = model.IFSCCode;
                                add.CommitteeMember = model.CommiteeMemberId1;
                                add.CommitteeMembers = model.CommiteeMemberId2;
                                add.Chairperson = model.ChairpersonNameId;
                                add.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                add.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                //STE.NotetoDean = model.FlowofMail == "NDean" ? true : false;
                                add.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                add.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                add.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                add.CrtdUser = logged_in_userId;
                                add.CrtdTs = DateTime.Now;
                                add.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                add.GateScore = model.GateScore;
                                var SeqNo = (from R in context.tblRCTSTE select R.SeqNo).Max() ?? 0;
                                var number = SeqNo == 0 ? 1 : SeqNo + 1;
                                add.SeqNo = number;
                                add.ApplicationNumber = "AP/" + number.ToString("D6") + "/STE";
                                add.Comments = model.Comments;
                                add.RefNumber = model.ApplicationRefNo;
                                add.RequestedBy = model.RequestedByPI;
                                context.tblRCTSTE.Add(add);
                                context.SaveChanges();
                                STEID = add.STEID;
                                if (model.WfId > 0)
                                {
                                    tblWorkFlowlog log = new tblWorkFlowlog();
                                    log.Referenceid = model.WfId;
                                    log.Referencenbr = add.ApplicationNumber;
                                    log.WFreferencenbr = "WF_RCT_STE_" + model.WfId;
                                    log.WFreferencetype = "ShortTermAppointment";
                                    log.CRTD_TS = DateTime.Now;
                                    log.CRTD_BY = logged_in_userId;
                                    context.tblWorkFlowlog.Add(log);
                                    context.SaveChanges();
                                    //using (var WFContext = new IOASWorkFlowEntities1())
                                    //{
                                    //    //var Qry = WFContext.tblProposal.Where(m => m.ProposalId == model.WFproposalid).FirstOrDefault();
                                    //    //if (Qry != null)
                                    //    //{
                                    //    //    Qry.WorkflowStatus = true;
                                    //    //    WFContext.SaveChanges();
                                    //    //}
                                    //}
                                }
                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var pifile in model.PIJustificationFile)
                                    {
                                        if (pifile != null || !string.IsNullOrEmpty(model.PIJustificationRemarks))
                                        {
                                            tblRCTSTEPIJustificationDocs pidocs = new tblRCTSTEPIJustificationDocs();

                                            if (pifile != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(pifile.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                pifile.UploadFile("Requirement", docName);
                                                pidocs.DocsName = docName;
                                                pidocs.FileName = actName;
                                            }
                                            pidocs.STEID = STEID;
                                            pidocs.Description = model.PIJustificationRemarks;
                                            pidocs.Crt_Ts = DateTime.Now;
                                            pidocs.CrtUser = logged_in_userId;
                                            context.tblRCTSTEPIJustificationDocs.Add(pidocs);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                if (!string.IsNullOrEmpty(model.Comments))
                                {
                                    tblRCTSTENotes Notes = new tblRCTSTENotes();
                                    Notes.STEID = STEID;
                                    Notes.PICommends = model.Comments;
                                    Notes.Crt_TS = DateTime.Now;
                                    context.tblRCTSTENotes.Add(Notes);
                                    context.SaveChanges();
                                }

                                if (model.EducationDetail.Count > 0)
                                {
                                    foreach (var item in model.EducationDetail)
                                    {
                                        tblRCTSTEEducationDetail EducationDetail = new tblRCTSTEEducationDetail();
                                        EducationDetail.STEID = STEID;
                                        EducationDetail.QualifiCationID = item.QualificationId;
                                        EducationDetail.DisciplineID = item.DisciplineId;
                                        EducationDetail.UniversityorInstitution = item.Institution;
                                        EducationDetail.YearOfPassing = item.YearofPassing;
                                        EducationDetail.MarkType = item.MarkType;
                                        EducationDetail.Marks = item.Marks;
                                        EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                        if (item.Certificate != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.Certificate.UploadFile("Requirement", docName);
                                            EducationDetail.DocumentFilePath = docName;
                                            EducationDetail.FileName = actName;
                                        }
                                        if (item.CertificateName != null && item.CertificatePath != null)
                                        {
                                            EducationDetail.DocumentFilePath = item.CertificatePath;
                                            EducationDetail.FileName = item.CertificateName;
                                        }
                                        EducationDetail.Remarks = item.Remarks;
                                        EducationDetail.CrtdTs = DateTime.Now;
                                        EducationDetail.CrtdUser = logged_in_userId;
                                        EducationDetail.isCurrentVersion = true;
                                        context.tblRCTSTEEducationDetail.Add(EducationDetail);
                                        context.SaveChanges();
                                    }
                                }

                                if (model.ExperienceDetail.Count > 0)
                                {
                                    foreach (var item in model.ExperienceDetail)
                                    {
                                        tblRCTSTEExperienceDetail ExperienceDetail = new tblRCTSTEExperienceDetail();
                                        if (item.ExperienceTypeId != null)
                                        {
                                            ExperienceDetail.STEID = STEID;
                                            ExperienceDetail.TypeID = item.ExperienceTypeId;
                                            ExperienceDetail.Organisation = item.Organisation;
                                            ExperienceDetail.DesignationId = item.DesignationListId;
                                            ExperienceDetail.Designation = item.DesignationautoComplete;
                                            ExperienceDetail.FromYear = item.FromDate;
                                            ExperienceDetail.ToYear = item.ToDate;
                                            ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                            if (item.ExperienceFile != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.ExperienceFile.UploadFile("Requirement", docName);
                                                ExperienceDetail.DocumentFilePath = docName;
                                                ExperienceDetail.FileName = actName;
                                            }
                                            if (item.ExperienceFileName != null && item.ExperienceFilePath != null)
                                            {
                                                ExperienceDetail.DocumentFilePath = item.ExperienceFilePath;
                                                ExperienceDetail.FileName = item.ExperienceFileName;
                                            }
                                            ExperienceDetail.Remarks = item.Remarks;
                                            ExperienceDetail.CrtdUser = logged_in_userId;
                                            ExperienceDetail.CrtdTs = DateTime.Now;
                                            ExperienceDetail.isCurrentVersion = true;
                                            context.tblRCTSTEExperienceDetail.Add(ExperienceDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                if (model.CheckListDetail != null)
                                {
                                    if (model.CheckListDetail.Count > 0)
                                    {
                                        foreach (var item in model.CheckListDetail)
                                        {
                                            tblRCTSTEDeviationCheckDetail DeviationDetail = new tblRCTSTEDeviationCheckDetail();
                                            DeviationDetail.STEID = STEID;
                                            DeviationDetail.CrtdUser = logged_in_userId;
                                            DeviationDetail.CrtdTs = DateTime.Now;
                                            DeviationDetail.DeviationCheckListId = item.FunctionCheckListId ?? 0;
                                            DeviationDetail.isCurrentVersion = true;
                                            DeviationDetail.IsChecked = item.IsChecked;
                                            context.tblRCTSTEDeviationCheckDetail.Add(DeviationDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }



                                if (STEID > 0)//Result message flag
                                    res = (add.Status == "Open" || add.Status == "Draft") ? 1 : add.Status.Contains("Note") ? 2 : 0;
                            }
                            if (model.STEId > 0)
                            {
                                STEID = model.STEId;
                                var queryedit = (from S in context.tblRCTSTE
                                                 where (S.Status == "Draft" || S.Status == "Open" || S.Status == "Note to PI")
                                                 && S.isCommitmentReject != true && S.isGovAgencyFund != true && S.STEID == STEID
                                                 select S).FirstOrDefault();
                                if (queryedit != null)
                                {
                                    prestatus = queryedit.Status;
                                    queryedit.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                    if (model.isDraftbtn)
                                        queryedit.Status = "Draft";
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(model.bcc))
                                            queryedit.bcc = model.bcc;
                                        if (!string.IsNullOrEmpty(model.ToMail))
                                            queryedit.ToMail = model.ToMail;
                                    }
                                    newstatus = queryedit.Status;
                                    res = queryedit.Status == "Open" ? 1 : (queryedit.Status.Contains("Note") || queryedit.Status == "Draft") ? 2 : 0;
                                    queryedit.TypeofAppointment = model.TypeofappointmentId;
                                    queryedit.EmployeeCategory = model.EmployeeType;
                                    if (model.EmployeeType.Contains("New"))
                                        queryedit.NIDNumber = model.NIDNumber;
                                    else
                                        queryedit.OldNumber = null;
                                    if (model.EmployeeType.Contains("Old"))
                                        queryedit.OldNumber = model.OldEmployeeNumber;
                                    else
                                        queryedit.NIDNumber = null;
                                    if (model.PersonImage != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.PersonImage.FileName;
                                        model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                        queryedit.CandidateImage = docName;
                                    }
                                    if (model.Resume != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.Resume.FileName;
                                        model.Resume.UploadFile("Requirement", docName);
                                        queryedit.ResumeFile = docName;
                                    }
                                    queryedit.ProfessionalType = model.ProfessionalId;
                                    queryedit.Name = model.Name;
                                    queryedit.NameoftheGuardian = model.Nameoftheguardian;
                                    queryedit.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                    queryedit.PANNo = model.PAN;
                                    queryedit.DateofBirth = model.DateofBirth;
                                    queryedit.Age = model.Age;
                                    queryedit.Sex = model.Sex;
                                    queryedit.Caste = model.Caste;
                                    queryedit.ContactNumber = model.ContactNumber;
                                    queryedit.AlternativeContactNumber = model.AlternativeContactNumber;
                                    queryedit.EmergencyContact = model.EmergencyContactNo;
                                    queryedit.Email = model.Email;
                                    queryedit.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                    queryedit.PresentAddress = model.PresentAddress;
                                    queryedit.PermanentAddress = model.PermanentAddress;
                                    queryedit.Bloodgroup = model.BloodGroup;
                                    queryedit.BloodgroupRH = model.BloodGroupRH;
                                    queryedit.StaffCategory = model.StaffCategory;
                                    queryedit.Nationality = model.Nationality;
                                    queryedit.PhysicallyChallenged = model.PhysicallyChallenged == 1 ? "Yes" : model.PhysicallyChallenged == 2 ? "No" : "";
                                    queryedit.RelatedIIT = model.RelatedIITMadras;
                                    queryedit.Relationship = model.Relationship;
                                    queryedit.RelationshipDetails = model.RelationshipName;
                                    queryedit.ApplicationEntryDate = model.ApplicationEntryDate == null ? DateTime.Now : model.ApplicationEntryDate;
                                    queryedit.ApplicationReceiveDate = model.ApplicationReceiveDate;
                                    queryedit.ConsolidatedPay = model.isConsolidatePay == "ConsolidatedPay" ? true : false;
                                    queryedit.Fellowship = model.isConsolidatePay == "FellowshipPay" ? true : false;
                                    queryedit.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                    queryedit.PPONo = model.PPONo;
                                    queryedit.CSIRStaffPayMode = model.CSIRStaff;
                                    queryedit.MsPhd = model.MsPhdType > 0 ? true : false;
                                    model.MsPhd = model.MsPhdType > 0 ? true : false;
                                    queryedit.MsPhdType = model.MsPhdType;
                                    queryedit.PhdDetail = model.PhdDetail;
                                    queryedit.Comments = model.Comments;
                                    if (model.PIJustificationFile != null)
                                    {
                                        foreach (var item in model.PIJustificationFile)
                                        {
                                            if (item != null || !string.IsNullOrEmpty(model.PIJustificationRemarks))
                                            {
                                                tblRCTSTEPIJustificationDocs Docs = new tblRCTSTEPIJustificationDocs();
                                                Docs.STEID = STEID;
                                                if (item != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.UploadFile("Requirement", docName);
                                                    Docs.DocsName = docName;
                                                    Docs.FileName = actName;
                                                }
                                                Docs.Description = model.PIJustificationRemarks;
                                                Docs.Crt_Ts = DateTime.Now;
                                                Docs.CrtUser = logged_in_userId;
                                                context.tblRCTSTEPIJustificationDocs.Add(Docs);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(model.Comments))
                                    {
                                        tblRCTSTENotes Notes = new tblRCTSTENotes();
                                        Notes.STEID = STEID;
                                        Notes.PICommends = model.Comments;
                                        Notes.Crt_TS = DateTime.Now;
                                        context.tblRCTSTENotes.Add(Notes);
                                        context.SaveChanges();
                                    }
                                    queryedit.ProjectId = model.ProjectId;
                                    queryedit.DesignationId = model.DesignationId;
                                    queryedit.SalaryLevelId = model.SalaryLevelId;
                                    //if (model.MsPhd || model.TypeofappointmentId == 2)
                                    //{
                                    //    qrySTE.Medical = 3;
                                    //    qrySTE.MedicalAmmount = 0;
                                    //    if (model.TypeofappointmentId == 2)
                                    //    {
                                    //        qrySTE.HRA = 0;
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    qrySTE.Medical = model.Medical;
                                    //    qrySTE.MedicalAmmount = model.MedicalAmmount;
                                    //    qrySTE.HRA = model.HRA;

                                    //}
                                    queryedit.AppointmentStartdate = model.Appointmentstartdate;
                                    queryedit.AppointmentEnddate = model.AppointmentEndDate;
                                    queryedit.Salary = model.Salary;
                                    var data = Common.calRCTCommitmentAmount(context, model.Appointmentstartdate ?? DateTime.Now, model.AppointmentEndDate ?? DateTime.Now, model.Salary ?? 0, model.HRA, model.Medical ?? 0, model.DesignationId ?? 0, model.MsPhd, model.TypeofappointmentId ?? 0);
                                    if (data != null)
                                    {
                                        int Medical = 3;
                                        decimal MedicalAmmount = 0;
                                        queryedit.CommitmentAmount = data.Item1;
                                        queryedit.isHaveHRA = data.Item2;
                                        queryedit.HRA = data.Item3;
                                        queryedit.HRAPercentage = data.Item5;
                                        if (data.Item4)
                                        {
                                            Medical = model.Medical ?? 0;
                                            MedicalAmmount = model.MedicalAmmount;
                                        }
                                        queryedit.Medical = Medical;
                                        queryedit.MedicalAmmount = MedicalAmmount;
                                    }
                                    queryedit.SalaryPayHigh = model.SalaryPayHigh;
                                    queryedit.BankAccountNumber = model.BankAccountNo;
                                    queryedit.BankName = model.BankName;
                                    queryedit.BankId = model.BankId;
                                    queryedit.IFSCCode = model.IFSCCode;
                                    queryedit.CommitteeMember = model.CommiteeMemberId1;
                                    queryedit.CommitteeMembers = model.CommiteeMemberId2;
                                    queryedit.Chairperson = model.ChairpersonNameId;
                                    queryedit.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                    queryedit.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                    queryedit.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                    queryedit.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                    queryedit.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    queryedit.UptdUser = logged_in_userId;
                                    queryedit.UptdTs = DateTime.Now;
                                    queryedit.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                    queryedit.GateScore = model.GateScore;
                                    queryedit.RefNumber = model.ApplicationRefNo;
                                    queryedit.RequestedBy = model.RequestedByPI;
                                    context.SaveChanges();

                                    context.tblRCTSTEEducationDetail.Where(x => x.STEID == STEID && x.isCurrentVersion == true)
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.isCurrentVersion = false;
                                        m.UptdTs = DateTime.Now;
                                        m.UptdUser = logged_in_userId;
                                    });


                                    if (model.EducationDetail.Count > 0)
                                    {
                                        foreach (var item in model.EducationDetail)
                                        {
                                            if (item.EducationId == null)
                                            {
                                                tblRCTSTEEducationDetail EducationDetail = new tblRCTSTEEducationDetail();
                                                EducationDetail.STEID = STEID;
                                                EducationDetail.QualifiCationID = item.QualificationId;
                                                EducationDetail.DisciplineID = item.DisciplineId;
                                                EducationDetail.UniversityorInstitution = item.Institution;
                                                EducationDetail.YearOfPassing = item.YearofPassing;
                                                EducationDetail.MarkType = item.MarkType;
                                                EducationDetail.Marks = item.Marks;
                                                EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                                if (item.Certificate != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.Certificate.UploadFile("Requirement", docName);
                                                    EducationDetail.DocumentFilePath = docName;
                                                    EducationDetail.FileName = actName;
                                                }
                                                EducationDetail.Remarks = item.Remarks;
                                                EducationDetail.CrtdTs = DateTime.Now;
                                                EducationDetail.CrtdUser = logged_in_userId;
                                                EducationDetail.isCurrentVersion = true;
                                                context.tblRCTSTEEducationDetail.Add(EducationDetail);
                                                context.SaveChanges();
                                            }
                                            else
                                            {
                                                int EducationID = item.EducationId ?? 0;
                                                var QryEducation = (from SM in context.tblRCTSTEEducationDetail where SM.STEID == STEID && SM.STEEducationDetailID == EducationID select SM).FirstOrDefault();
                                                if (QryEducation != null)
                                                {

                                                    QryEducation.STEID = STEID;
                                                    QryEducation.QualifiCationID = item.QualificationId;
                                                    QryEducation.DisciplineID = item.DisciplineId;
                                                    QryEducation.UniversityorInstitution = item.Institution;
                                                    QryEducation.YearOfPassing = item.YearofPassing;
                                                    QryEducation.MarkType = item.MarkType;
                                                    QryEducation.Marks = item.Marks;
                                                    QryEducation.DivisionClassObtained = item.DivisionClassObtained;
                                                    if (item.Certificate != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        item.Certificate.UploadFile("Requirement", docName);
                                                        QryEducation.DocumentFilePath = docName;
                                                        QryEducation.FileName = actName;
                                                    }
                                                    QryEducation.Remarks = item.Remarks;
                                                    QryEducation.UptdTs = DateTime.Now;
                                                    QryEducation.UptdUser = logged_in_userId;
                                                    QryEducation.isCurrentVersion = true;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    context.tblRCTSTEExperienceDetail.Where(x => x.STEID == STEID && x.isCurrentVersion == true)
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.isCurrentVersion = false;
                                        m.UptdTs = DateTime.Now;
                                        m.UptdUser = logged_in_userId;
                                    });

                                    if (model.ExperienceDetail.Count > 0)
                                    {
                                        foreach (var item in model.ExperienceDetail)
                                        {

                                            if (item.ExperienceId == null)
                                            {
                                                tblRCTSTEExperienceDetail ExperienceDetail = new tblRCTSTEExperienceDetail();
                                                if (item.ExperienceTypeId != null)
                                                {
                                                    ExperienceDetail.STEID = STEID;
                                                    ExperienceDetail.TypeID = item.ExperienceTypeId;
                                                    ExperienceDetail.Organisation = item.Organisation;
                                                    ExperienceDetail.DesignationId = item.DesignationListId;
                                                    ExperienceDetail.Designation = item.DesignationautoComplete;
                                                    ExperienceDetail.FromYear = item.FromDate;
                                                    ExperienceDetail.ToYear = item.ToDate;
                                                    ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                                    if (item.ExperienceFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        item.ExperienceFile.UploadFile("Requirement", docName);
                                                        ExperienceDetail.DocumentFilePath = docName;
                                                        ExperienceDetail.FileName = actName;
                                                    }
                                                    ExperienceDetail.Remarks = item.Remarks;
                                                    ExperienceDetail.CrtdUser = logged_in_userId;
                                                    ExperienceDetail.CrtdTs = DateTime.Now;
                                                    ExperienceDetail.isCurrentVersion = true;
                                                    context.tblRCTSTEExperienceDetail.Add(ExperienceDetail);
                                                    context.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                int ExpID = item.ExperienceId ?? 0;
                                                var QryExperience = (from SM in context.tblRCTSTEExperienceDetail
                                                                     where SM.STEID == STEID && SM.STEExperienceDetailID == ExpID
                                                                     select SM).FirstOrDefault();
                                                if (QryExperience != null)
                                                {
                                                    if (item.ExperienceTypeId != null)
                                                    {
                                                        QryExperience.STEID = STEID;
                                                        QryExperience.TypeID = item.ExperienceTypeId;
                                                        QryExperience.Organisation = item.Organisation;
                                                        QryExperience.DesignationId = item.DesignationListId;
                                                        QryExperience.Designation = item.DesignationautoComplete;
                                                        QryExperience.FromYear = item.FromDate;
                                                        QryExperience.ToYear = item.ToDate;
                                                        QryExperience.SalaryDrawn = item.SalaryDrawn;
                                                        if (item.ExperienceFile != null)
                                                        {
                                                            string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                            var guid = Guid.NewGuid().ToString();
                                                            var docName = guid + "_" + actName;
                                                            item.ExperienceFile.UploadFile("Requirement", docName);
                                                            QryExperience.DocumentFilePath = docName;
                                                            QryExperience.FileName = actName;
                                                        }
                                                        QryExperience.Remarks = item.Remarks;
                                                        QryExperience.UptdTs = DateTime.Now;
                                                        QryExperience.UptdUser = logged_in_userId;
                                                        QryExperience.isCurrentVersion = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    context.tblRCTSTEDeviationCheckDetail.Where(x => x.STEID == STEID && x.isCurrentVersion == true)
                                   .ToList()
                                   .ForEach(m =>
                                   {
                                       m.isCurrentVersion = false;
                                       m.UptdTs = DateTime.Now;
                                       m.UptdUser = logged_in_userId;
                                   });

                                    if (model.CheckListDetail != null)
                                    {
                                        if (model.CheckListDetail.Count > 0)
                                        {
                                            foreach (var item in model.CheckListDetail)
                                            {
                                                tblRCTSTEDeviationCheckDetail DeviationDetail = new tblRCTSTEDeviationCheckDetail();
                                                DeviationDetail.STEID = STEID;
                                                DeviationDetail.CrtdUser = logged_in_userId;
                                                DeviationDetail.CrtdTs = DateTime.Now;
                                                DeviationDetail.DeviationCheckListId = item.FunctionCheckListId ?? 0;
                                                DeviationDetail.isCurrentVersion = true;
                                                DeviationDetail.IsChecked = item.IsChecked;
                                                context.tblRCTSTEDeviationCheckDetail.Add(DeviationDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    return Tuple.Create(-1, 0, "Record not found");
                                }
                            }

                            transaction.Commit();

                            PostSTEStatusLog(STEID, prestatus, newstatus, logged_in_userId);

                            if (!model.isDraftbtn)
                            {
                                //---Deviations and Acknowleadgement mails---\\

                                if (!context.tblRCTSTEEmailLog.Any(m => m.STEID == STEID && m.TypeofMail == 1) && model.FlowofMail == "Nd")
                                    RCTEmailContentService.AcknowledgementMailForSTE(STEID, logged_in_userId);

                                if (STEID > 0 && (model.FlowofMail == "NP" || model.FlowofMail == "NC" || model.FlowofMail == "NDean"))
                                    RCTEmailContentService.DeviationMailForSTE(STEID, logged_in_userId, model.Comments);

                                if (model.FlowofMail == "Nd")
                                {
                                    var Data = STEWFInit(STEID, logged_in_userId);
                                    if (Data.Item1 == false)
                                    {
                                        return Tuple.Create(-1, STEID, Data.Item2);
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(-1, 0, ex.Message.ToString());
                        }
                    }
                }
                return Tuple.Create(res, STEID, errMsg);
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(-1, 0, ex.Message.ToString());
            }
        }

        public STEModel GetEditSTE(int STEID)
        {
            STEModel model = new STEModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var QrySTE = (from A in context.tblRCTSTE
                                  join D in context.tblRCTDesignation on A.DesignationId equals D.DesignationId into lftjn
                                  from j in lftjn.DefaultIfEmpty()
                                  where A.STEID == STEID
                                  select new
                                  {
                                      A,
                                      j.Designation,
                                      j.DesignationCode,
                                      j.PayStructureMinMum,
                                      j.PayStructureMaximum
                                  }).FirstOrDefault();
                    if (QrySTE != null)
                    {
                        model.Status = QrySTE.A.Status;
                        model.bccSaved = QrySTE.A.bcc != null ? true : false;
                        model.STEId = QrySTE.A.STEID;
                        model.ApplicationNo = QrySTE.A.ApplicationNumber;
                        model.TypeofappointmentId = QrySTE.A.TypeofAppointment;
                        model.EmployeeType = QrySTE.A.EmployeeCategory;
                        model.NIDNumber = QrySTE.A.NIDNumber;
                        model.OldEmployeeNumber = QrySTE.A.OldNumber;
                        if (!string.IsNullOrEmpty(model.OldEmployeeNumber))
                            model.OldEmpId = model.OldEmployeeNumber;
                        model.PersonImagePath = QrySTE.A.CandidateImage;
                        if (!string.IsNullOrEmpty(QrySTE.A.ResumeFile))
                            model.ResumeFileName = QrySTE.A.ResumeFile.Substring((QrySTE.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = QrySTE.A.ResumeFile;
                        model.CantidateSignatureFilePath = QrySTE.A.CandidateSignature;
                        model.Professional = Common.GetCodeControlName(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional");
                        model.ProfessionalId = QrySTE.A.ProfessionalType;
                        model.Name = QrySTE.A.Name;
                        model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                        if (!string.IsNullOrEmpty(QrySTE.A.AadhaarNumber))
                            model.aadharnumber = long.Parse(QrySTE.A.AadhaarNumber == "" ? "0" : QrySTE.A.AadhaarNumber);
                        else
                            model.aadharnumber = null;
                        model.PAN = QrySTE.A.PANNo;
                        model.DateofBirth = QrySTE.A.DateofBirth;
                        model.strDateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                        model.Age = QrySTE.A.Age ?? 0;
                        model.Sex = QrySTE.A.Sex ?? 0;
                        model.Caste = QrySTE.A.Caste ?? 0;
                        model.ContactNumber = QrySTE.A.ContactNumber;
                        model.AlternativeContactNumber = QrySTE.A.AlternativeContactNumber;
                        model.EmergencyContactNo = QrySTE.A.EmergencyContact;
                        model.Email = QrySTE.A.Email;
                        model.PresentAddress = QrySTE.A.PresentAddress;
                        model.isSameasPermanentAddress = QrySTE.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = QrySTE.A.PermanentAddress;
                        model.BloodGroup = QrySTE.A.Bloodgroup;
                        model.BloodGroupRH = QrySTE.A.BloodgroupRH;
                        model.StaffCategory = QrySTE.A.StaffCategory;
                        model.Nationality = QrySTE.A.Nationality ?? 0;
                        model.PhysicallyChallenged = QrySTE.A.PhysicallyChallenged == "No" ? 2 : QrySTE.A.PhysicallyChallenged == "Yes" ? 1 : 0;
                        model.Relationship = QrySTE.A.Relationship;
                        model.RelationshipName = QrySTE.A.RelationshipDetails;
                        model.RelatedIITMadras = QrySTE.A.RelatedIIT;
                        model.ApplicationEntryDate = QrySTE.A.ApplicationEntryDate;
                        model.ApplicationReceiveDate = QrySTE.A.ApplicationReceiveDate;
                        model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                        model.Fellowship = QrySTE.A.Fellowship ?? false;
                        model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff;
                        model.PPONo = QrySTE.A.PPONo;
                        model.CSIRStaff = QrySTE.A.CSIRStaffPayMode;
                        model.MsPhd = QrySTE.A.MsPhd ?? false;
                        model.MsPhdType = QrySTE.A.MsPhdType;
                        model.PhdDetail = QrySTE.A.PhdDetail;
                        model.ProjectId = QrySTE.A.ProjectId;
                        model.DesignationId = QrySTE.A.DesignationId;
                        model.SalaryLevelId = QrySTE.A.SalaryLevelId;
                        model.Designation = QrySTE.Designation;
                        model.DesignationCode = QrySTE.DesignationCode;
                        model.MinSalary = QrySTE.PayStructureMinMum;
                        model.MaxSalary = QrySTE.PayStructureMaximum;
                        model.Medical = QrySTE.A.Medical;
                        model.Appointmentstartdate = QrySTE.A.AppointmentStartdate;
                        model.AppointmentEndDate = QrySTE.A.AppointmentEnddate;
                        model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                        model.Salary = QrySTE.A.Salary;
                        model.HRA = QrySTE.A.HRA ?? 0;
                        model.isHRA = QrySTE.A.isHaveHRA ?? false;
                        model.HRAPercentage = QrySTE.A.HRAPercentage ?? 0;
                        model.CommitmentAmount = QrySTE.A.CommitmentAmount;
                        model.SalaryPayHigh = QrySTE.A.SalaryPayHigh;
                        model.BankAccountNo = QrySTE.A.BankAccountNumber;
                        model.BankName = QrySTE.A.BankName;
                        model.IFSCCode = QrySTE.A.IFSCCode;
                        model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                        model.isHaveGateScore = QrySTE.A.isHaveGateScore == true ? "Yes" : "No";
                        model.GateScore = QrySTE.A.GateScore;
                        List<STEEducationModel> EducationList = new List<STEEducationModel>();
                        var QryEducation = (from c in context.tblRCTSTEEducationDetail
                                            join q in context.tblRCTQualificationList on c.QualifiCationID equals q.QualificationId into lft
                                            from j in lft.DefaultIfEmpty()
                                            where c.STEID == STEID && c.isCurrentVersion == true
                                            orderby c.STEEducationDetailID
                                            select new { c, j }).ToList();
                        if (QryEducation != null)
                        {
                            for (int i = 0; i < QryEducation.Count; i++)
                            {
                                int EducationID = QryEducation[i].c.QualifiCationID ?? 0;
                                int DisciplineID = QryEducation[i].c.DisciplineID ?? 0;
                                var list = Common.GetCourseList(EducationID);
                                var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();
                                var strMarkType = Common.GetCodeControlName(QryEducation[i].c.MarkType ?? 0, "RCTMarkType");
                                EducationList.Add(new STEEducationModel()
                                {
                                    Education = QryEducation[i].j != null ? QryEducation[i].j.Qualification : "",
                                    EducationId = QryEducation[i].c.STEEducationDetailID,
                                    QualificationId = QryEducation[i].c.QualifiCationID,
                                    DisciplineId = QryEducation[i].c.DisciplineID,
                                    Discipline = Discipline,
                                    Institution = QryEducation[i].c.UniversityorInstitution,
                                    YearofPassing = QryEducation[i].c.YearOfPassing,
                                    strMarkType = strMarkType,
                                    MarkType = QryEducation[i].c.MarkType,
                                    Marks = QryEducation[i].c.Marks,
                                    DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                    CertificatePath = QryEducation[i].c.DocumentFilePath,
                                    CertificateName = QryEducation[i].c.FileName,
                                    Remarks = QryEducation[i].c.Remarks,
                                    DisiplineList = list
                                });
                            }
                        }
                        //model.EducationDetail = EducationList;
                        model.EducationDetail = EducationList.Count > 0 ? EducationList : null;

                        model.ExperienceDetail = (from c in context.tblRCTSTEExperienceDetail
                                                  join d in context.tblCodeControl on c.TypeID equals d.CodeValAbbr into lft
                                                  from j in lft.DefaultIfEmpty()
                                                  where c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTExperienceType")
                                                  && c.STEID == STEID
                                                  orderby c.STEExperienceDetailID
                                                  select new
                                                  {
                                                      c.STEExperienceDetailID,
                                                      c.TypeID,
                                                      j.CodeValDetail,
                                                      c.Organisation,
                                                      c.DesignationId,
                                                      c.Designation,
                                                      c.FromYear,
                                                      c.ToYear,
                                                      c.SalaryDrawn,
                                                      c.DocumentFilePath,
                                                      c.FileName,
                                                      c.Remarks,
                                                  }).AsEnumerable().Select((x) => new STEExperienceModel()
                                                  {
                                                      ExperienceId = x.STEExperienceDetailID,
                                                      ExperienceTypeId = x.TypeID,
                                                      ExperienceType = x.CodeValDetail,
                                                      Organisation = x.Organisation,
                                                      DesignationListId = x.DesignationId,
                                                      DesignationautoComplete = x.Designation,
                                                      FromDate = x.FromYear,
                                                      ToDate = x.ToYear,
                                                      SalaryDrawn = x.SalaryDrawn,
                                                      ExperienceFilePath = x.DocumentFilePath,
                                                      ExperienceFileName = x.FileName,
                                                      Remarks = x.Remarks,
                                                      strFromDate = string.Format("{0:dd-MMMM-yyyy}", x.FromYear),
                                                      strToDate = string.Format("{0:dd-MMMM-yyyy}", x.ToYear)
                                                  }).ToList();

                        model.ExperienceDetail = model.ExperienceDetail.Count > 0 ? model.ExperienceDetail : null;

                        model.JustificationDoc = (from c in context.tblRCTSTEPIJustificationDocs
                                                  where c.STEID == STEID && c.Deleted_f != true
                                                  orderby c.DocsID
                                                  select new STEJustificationDoc()
                                                  {
                                                      FilePath = c.DocsName,
                                                      FileName = c.FileName
                                                  }).ToList();

                        model.PIJustificationDocDetail = (from c in context.tblRCTSTEPIJustificationDocs
                                                          where c.STEID == STEID && c.Deleted_f != true
                                                          orderby c.DocsID
                                                          select new PIJustificationModel()
                                                          {
                                                              PIJustificationDocumentPath = c.DocsName,
                                                              PIJustificationDocument = c.FileName
                                                          }).ToList();

                        model.PIJustificationRemarks = (from c in context.tblRCTSTEPIJustificationDocs
                                                        where c.STEID == STEID && !string.IsNullOrEmpty(c.Description)
                                                        && c.Deleted_f != true
                                                        orderby c.DocsID descending
                                                        group c by c.Description into grp
                                                        select grp.Key).FirstOrDefault();

                        model.OtherDocList = (from S in context.tblRCTSupportingDocument
                                              where S.AppointmentId == STEID && S.AppointmentType == 2
                                              select S).AsEnumerable().Select((x) => new OtherDocModel
                                              {
                                                  DocumentName = x.DocumentName,
                                                  DocumentFileName = x.DocumentFileName,
                                                  DocumentPath = x.DocumentPath,
                                              }).ToList();

                        model.OtherDocList = model.OtherDocList.Count > 0 ? model.OtherDocList : null;
                        model.CommiteeMemberId1 = QrySTE.A.CommitteeMember ?? 0;
                        model.CommiteeMemberId2 = QrySTE.A.CommitteeMembers ?? 0;
                        model.ChairpersonNameId = QrySTE.A.Chairperson ?? 0;
                        model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                        model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                        model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                        model.FlowofMail = QrySTE.A.NotetoPI == true ? "NP" : QrySTE.A.NotetoCommittee == true ? "NC" : QrySTE.A.NotetoDean == true ? "NDean" : "Nd";
                        model.EmergencyContactNo = QrySTE.A.EmergencyContact;
                        model.EmployeeId = QrySTE.A.EmployeersID;
                        model.ToMail = QrySTE.A.ToMail;
                        model.bcc = QrySTE.A.bcc;
                        model.isGovAgencyFund = QrySTE.A.isGovAgencyFund ?? false;
                        if (QrySTE.A.NotetoCMAdmin == true)
                            model.FlowApprover = "CMAdmin";
                        if (QrySTE.A.NotetoDean == true)
                            model.FlowApprover = "NDean";
                        model.EmployeeWorkplace = QrySTE.A.EmployeeWorkplace;
                        model.ApplicationRefNo = QrySTE.A.RefNumber;
                        model.AutoFillRequstedbyPI = Common.GetPIName(QrySTE.A.RequestedBy ?? 0);
                        model.RequestedByPI = QrySTE.A.RequestedBy;
                        model.Comments = QrySTE.A.Comments;
                        if (QrySTE.A.EmployeeCategory == "Old Employee")
                            model.IITMExperience = IITExperienceInWording(QrySTE.A.OldNumber);
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public STEViewModel GetSTEView(int STEID)
        {
            STEViewModel viewmodel = new STEViewModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {

                    var query = (from A in context.tblRCTSTE
                                 join B in context.tblRCTDesignation on A.DesignationId equals B.DesignationId into lft
                                 from j in lft.DefaultIfEmpty()
                                 where A.STEID == STEID
                                 select new { A, j }).FirstOrDefault();
                    if (query != null)
                    {
                        viewmodel.Status = query.A.Status;
                        viewmodel.Typeofappointment = Common.GetCodeControlName(query.A.TypeofAppointment ?? 0, "STEAppointmenttype");
                        viewmodel.STEId = query.A.STEID;
                        viewmodel.ApplicationNo = query.A.ApplicationNumber;
                        viewmodel.PresentAddress = query.A.PresentAddress;
                        viewmodel.EmployeeType = query.A.EmployeeCategory;
                        viewmodel.Name = Common.GetCodeControlName(query.A.ProfessionalType ?? 0, "RCTProfessional") + query.A.Name;
                        viewmodel.Nameoftheguardian = query.A.NameoftheGuardian;
                        viewmodel.AadhaarNumber = query.A.AadhaarNumber;
                        viewmodel.PANNo = query.A.PANNo;
                        viewmodel.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", query.A.DateofBirth);
                        viewmodel.Age = Common.RCTCalculateAge(DateTime.Now, query.A.DateofBirth ?? DateTime.Now);
                        viewmodel.Sex = Common.GetCodeControlName(query.A.Sex ?? 0, "RCTGender");
                        viewmodel.Caste = Common.GetCodeControlName(query.A.Caste ?? 0, "STECaste");
                        viewmodel.ContactNo = query.A.ContactNumber;
                        viewmodel.AlternativeContactNo = query.A.AlternativeContactNumber;
                        viewmodel.EmergencyContactNo = query.A.EmergencyContact;
                        viewmodel.Email = query.A.Email;
                        viewmodel.PresentAddress = query.A.PresentAddress;
                        viewmodel.PermanentAddress = query.A.PermanentAddress;
                        viewmodel.BloodGroup = Common.GetCodeControlName(query.A.Bloodgroup ?? 0, "SETBloodGroup");
                        viewmodel.BloodGroupRH = Common.GetCodeControlName(query.A.BloodgroupRH ?? 0, "SETBloodGroupRH");
                        viewmodel.StaffCategory = query.A.StaffCategory;
                        viewmodel.Nationality = Common.GetCodeControlName(query.A.Nationality ?? 0, "Nationality");
                        viewmodel.PhysicallyChanged = query.A.PhysicallyChallenged;
                        viewmodel.RelasionIIT = query.A.RelatedIIT == "1" ? "Yes" : query.A.RelatedIIT == "2" ? "No" : "";
                        viewmodel.Relationship = query.A.Relationship;
                        viewmodel.RelationName = query.A.RelationshipDetails;
                        viewmodel.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", query.A.ApplicationEntryDate);
                        viewmodel.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", query.A.ApplicationReceiveDate);
                        viewmodel.ConsolidatedPay = query.A.ConsolidatedPay ?? false;
                        viewmodel.Fellowship = query.A.Fellowship ?? false;
                        viewmodel.IITMPensionerOrCSIRStaff = Common.GetCodeControlName(query.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                        viewmodel.PPONo = query.A.PPONo;
                        viewmodel.CSIRStaff = Common.GetCodeControlName(query.A.CSIRStaffPayMode ?? 0, "STECSIRStaffPayMode");
                        viewmodel.IITMPensionerCSIRStaff = query.A.IITMPensionerOrCSIRStaff ?? 0;
                        viewmodel.MsPhd = query.A.MsPhd ?? false;
                        viewmodel.MsOrPhd = Common.GetCodeControlName(query.A.MsPhdType ?? 0, "MsPhd");
                        viewmodel.PhdDetail = string.IsNullOrEmpty(query.A.PhdDetail) ? "-" : query.A.PhdDetail;
                        viewmodel.ProjectId = query.A.ProjectId;
                        viewmodel.DesignationId = query.A.DesignationId;
                        viewmodel.Designation = query.j != null ? query.j.Designation : "";
                        viewmodel.DesignationCode = query.j != null ? query.j.DesignationCode : "";
                        if (query.A.SalaryLevelId > 0)
                        {
                            var data = getSalaryLevelName_Description(query.A.SalaryLevelId ?? 0);
                            viewmodel.SalaryLevel = data.Item1;
                            viewmodel.SalaryLevelId = query.A.SalaryLevelId;
                            viewmodel.SalaryLevelDescription = data.Item2;
                        }
                        viewmodel.Medical = query.A.Medical ?? 0;
                        viewmodel.MedicalINWordings = Common.GetCodeControlName(query.A.Medical ?? 0, "SETMedical");
                        viewmodel.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", query.A.AppointmentStartdate);
                        viewmodel.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.A.AppointmentEnddate);
                        viewmodel.MedicalAmmount = query.A.MedicalAmmount ?? 0;
                        viewmodel.BasicPay = query.A.Salary ?? 0;
                        viewmodel.HRA = query.A.HRA ?? 0;
                        viewmodel.CommitmentAmount = query.A.CommitmentAmount ?? 0; ;
                        viewmodel.ConsolidatedPayPerMonth = query.A.Salary ?? 0;
                        viewmodel.BankAC = query.A.BankAccountNumber;
                        viewmodel.BankName = query.A.BankName;
                        viewmodel.IFSC = query.A.IFSCCode;
                        viewmodel.isHaveGateScore = query.A.isHaveGateScore == true ? "Yes" : query.A.isHaveGateScore == false ? "No" : "";
                        viewmodel.GateScore = Convert.ToString(query.A.GateScore);
                        viewmodel.ProjectNumber = Common.GetProjectNameandNumber(query.A.ProjectId ?? 0);
                        viewmodel.PersonImagePath = query.A.CandidateImage;
                        viewmodel.SingnaturePath = query.A.CandidateSignature;
                        viewmodel.PIJustificationDocuments = (from c in context.tblRCTSTEPIJustificationDocs
                                                              where c.STEID == STEID && !string.IsNullOrEmpty(c.DocsName)
                                                              && c.Deleted_f != true
                                                              orderby c.DocsID
                                                              select new STEJustificationDoc()
                                                              {
                                                                  FileName = c.FileName,
                                                                  FilePath = c.DocsName,
                                                              }).ToList();
                        viewmodel.PIJustificationCommands = (from c in context.tblRCTSTEPIJustificationDocs
                                                             where c.STEID == STEID && !string.IsNullOrEmpty(c.Description)
                                                             && c.Deleted_f != true
                                                             group c by c.Description into grp
                                                             select grp.Key).ToList();
                        viewmodel.Comments = query.A.Comments;
                        viewmodel.CommiteeMemberId1 = query.A.CommitteeMember ?? 0;
                        viewmodel.CommiteeMemberId2 = query.A.CommitteeMembers ?? 0;
                        viewmodel.ChairpersonNameId = query.A.Chairperson ?? 0;
                        viewmodel.CommiteeMember1 = Common.GetPIName(query.A.CommitteeMember ?? 0);
                        viewmodel.CommiteeMember2 = Common.GetPIName(query.A.CommitteeMembers ?? 0);
                        viewmodel.ChairpersonName = Common.GetPIName(query.A.Chairperson ?? 0);
                        //get Project Details                        
                        viewmodel.ProjectDetailsModel = getProjectSummary(query.A.ProjectId ?? 0);

                        var queryEducation = (from c in context.tblRCTSTEEducationDetail
                                              join q in context.tblRCTQualificationList on c.QualifiCationID equals q.QualificationId into lftj
                                              from lj in lftj.DefaultIfEmpty()
                                              join d in context.tblCodeControl on c.MarkType equals d.CodeValAbbr into lft
                                              from j in lft.DefaultIfEmpty()
                                              where c.STEID == STEID && c.isCurrentVersion == true
                                               && (j == null ? true : j.CodeName == "RCTMarkType")
                                              orderby c.STEEducationDetailID
                                              select new { c, lj, j }).ToList();
                        if (queryEducation != null)
                        {
                            for (int i = 0; i < queryEducation.Count; i++)
                            {
                                int EducationID = queryEducation[i].c.QualifiCationID ?? 0;
                                int DisciplineID = queryEducation[i].c.DisciplineID ?? 0;
                                var list = Common.GetCourseList(EducationID);
                                var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();
                                EducationList.Add(new STEEducationModel()
                                {
                                    Education = queryEducation[i].lj != null ? queryEducation[i].lj.Qualification : "",
                                    EducationId = queryEducation[i].c.STEEducationDetailID,
                                    QualificationId = queryEducation[i].c.QualifiCationID,
                                    DisciplineId = queryEducation[i].c.DisciplineID,
                                    Discipline = Discipline,
                                    Institution = queryEducation[i].c.UniversityorInstitution,
                                    YearofPassing = queryEducation[i].c.YearOfPassing,
                                    strMarkType = queryEducation[i].j == null ? "" : queryEducation[i].j.CodeValDetail,
                                    MarkType = queryEducation[i].c.MarkType,
                                    Marks = queryEducation[i].c.Marks,
                                    DivisionClassObtained = queryEducation[i].c.DivisionClassObtained,
                                    CertificatePath = queryEducation[i].c.DocumentFilePath,
                                    CertificateName = queryEducation[i].c.FileName,
                                    Remarks = queryEducation[i].c.Remarks,
                                    DisiplineList = list
                                });
                            }
                        }
                        viewmodel.EducationDetail = EducationList;

                        viewmodel.ExperienceDetail = (from c in context.tblRCTSTEExperienceDetail
                                                      join d in context.tblCodeControl on c.TypeID equals d.CodeValAbbr into lft
                                                      from j in lft.DefaultIfEmpty()
                                                      where c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTExperienceType")
                                                      && c.STEID == STEID
                                                      orderby c.STEExperienceDetailID
                                                      select new
                                                      {
                                                          c.STEExperienceDetailID,
                                                          c.TypeID,
                                                          j.CodeValDetail,
                                                          c.Organisation,
                                                          c.DesignationId,
                                                          c.Designation,
                                                          c.FromYear,
                                                          c.ToYear,
                                                          c.SalaryDrawn,
                                                          c.DocumentFilePath,
                                                          c.FileName,
                                                          c.Remarks,
                                                          strFromYear = c.FromYear,
                                                          strToYear = c.ToYear
                                                      }).AsEnumerable().Select((x) => new STEExperienceModel()
                                                      {
                                                          ExperienceId = x.STEExperienceDetailID,
                                                          ExperienceTypeId = x.TypeID,
                                                          ExperienceType = x.CodeValDetail,
                                                          Organisation = x.Organisation,
                                                          DesignationListId = x.DesignationId,
                                                          DesignationautoComplete = x.Designation,
                                                          FromDate = x.FromYear,
                                                          ToDate = x.ToYear,
                                                          SalaryDrawn = x.SalaryDrawn,
                                                          ExperienceFilePath = x.DocumentFilePath,
                                                          ExperienceFileName = x.FileName,
                                                          Remarks = x.Remarks,
                                                          strFromDate = string.Format("{0:dd-MMMM-yyyy}", x.strFromYear),
                                                          strToDate = string.Format("{0:dd-MMMM-yyyy}", x.strToYear)
                                                      }).ToList();


                        viewmodel.Qualification = Common.getQualificationWordings(STEID, "STE");
                        viewmodel.Experience = Common.getExperienceInWordings(STEID, "STE");
                        if (query.A.EmployeeCategory == "Old Employee")
                            viewmodel.IITMExperience = IITExperienceInWording(query.A.OldNumber);
                        viewmodel.offerDate = query.A.OfferDate ?? DateTime.Now;
                        viewmodel.EmployeeID = query.A.EmployeersID;
                        //CommitteeClarify status who accepted and his comments
                        viewmodel.CommitteeRemark = query.A.CommitteeRemarks;
                        viewmodel.CommitteeApprovedBy = Common.GetPIName(query.A.CommitteeApprovedBy ?? 0);
                        viewmodel.isGovAgencyNoFund = query.A.isGovAgencyFund ?? false;
                        if (query.A.ActualAppointmentStartDate != null)
                            viewmodel.ActualAppointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", query.A.ActualAppointmentStartDate);
                        if (query.A.NotetoCMAdmin == true)
                            viewmodel.FlowApprover = "CMAdmin";
                        if (query.A.NotetoDean == true)
                            viewmodel.FlowApprover = "NDean";
                        viewmodel.EmployeeWorkplace = string.IsNullOrEmpty(query.A.EmployeeWorkplace) ? "-" : query.A.EmployeeWorkplace;
                        viewmodel.CommitmentNo = string.IsNullOrEmpty(query.A.CommitmentNo) ? "-" : query.A.CommitmentNo;
                        viewmodel.CommitmentBalance = Common.GetCommitmentBalance(viewmodel.CommitmentNo);
                        viewmodel.ApplicationRefNo = query.A.RefNumber;
                        viewmodel.AutoFillRequstedbyPI = Common.GetPIName(query.A.RequestedBy ?? 0);
                        //if (query.A.EmployeeCategory == "New Employee")
                        //    viewmodel.NIDNumber = query.A.NIDNumber;
                        //else if(query.A.EmployeeCategory== "Old Employee")

                    }
                }
                return viewmodel;
            }
            catch (Exception ex)
            {
                return viewmodel;
            }
        }

        public int STEModifyProfile(STEModel model, int logged_in_userId)
        {
            try
            {
                int res = 0;
                string oldemail = "";
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var editQuery = (from S in context.tblRCTSTE where S.STEID == model.STEId && S.isEmployee == true select S).FirstOrDefault();
                            if (editQuery != null)
                            {
                                if (model.PersonImage != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.PersonImage.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                    editQuery.CandidateImage = docName;
                                }
                                if (model.CantidateSignature != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.CantidateSignature.UploadFile("Requirement", docName);
                                    editQuery.CandidateSignature = docName;
                                }
                                editQuery.EmergencyContact = model.EmergencyContactNo;
                                if (model.ProfessionalId != null)
                                    editQuery.ProfessionalType = model.ProfessionalId;
                                editQuery.Name = model.Name;
                                editQuery.NameoftheGuardian = model.Nameoftheguardian;
                                editQuery.ContactNumber = model.ContactNumber;
                                editQuery.AlternativeContactNumber = model.AlternativeContactNumber;
                                oldemail = editQuery.Email;
                                editQuery.Email = model.Email;
                                editQuery.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                editQuery.PresentAddress = model.PresentAddress;
                                editQuery.PermanentAddress = model.PermanentAddress;
                                editQuery.PhysicallyChallenged = model.PhysicallyChallenged == 1 ? "Yes" : model.PhysicallyChallenged == 2 ? "No" : "";
                                editQuery.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                editQuery.PPONo = model.PPONo;
                                editQuery.CSIRStaffPayMode = model.CSIRStaff;
                                editQuery.StaffCategory = model.StaffCategory;
                                editQuery.BankAccountNumber = model.BankAccountNo;
                                editQuery.BankName = model.BankName;
                                editQuery.BankId = model.BankId;
                                editQuery.IFSCCode = model.IFSCCode;
                                editQuery.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                editQuery.GateScore = model.GateScore;
                                editQuery.MsPhd = model.MsPhdType > 0 ? true : false;
                                editQuery.MsPhdType = model.MsPhdType;
                                editQuery.PhdDetail = model.MsPhdType > 0 ? model.PhdDetail : null;
                                editQuery.bcc = model.bcc;
                                editQuery.ToMail = model.ToMail;
                                editQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                editQuery.UptdTs = DateTime.Now;
                                editQuery.UptdUser = logged_in_userId;
                                editQuery.RequestedBy = model.RequestedByPI;
                                context.SaveChanges();
                                foreach (var item in model.EducationDetail)
                                {
                                    if (item.EducationId == null)
                                    {
                                        tblRCTSTEEducationDetail EducationDetail = new tblRCTSTEEducationDetail();
                                        EducationDetail.STEID = model.STEId;
                                        EducationDetail.QualifiCationID = item.QualificationId;
                                        EducationDetail.DisciplineID = item.DisciplineId;
                                        EducationDetail.UniversityorInstitution = item.Institution;
                                        EducationDetail.YearOfPassing = item.YearofPassing;
                                        EducationDetail.MarkType = item.MarkType;
                                        EducationDetail.Marks = item.Marks;
                                        EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                        if (item.Certificate != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.Certificate.UploadFile("Requirement", docName);
                                            EducationDetail.DocumentFilePath = docName;
                                            EducationDetail.FileName = actName;
                                        }
                                        EducationDetail.Remarks = item.Remarks;
                                        EducationDetail.CrtdTs = DateTime.Now;
                                        EducationDetail.CrtdUser = logged_in_userId;
                                        EducationDetail.isCurrentVersion = true;
                                        context.tblRCTSTEEducationDetail.Add(EducationDetail);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        int STEEducationDetailID = item.EducationId ?? 0;
                                        var QryEducation = (from SM in context.tblRCTSTEEducationDetail
                                                            where SM.STEID == model.STEId && SM.STEEducationDetailID == STEEducationDetailID
                                                            && SM.isCurrentVersion == true
                                                            select SM).FirstOrDefault();
                                        if (QryEducation != null)
                                        {
                                            QryEducation.QualifiCationID = item.QualificationId;
                                            QryEducation.DisciplineID = item.DisciplineId;
                                            QryEducation.UniversityorInstitution = item.Institution;
                                            QryEducation.YearOfPassing = item.YearofPassing;
                                            QryEducation.MarkType = item.MarkType;
                                            QryEducation.Marks = item.Marks;
                                            QryEducation.DivisionClassObtained = item.DivisionClassObtained;
                                            if (item.Certificate != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.Certificate.UploadFile("Requirement", docName);
                                                QryEducation.DocumentFilePath = docName;
                                                QryEducation.FileName = actName;
                                            }
                                            QryEducation.Remarks = item.Remarks;
                                            QryEducation.UptdTs = DateTime.Now;
                                            QryEducation.UptdUser = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                foreach (var item in model.ExperienceDetail)
                                {
                                    if (item.ExperienceId == null)
                                    {
                                        if (item.ExperienceTypeId != null)
                                        {
                                            tblRCTSTEExperienceDetail ExperienceDetail = new tblRCTSTEExperienceDetail();
                                            ExperienceDetail.STEID = model.STEId;
                                            ExperienceDetail.TypeID = item.ExperienceTypeId;
                                            ExperienceDetail.Organisation = item.Organisation;
                                            ExperienceDetail.DesignationId = item.DesignationListId;
                                            ExperienceDetail.Designation = item.DesignationautoComplete;
                                            ExperienceDetail.FromYear = item.FromDate;
                                            ExperienceDetail.ToYear = item.ToDate;
                                            ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                            if (item.ExperienceFile != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.ExperienceFile.UploadFile("Requirement", docName);
                                                ExperienceDetail.DocumentFilePath = docName;
                                                ExperienceDetail.FileName = actName;
                                            }
                                            ExperienceDetail.Remarks = item.Remarks;
                                            ExperienceDetail.CrtdUser = logged_in_userId;
                                            ExperienceDetail.CrtdTs = DateTime.Now;
                                            ExperienceDetail.isCurrentVersion = true;
                                            context.tblRCTSTEExperienceDetail.Add(ExperienceDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        int ExperienceId = item.ExperienceId ?? 0;
                                        var QryExp = (from SM in context.tblRCTSTEExperienceDetail
                                                      where SM.STEID == model.STEId && SM.STEExperienceDetailID == ExperienceId
                                                      && SM.isCurrentVersion == true
                                                      select SM).FirstOrDefault();
                                        if (QryExp != null)
                                        {
                                            if (item.ExperienceTypeId != null)
                                            {
                                                if (item.ExperienceFile != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.ExperienceFile.UploadFile("Requirement", docName);
                                                    QryExp.DocumentFilePath = docName;
                                                    QryExp.FileName = actName;
                                                    QryExp.UptdUser = logged_in_userId;
                                                    QryExp.UptdTs = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                }

                                foreach (var item in model.OtherDocList)
                                {
                                    if (item.Document != null)
                                    {
                                        tblRCTSupportingDocument _SupportDoc = new tblRCTSupportingDocument();
                                        _SupportDoc.AppointmentId = model.STEId;
                                        _SupportDoc.AppointmentType = 2;
                                        _SupportDoc.DocumentName = item.DocumentName;
                                        _SupportDoc.CRTD_By = logged_in_userId;
                                        _SupportDoc.CRTD_TS = DateTime.Now;
                                        _SupportDoc.Status = "Active";
                                        if (item.Document != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.Document.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.Document.UploadFile("Requirement", docName);
                                            _SupportDoc.DocumentFileName = actName;
                                            _SupportDoc.DocumentPath = docName;
                                        }
                                        context.tblRCTSupportingDocument.Add(_SupportDoc);
                                        context.SaveChanges();
                                    }
                                }
                                context.SaveChanges();
                                transaction.Commit();

                                if (oldemail != model.Email)
                                    UpdateModifiyProfileBaseEmployeePortal(editQuery.EmployeersID, model.Email, logged_in_userId);
                                res = 1;
                            }
                            else
                                res = -1;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return 0;
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return 0;
            }
        }

        public Tuple<bool, string> STEWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var query = IOAScontext.tblRCTSTE.FirstOrDefault(m => m.STEID == id && m.Status == "Open");
                    if (query != null)
                    {

                        string Type = "STE Flow";
                        if (query.NotetoCMAdmin == true)
                            Type = "STEAdminFlow";
                        else if (query.NotetoDean == true)
                            Type = "STEFlowDean";
                        var fw = CoreAccount.ProcessTrigger(192, Type, 0, id, logged_in_user, "STEID", query.ApplicationNumber);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Sent for approval";
                            query.UptdUser = logged_in_user;
                            query.UptdTs = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostSTEStatusLog(id, "Open", "Sent for approval", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> STEVWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())//&& m.Status == "Awaiting Verification" || m.Status == "Awaiting Verification-Draft"
                {
                    var query = IOAScontext.tblRCTSTE.FirstOrDefault(m => m.STEID == id );
                    if (query != null)
                    {

                        string Type = "STEVER Flow";
                        if (query.NotetoCMAdmin == true)
                            Type = "STEVERAdminFlow";
                        else if (query.NotetoDean == true)
                            Type = "STEVERFlowDean";
                        var fw = CoreAccount.ProcessTrigger(188, Type, 0, id, logged_in_user, "STEID-VER", query.ApplicationNumber);                       
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Sent for approval-Verify";
                            query.UptdUser = logged_in_user;
                            query.UptdTs = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostSTEStatusLog(id, "Awaiting Verification", "Sent for approval-Verify", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> STEOVWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var query = (from o in IOAScontext.tblOrder
                                 from od in IOAScontext.tblOrderDetail       //&& o.Status == "Awaiting Verification" || o.Status == "Awaiting Verification-Draft"                       
                                 where  o.OrderId == id
                                 && o.OrderId == od.OrderId 
                                 select new { od, o }).FirstOrDefault();                    
                    if (query != null)
                    {

                        string Type = "STEORDVER Flow";
                        if (query.od.NotetoCMAdmin == true)
                            Type = "STEORDVERAdminFlow";
                        else if (query.od.NotetoDean == true)
                            Type = "STEORDVERFlowDean";
                        var fw = CoreAccount.ProcessTrigger(188, Type, 0, id, logged_in_user, "STEID-ORVER", query.o.OrderNo);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.o.Status = "Sent for approval-Verify";
                            query.o.UpdtUser = logged_in_user;
                            query.o.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostOrderStatusLog(id, "Awaiting Verification", "Sent for approval-Verify", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> OSGOVWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var query = (from o in IOAScontext.tblOrder
                                 from od in IOAScontext.tblOrderDetail       //&& o.Status == "Awaiting Verification" || o.Status == "Awaiting Verification-Draft"                       
                                 where o.OrderId == id
                                 && o.OrderId == od.OrderId
                                 select new { od, o }).FirstOrDefault();                   
                    if (query != null)
                    {

                        string Type = "OSGORDVER Flow";
                        if (query.od.NotetoCMAdmin == true)
                            Type = "OSGORDVERAdminFlow";
                        else if (query.od.NotetoDean == true)
                            Type = "OSGORDVERFlowDean";
                        var fw = CoreAccount.ProcessTrigger(206, Type, 0, id, logged_in_user, "OSGID-ORVER", query.o.OrderNo);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.o.Status = "Sent for approval-Verify";
                            query.o.UpdtUser = logged_in_user;
                            query.o.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostOrderStatusLog(id, "Awaiting Verification", "Sent for approval-Verify", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public STEViewModel GetOverAllApplicationViewDetails(int appid, string apptype, int orderid)
        {
            RecruitCommitRequestModel commitreqmodel = new RecruitCommitRequestModel();
            STEViewModel model = new STEViewModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderid > 0)
                    {

                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderDetail
                                     from vw in context.vw_RCTOverAllApplicationEntry
                                     where o.OrderId == od.OrderId && o.OrderId == vw.OrderId
                                     && o.OrderId == orderid
                                     select new { o, od, vw }).FirstOrDefault();
                        if (query != null)
                        {
                            var querycancel = (from m in context.tblRCTCancelApplicationLog
                                               where m.OrderId == orderid
                                               select m).FirstOrDefault();
                            if (querycancel != null)
                            {
                                model.CancelReason = querycancel.CancelReason;
                                model.CancelDocument = querycancel.CancelDocument;
                            }
                            model.orderid = orderid;
                            model.ordertype = query.o.OrderType;
                            model.appid = query.vw.ApplicationId ?? 0;
                            model.appType = query.vw.Category;
                            var querycommitment = (from C in context.tblRCTCommitmentRequest
                                                   where C.Status == "Rejected" && C.OrderId == orderid
                                                   orderby C.RecruitmentRequestId descending
                                                   select C).FirstOrDefault();
                            if (querycommitment != null)
                                model.CommitmentRemark = querycommitment.Remarks;
                            //CommitteeClarify status who accepted and his comments
                            model.isCommiteeRejection = query.o.Status == "Committee Clarify" ? true : false;
                            model.CommitteeRemark = query.o.CommitteeRemarks;
                            model.CommitteeApprovedBy = Common.GetPIName(query.o.CommitteeApprovedBy ?? 0);
                            model.Comments = query.od.Comments;
                            model.isFundAvailable = Common.IsAvailablefundProject(query.o.NewProjectId ?? 0, query.o.CommitmentAmmount ?? 0, query.vw.TypeofAppointmentinInt);
                            model.isGovAgencyNoFund = query.o.isGovAgencyFund;
                            model.CommitmentRejection = query.o.isCommitmentReject;
                            model.Status = query.o.Status;
                            model.BasicPay = query.o.Basic ?? 0;
                            model.EmployeeID = query.vw.EmployeeNo;
                            model.Name = query.vw.ProfessionalType + query.vw.CandidateName;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", query.vw.DateofBirth);
                            model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", query.o.OrderDate);
                            var Policyid = query.o.NewProjectId == null ? query.o.OldProjectId : query.o.NewProjectId;
                            var desgnationid = query.o.NewDesignation == null ? query.o.OldDesignation : query.o.NewDesignation;
                            model.PayType = query.vw.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                            model.IITMPensionerOrCSIRStaff = query.vw.IITMPensionerorCSIRStaff;
                            model.MsPhd = query.vw.isMsPhd ?? false;
                            model.PhdDetail = string.IsNullOrEmpty(query.vw.PhdDetail) ? null : "-";
                            model.DesignationId = desgnationid;
                            model.Designation = query.vw.PostRecommended;
                            model.Medical = query.o.MedicalType ?? 0;
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", query.o.FromDate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.o.ToDate);
                            model.MedicalAmmount = query.o.MedicalAmount ?? 0;
                            model.CommitmentAmount = query.o.CommitmentAmmount ?? 0;
                            model.ProjectNumber = Common.GetProjectNameandNumber(Policyid ?? 0);
                            model.PIJustificationDocuments = (from c in context.tblRCTOrderPIJustificationDocs
                                                              where c.OrderId == orderid && !string.IsNullOrEmpty(c.DocsName)
                                                              orderby c.DocsID
                                                              select new STEJustificationDoc()
                                                              {
                                                                  FilePath = c.DocsName,
                                                                  FileName = c.FileName
                                                              }).ToList();
                            model.PIJustificationCommands = (from c in context.tblRCTOrderPIJustificationDocs
                                                             where c.OrderId == orderid && !string.IsNullOrEmpty(c.Description)
                                                             group c by c.Description into grp
                                                             select grp.Key).ToList();
                            model.CommiteeMember1 = Common.GetPIName(query.vw.CommitteeMember ?? 0);
                            model.CommiteeMember2 = Common.GetPIName(query.vw.CommitteeMembers ?? 0);
                            model.ChairpersonName = Common.GetPIName(query.vw.Chairperson ?? 0);
                            model.Qualification = query.vw.Qualification;
                            model.Experience = query.vw.Experience;
                            model.ProjectDetailsModel = getProjectSummary(Policyid ?? 0);
                            if (query.od.NotetoCMAdmin == true)
                                model.FlowApprover = "CMAdmin";
                            if (query.od.NotetoDean == true)
                                model.FlowApprover = "NDean";
                        }
                    }
                    else
                    {
                        var apptypeid = apptype == "CON" ? 1 : apptype == "STE" ? 2 : apptype == "OSG" ? 3 : 0;
                        var query = (from m in context.tblRCTCancelApplicationLog
                                     where m.ApplicationId == appid && m.AppointmentType == apptypeid
                                     select m).FirstOrDefault();
                        if (query != null)
                        {
                            model.CancelReason = query.CancelReason;
                            model.CancelDocument = query.CancelDocument;
                        }
                        if (apptype == "STE")
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          from d in context.tblRCTDesignation
                                          where A.DesignationId == d.DesignationId && A.STEID == appid
                                          select new { A, d.Designation }).FirstOrDefault();
                            if (QrySTE != null)
                            {

                                model.appid = appid;
                                model.appType = apptype;
                                var querycommitment = (from C in context.tblRCTCommitmentRequest
                                                       where C.Status == "Rejected" && C.ReferenceNumber == QrySTE.A.ApplicationNumber
                                                       orderby C.RecruitmentRequestId descending
                                                       select C).FirstOrDefault();
                                if (querycommitment != null)
                                    model.CommitmentRemark = querycommitment.Remarks;
                                //CommitteeClarify status who accepted and his comments
                                model.isCommiteeRejection = QrySTE.A.Status == "Committee Clarify" ? true : false;
                                model.CommitteeRemark = QrySTE.A.CommitteeRemarks;
                                model.CommitteeApprovedBy = Common.GetPIName(QrySTE.A.CommitteeApprovedBy ?? 0);
                                model.isGovAgencyNoFund = QrySTE.A.isGovAgencyFund ?? false;
                                model.isFundAvailable = Common.IsAvailablefundProject(QrySTE.A.ProjectId ?? 0, QrySTE.A.CommitmentAmount ?? 0, QrySTE.A.TypeofAppointment);
                                model.CommitmentRejection = QrySTE.A.isCommitmentReject ?? false;
                                model.Status = QrySTE.A.Status;
                                model.BasicPay = QrySTE.A.Salary ?? 0;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.PayType = QrySTE.A.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                                model.IITMPensionerOrCSIRStaff = Common.GetCodeControlName(QrySTE.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = string.IsNullOrEmpty(QrySTE.A.PhdDetail) ? null : "-";
                                model.DesignationId = QrySTE.A.DesignationId;
                                model.Designation = QrySTE.Designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTSTEPIJustificationDocs
                                                                  where c.STEID == appid && !string.IsNullOrEmpty(c.DocsName)
                                                                  && c.Deleted_f != true
                                                                  orderby c.DocsID
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.DocsName,
                                                                      FileName = c.FileName
                                                                  }).ToList();
                                model.PIJustificationCommands = (from c in context.tblRCTSTEPIJustificationDocs
                                                                 where c.STEID == appid && !string.IsNullOrEmpty(c.Description)
                                                                 && c.Deleted_f != true
                                                                 group c by c.Description into grp
                                                                 select grp.Key).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Comments = QrySTE.A.Comments;
                                model.Qualification = Common.getQualificationWordings(appid, apptype);
                                model.Experience = Common.getExperienceInWordings(appid, apptype);
                                model.ProjectDetailsModel = getProjectSummary(QrySTE.A.ProjectId ?? 0);
                                if (QrySTE.A.NotetoCMAdmin == true)
                                    model.FlowApprover = "CMAdmin";
                                if (QrySTE.A.NotetoDean == true)
                                    model.FlowApprover = "NDean";
                                model.StaffCategory = QrySTE.A.StaffCategory;

                            }
                        }
                        else if (apptype == "CON")
                        {
                            var QrySTE = (from A in context.tblRCTConsultantAppointment
                                          from d in context.tblRCTDesignation
                                          where A.DesignationId == d.DesignationId && A.ConsultantAppointmentId == appid
                                          select new { A, d.Designation }).FirstOrDefault();
                            if (QrySTE != null)
                            {

                                model.appid = appid;
                                model.appType = apptype;
                                model.Status = QrySTE.A.Status;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);

                                var QryRemarks = (from C in context.tblRCTCommitmentRequest
                                                  where C.Status == "Rejected" && C.ReferenceNumber == QrySTE.A.ApplicationNumber
                                                  orderby C.RecruitmentRequestId descending
                                                  select C).FirstOrDefault();
                                if (QryRemarks != null)
                                    model.CommitmentRemark = QryRemarks.Remarks;
                                //CommitteeClarify status who accepted and his comments
                                model.isCommiteeRejection = QrySTE.A.Status == "Committee Clarify" ? true : false;
                                model.CommitteeRemark = QrySTE.A.CommitteeRemarks;
                                model.CommitteeApprovedBy = Common.GetPIName(QrySTE.A.CommitteeApprovedBy ?? 0);
                                model.CommitmentRejection = QrySTE.A.isCommitmentReject ?? false;

                                // model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                //model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.BasicPay = QrySTE.A.Salary ?? 0;
                                model.IITMPensionerOrCSIRStaff = Common.GetCodeControlName(QrySTE.A.IITMPensionerorCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                //model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                //model.PhdDetail = string.IsNullOrEmpty(QrySTE.A.PhdDetail) ? null : "-";
                                model.Designation = QrySTE.Designation;
                                model.Medical = 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTCONPIJustificationDocument
                                                                  where c.ConsultantAppointmentId == appid && c.Status != "InActive"
                                                                  orderby c.CONPIJustificationDocumentId
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.PIJustificationDocumentFile,
                                                                      FileName = c.PIJustificationDocumentName
                                                                  }).ToList();
                                model.PIJustificationCommands = (from c in context.tblRCTCONPIJustificationDocument
                                                                 where c.ConsultantAppointmentId == appid && !string.IsNullOrEmpty(c.PIJustificationDescription)
                                                                 group c by c.PIJustificationDescription into grp
                                                                 select grp.Key).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(appid, apptype); ;
                                model.Experience = Common.getExperienceInWordings(appid, apptype);
                                //if (QrySTE.A.NotetoCMAdmin == true)
                                //    model.FlowApprover = "CMAdmin";
                                if (QrySTE.A.NotetoDean == true)
                                    model.FlowApprover = "NDean";
                                model.StaffCategory = QrySTE.A.IsICSRStafforProjectStaff == true ? "Non ICSR Staff" : "ICSR Staff";
                            }
                        }
                        else if (apptype == "OSG")
                        {
                            var QrySTE = (from A in context.tblRCTOutsourcing
                                          from d in context.tblRCTDesignation
                                          where A.DesignationId == d.DesignationId && A.OSGID == appid
                                          select new { A, d.Designation }).FirstOrDefault();
                            if (QrySTE != null)
                            {

                                model.appid = appid;
                                model.appType = apptype;
                                model.Status = QrySTE.A.Status;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;

                                var QryRemarks = (from C in context.tblRCTCommitmentRequest
                                                  where C.Status == "Rejected" && C.ReferenceNumber == QrySTE.A.ApplicationNumber
                                                  orderby C.RecruitmentRequestId descending
                                                  select C).FirstOrDefault();
                                if (QryRemarks != null)
                                    model.CommitmentRemark = QryRemarks.Remarks;
                                //CommitteeClarify status who accepted and his comments
                                model.isCommiteeRejection = QrySTE.A.Status == "Committee Clarify" ? true : false;
                                model.CommitteeRemark = QrySTE.A.CommitteeRemarks;
                                model.CommitteeApprovedBy = Common.GetPIName(QrySTE.A.CommitteeApprovedBy ?? 0);
                                model.CommitmentRejection = QrySTE.A.isCommitmentReject ?? false;

                                model.BasicPay = QrySTE.A.Salary ?? 0;
                                model.IITMPensionerOrCSIRStaff = Common.GetCodeControlName(QrySTE.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.PayType = QrySTE.A.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = string.IsNullOrEmpty(QrySTE.A.PhdDetail) ? null : "-";
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                model.Designation = QrySTE.Designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                                  where c.OSGID == appid && c.Deleted_f != true
                                                                  orderby c.DocsID
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.DocsName,
                                                                      FileName = c.FileName
                                                                  }).ToList();
                                model.PIJustificationCommands = (from c in context.tblRCTOSGPIJustificationDoc
                                                                 where c.OSGID == appid && !string.IsNullOrEmpty(c.Description) && c.Deleted_f != true
                                                                 group c by c.Description into grp
                                                                 select grp.Key).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(appid, apptype); ;
                                model.Experience = Common.getExperienceInWordings(appid, apptype);
                                model.ProjectDetailsModel = getProjectSummary(QrySTE.A.ProjectId ?? 0);
                                if (QrySTE.A.NotetoCMAdmin == true)
                                    model.FlowApprover = "CMAdmin";
                                if (QrySTE.A.NotetoDean == true)
                                    model.FlowApprover = "NDean";
                                model.StaffCategory = QrySTE.A.StaffCategory;
                            }
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public STEViewModel getSTEOfferletterDetails(int STEID, int? orderId)
        {
            STEViewModel model = new STEViewModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderId > 0)
                    {
                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderDetail
                                     from d in context.tblRCTDesignation
                                     from S in context.tblRCTSTE
                                     where o.OrderId == od.OrderId && o.NewDesignation == d.DesignationId && o.AppointmentId == S.STEID
                                     && o.AppointmentType == 2 && o.OrderId == orderId
                                     select new { o, od, S, d.Designation }).FirstOrDefault();
                        if (query != null)
                        {
                            model.Typeofappointment = Common.GetCodeControlName(query.S.TypeofAppointment ?? 0, "STEAppointmenttype");
                            model.TypeofappointmentID = query.S.TypeofAppointment ?? 0;
                            model.STEId = query.S.STEID;
                            //model.ApplicationNo = query.o.OrderNo;
                            model.ApplicationNo = getOfferDetails(model.STEId, "STE", orderId, "OfferLetter"); /*query.S.ApplicationNumber;*/
                            model.PresentAddress = query.S.PresentAddress;
                            if (query.o.OrderType != 2)
                            {
                                model.PayeeType = query.S.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                                model.ConsolidatedPay = query.S.ConsolidatedPay ?? false;
                            }
                            else
                            {
                                model.PayeeType = query.od.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                                model.ConsolidatedPay = query.od.ConsolidatedPay;
                            }
                            model.Name = Common.GetCodeControlName(query.S.ProfessionalType ?? 0, "RCTProfessional") + query.S.Name;
                            model.StaffCategory = query.S.StaffCategory;
                            model.MsPhd = query.S.MsPhd ?? false;
                            model.MsOrPhd = query.S.MsPhdType == 1 ? "M.S" : query.S.MsPhdType == 2 ? "Ph.D" : "";
                            model.ProjectId = query.o.NewProjectId;
                            model.DesignationId = query.o.NewDesignation;
                            model.Designation = query.Designation;
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", query.o.FromDate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.o.ToDate);
                            model.AppointmentFromdate = query.o.FromDate;
                            model.BasicPay = query.o.Basic;
                            //model.CommitmentAmount = query.o.CommitmentAmmount ?? 0; ;
                            //model.ConsolidatedPayPerMonth = query.S.Salary ?? 0;
                            //model.offerDate = query.od.OfferDate ?? DateTime.Now;
                            //if (query.od.OfferDate < query.o.FromDate)
                            //    model.offerDate = query.o.FromDate ?? DateTime.Now;
                            model.offerDate = getOfferLetterDate(model.STEId, "STE", "OfferLetter", orderId);
                            model.EmployeeID = query.S.EmployeersID;
                            model.ProjectDetailsModel = getProjectSummary(query.o.NewProjectId ?? 0);
                            model.ProjectNumber = model.ProjectDetailsModel.ProjectNumber;
                        }
                    }
                    else if (STEID > 0)
                    {
                        var query = (from S in context.tblRCTSTE
                                     join D in context.tblRCTDesignation on S.DesignationId equals D.DesignationId
                                     where S.STEID == STEID
                                     select new { S, D }).FirstOrDefault();
                        if (query != null)
                        {
                            model.Designation = query.D.Designation;
                            model.DesignationId = query.D.DesignationId;
                            model.ProjectDetailsModel = getProjectSummary(query.S.ProjectId ?? 0);
                            model.ProjectNumber = model.ProjectDetailsModel.ProjectNumber;
                            model.Typeofappointment = Common.GetCodeControlName(query.S.TypeofAppointment ?? 0, "STEAppointmenttype");
                            model.PayeeType = query.S.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                            model.ConsolidatedPay = query.S.ConsolidatedPay ?? false;
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", query.S.AppointmentStartdate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.S.AppointmentEnddate);
                            model.AppointmentFromdate = query.S.AppointmentStartdate;
                            model.ApplicationNo = getOfferDetails(STEID, "STE", null, "OfferLetter"); /*query.S.ApplicationNumber;*/
                            model.Name = Common.GetCodeControlName(query.S.ProfessionalType ?? 0, "RCTProfessional") + query.S.Name;
                            model.PresentAddress = query.S.PresentAddress;
                            model.MsPhd = query.S.MsPhd ?? false;
                            model.MsOrPhd = query.S.MsPhdType == 1 ? "M.S" : query.S.MsPhdType == 2 ? "Ph.D" : "";
                            model.BasicPay = query.S.Salary;
                            //model.CommitmentAmount = query.S.CommitmentAmount ?? 0;
                            //model.offerDate = query.S.OfferDate ?? DateTime.Now;
                            //if (query.S.OfferDate < query.S.AppointmentStartdate)
                            //    model.offerDate = query.S.AppointmentStartdate ?? DateTime.Now;
                            model.offerDate = getOfferLetterDate(model.STEId, "STE", "OfferLetter");
                            model.EmployeeID = query.S.EmployeersID;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }

        #region Verification

        public STEVerificationModel GetVerification(int STEID)
        {
            STEVerificationModel model = new STEVerificationModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {

                    var query = (from A in context.tblRCTSTE
                                 from C in context.tblCodeControl
                                 from P in context.tblProject
                                 from D in context.tblRCTDesignation
                                 where C.CodeValAbbr == A.ProfessionalType && C.CodeName == "RCTProfessional" &&
                                 A.DesignationId == D.DesignationId && A.ProjectId == P.ProjectId && A.STEID == STEID
                                 select new { A, C.CodeValDetail, P.ProjectNumber, D.Designation }).FirstOrDefault();
                    if (query != null)
                    {
                        model.Status = query.A.Status;                      
                        model.STEId = query.A.STEID;
                        model.ApplicationNo = query.A.ApplicationNumber;
                        model.TypeofappointmentId = query.A.TypeofAppointment;
                        model.RollNumber = query.A.RollNumber;
                        model.Typeofappointment = Common.GetCodeControlName(query.A.TypeofAppointment ?? 0, "STEAppointmenttype");
                        model.PersonImagePath = query.A.CandidateImage;
                        model.CantidateSignatureFilePath = query.A.CandidateSignature;
                        model.Name = query.CodeValDetail + " " + query.A.Name;
                        model.EmergencyContactNo = query.A.EmergencyContact;
                        if (string.IsNullOrEmpty(query.A.AadhaarNumber))
                            model.aadharnumber = null;
                        else
                            model.aadharnumber = long.Parse(query.A.AadhaarNumber);
                        model.PAN = query.A.PANNo;
                        model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", query.A.DateofBirth);
                        model.ContactNumber = query.A.ContactNumber;
                        model.EmployeeTypeCatecory = query.A.EmployeeType ?? 0;
                        model.OldEmployeeNumber = query.A.EmployeeCategory == "Old Employee" ? query.A.OldNumber : null;
                        model.AlternativeContactNumber = query.A.AlternativeContactNumber;
                        model.EmergencyContactNo = query.A.EmergencyContact;
                        model.Email = query.A.Email;
                        model.PresentAddress = query.A.PresentAddress;
                        model.isSameasPermanentAddress = query.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = query.A.PermanentAddress;
                        model.StaffCategory = query.A.StaffCategory;
                        model.PPONo = query.A.PPONo;
                        model.CSIRStaff = query.A.CSIRStaffPayMode ?? 0;
                        model.Salary = query.A.Salary ?? 0;
                        model.MedicalAmmount = query.A.MedicalAmmount ?? 0;
                        model.HRA = query.A.HRA ?? 0;
                        model.MsPhd = query.A.MsPhd ?? false;
                        model.MsPhdType = query.A.MsPhdType;
                        model.PhdDetail = query.A.PhdDetail;
                        model.ProjectId = query.A.ProjectId;
                        model.ProjectNumber = query.ProjectNumber;
                        model.Designation = query.Designation;
                        model.BankAccountNo = query.A.BankAccountNumber;
                        model.BankName = query.A.BankName;
                        model.IFSCCode = query.A.IFSCCode;
                        model.GovProof = query.A.GovernmentProofVerifyDoc ?? 0;
                        model.isVerifiedGovProof = query.A.GovernmentProofVerify ?? false;
                        model.OfferDate = string.Format("{0:dd-MMMM-yyyy}", query.A.OfferDate);
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", query.A.AppointmentStartdate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.A.AppointmentEnddate);
                        model.PayType = query.A.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                        model.ActualDate = query.A.ActualDate;
                        model.VerificationRemarks = query.A.VerificationRemarks;
                        if (query.A.NotetoCMAdmin == true)
                            model.FlowApprover = "CMAdmin";
                        if (query.A.NotetoDean == true)
                            model.FlowApprover = "NDean";
                        //model.FlowApprover = query.A.NotetoCMAdmin == true ? "CMAdmin" : query.A.NotetoDean == true ? "NDean" : "";                       
                        var QryEducation = (from c in context.tblRCTSTEEducationDetail
                                            join q in context.tblRCTQualificationList on c.QualifiCationID equals q.QualificationId into lftj
                                            from lj in lftj.DefaultIfEmpty()
                                            join d in context.tblCodeControl on c.MarkType equals d.CodeValAbbr into lft
                                            from j in lft.DefaultIfEmpty()
                                            where c.STEID == STEID && c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTMarkType")
                                            orderby c.STEEducationDetailID
                                            select new { c, lj, j }).ToList();
                        if (QryEducation != null)
                        {
                            for (int i = 0; i < QryEducation.Count; i++)
                            {
                                int EducationID = QryEducation[i].c.QualifiCationID ?? 0;
                                int DisciplineID = QryEducation[i].c.DisciplineID ?? 0;
                                var list = Common.GetCourseList(EducationID);
                                var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();
                                EducationList.Add(new STEEducationModel()
                                {
                                    Education = QryEducation[i].lj == null ? "" : QryEducation[i].lj.Qualification,
                                    EducationId = QryEducation[i].c.STEEducationDetailID,
                                    QualificationId = QryEducation[i].c.QualifiCationID,
                                    DisciplineId = QryEducation[i].c.DisciplineID,
                                    Discipline = Discipline,
                                    Institution = QryEducation[i].c.UniversityorInstitution,
                                    YearofPassing = QryEducation[i].c.YearOfPassing,
                                    MarkType = QryEducation[i].c.MarkType,
                                    strMarkType = QryEducation[i].j == null ? "" : QryEducation[i].j.CodeValDetail,
                                    Marks = QryEducation[i].c.Marks,
                                    DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                    CertificatePath = QryEducation[i].c.DocumentFilePath,
                                    CertificateName = QryEducation[i].c.FileName,
                                    Remarks = QryEducation[i].c.Remarks,
                                    DisiplineList = list
                                });
                            }
                        }
                        model.EducationDetail = EducationList.Count > 0 ? EducationList : null;


                        var QryExperience = (from c in context.tblRCTSTEExperienceDetail
                                             join d in context.tblCodeControl on c.TypeID equals d.CodeValAbbr into lft
                                             from j in lft.DefaultIfEmpty()
                                             where c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTExperienceType")
                                             && c.STEID == STEID
                                             orderby c.STEExperienceDetailID
                                             select new { c, j }).ToList();
                        if (QryExperience != null)
                        {
                            for (int i = 0; i < QryExperience.Count(); i++)
                            {
                                ExperienceList.Add(new STEExperienceModel()
                                {
                                    ExperienceId = QryExperience[i].c.STEExperienceDetailID,
                                    ExperienceTypeId = QryExperience[i].c.TypeID,
                                    ExperienceType = QryExperience[i].j == null ? "" : QryExperience[i].j.CodeValDetail,
                                    Organisation = QryExperience[i].c.Organisation,
                                    DesignationListId = QryExperience[i].c.DesignationId,
                                    DesignationautoComplete = QryExperience[i].c.Designation,
                                    FromDate = QryExperience[i].c.FromYear,
                                    ToDate = QryExperience[i].c.ToYear,
                                    SalaryDrawn = QryExperience[i].c.SalaryDrawn,
                                    ExperienceFilePath = QryExperience[i].c.DocumentFilePath,
                                    ExperienceFileName = QryExperience[i].c.FileName,
                                    Remarks = QryExperience[i].c.Remarks,
                                    strFromDate = string.Format("{0:dd-MMMM-yyyy}", QryExperience[i].c.FromYear),
                                    strToDate = string.Format("{0:dd-MMMM-yyyy}", QryExperience[i].c.ToYear)
                                });
                            }
                        }
                        model.ExperienceDetail = ExperienceList.Count > 0 ? ExperienceList : null;
                        model.Expericence = Common.getExperienceInWordings(STEID, "STE");
                        model.Qualification = Common.getQualificationWordings(STEID, "STE");
                        model.PIJustificationCommands = (from c in context.tblRCTSTEPIJustificationDocs
                                                         where c.STEID == STEID && !string.IsNullOrEmpty(c.Description) && c.Deleted_f != true
                                                         group c by c.Description into grp
                                                         select grp.Key).ToList();
                        model.BloodGroup = query.A.Bloodgroup;
                        model.BloodGroupRH = query.A.BloodgroupRH;
                        model.GateScore = query.A.GateScore;
                        model.CommitmentAmount = query.A.CommitmentAmount;
                        var CommitmentNumber = (from c in context.tblRCTCommitmentRequest
                                                where c.ReferenceNumber == query.A.ApplicationNumber
                                                && c.Status == "Commitment Booked"
                                                orderby c.RecruitmentRequestId descending
                                                select c.CommitmentNumber).FirstOrDefault();
                        model.CommitmentNo = string.IsNullOrEmpty(CommitmentNumber) ? "-" : CommitmentNumber;
                        model.EmployeeWorkplace = query.A.EmployeeWorkplace;
                        if (query.A.ResumeFile != null)
                            model.ResumeFileName = query.A.ResumeFile.Substring((query.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = query.A.ResumeFile;
                        if (query.A.JoiningReport != null)
                            model.JoiningReportFileName = query.A.JoiningReport.Substring(query.A.JoiningReport.IndexOf("_") + 1);
                        model.JoiningReportPath = query.A.JoiningReport;
                        model.RequestedfromPI = Common.GetPIName(query.A.RequestedBy ?? 0);
                        if (query.A.SalaryLevelId > 0)
                        {
                            var data = getSalaryLevelName_Description(query.A.SalaryLevelId ?? 0);
                            model.SalaryLevel = data.Item1;
                            model.SalaryLevelDescription = data.Item2;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public Tuple<int,int, string> VerifySTE(STEVerificationModel model, int logged_in_userId, string button)
        {
            int res = 0, STEID = model.STEId ?? 0, OrderID = model.OrderId ?? 0;
            string EmployeeID = string.Empty, errMsg = string.Empty;
            

            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (button == "Save as drafts")
                            {
                                var query = (from s in context.tblRCTSTE
                                             from d in context.tblRCTDesignation
                                             where s.DesignationId == d.DesignationId //&& s.Status == "Awaiting Verification" || s.Status == "Awaiting Verification-Draft"
                                             && s.STEID == model.STEId && s.ApplicationNumber == model.ApplicationNo
                                             select new { s, d }).FirstOrDefault();
                                if (query != null)
                                {
                                    query.s.Status = "Awaiting Verification-Draft";

                                    if (model.PersonImage != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.PersonImage.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                        query.s.CandidateImage = docName;
                                    }
                                    if (model.Resume != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.Resume.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.Resume.UploadFile("Requirement", docName);
                                        query.s.ResumeFile = docName;
                                    }
                                    if (model.CantidateSignature != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.CantidateSignature.UploadFile("Requirement", docName);
                                        query.s.CandidateSignature = docName;
                                    }
                                    query.s.PANNo = model.PAN;
                                    query.s.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                    query.s.AlternativeContactNumber = model.AlternativeContactNumber;
                                    query.s.ContactNumber = model.ContactNumber;
                                    query.s.EmergencyContact = model.EmergencyContactNo;
                                    query.s.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                    query.s.PresentAddress = model.PresentAddress;
                                    query.s.PermanentAddress = model.PermanentAddress;
                                    query.s.GovernmentProofVerifyDoc = model.GovProof;
                                    query.s.GovernmentProofVerify = model.isVerifiedGovProof;
                                    //query.s.EmployeeType = model.EmployeeTypeCatecory;
                                    //query.s.StaffCategory = model.StaffCategory;
                                    //query.s.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                    query.s.MsPhdType = model.MsPhdType;
                                    query.s.MsPhd = model.MsPhdType > 0 ? true : false;
                                    query.s.PhdDetail = model.PhdDetail;
                                    query.s.ActualDate = model.ActualDate;
                                    query.s.VerificationRemarks = model.VerificationRemarks;
                                    if (model.JoiningReport != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.JoiningReport.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.JoiningReport.UploadFile("Requirement", docName);
                                        query.s.JoiningReport = docName;
                                    }
                                    query.s.BankAccountNumber = model.BankAccountNo;
                                    query.s.BankName = model.BankName;
                                    query.s.BankId = model.BankId;
                                    query.s.IFSCCode = model.IFSCCode;
                                    query.s.GateScore = model.GateScore;
                                    query.s.Bloodgroup = model.BloodGroup;
                                    query.s.BloodgroupRH = model.BloodGroupRH;
                                    if (model.TypeofappointmentId == 4)
                                        query.s.RollNumber = model.RollNumber;                                    
                                    query.s.NotetoDean = model.FlowApprover == "NDean" ? true : false;                                    
                                    query.s.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    query.s.UptdTs = DateTime.Now;
                                    query.s.UptdUser = logged_in_userId;
                                    foreach (var item in model.EducationDetail)
                                    {
                                        if (item.EducationId == null)
                                        {
                                            tblRCTSTEEducationDetail _EducationDetail = new tblRCTSTEEducationDetail();
                                            _EducationDetail.STEID = STEID;
                                            _EducationDetail.QualifiCationID = item.QualificationId;
                                            _EducationDetail.DisciplineID = item.DisciplineId;
                                            _EducationDetail.UniversityorInstitution = item.Institution;
                                            _EducationDetail.YearOfPassing = item.YearofPassing;
                                            _EducationDetail.MarkType = item.MarkType;
                                            _EducationDetail.Marks = item.Marks;
                                            _EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                            if (item.Certificate != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.Certificate.UploadFile("Requirement", docName);
                                                _EducationDetail.DocumentFilePath = docName;
                                                _EducationDetail.FileName = actName;
                                            }
                                            _EducationDetail.Remarks = item.Remarks;
                                            _EducationDetail.CrtdTs = DateTime.Now;
                                            _EducationDetail.CrtdUser = logged_in_userId;
                                            _EducationDetail.isCurrentVersion = true;
                                            context.tblRCTSTEEducationDetail.Add(_EducationDetail);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            int STEEducationDetailID = item.EducationId ?? 0;
                                            var QryEducation = (from SM in context.tblRCTSTEEducationDetail where SM.STEID == STEID && SM.STEEducationDetailID == STEEducationDetailID && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                            if (QryEducation != null)
                                            {
                                                if (item.Certificate != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.Certificate.UploadFile("Requirement", docName);
                                                    QryEducation.DocumentFilePath = docName;
                                                    QryEducation.FileName = actName;
                                                    QryEducation.UptdUser = logged_in_userId;
                                                    QryEducation.UptdTs = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    foreach (var item in model.ExperienceDetail)
                                    {
                                        if (item.ExperienceId == null)
                                        {
                                            tblRCTSTEExperienceDetail _ExperienceDetail = new tblRCTSTEExperienceDetail();
                                            if (item.ExperienceTypeId != null)
                                            {
                                                _ExperienceDetail.STEID = STEID;
                                                _ExperienceDetail.TypeID = item.ExperienceTypeId;
                                                _ExperienceDetail.Organisation = item.Organisation;
                                                _ExperienceDetail.DesignationId = item.DesignationListId;
                                                _ExperienceDetail.Designation = item.DesignationautoComplete;
                                                _ExperienceDetail.FromYear = item.FromDate;
                                                _ExperienceDetail.ToYear = item.ToDate;
                                                _ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                                if (item.ExperienceFile != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.ExperienceFile.UploadFile("Requirement", docName);
                                                    _ExperienceDetail.DocumentFilePath = docName;
                                                    _ExperienceDetail.FileName = actName;
                                                }
                                                _ExperienceDetail.Remarks = item.Remarks;
                                                _ExperienceDetail.CrtdUser = logged_in_userId;
                                                _ExperienceDetail.CrtdTs = DateTime.Now;
                                                _ExperienceDetail.isCurrentVersion = true;
                                                context.tblRCTSTEExperienceDetail.Add(_ExperienceDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            int ExperienceId = item.ExperienceId ?? 0;
                                            var QryExp = (from SM in context.tblRCTSTEExperienceDetail where SM.STEID == STEID && SM.STEExperienceDetailID == ExperienceId && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                            if (QryExp != null)
                                            {
                                                if (item.ExperienceFile != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.ExperienceFile.UploadFile("Requirement", docName);
                                                    QryExp.DocumentFilePath = docName;
                                                    QryExp.FileName = actName;
                                                    QryExp.UptdUser = logged_in_userId;
                                                    QryExp.UptdTs = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }


                                    foreach (var item in model.OtherDocList)
                                    {
                                        if (item.Document != null)
                                        {
                                            tblRCTSupportingDocument _SupportDoc = new tblRCTSupportingDocument();
                                            _SupportDoc.AppointmentId = STEID;
                                            _SupportDoc.AppointmentType = 2;
                                            _SupportDoc.DocumentName = item.DocumentName;
                                            _SupportDoc.CRTD_By = logged_in_userId;
                                            _SupportDoc.CRTD_TS = DateTime.Now;
                                            _SupportDoc.Status = "Active";
                                            if (item.Document != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.Document.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.Document.UploadFile("Requirement", docName);
                                                _SupportDoc.DocumentFileName = actName;
                                                _SupportDoc.DocumentPath = docName;
                                            }
                                            context.tblRCTSupportingDocument.Add(_SupportDoc);
                                            context.SaveChanges();
                                        }
                                    }
                                    
                                    
                                    EmployeeID = query.s.OldNumber;
                                    
                                    query.s.EmployeeWorkplace = model.EmployeeWorkplace;
                                    context.SaveChanges();
                                    transaction.Commit();
                                    res = 1;
                                    
                                    PostSTEStatusLog(STEID, "Awaiting Verification", "Awaiting Verification-Draft", logged_in_userId);

                                }
                            }
                            else
                            {
                                var query = (from s in context.tblRCTSTE
                                             from d in context.tblRCTDesignation
                                             where s.DesignationId == d.DesignationId //&& s.Status == "Awaiting Verification" || s.Status == "Awaiting Verification-Draft"
                                             && s.STEID == model.STEId
                                             select new { s, d }).FirstOrDefault();
                                if (query != null)
                                {
                                    
                                    if (model.PersonImage != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.PersonImage.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                        query.s.CandidateImage = docName;
                                    }
                                    if (model.Resume != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.Resume.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.Resume.UploadFile("Requirement", docName);
                                        query.s.ResumeFile = docName;
                                    }
                                    if (model.CantidateSignature != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.CantidateSignature.UploadFile("Requirement", docName);
                                        query.s.CandidateSignature = docName;
                                    }
                                    query.s.PANNo = model.PAN;
                                    query.s.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                    query.s.AlternativeContactNumber = model.AlternativeContactNumber;
                                    query.s.ContactNumber = model.ContactNumber;
                                    query.s.EmergencyContact = model.EmergencyContactNo;
                                    query.s.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                    query.s.PresentAddress = model.PresentAddress;
                                    query.s.PermanentAddress = model.PermanentAddress;
                                    query.s.GovernmentProofVerifyDoc = model.GovProof;
                                    query.s.GovernmentProofVerify = model.isVerifiedGovProof;
                                    //query.s.EmployeeType = model.EmployeeTypeCatecory;
                                    //query.s.StaffCategory = model.StaffCategory;
                                    //query.s.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                    query.s.MsPhdType = model.MsPhdType;
                                    query.s.MsPhd = model.MsPhdType > 0 ? true : false;
                                    query.s.PhdDetail = model.PhdDetail;
                                    query.s.ActualDate = model.ActualDate;
                                    query.s.VerificationRemarks = model.VerificationRemarks;
                                    if (model.JoiningReport != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.JoiningReport.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        model.JoiningReport.UploadFile("Requirement", docName);
                                        query.s.JoiningReport = docName;
                                    }
                                    query.s.BankAccountNumber = model.BankAccountNo;
                                    query.s.BankName = model.BankName;
                                    query.s.BankId = model.BankId;
                                    query.s.IFSCCode = model.IFSCCode;
                                    query.s.GateScore = model.GateScore;
                                    query.s.Bloodgroup = model.BloodGroup;
                                    query.s.BloodgroupRH = model.BloodGroupRH;
                                    if (model.TypeofappointmentId == 4)
                                        query.s.RollNumber = model.RollNumber;                                    
                                    query.s.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                    //query.s.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                    query.s.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    query.s.UptdTs = DateTime.Now;
                                    query.s.UptdUser = logged_in_userId;
                                    query.s.EmployeeWorkplace = model.EmployeeWorkplace;
                                    context.SaveChanges();
                                    transaction.Commit();
                                    res = 1;
                                    foreach (var item in model.EducationDetail)
                                    {
                                        if (item.EducationId == null)
                                        {
                                            tblRCTSTEEducationDetail _EducationDetail = new tblRCTSTEEducationDetail();
                                            _EducationDetail.STEID = STEID;
                                            _EducationDetail.QualifiCationID = item.QualificationId;
                                            _EducationDetail.DisciplineID = item.DisciplineId;
                                            _EducationDetail.UniversityorInstitution = item.Institution;
                                            _EducationDetail.YearOfPassing = item.YearofPassing;
                                            _EducationDetail.MarkType = item.MarkType;
                                            _EducationDetail.Marks = item.Marks;
                                            _EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                            if (item.Certificate != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.Certificate.UploadFile("Requirement", docName);
                                                _EducationDetail.DocumentFilePath = docName;
                                                _EducationDetail.FileName = actName;
                                            }
                                            _EducationDetail.Remarks = item.Remarks;
                                            _EducationDetail.CrtdTs = DateTime.Now;
                                            _EducationDetail.CrtdUser = logged_in_userId;
                                            _EducationDetail.isCurrentVersion = true;
                                            context.tblRCTSTEEducationDetail.Add(_EducationDetail);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            int STEEducationDetailID = item.EducationId ?? 0;
                                            var QryEducation = (from SM in context.tblRCTSTEEducationDetail where SM.STEID == STEID && SM.STEEducationDetailID == STEEducationDetailID && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                            if (QryEducation != null)
                                            {
                                                if (item.Certificate != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.Certificate.UploadFile("Requirement", docName);
                                                    QryEducation.DocumentFilePath = docName;
                                                    QryEducation.FileName = actName;
                                                    QryEducation.UptdUser = logged_in_userId;
                                                    QryEducation.UptdTs = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    foreach (var item in model.ExperienceDetail)
                                    {
                                        if (item.ExperienceId == null)
                                        {
                                            tblRCTSTEExperienceDetail _ExperienceDetail = new tblRCTSTEExperienceDetail();
                                            if (item.ExperienceTypeId != null)
                                            {
                                                _ExperienceDetail.STEID = STEID;
                                                _ExperienceDetail.TypeID = item.ExperienceTypeId;
                                                _ExperienceDetail.Organisation = item.Organisation;
                                                _ExperienceDetail.DesignationId = item.DesignationListId;
                                                _ExperienceDetail.Designation = item.DesignationautoComplete;
                                                _ExperienceDetail.FromYear = item.FromDate;
                                                _ExperienceDetail.ToYear = item.ToDate;
                                                _ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                                if (item.ExperienceFile != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.ExperienceFile.UploadFile("Requirement", docName);
                                                    _ExperienceDetail.DocumentFilePath = docName;
                                                    _ExperienceDetail.FileName = actName;
                                                }
                                                _ExperienceDetail.Remarks = item.Remarks;
                                                _ExperienceDetail.CrtdUser = logged_in_userId;
                                                _ExperienceDetail.CrtdTs = DateTime.Now;
                                                _ExperienceDetail.isCurrentVersion = true;
                                                context.tblRCTSTEExperienceDetail.Add(_ExperienceDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            int ExperienceId = item.ExperienceId ?? 0;
                                            var QryExp = (from SM in context.tblRCTSTEExperienceDetail where SM.STEID == STEID && SM.STEExperienceDetailID == ExperienceId && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                            if (QryExp != null)
                                            {
                                                if (item.ExperienceFile != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    item.ExperienceFile.UploadFile("Requirement", docName);
                                                    QryExp.DocumentFilePath = docName;
                                                    QryExp.FileName = actName;
                                                    QryExp.UptdUser = logged_in_userId;
                                                    QryExp.UptdTs = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }


                                    foreach (var item in model.OtherDocList)
                                    {
                                        if (item.Document != null)
                                        {
                                            tblRCTSupportingDocument _SupportDoc = new tblRCTSupportingDocument();
                                            _SupportDoc.AppointmentId = STEID;
                                            _SupportDoc.AppointmentType = 2;
                                            _SupportDoc.DocumentName = item.DocumentName;
                                            _SupportDoc.CRTD_By = logged_in_userId;
                                            _SupportDoc.CRTD_TS = DateTime.Now;
                                            _SupportDoc.Status = "Active";
                                            if (item.Document != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.Document.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.Document.UploadFile("Requirement", docName);
                                                _SupportDoc.DocumentFileName = actName;
                                                _SupportDoc.DocumentPath = docName;
                                            }
                                            context.tblRCTSupportingDocument.Add(_SupportDoc);
                                            context.SaveChanges();
                                        }
                                    }                                   
                                    
                                    decimal WidthdrawAmmount = 0;
                                    //if employee late join late join amount should be 
                                    if (query.s.AppointmentStartdate < model.ActualDate && query.s.CSIRStaffPayMode != 2)
                                    {
                                        DateTime FromDate = query.s.AppointmentStartdate ?? DateTime.Now;
                                        DateTime ToDate = model.ActualDate ?? DateTime.Now;
                                        WidthdrawAmmount = Common.calculateWithdrawalAmount(STEID, "STE", FromDate, ToDate, true, 0, true);
                                        if (WidthdrawAmmount > 0)
                                        {
                                            tblRCTCommitmentRequest wd = new tblRCTCommitmentRequest();
                                            wd.ReferenceNumber = query.s.ApplicationNumber;
                                            wd.AppointmentType = "Verfication";
                                            wd.TypeCode = "STE";
                                            wd.CandidateName = query.s.Name;
                                            wd.CandidateDesignation = query.d.Designation;
                                            wd.ProjectId = query.s.ProjectId;
                                            wd.ProjectNumber = Common.getprojectnumber(query.s.ProjectId ?? 0);
                                            wd.TotalSalary = query.s.Salary;
                                            wd.RequestedCommitmentAmount = WidthdrawAmmount;
                                            wd.Status = "Awaiting Commitment Booking";
                                            wd.RequestType = "Withdraw Commitment";
                                            wd.EmpNumber = query.s.EmployeersID;
                                            wd.EmpId = logged_in_userId;
                                            wd.Crtd_TS = DateTime.Now;
                                            wd.Crtd_UserId = logged_in_userId;
                                            context.tblRCTCommitmentRequest.Add(wd);
                                            context.SaveChanges();
                                        }
                                    }

                                    var Updateqry = (from a in context.tblRCTSTE where a.STEID == STEID select a).FirstOrDefault();
                                    if (Updateqry != null)
                                    {
                                        var Actualstartdate = Updateqry.AppointmentStartdate;
                                        Updateqry.ActualAppointmentStartDate = Actualstartdate;
                                        Updateqry.ActualAppointmentEndDate = Updateqry.AppointmentEnddate;
                                        decimal CommitmentAmount = 0;
                                        CommitmentAmount = Updateqry.CommitmentAmount ?? 0;
                                        Updateqry.AppointmentStartdate = model.ActualDate;
                                        if (WidthdrawAmmount > 0)
                                            Updateqry.CommitmentAmount = CommitmentAmount - WidthdrawAmmount;
                                        context.SaveChanges();
                                    }

                                                                       
                                    PostOfferDetails(STEID, "STE", "OfficeOrder", logged_in_userId);
                                   
                                    var Data = STEVWFInit(STEID, logged_in_userId);
                                    if (Data.Item1 == false)
                                    {
                                        return Tuple.Create(-1, STEID, Data.Item2);
                                        
                                    }

                                }
                            }

                            
                        }
                        catch (Exception ex)
                        {
                            WriteLog.SendErrorToText(ex);
                            transaction.Rollback();
                            return Tuple.Create(-1, 0, ex.Message.ToString());
                        }
                    }
                }
                return Tuple.Create(res, STEID, errMsg);
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(-1, 0, ex.Message.ToString());
            }
        }

        public SearchSTEVerificationModel GetSTEVerificationList(int page, int pageSize, SearchSTEVerificationModel model, DateFilterModel OfferDate, DateFilterModel ClosureDate, DateFilterModel DateOfJoining)
        {
            try
            {
                SearchSTEVerificationModel list = new SearchSTEVerificationModel();
                List<STEVerificationModel> STEList = new List<STEVerificationModel>();
                var userName = System.Web.HttpContext.Current.User.Identity.Name;
                int userId = Common.GetUserid(userName);
                int[] cancelInitiator = { 0, userId };
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var prequery = (from b in context.vw_RCTVerificationList.AsNoTracking()
                                    from p in context.tblProject                                   
                                    from vw in context.vwFacultyStaffDetails
                                    orderby b.ApplicationId descending
                                    where b.ProjectId == p.ProjectId && p.PIName == vw.UserId && b.Category == "STE" 
                                    && cancelInitiator.Contains(b.CancelInitiator ?? 0)
                                    select new STEVerificationModel()
                                    {
                                        STEId = b.ApplicationId,
                                        OrderId = b.OrderId,
                                        ApplicationType = b.ApplicationType,
                                        ApplicationNo = b.ApplicationNo,
                                        Name = b.CandidateName,
                                        Designation = b.PostRecommended,
                                        DepartmentName = vw.DepartmentName,
                                        Status = b.Status,
                                        OfferActualDate = b.UptdTs,
                                        PAN = b.PANNo,
                                        EmployeeNo = b.EmployeeNo,
                                        JoiningDate = b.AppointmentStartdate,
                                    });
                    var predicate = PredicateBuilder.BaseAnd<STEVerificationModel>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInApplicationNo))
                        predicate = predicate.And(d => d.ApplicationNo.Contains(model.SearchInApplicationNo) || d.EmployeeNo.Contains(model.SearchInApplicationNo));
                    if (!string.IsNullOrEmpty(model.DepartmentName))
                        predicate = predicate.And(d => d.DepartmentName.Contains(model.DepartmentName));
                    if (OfferDate.@from != null && OfferDate.to != null)
                    {
                        OfferDate.to = OfferDate.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.OfferActualDate >= OfferDate.@from && d.OfferActualDate <= OfferDate.to);
                    }
                    if (DateOfJoining.@from != null && DateOfJoining.to != null)
                    {
                        DateOfJoining.to = DateOfJoining.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.JoiningDate >= DateOfJoining.@from && d.JoiningDate <= DateOfJoining.to);
                    }
                    if (!string.IsNullOrEmpty(model.SearchINStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchINStatus));
                    if (!string.IsNullOrEmpty(model.Applicationtype))
                        predicate = predicate.And(d => d.ApplicationType.Contains(model.Applicationtype));
                    var query = prequery.Where(predicate).OrderByDescending(m => m.STEId).Skip(skiprec).Take(pageSize).ToList();
                    list.TotalRecords = prequery.Where(predicate).Count();
                    if (query != null)
                    {

                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            bool SendOffer_f = false;
                            int appid = query[i].STEId ?? 0;
                            int? OrderId = query[i].OrderId;
                            int emailcount = context.tblRCTSTEEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 9 &&
                                                x.STEID == appid && (x.OrderId == OrderId || OrderId == null)).Count();

                            SendOffer_f = context.tblRCTOfferDetails.
                                                Where(x => x.ApplicationId == appid && x.Category == "STE" &&
                                                x.OfferCategory == "OfferLetter" && x.isSend != true && (x.OrderId == OrderId || OrderId == null)).Any();

                            STEList.Add(new STEVerificationModel()
                            {
                                SNo = sno + i,
                                STEId = query[i].STEId,
                                OrderId = query[i].OrderId,
                                ApplicationType = query[i].ApplicationType,
                                ApplicationNo = query[i].EmployeeNo == null ? query[i].ApplicationNo : query[i].EmployeeNo,
                                Name = query[i].Name,
                                Designation = query[i].Designation,
                                DepartmentName = query[i].DepartmentName,
                                Status = query[i].Status,
                                OfferDate = String.Format("{0:s}", query[i].OfferActualDate),
                                PAN = query[i].PAN,
                                EmailRemaindarCount = emailcount,
                                DateofJoining = String.Format("{0:s}", query[i].JoiningDate),
                                SendOffer_f = SendOffer_f,
                                Cancel_f = IsCancelAppointment(query[i].JoiningDate, query[i].Status)
                            });
                        }
                    }
                    list.VerificationList = STEList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchSTEVerificationModel list = new SearchSTEVerificationModel();
                return list;
            }
        }

        #endregion

        public static bool IsCancelAppointment(DateTime? AppointmentStartDate, string Status, int? AppId = null, string AppType = null, int? OrderId = null)
        {
            DateTime Curr = DateTime.Now.Date;
            string[] expappointment = new string[] { "Draft", "Note to PI", "Open", "Awaiting Verification", "Awaiting Verification-Draft" };
            string[] expstatus = new string[] { "Verification Completed", "Completed" };
            string[] notexpstatus = new string[] { "Rejected", "Canceled", "Cancel" };
            int apptypeId = AppType == "STE" ? 2 : AppType == "OSG" ? 3 : AppType == "CON" ? 1 : 0;

            if (AppointmentStartDate == null || expappointment.Contains(Status))
                return true;
            else
            {
                if (AppointmentStartDate != null && !expappointment.Contains(Status) && AppId == null)
                    return expstatus.Contains(Status) && ((AppointmentStartDate.Value.Year == Curr.Year && AppointmentStartDate.Value.Month == Curr.Month) || AppointmentStartDate >= Curr) ? true : false;
                using (var context = new IOASDBEntities())
                {
                    if (AppId != null && OrderId == null)
                    {
                        if (context.tblOrder.Any(m => m.AppointmentId == AppId && m.AppointmentType == apptypeId && !notexpstatus.Contains(m.Status) && m.isUpdated != true))
                            return false;
                        if (context.tblOrder.Any(m => m.AppointmentId == AppId && m.AppointmentType == apptypeId && m.Status == "Completed" && m.isUpdated == true))
                            return false;
                        if ((AppointmentStartDate.Value.Year == Curr.Year && AppointmentStartDate.Value.Month == Curr.Month) || AppointmentStartDate > Curr)
                            return true;
                        return true;
                    }
                    if (OrderId != null)
                    {
                        var queryorder = (from c in context.tblOrder
                                          where c.AppointmentId == AppId && c.AppointmentType == apptypeId && c.OrderId > OrderId
                                          && !notexpstatus.Contains(c.Status) && c.isUpdated != true
                                          orderby c.OrderId descending
                                          select c).FirstOrDefault();
                        if (queryorder != null)
                            return false;
                        if (context.tblOrder.Any(m => m.OrderId == OrderId && (m.Status == "Sent for approval" || m.Status == "Awaiting Commitment Booking" || m.Status == "Awaiting Committee Approval")))
                            return false;
                        if (context.tblOrder.Any(m => m.AppointmentId == AppId && m.AppointmentType == apptypeId && m.OrderId == OrderId && m.Status == "Completed" && m.isUpdated == true && ((m.FromDate.Value.Year == Curr.Year && m.FromDate.Value.Month == Curr.Month) || m.FromDate >= Curr)))
                            return true;
                        if (context.tblOrder.Any(m => m.AppointmentId == AppId && m.AppointmentType == apptypeId && m.OrderId == OrderId && m.Status == "Completed" && m.isUpdated == true && m.FromDate < Curr))
                            return false;
                        return true;
                    }
                }
            }
            return true;
        }

        public static STESearchModel GetSTEList(STESearchModel model, int page, int pageSize)
        {
            DateTime Curr = DateTime.Now.Date;
            STESearchModel stemodel = new STESearchModel();
            List<STEListModel> list = new List<STEListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    join prj in context.tblProject on vw.ProjectId equals prj.ProjectId into g
                                    from prj in g.DefaultIfEmpty()
                                    where vw.ApplicationType == "New" && vw.Category == "STE" && vw.isEmployee != true && vw.Status != "Cancel"
                                    orderby vw.ApplicationId descending
                                    select new STEListModel()
                                    {
                                        STEId = vw.ApplicationId ?? 0,
                                        STEAppNo = vw.ApplicationNo,
                                        Category = vw.Category,
                                        CandidateName = vw.CandidateName,
                                        PIName = vw.PIName,
                                        Email = vw.PIEmail,
                                        Status = vw.Status,
                                        ProjectNumber = prj.ProjectNumber,
                                        isGovAgencyFund = vw.isGovAgencyFund ?? false,
                                        isCommitmentRejection = vw.isCommitmentReject ?? false,
                                        AppType = vw.TypeofAppointment,
                                        AppointmentStartDate = vw.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<STEListModel>();
                    if (!string.IsNullOrEmpty(model.STEAppNo))
                        predicate = predicate.And(d => d.STEAppNo.Contains(model.STEAppNo));
                    if (!string.IsNullOrEmpty(model.Category))
                        predicate = predicate.And(d => d.Category.Contains(model.Category));
                    if (!string.IsNullOrEmpty(model.CandidateName))
                        predicate = predicate.And(d => d.CandidateName.Contains(model.CandidateName));
                    if (!string.IsNullOrEmpty(model.PIName))
                        predicate = predicate.And(d => d.PIName.Contains(model.PIName) || d.Email.Contains(model.PIName));
                    if (!string.IsNullOrEmpty(model.ProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.ProjectNumber));
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status.Contains(model.Status));
                    if (!string.IsNullOrEmpty(model.TypeofAppointment))
                        predicate = predicate.And(d => d.AppType.Contains(model.TypeofAppointment));
                    var query = prequery.Where(predicate).OrderByDescending(m => m.STEId).Skip(skiprec).Take(pageSize).ToList();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }

                        for (int i = 0; i < query.Count; i++)
                        {
                            int appid = query[i].STEId;
                            int emailcount = context.tblRCTSTEEmailLog.Where(x => x.IsSend == true && x.TypeofMail == 3 && x.STEID == appid).Count();
                            bool SendOffer_f = (context.tblRCTOfferDetails.Where(x => x.ApplicationId == appid && x.Category == "STE" && x.OfferCategory == "OfferLetter" && x.isSend != true).Count() > 0) ? true : false;
                            list.Add(new STEListModel()
                            {
                                SNo = sno + i,
                                STEId = query[i].STEId,
                                STEAppNo = query[i].STEAppNo,
                                Category = query[i].Category,
                                CandidateName = query[i].CandidateName,
                                PIName = query[i].PIName,
                                Email = query[i].Email,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount,
                                ProjectNumber = query[i].ProjectNumber,
                                isGovAgencyFund = query[i].isGovAgencyFund,
                                isCommitmentRejection = query[i].isCommitmentRejection,
                                AppType = query[i].AppType,
                                SendOffer_f = SendOffer_f,
                                Cancel_f = IsCancelAppointment(query[i].AppointmentStartDate, query[i].Status)
                            });
                        }
                    }
                    stemodel.TotalRecords = prequery.Where(predicate).Count();
                }
                stemodel.conList = list;
                return stemodel;
            }
            catch (Exception ex)
            {
                return stemodel;
            }
        }

        #endregion

        #region Application Cancel

        public static int ApproveCancelRequest(int appid, string apptype, int logging_user, int? orderid = null)
        {
            int res = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry
                                             where vw.ApplicationId == appid && vw.Category == apptype && vw.Status == "Cancellation Initiated"
                                             && (vw.OrderId == orderid || orderid == null)
                                             select new
                                             {
                                                 vw.OrderId,
                                                 vw.ApplicationId,
                                                 vw.Category,
                                                 vw.EmployeersID,
                                                 vw.ApplicationNo,
                                                 vw.CandidateName,
                                                 vw.PostRecommended,
                                                 vw.ProjectId,
                                                 vw.AppointmentType,
                                                 vw.BasicPay,
                                                 vw.HRA,
                                                 vw.MedicalType,
                                                 vw.MedicalAmmount,
                                                 vw.AppointmentStartdate,
                                                 vw.AppointmentEnddate
                                             }).FirstOrDefault();
                            if (mastQuery != null)
                            {
                                var odrQuery = context.tblOrder.FirstOrDefault(x => x.OrderId == mastQuery.OrderId);
                                if (odrQuery != null)
                                {
                                    if (odrQuery.AppointmentType == 1 && odrQuery.isUpdated)
                                    {
                                        var logQuery = context.tblRCTConsultantAppointmentLog.Where(x => x.orderid == mastQuery.OrderId).FirstOrDefault();
                                        var conQuery = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == mastQuery.ApplicationId).FirstOrDefault();
                                        if (logQuery != null && conQuery != null)
                                        {
                                            if (odrQuery.OrderType == 2)
                                            {
                                                conQuery.ProjectId = logQuery.ProjectId;
                                                conQuery.DesignationId = logQuery.DesignationId;
                                                conQuery.CommitmentNo = logQuery.CommitmentNo;
                                            }
                                            conQuery.Salary = logQuery.Salary;
                                            conQuery.AppointmentStartdate = logQuery.AppointmentStartdate;
                                            conQuery.AppointmentEnddate = logQuery.AppointmentEnddate;
                                            conQuery.CommitmentAmount = logQuery.CommitmentAmount;
                                            conQuery.UptdTs = DateTime.Now;
                                            conQuery.UptdUser = logging_user;
                                            context.SaveChanges();
                                        }
                                    }
                                    else if (odrQuery.AppointmentType == 2 && odrQuery.isUpdated)
                                    {
                                        var logQuery = context.tblRCTSTELog.Where(x => x.Orderid == mastQuery.OrderId).FirstOrDefault();
                                        var steQuery = context.tblRCTSTE.Where(x => x.STEID == mastQuery.ApplicationId).FirstOrDefault();
                                        if (logQuery != null && steQuery != null)
                                        {
                                            if (odrQuery.OrderType == 1)
                                            {
                                                steQuery.ProjectId = logQuery.ProjectId;
                                                steQuery.CommitmentNo = logQuery.CommitmentNo;
                                            }
                                            else if (odrQuery.OrderType == 2)
                                            {
                                                steQuery.ProjectId = logQuery.ProjectId;
                                                steQuery.DesignationId = logQuery.DesignationId;
                                                steQuery.CommitmentNo = logQuery.CommitmentNo;
                                                steQuery.ConsolidatedPay = logQuery.ConsolidatedPay;
                                                steQuery.Fellowship = logQuery.Fellowship;
                                            }
                                            steQuery.Salary = logQuery.Salary;
                                            steQuery.AppointmentStartdate = logQuery.AppointmentStartdate;
                                            steQuery.AppointmentEnddate = logQuery.AppointmentEnddate;
                                            steQuery.CommitmentAmount = logQuery.CommitmentAmount;
                                            steQuery.HRA = logQuery.HRA;
                                            steQuery.HRAPercentage = logQuery.HRAPercentage;
                                            steQuery.isHaveHRA = logQuery.isHaveHRA;
                                            steQuery.Medical = logQuery.Medical;
                                            steQuery.MedicalAmmount = logQuery.MedicalAmmount;
                                            steQuery.UptdTs = DateTime.Now;
                                            steQuery.UptdUser = logging_user;
                                            context.SaveChanges();
                                        }
                                    }
                                    else if (odrQuery.AppointmentType == 3 && odrQuery.isUpdated)
                                    {
                                        var logQuery = context.tblRCTOSGLog.Where(x => x.Orderid == mastQuery.OrderId).FirstOrDefault();
                                        var osgQuery = context.tblRCTOutsourcing.Where(x => x.OSGID == mastQuery.ApplicationId).FirstOrDefault();
                                        if (logQuery != null && osgQuery != null)
                                        {
                                            if (odrQuery.OrderType == 1)
                                            {
                                                osgQuery.ProjectId = logQuery.ProjectId;
                                                osgQuery.CommitmentNo = logQuery.CommitmentNo;
                                            }
                                            else if (odrQuery.OrderType == 2)
                                            {
                                                osgQuery.ProjectId = logQuery.ProjectId;
                                                osgQuery.DesignationId = logQuery.DesignationId;
                                                osgQuery.CommitmentNo = logQuery.CommitmentNo;
                                                osgQuery.ConsolidatedPay = logQuery.ConsolidatedPay;
                                                osgQuery.Fellowship = logQuery.Fellowship;
                                            }
                                            osgQuery.Salary = logQuery.Salary;
                                            osgQuery.AppointmentStartdate = logQuery.AppointmentStartdate;
                                            osgQuery.AppointmentEnddate = logQuery.AppointmentEnddate;
                                            osgQuery.CommitmentAmount = logQuery.CommitmentAmount;
                                            osgQuery.HRA = logQuery.HRA;
                                            osgQuery.isHaveHRA = logQuery.isHaveHRA;
                                            osgQuery.Medical = logQuery.Medical;
                                            osgQuery.MedicalAmmount = logQuery.MedicalAmmount;
                                            osgQuery.UptdTs = DateTime.Now;
                                            osgQuery.UptdUser = logging_user;
                                            context.SaveChanges();


                                            bool CurrVer = false;
                                            bool OldCurrVer = false;
                                            int?[] expOrder = { 1, 2, 3 };
                                            var OSGSalaryDetail = (from x in context.tblRCTSalaryCalcDetails
                                                                   join o in context.tblOrder on x.OrderId equals o.OrderId into jn
                                                                   from j in jn.DefaultIfEmpty()
                                                                   where x.ID == mastQuery.ApplicationId && (j == null || expOrder.Contains(j.OrderType))
                                                                   orderby x.SalaryDetailsId descending
                                                                   select new { x, j }).ToList();
                                            if (OSGSalaryDetail != null)
                                            {
                                                foreach (var item in OSGSalaryDetail)
                                                {
                                                    if (item.j != null)
                                                    {
                                                        if (item.j.isUpdated && item.x.IsCurrentVersion == true)
                                                        {
                                                            CurrVer = true;
                                                            item.x.IsCurrentVersion = false;
                                                            item.x.UpdtTS = DateTime.Now;
                                                            item.x.UpdtUserId = logging_user;
                                                            context.SaveChanges();
                                                        }
                                                        else if (item.j.Status == "Completed" && item.j.isUpdated && item.x.IsCurrentVersion != true)
                                                        {
                                                            OldCurrVer = true;
                                                            item.x.IsCurrentVersion = true;
                                                            item.x.UpdtTS = DateTime.Now;
                                                            item.x.UpdtUserId = logging_user;
                                                            context.SaveChanges();
                                                        }
                                                    }
                                                    if (CurrVer && OldCurrVer)
                                                        break;
                                                }
                                            }

                                            if (!OldCurrVer)
                                            {
                                                var OSGCalSalaryDetail = (from x in context.tblRCTSalaryCalcDetails
                                                                          where x.ID == mastQuery.ApplicationId
                                                                          select x).FirstOrDefault();
                                                if (OSGCalSalaryDetail != null)
                                                {
                                                    OSGCalSalaryDetail.IsCurrentVersion = true;
                                                    OSGCalSalaryDetail.UpdtTS = DateTime.Now;
                                                    OSGCalSalaryDetail.UpdtUserId = logging_user;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    odrQuery.Status = "Cancel";
                                    odrQuery.UpdtTS = DateTime.Now;
                                    odrQuery.UpdtUser = logging_user;
                                    context.SaveChanges();

                                    context.tblRCTCommitmentRequest.Where(x => x.OrderId == mastQuery.OrderId && x.Status == "Awaiting Commitment Booking")
                                        .ToList().ForEach(m =>
                                        {
                                            m.Status = "Cancel";
                                            m.Updt_TS = DateTime.Now;
                                            m.Updt_UserId = logging_user;
                                        });

                                    var comQuery = (from c in context.tblRCTCommitmentRequest
                                                    where c.EmpNumber == mastQuery.EmployeersID && c.OrderId == mastQuery.OrderId
                                                    && (c.RequestType == "Add Commitment" || c.RequestType == "New Commitment") && c.Status == "Commitment Booked"
                                                    orderby c.RecruitmentRequestId descending
                                                    select c).FirstOrDefault();
                                    if (comQuery != null)
                                    {
                                        tblRCTCommitmentRequest widthdraw = new tblRCTCommitmentRequest();
                                        widthdraw.ReferenceNumber = mastQuery.ApplicationNo;
                                        widthdraw.AppointmentType = "Cancel";
                                        widthdraw.TypeCode = mastQuery.Category;
                                        widthdraw.CandidateName = mastQuery.CandidateName;
                                        widthdraw.CandidateDesignation = mastQuery.PostRecommended;
                                        widthdraw.ProjectId = mastQuery.ProjectId;
                                        widthdraw.ProjectNumber = Common.getprojectnumber(mastQuery.ProjectId ?? 0);
                                        decimal Salary = 0;
                                        if (mastQuery.AppointmentType == 2)
                                        {
                                            Salary += mastQuery.BasicPay ?? 0;
                                            Salary += mastQuery.HRA ?? 0;
                                            Salary += mastQuery.MedicalType == 1 ? (mastQuery.MedicalAmmount ?? 0) : 0;
                                        }
                                        else
                                            Salary = mastQuery.BasicPay ?? 0;
                                        widthdraw.TotalSalary = Salary;
                                        widthdraw.RequestedCommitmentAmount = comQuery.RequestedCommitmentAmount ?? 0;
                                        widthdraw.Status = "Awaiting Commitment Booking";
                                        widthdraw.RequestType = "Withdraw Commitment";
                                        widthdraw.EmpNumber = mastQuery.EmployeersID;
                                        widthdraw.EmpId = logging_user;
                                        widthdraw.OrderId = orderid;
                                        widthdraw.Crtd_UserId = logging_user;
                                        widthdraw.Crtd_TS = DateTime.Now;
                                        context.tblRCTCommitmentRequest.Add(widthdraw);
                                        context.SaveChanges();
                                    }

                                    var hisQuery = context.tblRCTOrderHistory.FirstOrDefault(x => x.OrderId == mastQuery.OrderId);
                                    if (hisQuery != null)
                                        hisQuery.IsCanceled = true;
                                    var efQuery = context.tblRCTOrderEffectHistory.FirstOrDefault(x => x.OrderId == mastQuery.OrderId);
                                    if (efQuery != null)
                                        efQuery.IsCanceled = true;
                                    context.SaveChanges();

                                    if ((odrQuery.OrderType == 1 || odrQuery.OrderType == 2) && odrQuery.isExtended != true)
                                    {
                                        DateTime preDueDate = odrQuery.FromDate.Value.AddDays(-1);
                                        var preQuery = context.tblRCTOrderHistory.OrderByDescending(x => x.HistoryID).Where(x => x.ApplicationId == mastQuery.ApplicationId && x.AppointmentType == apptype && x.IsCanceled != false && (x.ActualAppointmentEndDate == preDueDate || x.ActualAppointmentEndDate == odrQuery.FromDate)).FirstOrDefault();
                                        if (preQuery != null)
                                            preQuery.ActualAppointmentEndDate = null;

                                        var preEffectQuery = context.tblRCTOrderEffectHistory.OrderByDescending(x => x.HistoryID).Where(x => x.ApplicationId == mastQuery.ApplicationId && x.AppointmentType == apptype && x.IsCanceled != false && (x.ActualAppointmentEndDate == preDueDate || x.ActualAppointmentEndDate == odrQuery.FromDate)).FirstOrDefault();
                                        if (preEffectQuery != null)
                                            preEffectQuery.ActualAppointmentEndDate = null;
                                    }
                                    context.SaveChanges();
                                    #region Remove Processtransaction
                                    int refid = mastQuery.OrderId ?? 0;
                                    var processtrans = context.tblProcessTransaction.Where(x => x.RefId == refid && x.RefFieldName == "OrderId" && x.Closed_F != true).FirstOrDefault();
                                    if (processtrans != null)
                                    {
                                        int processid = processtrans.ProcessTransactionId;
                                        var procesdetail = context.tblProcessTransactionDetail.Where(x => x.ProcessTransactionId == processid && x.Clarified == true).ToList();
                                        if (procesdetail.Count > 0)
                                        {
                                            context.tblProcessTransactionDetail.RemoveRange(procesdetail);
                                            context.tblProcessTransaction.Remove(processtrans);
                                            context.SaveChanges();
                                        }
                                    }
                                    #endregion
                                }
                                else
                                {

                                    var comQuery = (from c in context.tblRCTCommitmentRequest
                                                    where c.ReferenceNumber == mastQuery.ApplicationNo
                                                    && c.RequestType == "New Appointment"
                                                    && (c.Status == "Commitment Booked" || c.Status == "Awaiting Commitment Booking")
                                                    orderby c.RecruitmentRequestId descending
                                                    select c).FirstOrDefault();
                                    if (comQuery != null)
                                    {
                                        if (comQuery.Status == "Awaiting Commitment Booking")
                                        {
                                            comQuery.Status = "Cancel";
                                            comQuery.Updt_TS = DateTime.Now;
                                            comQuery.Updt_UserId = logging_user;
                                        }
                                        else
                                        {
                                            tblRCTCommitmentRequest widthdraw = new tblRCTCommitmentRequest();
                                            widthdraw.ReferenceNumber = mastQuery.ApplicationNo;
                                            widthdraw.AppointmentType = "Cancel";
                                            widthdraw.TypeCode = mastQuery.Category;
                                            widthdraw.CandidateName = mastQuery.CandidateName;
                                            widthdraw.CandidateDesignation = mastQuery.PostRecommended;
                                            widthdraw.ProjectId = mastQuery.ProjectId;
                                            widthdraw.ProjectNumber = Common.getprojectnumber(mastQuery.ProjectId ?? 0);
                                            decimal Salary = 0;
                                            if (mastQuery.AppointmentType == 2)
                                            {
                                                Salary += mastQuery.BasicPay ?? 0;
                                                Salary += mastQuery.HRA ?? 0;
                                                Salary += mastQuery.MedicalType == 1 ? (mastQuery.MedicalAmmount ?? 0) : 0;
                                            }
                                            else
                                                Salary = mastQuery.BasicPay ?? 0;
                                            widthdraw.TotalSalary = Salary;
                                            decimal widthdrawamount = 0;
                                            widthdrawamount = Common.calculateWithdrawalAmount(mastQuery.ApplicationId ?? 0, mastQuery.Category, mastQuery.AppointmentStartdate ?? DateTime.Now, mastQuery.AppointmentEnddate ?? DateTime.Now, true, mastQuery.OrderId ?? 0);
                                            widthdraw.RequestedCommitmentAmount = widthdrawamount;
                                            widthdraw.Status = "Awaiting Commitment Booking";
                                            widthdraw.RequestType = "Withdraw Commitment";
                                            widthdraw.EmpNumber = mastQuery.EmployeersID;
                                            widthdraw.EmpId = logging_user;
                                            widthdraw.Crtd_UserId = logging_user;
                                            widthdraw.Crtd_TS = DateTime.Now;
                                            context.tblRCTCommitmentRequest.Add(widthdraw);
                                        }
                                        context.SaveChanges();
                                    }

                                    context.tblRCTOrderHistory.Where(x => x.ApplicationId == mastQuery.ApplicationId && x.AppointmentType == mastQuery.Category)
                                       .ToList().ForEach(m =>
                                       {
                                           m.IsCanceled = true;
                                       });
                                    context.tblRCTOrderEffectHistory.Where(x => x.ApplicationId == mastQuery.ApplicationId && x.AppointmentType == mastQuery.Category)
                                        .ToList().ForEach(m =>
                                        {
                                            m.IsCanceled = true;
                                        });

                                    if (mastQuery.AppointmentType == 1)
                                    {
                                        var conQuery = context.tblRCTConsultantAppointment.FirstOrDefault(x => x.ConsultantAppointmentId == appid);
                                        if (conQuery != null)
                                        {
                                            conQuery.Status = "Cancel";
                                            conQuery.UptdTs = DateTime.Now;
                                            conQuery.UptdUser = logging_user;
                                            context.SaveChanges();
                                            #region Remove Processtransaction
                                            string appno = conQuery.ApplicationNumber;
                                            var processtrans = context.tblProcessTransaction.Where(x => x.RefNumber == appno && x.Closed_F != true).FirstOrDefault();
                                            if (processtrans != null)
                                            {
                                                int processid = processtrans.ProcessTransactionId;
                                                var procesdetail = context.tblProcessTransactionDetail.Where(x => x.ProcessTransactionId == processid && x.Clarified == true).ToList();
                                                if (procesdetail.Count > 0)
                                                {
                                                    context.tblProcessTransactionDetail.RemoveRange(procesdetail);
                                                    context.tblProcessTransaction.Remove(processtrans);
                                                    context.SaveChanges();
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                    else if (mastQuery.AppointmentType == 2)
                                    {
                                        var steQuery = context.tblRCTSTE.FirstOrDefault(x => x.STEID == appid);
                                        if (steQuery != null)
                                        {
                                            steQuery.Status = "Cancel";
                                            steQuery.UptdTs = DateTime.Now;
                                            steQuery.UptdUser = logging_user;
                                            context.SaveChanges();
                                            #region Remove Processtransaction
                                            string appno = steQuery.ApplicationNumber;
                                            var processtrans = context.tblProcessTransaction.Where(x => x.RefNumber == appno && x.Closed_F != true).FirstOrDefault();
                                            if (processtrans != null)
                                            {
                                                int processid = processtrans.ProcessTransactionId;
                                                var procesdetail = context.tblProcessTransactionDetail.Where(x => x.ProcessTransactionId == processid && x.Clarified == true).ToList();
                                                if (procesdetail.Count > 0)
                                                {
                                                    context.tblProcessTransactionDetail.RemoveRange(procesdetail);
                                                    context.tblProcessTransaction.Remove(processtrans);
                                                    context.SaveChanges();
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                    else if (mastQuery.AppointmentType == 3)
                                    {
                                        var osgQuery = context.tblRCTOutsourcing.FirstOrDefault(x => x.OSGID == appid);
                                        if (osgQuery != null)
                                        {
                                            osgQuery.Status = "Cancel";
                                            osgQuery.UptdTs = DateTime.Now;
                                            osgQuery.UptdUser = logging_user;
                                            context.SaveChanges();
                                            #region Remove Processtransaction
                                            string appno = osgQuery.ApplicationNumber;
                                            var processtrans = context.tblProcessTransaction.Where(x => x.RefNumber == appno && x.Closed_F != true).FirstOrDefault();
                                            if (processtrans != null)
                                            {
                                                int processid = processtrans.ProcessTransactionId;
                                                var procesdetail = context.tblProcessTransactionDetail.Where(x => x.ProcessTransactionId == processid && x.Clarified == true).ToList();
                                                if (procesdetail.Count > 0)
                                                {
                                                    context.tblProcessTransactionDetail.RemoveRange(procesdetail);
                                                    context.tblProcessTransaction.Remove(processtrans);
                                                    context.SaveChanges();
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                }

                                var canQuery = (from l in context.tblRCTCancelApplicationLog
                                                where l.ApplicationId == mastQuery.ApplicationId && l.AppointmentType == mastQuery.AppointmentType
                                                && (l.OrderId == orderid || orderid == null)
                                                select l).FirstOrDefault();
                                if (canQuery != null)
                                {
                                    canQuery.UptTs = DateTime.Now;
                                    canQuery.UptUser = logging_user;
                                    context.SaveChanges();
                                }
                                transaction.Commit();


                                if (orderid > 0)
                                    PostOrderStatusLog(orderid ?? 0, "Cancellation Initiated", "Cancel", logging_user);
                                else if (apptype == "STE")
                                    PostSTEStatusLog(mastQuery.ApplicationId ?? 0, "Cancellation Initiated", "Cancel", logging_user);
                                else if (apptype == "OSG")
                                    PostOSGStatusLog(mastQuery.ApplicationId ?? 0, "Cancellation Initiated", "Cancel", logging_user);
                                else if (apptype == "CON")
                                    PostCONStatusLog(mastQuery.ApplicationId ?? 0, "Cancellation Initiated", "Cancel", logging_user);

                                RCTEmailContentService.SendMailForCancelApp(appid, apptype, logging_user, false, orderid);
                                string[] expstatus = new string[] { "Completed", "Awaiting Verification", "Verification Completed" };

                                if (apptype == "OSG" && canQuery != null && expstatus.Contains(canQuery.PreStatus))
                                    RCTEmailContentService.SendVendorCancellationMail(appid, logging_user, false, orderid);
                                return 1;
                            }
                            else
                            {
                                int apptypeId = getAppointmentType(apptype);
                                var canQuery = (from l in context.tblRCTCancelApplicationLog
                                                where l.ApplicationId == appid && l.AppointmentType == apptypeId && l.UptUser != null
                                                select l).FirstOrDefault();
                                if (canQuery != null)
                                    return -1;
                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            ErrorHandler WriteLog = new ErrorHandler();
                            WriteLog.SendErrorToText(ex);
                            return 0;
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return res;
            }
        }

        public static int RequestCancelApplications(int appid, string appcategory, int? orderid, string cancelreason, string attachment, int UserId)
        {
            int res = 0;
            string prestatus = string.Empty, newstatus = string.Empty;
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    using (var transaction = IOAScontext.Database.BeginTransaction())
                    {
                        try
                        {
                            string[] exptype = new string[] { "New", "Change of project", "Enhancement", "Extension" };

                            var mastQuery = (from S in IOAScontext.vw_RCTOverAllApplicationEntry
                                             where S.Status != "Cancel" && S.Status != "Cancellation Initiated" && exptype.Contains(S.ApplicationType)
                                             && S.ApplicationId == appid && S.Category == appcategory && (S.OrderId == orderid || orderid == null)
                                             select S).FirstOrDefault();
                            if (mastQuery != null)
                            {
                                if (mastQuery.OrderId > 0)
                                {
                                    var odrQuery = IOAScontext.tblOrder.Where(x => x.OrderId == mastQuery.OrderId).FirstOrDefault();
                                    if (odrQuery != null)
                                    {
                                        prestatus = odrQuery.Status;
                                        odrQuery.Status = odrQuery.Status == "Note to PI" ? "Cancel" : "Cancellation Initiated";
                                        res = odrQuery.Status == "Note to PI" ? 1 : 2;
                                        newstatus = odrQuery.Status;
                                        odrQuery.UpdtUser = UserId;
                                        odrQuery.UpdtTS = DateTime.Now;
                                        IOAScontext.SaveChanges();
                                    }
                                }
                                else
                                {
                                    if (mastQuery.AppointmentType == 1)
                                    {
                                        var conQuery = IOAScontext.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == mastQuery.ApplicationId).FirstOrDefault();
                                        if (conQuery != null)
                                        {
                                            prestatus = conQuery.Status;
                                            conQuery.Status = (conQuery.Status == "Draft" || conQuery.Status == "Note to PI") ? "Cancel" : "Cancellation Initiated";
                                            res = (conQuery.Status == "Draft" || conQuery.Status == "Note to PI") ? 1 : 2;
                                            newstatus = conQuery.Status;
                                            conQuery.UptdUser = UserId;
                                            conQuery.UptdTs = DateTime.Now;
                                            conQuery.ReasonForCancel = cancelreason;
                                            IOAScontext.SaveChanges();
                                        }
                                    }
                                    else if (mastQuery.AppointmentType == 2)
                                    {
                                        var steQuery = IOAScontext.tblRCTSTE.Where(x => x.STEID == mastQuery.ApplicationId).FirstOrDefault();
                                        if (steQuery != null)
                                        {
                                            prestatus = steQuery.Status;
                                            steQuery.Status = (steQuery.Status == "Draft" || steQuery.Status == "Note to PI") ? "Cancel" : "Cancellation Initiated";
                                            res = (steQuery.Status == "Draft" || steQuery.Status == "Note to PI") ? 1 : 2;
                                            newstatus = steQuery.Status;
                                            steQuery.UptdUser = UserId;
                                            steQuery.UptdTs = DateTime.Now;
                                            steQuery.CanceledReason = cancelreason;
                                            IOAScontext.SaveChanges();
                                        }
                                    }
                                    else if (mastQuery.AppointmentType == 3)
                                    {
                                        var osgQuery = IOAScontext.tblRCTOutsourcing.Where(x => x.OSGID == mastQuery.ApplicationId).FirstOrDefault();
                                        if (osgQuery != null)
                                        {
                                            prestatus = osgQuery.Status;
                                            osgQuery.Status = (osgQuery.Status == "Draft" || osgQuery.Status == "Note to PI") ? "Cancel" : "Cancellation Initiated";
                                            res = (osgQuery.Status == "Draft" || osgQuery.Status == "Note to PI") ? 1 : 2;
                                            newstatus = osgQuery.Status;
                                            osgQuery.UptdUser = UserId;
                                            osgQuery.UptdTs = DateTime.Now;
                                            osgQuery.CanceledReason = cancelreason;
                                            IOAScontext.SaveChanges();
                                        }
                                    }
                                }

                                tblRCTCancelApplicationLog log = new tblRCTCancelApplicationLog();
                                log.ApplicationId = mastQuery.ApplicationId;
                                log.AppointmentType = mastQuery.AppointmentType;
                                log.CancelReason = cancelreason;
                                log.CancelDocument = attachment;
                                log.CrtTs = DateTime.Now;
                                log.CrtUser = UserId;
                                log.PreStatus = prestatus;
                                if (res == 1)
                                {
                                    log.UptTs = DateTime.Now;
                                    log.UptUser = UserId;
                                }
                                if (mastQuery.OrderId > 0)
                                    log.OrderId = mastQuery.OrderId ?? 0;
                                IOAScontext.tblRCTCancelApplicationLog.Add(log);
                                IOAScontext.SaveChanges();
                                transaction.Commit();

                                if (mastQuery.OrderId > 0)
                                    PostOrderStatusLog(mastQuery.OrderId ?? 0, prestatus, newstatus, UserId);
                                else if (mastQuery.AppointmentType == 2)
                                    PostSTEStatusLog(mastQuery.ApplicationId ?? 0, prestatus, newstatus, UserId);
                                else if (mastQuery.AppointmentType == 3)
                                    PostOSGStatusLog(mastQuery.ApplicationId ?? 0, prestatus, newstatus, UserId);
                                else if (mastQuery.AppointmentType == 1)
                                    PostCONStatusLog(mastQuery.ApplicationId ?? 0, prestatus, newstatus, UserId);

                                if (res == 1)
                                {
                                    //RCTEmailContentService.SendMailForCancelApp(appid, appcategory, UserId, false, mastQuery.OrderId);
                                    //if (appcategory == "OSG")
                                    //    RCTEmailContentService.SendVendorCancellationMail(appid, UserId, false, orderid);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            ErrorHandler WriteLog = new ErrorHandler();
                            WriteLog.SendErrorToText(ex);
                            return 0;
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return res;
            }
        }

        public static string GetCancelReson(int STEID)
        {
            string Remarks = "";
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var QryRemarks = (from C in IOAScontext.tblRCTSTE
                                      where C.STEID == STEID && C.Status == "Cancel"
                                      select C.CanceledReason).FirstOrDefault();
                    if (QryRemarks != null)
                        Remarks = QryRemarks;
                }
                return Remarks;
            }
            catch (Exception ex)
            {
                return Remarks;
            }
        }

        public static ApplicationSearchListModel GetCancelRequestList(ApplicationSearchListModel model, int page, int pageSize)
        {
            ApplicationSearchListModel appseamodel = new ApplicationSearchListModel();
            List<ApplicationListModel> list = new List<ApplicationListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {

                    var prequery = (from vw in context.vw_RCTOverAllApplicationEntry
                                    where vw.Status == "Cancellation Initiated"
                                    orderby vw.ApplicationId descending
                                    select new ApplicationListModel()
                                    {
                                        ApplicationId = vw.ApplicationId,
                                        ApplicationNumber = vw.ApplicationNo,
                                        OrderId = vw.OrderId,
                                        Category = vw.Category,
                                        CondidateName = vw.CandidateName,
                                        ApplicationType = vw.ApplicationType,
                                        PIName = vw.PIName,
                                        Email = vw.PIEmail,
                                        Status = vw.Status,
                                    });
                    var predicate = PredicateBuilder.BaseAnd<ApplicationListModel>();
                    if (!string.IsNullOrEmpty(model.ApplicationNo))
                        predicate = predicate.And(d => d.ApplicationNumber.Contains(model.ApplicationNo));
                    if (!string.IsNullOrEmpty(model.Category))
                        predicate = predicate.And(d => d.Category.Contains(model.Category));
                    if (!string.IsNullOrEmpty(model.CondidateName))
                        predicate = predicate.And(d => d.CondidateName.Contains(model.CondidateName));
                    if (!string.IsNullOrEmpty(model.PIName))
                        predicate = predicate.And(d => d.PIName.Contains(model.PIName));
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status.Contains(model.Status));
                    if (!string.IsNullOrEmpty(model.PIEmail))
                        predicate = predicate.And(d => d.Email.Contains(model.PIEmail));
                    if (!string.IsNullOrEmpty(model.ApplicationType))
                        predicate = predicate.And(d => d.ApplicationType.Contains(model.ApplicationType));

                    appseamodel.TotalRecords = prequery.Where(predicate).Count();
                    list = prequery.Where(predicate)
                         .OrderByDescending(m => m.ApplicationId).AsEnumerable().Select((x, index) => new ApplicationListModel()
                         {
                             SNo = index + 1,
                             ApplicationId = x.ApplicationId,
                             ApplicationNumber = x.ApplicationNumber,
                             OrderId = x.OrderId,
                             Category = x.Category,
                             CondidateName = x.CondidateName,
                             ApplicationType = x.ApplicationType,
                             PIName = x.PIName,
                             Email = x.Email,
                             Status = x.Status,
                         }).Skip(skiprec).Take(pageSize).ToList();
                }
                appseamodel.ApplicationList = list;
                return appseamodel;
            }
            catch (Exception ex)
            {
                return appseamodel;
            }
        }

        public static SearchVerificationList GetCancelList(SearchVerificationList model, int page, int pageSize, int UserId, int RoleId)
        {
            SearchVerificationList AppCancel = new SearchVerificationList();
            List<ApplicationListModel> list = new List<ApplicationListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var Prequery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    join prj in context.tblProject on vw.ProjectId equals prj.ProjectId
                                    orderby vw.ApplicationId descending
                                    where vw.Status == "Cancel" && vw.ApplicationType == "New" && (vw.isEmployee == false || vw.isEmployee == null)
                                    select new ApplicationListModel()
                                    {
                                        ApplicationId = vw.ApplicationId,
                                        ApplicationNumber = vw.ApplicationNo,
                                        Category = vw.Category,
                                        CondidateName = vw.CandidateName,
                                        PIName = vw.PIName,
                                        Email = vw.PIEmail,
                                        Status = vw.Status,
                                        ProjectNumber = prj.ProjectNumber,
                                        Designation = vw.PostRecommended,
                                        UserId = vw.crtdUserId,
                                        RoleId = vw.UserRoleId
                                    });
                    var predicate = PredicateBuilder.BaseAnd<ApplicationListModel>();
                    if (!string.IsNullOrEmpty(model.CondidateName))
                        predicate = predicate.And(d => d.CondidateName.Contains(model.CondidateName) || d.Designation.Contains(model.CondidateName));
                    if (!string.IsNullOrEmpty(model.ApplicationNo))
                        predicate = predicate.And(d => d.ApplicationNumber.Contains(model.ApplicationNo));
                    if (!string.IsNullOrEmpty(model.PIName))
                        predicate = predicate.And(d => d.PIName.Contains(model.PIName) || d.ProjectNumber.Contains(model.PIName));
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status.Contains(model.Status));
                    //if (RoleId == 89 && UserId > 0) //STEDAEntry
                    //    predicate = predicate.And(d => d.UserId == UserId);
                    //if (RoleId == 90 && UserId > 0) //STEDAVerfication
                    //    predicate = predicate.And(d => d.Category == "STE");
                    //if (RoleId == 93 && UserId > 0) //CONDAEntry
                    //    predicate = predicate.And(d => d.UserId == UserId);
                    //if (RoleId == 94 && UserId > 0) //CONDAVerfication
                    //    predicate = predicate.And(d => d.Category == "CON");
                    //if (RoleId == 97 && UserId > 0) //OSGDAEntry
                    //    predicate = predicate.And(d => d.UserId == UserId);
                    //if (RoleId == 98 && UserId > 0) //OSGDAVerfication
                    //    predicate = predicate.And(d => d.Category == "OSG");
                    var query = Prequery.Where(predicate).OrderByDescending(m => m.ApplicationId).Skip(skiprec).Take(pageSize).ToList();
                    AppCancel.TotalRecords = Prequery.Where(predicate).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new ApplicationListModel()
                            {
                                SNo = sno + i,
                                ApplicationId = query[i].ApplicationId,
                                ApplicationNumber = query[i].ApplicationNumber,
                                Category = query[i].Category,
                                CondidateName = query[i].CondidateName,
                                PIName = query[i].PIName,
                                Email = query[i].Email,
                                Status = query[i].Status,
                                ProjectNumber = query[i].ProjectNumber,
                                Designation = query[i].Designation,
                                UserId = query[i].UserId,
                                RoleId = query[i].RoleId
                            });

                        }
                    }
                }
                AppCancel.VerfList = list;
                return AppCancel;
            }
            catch (Exception ex)
            {
                return AppCancel;
            }
        }

        #endregion

        #region EmployeeMaster Lists

        public SearchEmployeeModel GetEmployeeList(SearchEmployeeModel model, int page, int pageSize, DateFilterModel DateOfBirth, DateFilterModel DateOfJoining, int UserId, int RoleId)
        {
            try
            {
                SearchEmployeeModel list = new SearchEmployeeModel();
                List<EmployeeMaster> EmployeeList = new List<EmployeeMaster>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var prequery = (from b in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    from p in context.tblProject
                                    where b.isEmployee == true && b.ProjectId == p.ProjectId && b.Status == "Verification Completed"
                                     && b.ApplicationType == "New" && b.IsActiveNow == true
                                    orderby b.EmployeersID descending
                                    select new EmployeeMaster()
                                    {
                                        ID = b.ApplicationId ?? 0,
                                        TypeCodeID = b.AppointmentType ?? 0,
                                        EmployeeId = b.EmployeersID,
                                        CategoryName = b.Category,
                                        ApplicationNumber = b.ApplicationNo,
                                        Name = b.CandidateName,
                                        DateofBirth = b.DateofBirth ?? DateTime.Now,
                                        DateofJoining = b.ActualDate ?? DateTime.Now,
                                        Email = b.Email,
                                        ContactNumber = b.ContactNumber,
                                        ProjectNumber = p.ProjectNumber,
                                        Status = b.Status,
                                        gender = b.Sex ?? 0,
                                        DesignationName = b.PostRecommended,
                                        TypeOfAppointment = b.TypeofAppointmentinInt ?? 0,
                                        CSIRStaffMode = b.CSIRStaffPayMode ?? 0,
                                        RoleId = b.UserRoleId,
                                        UserId = b.crtdUserId,
                                        RequestRelieving = context.vw_RCTOverAllApplicationEntry.Any(m => m.ApplicationId == b.ApplicationId && m.Category == b.Category && m.ApplicationType == "Relieving" && m.Status != "Rejected" && m.Status != "Cancel"),
                                        PaymentThroughAgency = b.Category == "STE" ? (from s in context.tblRCTSTE
                                                                                      where s.CSIRStaffPayMode == 2 && s.STEID == b.ApplicationId
                                                                                      select s).Any() : false,
                                        isHRABooking = (from s in context.vw_RCTOverAllApplicationEntry
                                                        from d in context.tblRCTDesignation
                                                        where s.DesignationId == d.DesignationId && s.ApplicationId == b.ApplicationId
                                                        && s.Category == b.Category && s.ApplicationType == "New"
                                                        && d.HRA == true && (s.HRA == null || s.HRA == 0)
                                                        select s).Any(),
                                        isHRACancellation = context.vw_RCTOverAllApplicationEntry.Any(m => m.ApplicationId == b.ApplicationId && m.Category == b.Category && m.ApplicationType == "New" && m.HRA > 0),
                                        isMaternity = context.tblOrder.Any(m => m.AppointmentId == b.ApplicationId && m.OrderType == 9 && m.AppointmentType == b.AppointmentType && m.Status == "Open"),
                                        AppointmentStartDate = b.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<EmployeeMaster>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.DesignationName.Contains(model.SearchInName) || d.Email.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (DateOfBirth.@from != null && DateOfBirth.to != null)
                    {
                        DateOfBirth.to = DateOfBirth.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofBirth >= DateOfBirth.@from && d.DateofBirth <= DateOfBirth.to);
                    }
                    if (DateOfJoining.@from != null && DateOfJoining.to != null)
                    {
                        DateOfJoining.to = DateOfJoining.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofJoining >= DateOfJoining.@from && d.DateofJoining <= DateOfJoining.to);
                    }

                    if ((RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105) && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "STE");
                    else if (RoleId == 106 && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "STE" || d.CategoryName == "CON");
                    else if ((RoleId == 107 || RoleId == 108 || RoleId == 109) && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "OSG");
                    else if ((RoleId == 94 || RoleId == 93) && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "CON");

                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber));
                    var querylist = prequery.Where(predicate).OrderByDescending(m => m.ID).Skip(skiprec).Take(pageSize).ToList();
                    if (querylist != null)
                    {
                        if (querylist.Count > 0)
                        {
                            int sno = 0;
                            if (page == 1)
                            {
                                sno = 1;
                            }
                            else
                            {
                                sno = ((page - 1) * pageSize) + 1;
                            }
                            for (int i = 0; i < querylist.Count; i++)
                            {
                                EmployeeList.Add(new EmployeeMaster()
                                {
                                    SNo = sno + i,
                                    ID = querylist[i].ID,
                                    TypeCodeID = querylist[i].TypeCodeID,
                                    EmployeeId = querylist[i].EmployeeId,
                                    CategoryName = querylist[i].CategoryName,
                                    ApplicationNumber = querylist[i].ApplicationNumber,
                                    Name = querylist[i].Name,
                                    strDateofBirth = string.Format("{0:s}", querylist[i].DateofBirth),
                                    strDateofJoining = string.Format("{0:s}", querylist[i].DateofJoining),
                                    Email = querylist[i].Email,
                                    ContactNumber = querylist[i].ContactNumber,
                                    ProjectNumber = querylist[i].ProjectNumber,
                                    Status = querylist[i].Status,
                                    gender = querylist[i].gender,
                                    isHRABooking = querylist[i].isHRABooking,
                                    isHRACancellation = querylist[i].isHRACancellation,
                                    isMaternity = querylist[i].isMaternity,
                                    DesignationName = querylist[i].DesignationName,
                                    PaymentThroughAgency = querylist[i].PaymentThroughAgency,
                                    TypeOfAppointment = querylist[i].TypeOfAppointment,
                                    RequestRelieving = querylist[i].RequestRelieving,
                                    RoleId = RoleId,
                                    UserId = UserId,
                                    Cancel_f = IsCancelAppointment(querylist[i].AppointmentStartDate, querylist[i].Status, querylist[i].ID, querylist[i].CategoryName)

                                });
                            }
                        }
                    }
                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                SearchEmployeeModel list = new SearchEmployeeModel();
                return list;
            }
        }

        //public SearchOrderModel GetRelievingList(int page, int pageSize, SearchOrderModel model, int RoleId, DateFilterModel EmployeeDateofBirth)
        //{
        //    try
        //    {
        //        SearchOrderModel list = new SearchOrderModel();
        //        List<OrderListModel> EmployeeList = new List<OrderListModel>();
        //        using (var context = new IOASDBEntities())
        //        {

        //            int skiprec = 0;
        //            if (page == 1)
        //                skiprec = 0;
        //            else
        //                skiprec = (page - 1) * pageSize;
        //            string CategoryName = null;
        //            if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
        //                CategoryName = "STE";
        //            else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
        //                CategoryName = "OSG";
        //            else if (RoleId == 94 || RoleId == 93)
        //                CategoryName = "CON";

        //            var prequery = (from vw in context.vw_RCTRelievedEmployees
        //                            where (vw.Category == CategoryName || CategoryName == null)
        //                            select new OrderListModel()
        //                            {
        //                                OrderID = vw.OrderId ?? 0,
        //                                ID = vw.ApplicationId ?? 0,
        //                                TypeCodeID = vw.AppointmentType ?? 0,
        //                                CategoryName = vw.Category,
        //                                EmployeeId = vw.EmployeersID,
        //                                ApplicationNumber = vw.ApplicationNo,
        //                                Name = vw.CandidateName,
        //                                PIName = vw.PIName == null ? "" : vw.PIName,
        //                                Status = vw.Status,
        //                                Designation = vw.PostRecommended == null ? "" : vw.PostRecommended,
        //                                RelievingType = vw.RelievingType,
        //                                isSubmittedNOC = vw.NOCDocSubmitted ?? false,
        //                                isGenarateRelieveOrder = vw.isGenarateRelieveOrder ?? false,
        //                                isGenarateFinalSettlement = vw.isGenarateFinalSettlement ?? false,
        //                                isGenarateServiceCertificate = vw.isGenarateServiceCertificate ?? false,
        //                                ProjectNumber = vw.ProjectNumber == null ? "" : vw.ProjectNumber,
        //                                TypeofAppointmentName = vw.TypeofAppointment,
        //                                DateofBirth = vw.DateofBirth,
        //                                EmployeeEmail = vw.Email
        //                            });
        //            var predicate = PredicateBuilder.BaseAnd<OrderListModel>();
        //            if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
        //                predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId) || d.TypeofAppointmentName.Contains(model.SearchInEmployeeId));
        //            if (!string.IsNullOrEmpty(model.SearchInName))
        //                predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName) || d.EmployeeEmail.Contains(model.SearchInName));
        //            if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
        //                predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber) || d.PIName.Contains(model.SearchInProjectNumber));
        //            if (!string.IsNullOrEmpty(model.SearchInStatus))
        //                predicate = predicate.And(d => d.Status.Contains(model.SearchInStatus));
        //            if (!string.IsNullOrEmpty(model.relievingType))
        //                predicate = predicate.And(d => d.RelievingType.Contains(model.relievingType));
        //            if (EmployeeDateofBirth.@from != null && EmployeeDateofBirth.to != null)
        //            {
        //                EmployeeDateofBirth.to = EmployeeDateofBirth.to.Value.Date.AddDays(1).AddTicks(-2);
        //                predicate = predicate.And(d => d.DateofBirth >= EmployeeDateofBirth.@from && d.DateofBirth <= EmployeeDateofBirth.to);
        //            }
        //            var querylist = prequery.OrderByDescending(m => m.OrderID).Skip(skiprec).Take(pageSize).ToList();
        //            //var querylist = prequery.Where(predicate).OrderByDescending(m => m.OrderID).Skip(skiprec).Take(pageSize).ToList();
        //            if (querylist.Count > 0)
        //            {
        //                int sno = 0;
        //                if (page == 1)
        //                    sno = 1;
        //                else
        //                    sno = (page - 1) * pageSize + 1;
        //                for (int i = 0; i < querylist.Count; i++)
        //                {
        //                    int OrderID = querylist[i].OrderID;
        //                    string SendMailType = string.Empty;
        //                    string Status = querylist[i].Status;
        //                    if (Status == "Open" && querylist[i].CategoryName == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
        //                        SendMailType = "Send Relieve Order";
        //                    else if (Status == "Open" && querylist[i].CategoryName == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
        //                        SendMailType = "Send Relieve Order";
        //                    else if (Status == "Open" && querylist[i].CategoryName == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
        //                        SendMailType = "Send Relieve Order";
        //                    else if (Status == "Completed" && querylist[i].RelievingType != "Termination" && ((querylist[i].CategoryName == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0) || (querylist[i].CategoryName == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0) || (querylist[i].CategoryName == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)))
        //                        SendMailType = "Send Relieve Order / Service Certificate";
        //                    else if (Status == "Completed" && querylist[i].RelievingType != "Termination" && ((querylist[i].CategoryName == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1) || (querylist[i].CategoryName == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1) || (querylist[i].CategoryName == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1)) && context.tblRCTOfferDetails.Any(x => x.OrderId == OrderID && x.isSend != true))
        //                        SendMailType = "Send Service Certificate";

        //                    EmployeeList.Add(new OrderListModel()
        //                    {
        //                        SNo = sno + i,
        //                        OrderID = querylist[i].OrderID,
        //                        ID = querylist[i].ID,
        //                        TypeCodeID = querylist[i].TypeCodeID,
        //                        CategoryName = querylist[i].CategoryName,
        //                        EmployeeId = querylist[i].EmployeeId,
        //                        ApplicationNumber = querylist[i].ApplicationNumber,
        //                        Name = querylist[i].Name,
        //                        PIName = querylist[i].PIName,
        //                        Status = querylist[i].Status,
        //                        Designation = querylist[i].Designation,
        //                        RelievingType = querylist[i].RelievingType,
        //                        isSubmittedNOC = querylist[i].isSubmittedNOC,
        //                        isGenarateRelieveOrder = querylist[i].isGenarateRelieveOrder,
        //                        isGenarateFinalSettlement = querylist[i].isGenarateFinalSettlement,
        //                        isGenarateServiceCertificate = querylist[i].isGenarateServiceCertificate,
        //                        ProjectNumber = querylist[i].ProjectNumber,
        //                        SendMailType = SendMailType,
        //                        TypeofAppointmentName = querylist[i].TypeofAppointmentName,
        //                        EmployeeEmail = querylist[i].EmployeeEmail,
        //                        EmployeeDateofBirth = string.Format("{0:s}", querylist[i].DateofBirth),
        //                    });
        //                }
        //            }

        //            list.TotalRecords = prequery.Where(predicate).Count();
        //            list.List = EmployeeList;
        //        }
        //        return list;
        //    }
        //    catch (Exception ex)
        //    {
        //        SearchOrderModel list = new SearchOrderModel();
        //        return list;
        //    }
        //}

        public SearchOrderModel GetRelievingList(int page, int pageSize, SearchOrderModel model, int RoleId, DateFilterModel EmployeeDateofBirth)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> EmployeeList = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                        skiprec = 0;
                    else
                        skiprec = (page - 1) * pageSize;
                    string CategoryName = null;
                    if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                        CategoryName = "STE";
                    else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                        CategoryName = "OSG";
                    else if (RoleId == 94 || RoleId == 93)
                        CategoryName = "CON";
                    if (EmployeeDateofBirth.@from != null && EmployeeDateofBirth.to != null)
                    {
                        EmployeeDateofBirth.to = EmployeeDateofBirth.to.Value.Date.AddDays(1).AddTicks(-2);
                    }


                    var querylist = (from vw in context.vw_RCTRelievedEmployees.AsNoTracking()
                                     where (vw.Category == CategoryName || CategoryName == null)
                                      && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || string.IsNullOrEmpty(model.SearchInEmployeeId))
                                      && (vw.CandidateName.Contains(model.SearchInName) || string.IsNullOrEmpty(model.SearchInName))
                                      && (vw.ProjectNumber.Contains(model.SearchInProjectNumber) || string.IsNullOrEmpty(model.SearchInProjectNumber))
                                      && (vw.Status.Contains(model.SearchInStatus) || string.IsNullOrEmpty(model.SearchInStatus))
                                      && (vw.RelievingType.Contains(model.relievingType) || string.IsNullOrEmpty(model.relievingType))
                                      && ((vw.DateofBirth >= EmployeeDateofBirth.@from && vw.DateofBirth <= EmployeeDateofBirth.to) || (EmployeeDateofBirth.@from == null || EmployeeDateofBirth.to == null))
                                     orderby vw.OrderId descending
                                     select new
                                     {
                                         vw.OrderId,
                                         vw.ApplicationId,
                                         vw.AppointmentType,
                                         vw.Category,
                                         vw.EmployeersID,
                                         vw.ApplicationNo,
                                         vw.CandidateName,
                                         vw.PIName,
                                         vw.Status,
                                         vw.PostRecommended,
                                         vw.RelievingType,
                                         vw.NOCDocSubmitted,
                                         vw.isGenarateRelieveOrder,
                                         vw.isGenarateFinalSettlement,
                                         vw.isGenarateServiceCertificate,
                                         vw.ProjectNumber,
                                         vw.TypeofAppointment,
                                         vw.DateofBirth,
                                         vw.Email,
                                         vw.InitByPI_f
                                     }).Skip(skiprec).Take(pageSize).ToList();
                    //var querylist = (from vw in context.vw_RCTRelievedEmployees
                    //                 where (vw.Category == CategoryName || CategoryName == null)
                    //                  && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || string.IsNullOrEmpty(model.SearchInEmployeeId))
                    //                  && (vw.CandidateName.Contains(model.SearchInName) || string.IsNullOrEmpty(model.SearchInName))
                    //                  && (vw.ProjectNumber.Contains(model.SearchInProjectNumber) || string.IsNullOrEmpty(model.SearchInProjectNumber))
                    //                  && (vw.Status.Contains(model.SearchInStatus) || string.IsNullOrEmpty(model.SearchInStatus))
                    //                  && (vw.RelievingType.Contains(model.relievingType) || string.IsNullOrEmpty(model.relievingType))
                    //                  && ((vw.DateofBirth >= EmployeeDateofBirth.@from && vw.DateofBirth <= EmployeeDateofBirth.to) || (EmployeeDateofBirth.@from == null || EmployeeDateofBirth.to == null))
                    //                 orderby vw.OrderId descending
                    //                 select new
                    //                 {
                    //                     OrderID = vw.OrderId ?? 0,
                    //                     ID = vw.ApplicationId ?? 0,
                    //                     TypeCodeID = vw.AppointmentType ?? 0,
                    //                     CategoryName = vw.Category,
                    //                     EmployeeId = vw.EmployeersID,
                    //                     ApplicationNumber = vw.ApplicationNo,
                    //                     Name = vw.CandidateName,
                    //                     PIName = vw.PIName == null ? "" : vw.PIName,
                    //                     Status = vw.Status,
                    //                     Designation = vw.PostRecommended == null ? "" : vw.PostRecommended,
                    //                     RelievingType = vw.RelievingType,
                    //                     isSubmittedNOC = vw.NOCDocSubmitted ?? false,
                    //                     isGenarateRelieveOrder = vw.isGenarateRelieveOrder ?? false,
                    //                     isGenarateFinalSettlement = vw.isGenarateFinalSettlement ?? false,
                    //                     isGenarateServiceCertificate = vw.isGenarateServiceCertificate ?? false,
                    //                     ProjectNumber = vw.ProjectNumber == null ? "" : vw.ProjectNumber,
                    //                     TypeofAppointmentName = vw.TypeofAppointment,
                    //                     DateofBirth = vw.DateofBirth,
                    //                     EmployeeEmail = vw.Email
                    //                 }).Skip(skiprec).Take(pageSize).ToList();

                    if (querylist.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                            sno = 1;
                        else
                            sno = (page - 1) * pageSize + 1;
                        for (int i = 0; i < querylist.Count; i++)
                        {
                            int OrderID = querylist[i].OrderId;
                            string SendMailType = string.Empty;
                            string Status = querylist[i].Status;
                            if (Status == "Open" && querylist[i].Category == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
                                SendMailType = "Send Relieve Order";
                            else if (Status == "Open" && querylist[i].Category == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
                                SendMailType = "Send Relieve Order";
                            else if (Status == "Open" && querylist[i].Category == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
                                SendMailType = "Send Relieve Order";
                            else if (Status == "Completed" && querylist[i].RelievingType != "Termination" && ((querylist[i].Category == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0) || (querylist[i].Category == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0) || (querylist[i].Category == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)))
                                SendMailType = "Send Relieve Order / Service Certificate";
                            else if (Status == "Completed" && querylist[i].RelievingType != "Termination" && ((querylist[i].Category == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1) || (querylist[i].Category == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1) || (querylist[i].Category == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1)) && context.tblRCTOfferDetails.Any(x => x.OrderId == OrderID && x.isSend != true))
                                SendMailType = "Send Service Certificate";
                            EmployeeList.Add(new OrderListModel()
                            {
                                SNo = sno + i,
                                OrderID = querylist[i].OrderId,
                                ID = querylist[i].ApplicationId ?? 0,
                                TypeCodeID = querylist[i].AppointmentType ?? 0,
                                CategoryName = querylist[i].Category,
                                EmployeeId = querylist[i].EmployeersID,
                                ApplicationNumber = querylist[i].ApplicationNo,
                                Name = querylist[i].CandidateName,
                                PIName = querylist[i].PIName,
                                Status = querylist[i].Status,
                                Designation = querylist[i].PostRecommended,
                                RelievingType = querylist[i].RelievingType,
                                isSubmittedNOC = querylist[i].NOCDocSubmitted ?? false,
                                isGenarateRelieveOrder = querylist[i].isGenarateRelieveOrder ?? false,
                                isGenarateFinalSettlement = querylist[i].isGenarateFinalSettlement ?? false,
                                isGenarateServiceCertificate = querylist[i].isGenarateServiceCertificate ?? false,
                                ProjectNumber = querylist[i].ProjectNumber,
                                SendMailType = SendMailType,
                                TypeofAppointmentName = querylist[i].TypeofAppointment,
                                EmployeeEmail = querylist[i].Email,
                                EmployeeDateofBirth = string.Format("{0:s}", querylist[i].DateofBirth),
                                Is_InitByPI = querylist[i].InitByPI_f ?? false
                            });
                        }
                    }

                    list.TotalRecords = (from vw in context.vw_RCTRelievedEmployees.AsNoTracking()
                                         where (vw.Category == CategoryName || CategoryName == null)
                                          && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || string.IsNullOrEmpty(model.SearchInEmployeeId))
                                          && (vw.CandidateName.Contains(model.SearchInName) || string.IsNullOrEmpty(model.SearchInName))
                                          && (vw.ProjectNumber.Contains(model.SearchInProjectNumber) || string.IsNullOrEmpty(model.SearchInProjectNumber))
                                          && (vw.Status.Contains(model.SearchInStatus) || string.IsNullOrEmpty(model.SearchInStatus))
                                          && (vw.RelievingType.Contains(model.relievingType) || string.IsNullOrEmpty(model.relievingType))
                                          && ((vw.DateofBirth >= EmployeeDateofBirth.@from && vw.DateofBirth <= EmployeeDateofBirth.to) || (EmployeeDateofBirth.@from == null || EmployeeDateofBirth.to == null))
                                         orderby vw.OrderId descending
                                         select new
                                         { vw.CandidateName }).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }

        public SearchOrderModel GetLOPSPList(int page, int pageSize, SearchOrderModel model, int RoleId)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> EmployeeList = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    int[] ids = { 7, 8 };
                    var prequery = (from b in context.tblOrder
                                    from od in context.tblOrderDetail
                                    from c in context.tblCodeControl
                                    from p in context.tblProject
                                    from vw in context.vw_RCTOverAllApplicationEntry
                                    orderby b.OrderId descending
                                    where ids.Contains(b.OrderType ?? 0) && b.OrderId == od.OrderId
                                    && b.AppointmentId == vw.ApplicationId && b.AppointmentType == vw.AppointmentType
                                    && vw.ApplicationType == "New" && vw.ProjectId == p.ProjectId
                                     && c.CodeName == "PaymentType" && c.CodeValAbbr == b.OrderType
                                    select new OrderListModel()
                                    {
                                        ID = vw.ApplicationId ?? 0,
                                        TypeCodeID = vw.AppointmentType ?? 0,
                                        CategoryName = vw.Category,
                                        EmployeeId = vw.EmployeersID,
                                        ApplicationNumber = vw.ApplicationNo,
                                        Name = vw.CandidateName,
                                        ProjectNumber = p.ProjectNumber,
                                        Status = b.Status,
                                        Designation = vw.PostRecommended,
                                        OrderID = b.OrderId,
                                        AppointmentStartdate = b.FromDate,
                                        AppointmentEnddate = b.ToDate,
                                        PIName = vw.PIName,
                                        CodevalId = c.CodeValAbbr,
                                        Salary = vw.BasicPay ?? 0,
                                        TypeCategory = c.CodeValDetail,
                                        MaternityOrderID = b.MeternityOrderId ?? 0
                                    });
                    var predicate = PredicateBuilder.BaseAnd<OrderListModel>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.PIName.Contains(model.SearchInProjectNumber) || d.ProjectNumber.Contains(model.SearchInProjectNumber));
                    if (!string.IsNullOrEmpty(model.TypeCategory))
                        predicate = predicate.And(d => d.TypeCategory.Contains(model.TypeCategory));
                    if (!string.IsNullOrEmpty(model.SearchInStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchInStatus));

                    if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105)
                        predicate = predicate.And(d => d.CategoryName == "STE");
                    else if (RoleId == 106)
                        predicate = predicate.And(d => d.CategoryName == "STE" || d.CategoryName == "CON");
                    else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                        predicate = predicate.And(d => d.CategoryName == "OSG");
                    else if (RoleId == 94 || RoleId == 93)
                        predicate = predicate.And(d => d.CategoryName == "CON");

                    var QryEmployeeList = prequery.Where(predicate).OrderByDescending(m => m.ID).Skip(skiprec).Take(pageSize).ToList();
                    if (QryEmployeeList != null)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < QryEmployeeList.Count; i++)
                        {
                            var isLossofPay = QryEmployeeList[i].CodevalId == 8 ? true : false;
                            EmployeeList.Add(new OrderListModel()
                            {
                                SNo = sno + i,
                                ID = QryEmployeeList[i].ID,
                                TypeCodeID = QryEmployeeList[i].TypeCodeID,
                                CategoryName = QryEmployeeList[i].CategoryName,
                                EmployeeId = QryEmployeeList[i].EmployeeId,
                                ApplicationNumber = QryEmployeeList[i].ApplicationNumber,
                                Name = QryEmployeeList[i].Name,
                                ProjectNumber = QryEmployeeList[i].ProjectNumber,
                                Status = QryEmployeeList[i].Status,
                                Designation = QryEmployeeList[i].Designation,
                                TypeCategory = QryEmployeeList[i].TypeCategory,
                                Salary = QryEmployeeList[i].Salary,
                                isLossOfPay = isLossofPay,
                                OrderID = QryEmployeeList[i].OrderID,
                                PIName = QryEmployeeList[i].PIName,
                                MaternityOrderID = QryEmployeeList[i].MaternityOrderID
                            });
                        }
                    }
                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }

        public SearchOrderModel GetMaternityList(int page, int pageSize, SearchOrderModel model, DateFilterModel From, DateFilterModel To, int RoleId)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> EmployeeList = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    int[] ids = { 7, 8 };

                    var CategoryName = "";
                    if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                        CategoryName = "STE";
                    else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                        CategoryName = "OSG";
                    else if (RoleId == 94 || RoleId == 93)
                        CategoryName = "CON";

                    var prequery = (from b in context.tblOrder
                                    from od in context.tblOrderDetail
                                    from p in context.tblProject
                                    from vw in context.vw_RCTOverAllApplicationEntry
                                    orderby b.OrderId descending
                                    where vw.ProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId && (CategoryName == "" || vw.Category == CategoryName)
                                    && vw.ApplicationType == "New" && b.AppointmentType == vw.AppointmentType && b.OrderType == 10 && b.OrderId == od.OrderId
                                    select new OrderListModel()
                                    {
                                        ID = vw.ApplicationId ?? 0,
                                        TypeCodeID = vw.AppointmentType ?? 0,
                                        CategoryName = vw.Category,
                                        EmployeeId = vw.EmployeersID,
                                        ApplicationNumber = vw.ApplicationNo,
                                        Name = vw.CandidateName,
                                        ProjectNumber = p.ProjectNumber,
                                        Status = b.Status,
                                        Designation = vw.PostRecommended,
                                        OrderID = b.OrderId,
                                        AppointmentStartdate = b.FromDate,
                                        AppointmentEnddate = b.ToDate,
                                        PIName = vw.PIName,
                                        Is_Clarified = b.Is_Clarify
                                    });
                    var predicate = PredicateBuilder.BaseAnd<OrderListModel>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (From.@from != null && From.to != null)
                    {
                        From.to = From.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.AppointmentStartdate >= From.@from && d.AppointmentStartdate <= From.to);
                    }
                    if (To.@from != null && To.to != null)
                    {
                        To.@from = To.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.AppointmentEnddate >= To.@from && d.AppointmentEnddate <= To.to);
                    }
                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber) || d.PIName.Contains(model.SearchInProjectNumber));
                    if (!string.IsNullOrEmpty(model.SearchInStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchInStatus));
                    var QryEmployeeList = prequery.Where(predicate).OrderByDescending(m => m.ID).Skip(skiprec).Take(pageSize).ToList();
                    if (QryEmployeeList != null)
                    {
                        for (int i = 0; i < QryEmployeeList.Count; i++)
                        {
                            EmployeeList.Add(new OrderListModel()
                            {
                                SNo = i + 1,
                                ID = QryEmployeeList[i].ID,
                                TypeCodeID = QryEmployeeList[i].TypeCodeID,
                                CategoryName = QryEmployeeList[i].CategoryName,
                                EmployeeId = QryEmployeeList[i].EmployeeId,
                                ApplicationNumber = QryEmployeeList[i].ApplicationNumber,
                                Name = QryEmployeeList[i].Name,
                                ProjectNumber = QryEmployeeList[i].ProjectNumber,
                                Status = QryEmployeeList[i].Status,
                                Designation = QryEmployeeList[i].Designation,
                                OrderID = QryEmployeeList[i].OrderID,
                                FromDate = string.Format("{0:s}", QryEmployeeList[i].AppointmentStartdate),
                                ToDate = string.Format("{0:s}", QryEmployeeList[i].AppointmentEnddate),
                                PIName = QryEmployeeList[i].PIName,
                                Is_Clarified = QryEmployeeList[i].Is_Clarified
                            });
                        }
                    }

                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }

        public SearchOrderModel GetHRAList(int page, int pageSize, SearchOrderModel model, int RoleId)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> EmployeeList = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    int[] ids = { 5, 6 };
                    var CategoryName = "";
                    if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                        CategoryName = "STE";
                    else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                        CategoryName = "OSG";
                    else if (RoleId == 94 || RoleId == 93)
                        CategoryName = "CON";

                    var QryEmployeeList = (from b in context.tblOrder
                                           from od in context.tblOrderDetail
                                           from p in context.tblProject
                                           from vw in context.vw_RCTOverAllApplicationEntry
                                           orderby b.OrderId descending
                                           where vw.ApplicationType == "New" && vw.ProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId
                                           && b.AppointmentType == vw.AppointmentType && ids.Contains(b.OrderType ?? 0) && b.OrderId == od.OrderId
                                           && (vw.CandidateName.Contains(model.SearchInName) || model.SearchInName == null) && (CategoryName == "" || vw.Category == CategoryName)
                                           && (vw.Category.Contains(model.SearchInCategory) || model.SearchInCategory == null)
                                           && (vw.PostRecommended.Contains(model.SearchInDesignation) || model.SearchInDesignation == null)
                                           && (p.ProjectNumber.Contains(model.SearchInProjectNumber) || model.SearchInProjectNumber == null)
                                           && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || model.SearchInEmployeeId == null)
                                           && (b.Status.Contains(model.SearchInStatus) || model.SearchInStatus == null)
                                           &&(vw.BasicPay==model.SearchBasicAmount||model.SearchBasicAmount==null)
                                           select new
                                           {
                                               vw.CandidateName,
                                               vw.ApplicationId,
                                               vw.ApplicationNo,
                                               vw.EmployeersID,
                                               vw.PostRecommended,
                                               vw.Category,
                                               vw.AppointmentType,
                                               vw.PIName,
                                               p.ProjectNumber,
                                               od.RelievingMode,
                                               od.NOCDocSubmitted,
                                               od.RelievingOrderGenerate,
                                               b.Status,
                                               b.OrderId,
                                               b.OrderType,
                                               vw.BasicPay,
                                               b.isGovAgencyFund,
                                               b.isCommitmentReject
                                           }).Skip(skiprec).Take(pageSize).ToList();
                    if (QryEmployeeList != null)
                    {
                        for (int i = 0; i < QryEmployeeList.Count; i++)
                        {
                            string TypeCategory = "";
                            TypeCategory = QryEmployeeList[i].OrderType == 5 ? "HRA Booking" : QryEmployeeList[i].OrderType == 6 ? "HRA Cancellation" : "";
                            EmployeeList.Add(new OrderListModel()
                            {
                                SNo = i + 1,
                                ID = QryEmployeeList[i].ApplicationId ?? 0,
                                TypeCodeID = QryEmployeeList[i].AppointmentType ?? 0,
                                CategoryName = QryEmployeeList[i].Category,
                                EmployeeId = QryEmployeeList[i].EmployeersID,
                                ApplicationNumber = QryEmployeeList[i].ApplicationNo,
                                Name = QryEmployeeList[i].CandidateName,
                                ProjectNumber = QryEmployeeList[i].PIName + " (" + QryEmployeeList[i].ProjectNumber + ")",
                                Status = QryEmployeeList[i].Status,
                                Designation = QryEmployeeList[i].PostRecommended,
                                OrderID = QryEmployeeList[i].OrderId,
                                TypeCategory = TypeCategory,
                                Salary = QryEmployeeList[i].BasicPay ?? 0,
                                Is_GovAgency = QryEmployeeList[i].isGovAgencyFund,
                                Is_CommitmentReject = QryEmployeeList[i].isCommitmentReject,
                            });
                        }
                    }

                    list.TotalRecords = (from b in context.tblOrder
                                         from od in context.tblOrderDetail
                                         from p in context.tblProject
                                         from vw in context.vw_RCTOverAllApplicationEntry
                                         orderby b.OrderId descending
                                         where vw.ApplicationType == "New" && vw.ProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId
                                         && b.AppointmentType == vw.AppointmentType && ids.Contains(b.OrderType ?? 0) && b.OrderId == od.OrderId
                                         && (vw.CandidateName.Contains(model.SearchInName) || model.SearchInName == null) && (CategoryName == "" || vw.Category == CategoryName)
                                         && (vw.Category.Contains(model.SearchInCategory) || model.SearchInCategory == null)
                                         && (vw.PostRecommended.Contains(model.SearchInDesignation) || model.SearchInDesignation == null)
                                         && (p.ProjectNumber.Contains(model.SearchInProjectNumber) || model.SearchInProjectNumber == null)
                                         && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || model.SearchInEmployeeId == null)
                                         && (b.Status.Contains(model.SearchInStatus) || model.SearchInStatus == null)
                                         && (vw.BasicPay == model.SearchBasicAmount || model.SearchBasicAmount == null)
                                         select b).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }

        public static SearchChangeofProjectModel GetChangeofProject(SearchChangeofProjectModel model, int page, int pageSize, int RoleId)
        {
            SearchChangeofProjectModel seachmodel = new SearchChangeofProjectModel();
            List<ChangeofProjectListModel> list = new List<ChangeofProjectListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }

                var CategoryName = "";
                if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                    CategoryName = "STE";
                else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                    CategoryName = "OSG";
                else if (RoleId == 94 || RoleId == 93)
                    CategoryName = "CON";

                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblOrder
                                     //from od in context.tblOrderDetail
                                 from p in context.tblProject
                                 from vw in context.vw_RCTOverAllApplicationEntry
                                 orderby b.OrderId descending
                                 where b.NewProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId && b.OrderType == 1 && b.Status != "InActive"
                                 && vw.ApplicationType == "New" && b.AppointmentType == vw.AppointmentType && (vw.Category == CategoryName || CategoryName == "")
                                 && (vw.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                 && (vw.Category.Contains(model.Category) || model.Category == null)
                                 && (p.ProjectNumber.Contains(model.NewProjectNumber) || model.NewProjectNumber == null)
                                  && (vw.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                 && (b.Status.Contains(model.Status) || model.Status == null)
                                 select new
                                 {
                                     vw.CandidateName,
                                     b.OrderId,
                                     vw.EmployeeNo,
                                     p.ProjectNumber,
                                     b.Status,
                                     vw.Category,
                                     vw.ApplicationId,
                                     vw.ApplicationType
                                 }).Skip(skiprec).Take(pageSize).ToList();
                    seachmodel.TotalRecords = (from b in context.tblOrder
                                                   //from od in context.tblOrderDetail
                                               from p in context.tblProject
                                               from vw in context.vw_RCTOverAllApplicationEntry
                                               orderby b.OrderId descending
                                               where b.NewProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId && b.OrderType == 1 && b.Status != "InActive"
                                               && vw.ApplicationType == "New" && b.AppointmentType == vw.AppointmentType && (vw.Category == CategoryName || CategoryName == "")
                                               && (vw.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                               && (vw.Category.Contains(model.Category) || model.Category == null)
                                               && (p.ProjectNumber.Contains(model.NewProjectNumber) || model.NewProjectNumber == null)
                                               && (vw.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                               && (b.Status.Contains(model.Status) || model.Status == null)
                                               select new
                                               {
                                                   vw.CandidateName,
                                                   b.OrderId,
                                                   vw.EmployeeNo,
                                                   p.ProjectNumber,
                                                   b.Status,
                                                   vw.Category,
                                                   vw.ApplicationId,
                                                   vw.ApplicationType
                                               }).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            var SendOffer_f = false;
                            var OrderId = query[i].OrderId;
                            SendOffer_f = context.tblRCTOfferDetails.
                                  Where(x => x.OfferCategory == "OfferLetter" && x.OrderId == OrderId && x.isSend != true).Any();
                            list.Add(new ChangeofProjectListModel()
                            {
                                SNo = sno + i,
                                OrderId = query[i].OrderId,
                                EmployeeNo = query[i].EmployeeNo,
                                Category = query[i].Category,
                                EmployeeName = query[i].CandidateName,
                                NewProjectNumber = query[i].ProjectNumber,
                                Status = query[i].Status,
                                ApplicationId = query[i].ApplicationId ?? 0,
                                ApplicationCategory = query[i].ApplicationType,
                                SendOffer_f = SendOffer_f,
                            });
                        }
                    }
                    seachmodel.Changelist = list;
                }
                return seachmodel;
            }
            catch (Exception ex)
            {
                return seachmodel;
            }
        }

        #endregion

        #region Appointment Orders

        #region OrderVerification

        public STEVerificationModel GetOrderVerification(int OrderId)
        {
            STEVerificationModel model = new STEVerificationModel();
            try
            {
                using (var context = new IOASDBEntities())
                {

                    var odrQuery = (from O in context.tblOrder
                                    from Od in context.tblOrderDetail
                                    from vw in context.vw_RCTOverAllApplicationEntry
                                    where O.OrderId == Od.OrderId && O.OrderId == vw.OrderId && O.OrderId == OrderId
                                    select new { O, Od, vw }).FirstOrDefault();
                    if (odrQuery != null)
                    {
                        model.Status = odrQuery.O.Status;
                        string TypeCode = odrQuery.O.AppointmentType == 1 ? "CON" : odrQuery.O.AppointmentType == 2 ? "STE" : odrQuery.O.AppointmentType == 3 ? "OSG" : "";
                        model.OrderId = OrderId;
                        model.ApplicationType = TypeCode;
                        model.STEId = odrQuery.O.AppointmentId;
                        model.ApplicationNo = odrQuery.vw.EmployeersID;
                        model.Name = odrQuery.vw.ProfessionalType + " " + odrQuery.vw.CandidateName;
                        model.Designation = odrQuery.vw.PostRecommended;
                        model.DesignationId = odrQuery.vw.DesignationId;
                        model.Expericence = odrQuery.vw.Experience;
                        model.Qualification = odrQuery.vw.Qualification;
                        model.PayType = odrQuery.vw.ConsolidatedPay == true ? "Consolidated Pay" : odrQuery.vw.Fellowship == true ? "Fellowship pay" : "";
                        model.CommitmentAmount = odrQuery.O.CommitmentAmmount;
                        model.Salary = odrQuery.O.Basic ?? 0;
                        model.HRA = odrQuery.O.HRA ?? 0;
                        model.MedicalAmmount = odrQuery.O.MedicalAmount ?? 0;
                        model.Typeofappointment = odrQuery.vw.TypeofAppointment;
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", odrQuery.O.FromDate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", odrQuery.O.ToDate);
                        model.MsPhd = odrQuery.vw.isMsPhd ?? false;
                        model.PhdDetail = odrQuery.vw.PhdDetail;
                        var Category = odrQuery.O.AppointmentType == 1 ? "CON" : odrQuery.O.AppointmentType == 2 ? "STE" : odrQuery.O.AppointmentType == 3 ? "OSG" : "";
                        model.Expericence = Common.getExperienceInWordings(odrQuery.O.AppointmentId ?? 0, Category);
                        model.IITMExpericence = IITExperienceInWording(odrQuery.vw.EmployeersID);
                        if (odrQuery.O.AppointmentType == 1)
                        {
                            var query = context.tblRCTConsultantAppointment.FirstOrDefault(m => m.ConsultantAppointmentId == odrQuery.O.AppointmentId);
                            if (query != null)
                            {
                                model.StaffCategory = (query.IsICSRStafforProjectStaff ?? false) ? "ICSR Staff" : "Non ICSR Staff";
                                model.EmployeeWorkplace = query.EmployeeWorkplace;
                            }
                        }
                        else if (odrQuery.O.AppointmentType == 2)
                        {
                            var query = context.tblRCTSTE.FirstOrDefault(m => m.STEID == odrQuery.O.AppointmentId);
                            if (query != null)
                            {
                                model.StaffCategory = query.StaffCategory;
                                model.EmployeeWorkplace = query.EmployeeWorkplace;
                            }
                        }
                        else if (odrQuery.O.AppointmentType == 3)
                        {
                            var query = context.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == odrQuery.O.AppointmentId);
                            if (query != null)
                            {
                                model.StaffCategory = query.StaffCategory;
                                model.EmployeeWorkplace = query.EmployeeWorkplace;
                            }
                        }
                        model.ProjectId = odrQuery.vw.ProjectId;
                        model.ProjectNumber = Common.getprojectnumber(odrQuery.vw.ProjectId ?? 0);
                        model.OfferDate = string.Format("{0:dd-MMMM-yyyy}", odrQuery.Od.OfferDate);
                        model.Attachments = Common.GetCommiteeOfferletterDetails(odrQuery.O.AppointmentId ?? 0, TypeCode, odrQuery.O.OrderId);
                        model.JoiningReportPath = odrQuery.Od.JoiningReport;
                        if (odrQuery.Od.JoiningReport != null)
                        {
                            model.JoiningReportFileName = odrQuery.Od.JoiningReport.Substring(odrQuery.Od.JoiningReport.IndexOf("_") + 1);
                        }
                        model.VerificationRemarks = odrQuery.Od.VerificationRemarks;
                        if (odrQuery.Od.NotetoCMAdmin == true)
                            model.FlowApprover = "CMAdmin";
                        if (odrQuery.Od.NotetoDean == true)
                            model.FlowApprover = "NDean";
                        string CommitmentNumber = (from c in context.tblRCTCommitmentRequest
                                                   where c.OrderId == OrderId && (c.RequestType == "Add Commitment" || c.RequestType == "New Commitment" || c.RequestType == "Withdraw Commitment")
                                                   select c.CommitmentNumber).FirstOrDefault();
                        if (!string.IsNullOrEmpty(CommitmentNumber))
                            model.CommitmentNo = CommitmentNumber;
                        if (odrQuery.O.OrderType == 2)
                            model.CommitmentAmount = odrQuery.O.CommitmentAmmount;
                        else if (odrQuery.O.OrderType == 1)
                        {
                            if (odrQuery.Od.WithdrawCommitment == true)
                            {
                                model.isWithdraw = true;
                                model.CommitmentAmount = odrQuery.O.WithdrawAmmount;
                            }
                            else
                                model.CommitmentAmount = odrQuery.O.CommitmentAmmount;
                        }
                        model.RequestedfromPI = Common.GetPIName(odrQuery.O.RequestedBy ?? 0);
                        if (odrQuery.O.SalaryLevelId > 0)
                        {
                            var data = getSalaryLevelName_Description(odrQuery.O.SalaryLevelId ?? 0);
                            model.SalaryLevel = data.Item1;
                            model.SalaryLevelDescription = data.Item2;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public Tuple <int, int, string> UpdateVerificationOrder(STEVerificationModel model, int userId, string button)
        {
            int res = 0;
            string errMsg = string.Empty;
            int STEID = model.STEId ?? 0; //orderid = model.OrderId ?? 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    try
                    {
                        if (button == "Save as drafts")
                        {
                            var query = (from o in context.tblOrder
                                         from od in context.tblOrderDetail
                                         from vw in context.vw_RCTOverAllApplicationEntry /*o.Status == "Awaiting Verification" || o.Status == "Awaiting Verification-Draft" &&*/
                                         where  o.OrderId == model.OrderId
                                         && o.OrderId == od.OrderId && o.OrderId == vw.OrderId
                                         select new { od, o, vw }).FirstOrDefault();
                            if (query != null)
                            {
                                query.od.VerificationRemarks = model.VerificationRemarks;
                                if (model.JoiningReport != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.JoiningReport.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.JoiningReport.UploadFile("Requirement", docName);
                                    query.od.JoiningReport = docName;
                                }
                                query.o.UpdtTS = DateTime.Now;
                                query.o.UpdtUser = userId;
                                //query.o.Status = "Completed";
                                query.o.Status = "Awaiting Verification-Draft";

                                var orderid = query.o.OrderId;
                                query.od.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                query.od.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                //var Actualstartdate = query.o.FromDate;
                                query.o.ActualAppointmentStartDate = query.o.FromDate;
                                query.o.ActualAppointmentEndDate = query.o.ToDate;

                                if (query.o.AppointmentType == 1)
                                {
                                    var mastQuery = (from s in context.tblRCTConsultantAppointment
                                                     where s.ConsultantAppointmentId == query.o.AppointmentId
                                                     select s).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        mastQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                        mastQuery.UptdTs = DateTime.Now;
                                        mastQuery.UptdUser = userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if (query.o.AppointmentType == 2)
                                {
                                    var mastQuery = (from s in context.tblRCTSTE
                                                     where s.STEID == query.o.AppointmentId
                                                     select s).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        mastQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                        mastQuery.UptdTs = DateTime.Now;
                                        mastQuery.UptdUser = userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if (query.o.AppointmentType == 3)
                                {
                                    var mastQuery = (from s in context.tblRCTOutsourcing
                                                     where s.OSGID == query.o.AppointmentId
                                                     select s).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        mastQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                        mastQuery.UptdTs = DateTime.Now;
                                        mastQuery.UptdUser = userId;
                                        context.SaveChanges();
                                    }
                                }
                                context.SaveChanges();
                                //transaction.Commit();
                                
                                PostOrderStatusLog(orderid, "Awaiting Verification", "Awaiting Verification-Draft", userId);                              
                                res= 1;
                                return Tuple.Create(res, orderid, errMsg);
                            }
                        }
                        else
                        {
                            var query = (from o in context.tblOrder
                                         from od in context.tblOrderDetail
                                         from vw in context.vw_RCTOverAllApplicationEntry//o.Status == "Awaiting Verification" || o.Status == "Awaiting Verification-Draft" &&
                                         where o.OrderId == model.OrderId
                                         && o.OrderId == od.OrderId && o.OrderId == vw.OrderId
                                         select new { od, o, vw }).FirstOrDefault();
                            if (query != null)
                            {
                                string TypeCode = query.o.AppointmentType == 1 ? "CON" : query.o.AppointmentType == 2 ? "STE" : query.o.AppointmentType == 3 ? "OSG" : "";
                                query.od.VerificationRemarks = model.VerificationRemarks;
                                if (model.JoiningReport != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.JoiningReport.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.JoiningReport.UploadFile("Requirement", docName);
                                    query.od.JoiningReport = docName;
                                }
                                query.o.UpdtTS = DateTime.Now;
                                query.o.UpdtUser = userId;
                                //query.o.Status = "Completed";
                                //query.o.Status = "Sent for approval-Verify";
                                
                                //decimal WidthdrawAmmount = 0;
                                ////if employee late join withdraw late days amount
                                //if (query.o.FromDate < model.ActualDate && query.vw.CSIRStaffPayMode != 2)
                                //{
                                //    DateTime FromDate = query.o.FromDate ?? DateTime.Now;
                                //    DateTime ToDate = model.ActualDate ?? DateTime.Now;
                                //    if (query.o.OrderType == 2)
                                //    {
                                //        if (query.o.NewProjectId != query.o.OldProjectId || query.od.WithdrawCommitment == false)
                                //            WidthdrawAmmount = Common.calculateWithdrawalAmount(0, "", FromDate, ToDate, true, model.OrderId ?? 0, true);
                                //    }
                                //    else
                                //        WidthdrawAmmount = Common.calculateWithdrawalAmount(0, "", FromDate, ToDate, true, model.OrderId ?? 0, true);

                                //    if (WidthdrawAmmount > 0)
                                //    {
                                //        tblRCTCommitmentRequest withdraw = new tblRCTCommitmentRequest();
                                //        withdraw.ReferenceNumber = query.vw.ApplicationNo;
                                //        withdraw.AppointmentType = "Verfication";
                                //        withdraw.TypeCode = getAppointmentType(query.o.AppointmentType ?? 0);
                                //        withdraw.CandidateName = query.vw.CandidateName;
                                //        withdraw.CandidateDesignation = query.vw.PostRecommended;
                                //        withdraw.ProjectId = query.vw.ProjectId;
                                //        withdraw.ProjectNumber = Common.getprojectnumber(query.vw.ProjectId ?? 0);
                                //        withdraw.TotalSalary = query.vw.BasicPay;
                                //        withdraw.RequestedCommitmentAmount = WidthdrawAmmount;
                                //        withdraw.Status = "Awaiting Commitment Booking";
                                //        withdraw.RequestType = "Withdraw Commitment";
                                //        withdraw.EmpNumber = query.vw.EmployeersID;
                                //        withdraw.EmpId = userId;
                                //        withdraw.OrderId = model.OrderId;
                                //        withdraw.Crtd_TS = DateTime.Now;
                                //        withdraw.Crtd_UserId = userId;
                                //        context.tblRCTCommitmentRequest.Add(withdraw);
                                //        context.SaveChanges();
                                //    }
                                //}
                                //var appid = query.o.AppointmentId ?? 0;
                                var orderid = query.o.OrderId;
                                query.od.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                query.od.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                //var Actualstartdate = query.o.FromDate;
                                query.o.ActualAppointmentStartDate = query.o.FromDate;
                                query.o.ActualAppointmentEndDate = query.o.ToDate;
                                //decimal CommitmentAmount = query.o.CommitmentAmmount ?? 0;
                                //if (WidthdrawAmmount > 0)
                                //    query.o.CommitmentAmmount = CommitmentAmount - WidthdrawAmmount;
                                //BA-ORD
                                if (query.o.AppointmentType == 1)
                                {
                                    var mastQuery = (from s in context.tblRCTConsultantAppointment
                                                     where s.ConsultantAppointmentId == query.o.AppointmentId
                                                     select s).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        mastQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                        mastQuery.UptdTs = DateTime.Now;
                                        mastQuery.UptdUser = userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if (query.o.AppointmentType == 2)
                                {
                                    var mastQuery = (from s in context.tblRCTSTE
                                                     where s.STEID == query.o.AppointmentId
                                                     select s).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        mastQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                        mastQuery.UptdTs = DateTime.Now;
                                        mastQuery.UptdUser = userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if (query.o.AppointmentType == 3)
                                {
                                    var mastQuery = (from s in context.tblRCTOutsourcing
                                                     where s.OSGID == query.o.AppointmentId
                                                     select s).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        mastQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                        mastQuery.UptdTs = DateTime.Now;
                                        mastQuery.UptdUser = userId;
                                        context.SaveChanges();
                                    }
                                }
                                context.SaveChanges();                               
                                PostOfferDetails(query.vw.ApplicationId ?? 0, query.vw.Category, "OfficeOrder", userId, orderid);
                                if (TypeCode == "STE")
                                {
                                    var Data = STEOVWFInit(orderid, userId);
                                    if (Data.Item1 == false)
                                    {
                                        return Tuple.Create(-1, orderid, Data.Item2);
                                    }
                                    res = 1;
                                }
                                else if (model.ApplicationType == "OSG")
                                {
                                    var Data = OSGOVWFInit(orderid, userId);
                                    if (Data.Item1 == false)
                                    {
                                        return Tuple.Create(-1, orderid, Data.Item2);
                                    }
                                    res = 1;
                                }
                                
                                
                                //return Tuple.Create(1, "");

                            }
                        }
                    }

                    catch (Exception ex)
                    {
                        WriteLog.SendErrorToText(ex);
                        //transaction.Rollback();
                        return Tuple.Create(-1, 0, ex.Message.ToString());
                    }

                }
                return Tuple.Create(res, STEID, errMsg);
            }
            catch (Exception ex)
            {
                return Tuple.Create(-1, 0, ex.Message.ToString());
            }
        }

        #endregion

        public static Recruitoldmastdetails Getmastappointmentdetails(int appid, int appType)
        {
            try
            {
                Recruitoldmastdetails mastmodel = new Recruitoldmastdetails();
                using (var context = new IOASDBEntities())
                {
                    if (appType == 1)
                    {
                        var QryCON = (from A in context.tblRCTConsultantAppointment
                                      from D in context.tblRCTDesignation
                                      where A.DesignationId == D.DesignationId
                                      && A.ConsultantAppointmentId == appid
                                      select new { A, D }).FirstOrDefault();
                        if (QryCON != null)
                        {
                            int ProjectID = QryCON.A.ProjectId ?? 0;
                            var qryProject = (from prj in context.tblProject
                                              where prj.ProjectId == ProjectID
                                              select prj).FirstOrDefault();

                            if (qryProject != null)
                            {
                                if (qryProject.SponsoringAgency > 0)
                                {
                                    var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == qryProject.SponsoringAgency).FirstOrDefault();
                                    if (AgencyQry != null)
                                        mastmodel.SponsoringAgency = AgencyQry.AgencyName;
                                }
                                string pType = Common.getprojectTypeName(qryProject.ProjectType ?? 0);
                                if (qryProject.ProjectType == 1 && qryProject.ProjectSubType != 1)
                                    pType += qryProject.SponProjectCategory == "1" ? "-PFMS" : qryProject.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                                else if (qryProject.ProjectType == 1 && qryProject.ProjectSubType == 1)
                                    pType += " - Internal";
                                mastmodel.ProjectType = pType;
                                mastmodel.ProjectTitle = qryProject.ProjectTitle;
                                mastmodel.PIId = qryProject.PIName;
                                mastmodel.PIName = Common.GetPIName(qryProject.PIName ?? 0);
                                mastmodel.ProjectStartDate = String.Format("{0:dd-MMM-yyyy}", qryProject.TentativeStartDate);
                                mastmodel.ProjectClosureDate = string.Format("{0:dd-MMM-yyyy}", Common.GetProjectDueDate(ProjectID) ?? qryProject.TentativeCloseDate);
                                mastmodel.ProjectNumber = qryProject.ProjectNumber;
                                mastmodel.ProjectID = qryProject.ProjectId;
                                if (qryProject.PIName > 0)
                                {
                                    int PIUserID = qryProject.PIName ?? 0;
                                    var qryPIDetails = (from prj in context.vwFacultyStaffDetails
                                                        where prj.UserId == PIUserID
                                                        select prj).FirstOrDefault();
                                    mastmodel.Email = qryPIDetails.Email;
                                    mastmodel.Phone = qryPIDetails.ContactNumber;
                                    mastmodel.PIDepartmentCode = qryPIDetails.DepartmentCode;
                                    mastmodel.PIDepartmentName = qryPIDetails.DepartmentName;
                                    mastmodel.PICode = qryPIDetails.EmployeeId;
                                    mastmodel.PIDesignation = qryPIDetails.Designation;
                                    mastmodel.DesignationCode = QryCON.D.DesignationCode;
                                    mastmodel.Designation = QryCON.D.Designation;
                                    mastmodel.DesignationId = QryCON.D.DesignationId;
                                    mastmodel.Salary = QryCON.A.Salary ?? 0;
                                    if (QryCON.A.GSTApplicable == 3)
                                        mastmodel.IsGSTapplicable = "No";
                                    else
                                        mastmodel.IsGSTapplicable = "Yes";
                                    mastmodel.GST = QryCON.A.GSTPercentage ?? 0;
                                    mastmodel.CommitmentAmmount = QryCON.A.CommitmentAmount ?? 0;
                                    mastmodel.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.AppointmentStartdate);
                                    mastmodel.AppointmentStartDt = QryCON.A.AppointmentStartdate ?? DateTime.Now;
                                    mastmodel.AppointmentClosureDate = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.AppointmentEnddate);
                                    var query = (from c in context.tblCommitment
                                                 where c.CommitmentNumber == QryCON.A.CommitmentNo
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                    {
                                        mastmodel.CommitmentBalance = query.CommitmentBalance;
                                        mastmodel.CommitmentNo = query.CommitmentNumber;
                                        mastmodel.CommitmentId = query.CommitmentId;
                                    }
                                    mastmodel.SalaryLevelId = QryCON.A.SalaryLevelId;
                                }
                            }
                        }

                    }
                    else if (appType == 2)
                    {
                        var QrySTE = (from A in context.tblRCTSTE
                                      from D in context.tblRCTDesignation
                                      where A.STEID == appid/* && A.isEmployee == true*/
                                      && A.DesignationId == D.DesignationId
                                      select new { A, D }).FirstOrDefault();
                        if (QrySTE != null)
                        {
                            int ProjectID = QrySTE.A.ProjectId ?? 0;
                            var qryProject = (from prj in context.tblProject
                                              where prj.ProjectId == ProjectID
                                              select prj).FirstOrDefault();

                            if (qryProject != null)
                            {
                                if (qryProject.SponsoringAgency > 0)
                                {
                                    var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == qryProject.SponsoringAgency).FirstOrDefault();
                                    if (AgencyQry != null)
                                        mastmodel.SponsoringAgency = AgencyQry.AgencyName;
                                }
                                string pType = Common.getprojectTypeName(qryProject.ProjectType ?? 0);
                                if (qryProject.ProjectType == 1 && qryProject.ProjectSubType != 1)
                                    pType += qryProject.SponProjectCategory == "1" ? "-PFMS" : qryProject.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                                else if (qryProject.ProjectType == 1 && qryProject.ProjectSubType == 1)
                                    pType += " - Internal";
                                mastmodel.ProjectType = pType;
                                mastmodel.ProjectTitle = qryProject.ProjectTitle;
                                mastmodel.PIName = Common.GetPIName(qryProject.PIName ?? 0);
                                mastmodel.PIId = qryProject.PIName;
                                mastmodel.ProjectStartDate = String.Format("{0:dd-MMM-yyyy}", qryProject.TentativeStartDate);
                                mastmodel.ProjectClosureDate = string.Format("{0:dd-MMM-yyyy}", Common.GetProjectDueDate(ProjectID) ?? qryProject.TentativeCloseDate);
                                mastmodel.ProjectNumber = qryProject.ProjectNumber;
                                mastmodel.ProjectID = qryProject.ProjectId;
                                if (qryProject.PIName > 0)
                                {
                                    int PIUserID = qryProject.PIName ?? 0;
                                    var qryPIDetails = (from prj in context.vwFacultyStaffDetails
                                                        where prj.UserId == PIUserID
                                                        select prj).FirstOrDefault();
                                    mastmodel.Email = qryPIDetails.Email;
                                    mastmodel.Phone = qryPIDetails.ContactNumber;
                                    mastmodel.PIDepartmentCode = qryPIDetails.DepartmentCode;
                                    mastmodel.PIDepartmentName = qryPIDetails.DepartmentName;
                                    mastmodel.PICode = qryPIDetails.EmployeeId;
                                    mastmodel.PIDesignation = qryPIDetails.Designation;
                                    mastmodel.DesignationCode = QrySTE.D.DesignationCode;
                                    mastmodel.Designation = QrySTE.D.Designation;
                                    mastmodel.DesignationId = QrySTE.A.DesignationId;
                                    mastmodel.Salary = QrySTE.A.Salary ?? 0;
                                    mastmodel.HRA = QrySTE.A.HRA ?? 0;
                                    mastmodel.isHRA = QrySTE.A.isHaveHRA ?? false;
                                    mastmodel.HRAPercentage = QrySTE.A.HRAPercentage ?? 0;
                                    mastmodel.Medical = QrySTE.A.Medical ?? 0;
                                    mastmodel.MedicalText = Common.GetCodeControlnameCommon(QrySTE.A.Medical ?? 0, "SETMedical");
                                    mastmodel.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                    mastmodel.CommitmentAmmount = QrySTE.A.CommitmentAmount ?? 0;
                                    mastmodel.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                    mastmodel.AppointmentStartDt = QrySTE.A.AppointmentStartdate ?? DateTime.Now;
                                    mastmodel.AppointmentClosureDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    var query = (from c in context.tblCommitment
                                                 where c.CommitmentNumber == QrySTE.A.CommitmentNo
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                    {
                                        mastmodel.CommitmentBalance = query.CommitmentBalance;
                                        mastmodel.CommitmentNo = query.CommitmentNumber;
                                        mastmodel.CommitmentId = query.CommitmentId;
                                    }
                                }
                                mastmodel.SalaryLevelId = QrySTE.A.SalaryLevelId;
                            }
                        }
                    }
                    else if (appType == 3)
                    {
                        var QryOSG = (from A in context.tblRCTOutsourcing
                                      from D in context.tblRCTDesignation
                                      where A.OSGID == appid/* && A.isEmployee == true*/
                                      && A.DesignationId == D.DesignationId
                                      select new { A, D }).FirstOrDefault();
                        if (QryOSG != null)
                        {
                            int ProjectID = QryOSG.A.ProjectId ?? 0;
                            var qryProject = (from prj in context.tblProject
                                              where prj.ProjectId == ProjectID
                                              select prj).FirstOrDefault();

                            if (qryProject != null)
                            {
                                if (qryProject.SponsoringAgency > 0)
                                {
                                    var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == qryProject.SponsoringAgency).FirstOrDefault();
                                    if (AgencyQry != null)
                                        mastmodel.SponsoringAgency = AgencyQry.AgencyName;
                                }
                                string pType = Common.getprojectTypeName(qryProject.ProjectType ?? 0);
                                if (qryProject.ProjectType == 1 && qryProject.ProjectSubType != 1)
                                    pType += qryProject.SponProjectCategory == "1" ? "-PFMS" : qryProject.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                                else if (qryProject.ProjectType == 1 && qryProject.ProjectSubType == 1)
                                    pType += " - Internal";
                                mastmodel.ProjectType = pType;
                                mastmodel.ProjectTitle = qryProject.ProjectTitle;
                                mastmodel.PIName = Common.GetPIName(qryProject.PIName ?? 0);
                                mastmodel.PIId = qryProject.PIName;
                                mastmodel.ProjectStartDate = String.Format("{0:dd-MMM-yyyy}", qryProject.TentativeStartDate);
                                mastmodel.ProjectClosureDate = string.Format("{0:dd-MMM-yyyy}", Common.GetProjectDueDate(ProjectID) ?? qryProject.TentativeCloseDate);
                                mastmodel.ProjectNumber = qryProject.ProjectNumber;
                                mastmodel.ProjectID = qryProject.ProjectId;
                                if (qryProject.PIName > 0)
                                {
                                    int PIUserID = qryProject.PIName ?? 0;
                                    var qryPIDetails = (from prj in context.vwFacultyStaffDetails
                                                        where prj.UserId == PIUserID
                                                        select prj).FirstOrDefault();
                                    mastmodel.Email = qryPIDetails.Email;
                                    mastmodel.Phone = qryPIDetails.ContactNumber;
                                    mastmodel.PIDepartmentCode = qryPIDetails.DepartmentCode;
                                    mastmodel.PIDepartmentName = qryPIDetails.DepartmentName;
                                    mastmodel.PICode = qryPIDetails.EmployeeId;
                                    mastmodel.PIDesignation = qryPIDetails.Designation;
                                    mastmodel.DesignationCode = QryOSG.D.DesignationCode;
                                    mastmodel.Designation = QryOSG.D.Designation;
                                    mastmodel.DesignationId = QryOSG.A.DesignationId;
                                    mastmodel.Salary = QryOSG.A.Salary ?? 0;
                                    mastmodel.HRA = QryOSG.A.HRA ?? 0;
                                    mastmodel.isHRA = QryOSG.A.isHaveHRA ?? false;
                                    mastmodel.Medical = QryOSG.A.Medical ?? 0;
                                    mastmodel.MedicalAmmount = QryOSG.A.MedicalAmmount ?? 0;
                                    mastmodel.CommitmentAmmount = QryOSG.A.CommitmentAmount ?? 0;
                                    mastmodel.EmployeeCTC = getEmployeeCTC(QryOSG.A.OSGID);
                                    mastmodel.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentStartdate);
                                    mastmodel.AppointmentStartDt = QryOSG.A.AppointmentStartdate ?? DateTime.Now;
                                    mastmodel.AppointmentClosureDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentEnddate);
                                    var query = (from c in context.tblCommitment
                                                 where c.CommitmentNumber == QryOSG.A.CommitmentNo
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                    {
                                        mastmodel.CommitmentBalance = query.CommitmentBalance;
                                        mastmodel.CommitmentNo = query.CommitmentNumber;
                                        mastmodel.CommitmentId = query.CommitmentId;
                                    }
                                }
                            }
                            mastmodel.SalaryLevelId = QryOSG.A.SalaryLevelId;
                        }
                    }

                    var querydes = (from sl in context.tblRCTSalaryLevel
                                    where sl.SalaryLevelId == mastmodel.SalaryLevelId
                                    select sl).FirstOrDefault();
                    if (querydes != null)
                    {
                        mastmodel.SalaryLevel = querydes.LevelRange;
                        mastmodel.SalaryLevelDescription = querydes.Description;
                    }
                }


                return mastmodel;
            }
            catch (Exception ex)
            {
                Recruitoldmastdetails mastmodel = new Recruitoldmastdetails();
                return mastmodel;
            }
        }

        //Completed order master details
        public static Recruitoldmastdetails getCompletedOldAppointmentDetails(int orderid)
        {
            try
            {
                Recruitoldmastdetails oldmastmodel = new Recruitoldmastdetails();
                using (var context = new IOASDBEntities())
                {

                    var query = (from o in context.tblOrder
                                 where o.OrderId == orderid
                                 select o).FirstOrDefault();
                    if (query != null)
                    {
                        if (query.AppointmentType == 1)
                        {
                            var QryCON = (from A in context.tblRCTConsultantAppointmentLog
                                          from D in context.tblRCTDesignation
                                          where A.DesignationId == D.DesignationId
                                          && A.ConsultantAppointmentId == orderid
                                          select new { A, D }).FirstOrDefault();
                            if (QryCON != null)
                            {
                                int ProjectID = QryCON.A.ProjectId ?? 0;
                                var qryProject = (from prj in context.tblProject
                                                  where prj.ProjectId == ProjectID
                                                  select prj).FirstOrDefault();

                                if (qryProject != null)
                                {
                                    if (qryProject.SponsoringAgency > 0)
                                    {
                                        var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == qryProject.SponsoringAgency).FirstOrDefault();
                                        if (AgencyQry != null)
                                        {
                                            oldmastmodel.SponsoringAgency = AgencyQry.AgencyName;
                                        }
                                    }
                                    string pType = Common.getprojectTypeName(qryProject.ProjectType ?? 0);
                                    if (qryProject.ProjectType == 1 && qryProject.ProjectSubType != 1)
                                        pType += qryProject.SponProjectCategory == "1" ? "-PFMS" : qryProject.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                                    else if (qryProject.ProjectType == 1 && qryProject.ProjectSubType == 1)
                                        pType += " - Internal";
                                    oldmastmodel.ProjectType = pType;
                                    oldmastmodel.ProjectTitle = qryProject.ProjectTitle;
                                    oldmastmodel.PIName = Common.GetPIName(qryProject.PIName ?? 0);
                                    oldmastmodel.ProjectStartDate = String.Format("{0:dd-MMM-yyyy}", qryProject.TentativeStartDate);
                                    oldmastmodel.ProjectClosureDate = string.Format("{0:dd-MMM-yyyy}", Common.GetProjectDueDate(ProjectID) ?? qryProject.TentativeCloseDate);
                                    oldmastmodel.ProjectNumber = qryProject.ProjectNumber;
                                    oldmastmodel.ProjectID = qryProject.ProjectId;
                                    //oldmastmodel.SalaryLevelId = QryCON.A.SalaryLevelId;
                                    if (qryProject.PIName > 0)
                                    {
                                        int PIUserID = qryProject.PIName ?? 0;
                                        var qryPIDetails = (from prj in context.vwFacultyStaffDetails
                                                            where prj.UserId == PIUserID
                                                            select prj).FirstOrDefault();
                                        oldmastmodel.Email = qryPIDetails.Email;
                                        oldmastmodel.Phone = qryPIDetails.ContactNumber;
                                        oldmastmodel.PIDepartmentCode = qryPIDetails.DepartmentCode;
                                        oldmastmodel.PIDepartmentName = qryPIDetails.DepartmentName;
                                        oldmastmodel.PICode = qryPIDetails.EmployeeId;
                                        oldmastmodel.PIDesignation = qryPIDetails.Designation;
                                        oldmastmodel.DesignationCode = QryCON.D.DesignationCode;
                                        oldmastmodel.Designation = QryCON.D.Designation;
                                        oldmastmodel.DesignationId = QryCON.D.DesignationId;
                                        oldmastmodel.Salary = QryCON.A.Salary ?? 0;
                                        if (QryCON.A.GSTApplicable == 3)
                                            oldmastmodel.IsGSTapplicable = "No";
                                        else
                                            oldmastmodel.IsGSTapplicable = "Yes";
                                        oldmastmodel.GST = QryCON.A.GSTPercentage ?? 0;
                                        oldmastmodel.CommitmentAmmount = QryCON.A.CommitmentAmount ?? 0;
                                        oldmastmodel.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.AppointmentStartdate);
                                        oldmastmodel.AppointmentClosureDate = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.AppointmentEnddate);
                                    }
                                }
                            }
                        }
                        else if (query.AppointmentType == 2)
                        {
                            var QrySTE = (from A in context.tblRCTSTELog
                                          from D in context.tblRCTDesignation
                                          orderby A.STELogID descending
                                          where A.Orderid == orderid /* && A.isEmployee == true*/
                                          && A.DesignationId == D.DesignationId
                                          select new { A, D }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                var qryProject = (from prj in context.tblProject
                                                  where prj.ProjectId == ProjectID
                                                  select prj).FirstOrDefault();

                                if (qryProject != null)
                                {
                                    if (qryProject.SponsoringAgency > 0)
                                    {
                                        var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == qryProject.SponsoringAgency).FirstOrDefault();
                                        if (AgencyQry != null)
                                        {
                                            oldmastmodel.SponsoringAgency = AgencyQry.AgencyName;
                                        }
                                    }
                                    string pType = Common.getprojectTypeName(qryProject.ProjectType ?? 0);
                                    if (qryProject.ProjectType == 1 && qryProject.ProjectSubType != 1)
                                        pType += qryProject.SponProjectCategory == "1" ? "-PFMS" : qryProject.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                                    else if (qryProject.ProjectType == 1 && qryProject.ProjectSubType == 1)
                                        pType += " - Internal";
                                    oldmastmodel.ProjectType = pType;
                                    oldmastmodel.ProjectTitle = qryProject.ProjectTitle;
                                    oldmastmodel.PIName = Common.GetPIName(qryProject.PIName ?? 0);
                                    oldmastmodel.ProjectStartDate = String.Format("{0:dd-MMM-yyyy}", qryProject.TentativeStartDate);
                                    oldmastmodel.ProjectClosureDate = string.Format("{0:dd-MMM-yyyy}", Common.GetProjectDueDate(ProjectID) ?? qryProject.TentativeCloseDate);
                                    oldmastmodel.ProjectNumber = qryProject.ProjectNumber;
                                    oldmastmodel.ProjectID = qryProject.ProjectId;
                                    //oldmastmodel.SalaryLevelId = QrySTE.A.SalaryLevelId;
                                    if (qryProject.PIName > 0)
                                    {
                                        int PIUserID = qryProject.PIName ?? 0;
                                        var qryPIDetails = (from prj in context.vwFacultyStaffDetails
                                                            where prj.UserId == PIUserID
                                                            select prj).FirstOrDefault();
                                        oldmastmodel.Email = qryPIDetails.Email;
                                        oldmastmodel.Phone = qryPIDetails.ContactNumber;
                                        oldmastmodel.PIDepartmentCode = qryPIDetails.DepartmentCode;
                                        oldmastmodel.PIDepartmentName = qryPIDetails.DepartmentName;
                                        oldmastmodel.PICode = qryPIDetails.EmployeeId;
                                        oldmastmodel.PIDesignation = qryPIDetails.Designation;
                                        oldmastmodel.DesignationCode = QrySTE.D.DesignationCode;
                                        oldmastmodel.Designation = QrySTE.D.Designation;
                                        oldmastmodel.DesignationId = QrySTE.A.DesignationId;
                                        oldmastmodel.Salary = QrySTE.A.Salary ?? 0;
                                        oldmastmodel.HRA = QrySTE.A.HRA ?? 0;
                                        oldmastmodel.isHRA = QrySTE.A.isHaveHRA ?? false;
                                        oldmastmodel.HRAPercentage = QrySTE.A.HRAPercentage ?? 0;
                                        oldmastmodel.Medical = QrySTE.A.Medical ?? 0;
                                        oldmastmodel.MedicalText = Common.GetCodeControlnameCommon(QrySTE.A.Medical ?? 0, "SETMedical");
                                        oldmastmodel.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                        oldmastmodel.CommitmentAmmount = QrySTE.A.CommitmentAmount ?? 0;
                                        oldmastmodel.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                        oldmastmodel.AppointmentClosureDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    }
                                }
                            }
                        }
                        else if (query.AppointmentType == 3)
                        {
                            var QryOSG = (from A in context.tblRCTOSGLog
                                          from D in context.tblRCTDesignation
                                          where A.Orderid == orderid/* && A.isEmployee == true*/
                                          && A.DesignationId == D.DesignationId
                                          select new { A, D }).FirstOrDefault();
                            if (QryOSG != null)
                            {
                                int ProjectID = QryOSG.A.ProjectId ?? 0;
                                var qryProject = (from prj in context.tblProject
                                                  where prj.ProjectId == ProjectID
                                                  select prj).FirstOrDefault();

                                if (qryProject != null)
                                {
                                    if (qryProject.SponsoringAgency > 0)
                                    {
                                        var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == qryProject.SponsoringAgency).FirstOrDefault();
                                        if (AgencyQry != null)
                                        {
                                            oldmastmodel.SponsoringAgency = AgencyQry.AgencyName;
                                        }
                                    }
                                    string pType = Common.getprojectTypeName(qryProject.ProjectType ?? 0);
                                    if (qryProject.ProjectType == 1 && qryProject.ProjectSubType != 1)
                                        pType += qryProject.SponProjectCategory == "1" ? "-PFMS" : qryProject.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                                    else if (qryProject.ProjectType == 1 && qryProject.ProjectSubType == 1)
                                        pType += " - Internal";
                                    oldmastmodel.ProjectType = pType;
                                    oldmastmodel.EmployeeCTC = QryOSG.A.EmployeeESIC ?? 0;
                                    oldmastmodel.ProjectTitle = qryProject.ProjectTitle;
                                    oldmastmodel.PIName = Common.GetPIName(qryProject.PIName ?? 0);
                                    oldmastmodel.ProjectStartDate = String.Format("{0:dd-MMM-yyyy}", qryProject.TentativeStartDate);
                                    oldmastmodel.ProjectClosureDate = string.Format("{0:dd-MMM-yyyy}", Common.GetProjectDueDate(ProjectID) ?? qryProject.TentativeCloseDate);
                                    oldmastmodel.ProjectNumber = qryProject.ProjectNumber;
                                    oldmastmodel.ProjectID = qryProject.ProjectId;
                                    //oldmastmodel.SalaryLevelId = QryOSG.A.SalaryLevelId;
                                    if (qryProject.PIName > 0)
                                    {
                                        int PIUserID = qryProject.PIName ?? 0;
                                        var qryPIDetails = (from prj in context.vwFacultyStaffDetails
                                                            where prj.UserId == PIUserID
                                                            select prj).FirstOrDefault();
                                        oldmastmodel.Email = qryPIDetails.Email;
                                        oldmastmodel.Phone = qryPIDetails.ContactNumber;
                                        oldmastmodel.PIDepartmentCode = qryPIDetails.DepartmentCode;
                                        oldmastmodel.PIDepartmentName = qryPIDetails.DepartmentName;
                                        oldmastmodel.PICode = qryPIDetails.EmployeeId;
                                        oldmastmodel.PIDesignation = qryPIDetails.Designation;
                                        oldmastmodel.DesignationCode = QryOSG.D.DesignationCode;
                                        oldmastmodel.Designation = QryOSG.D.Designation;
                                        oldmastmodel.DesignationId = QryOSG.A.DesignationId;
                                        oldmastmodel.Salary = QryOSG.A.Salary ?? 0;
                                        oldmastmodel.HRA = QryOSG.A.HRA ?? 0;
                                        oldmastmodel.isHRA = QryOSG.A.isHaveHRA ?? false;
                                        oldmastmodel.Medical = QryOSG.A.Medical ?? 0;
                                        oldmastmodel.MedicalAmmount = QryOSG.A.MedicalAmmount ?? 0;
                                        oldmastmodel.CommitmentAmmount = QryOSG.A.CommitmentAmount ?? 0;
                                        oldmastmodel.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentStartdate);
                                        oldmastmodel.AppointmentClosureDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentEnddate);
                                    }
                                }
                            }
                        }
                    }
                    var querydes = (from s in context.tblRCTDesignation
                                    from sl in context.tblRCTSalaryLevel
                                    where s.DesignationId == oldmastmodel.DesignationId && s.SalaryLevel != 0
                                    && s.SalaryLevel == sl.SalaryLevelId
                                    select sl).FirstOrDefault();
                    if (querydes != null)
                    {
                        oldmastmodel.SalaryLevel = querydes.LevelRange;
                        oldmastmodel.SalaryLevelDescription = querydes.Description;
                    }
                }
                return oldmastmodel;
            }
            catch (Exception ex)
            {
                Recruitoldmastdetails oldmastmodel = new Recruitoldmastdetails();
                return oldmastmodel;
            }
        }

        #region AmendmentOrder

        public AmendmentOrderModel GetAmendmentOrderDetails(int appid, string appType, int? orderId = null)
        {
            AmendmentOrderModel model = new AmendmentOrderModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int appTypeId = getAppointmentType(appType);
                    var projectid = 0;
                    if (orderId > 0)
                    {
                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderDetail
                                     from d in context.tblRCTDesignation
                                     where o.NewDesignation == d.DesignationId && o.OrderId == od.OrderId
                                     && o.OrderId == orderId
                                     orderby o.OrderId descending
                                     select new { o, od, d.Designation }).FirstOrDefault();
                        if (query != null)
                        {
                            appid = query.o.AppointmentId ?? 0;
                            appTypeId = query.o.AppointmentType ?? 0;
                            model.DesignationId = query.o.NewDesignation;
                            model.ApplicationReceiveDate = query.o.OrderDate;
                            model.ProjectId = query.o.NewProjectId;
                            model.ProjectNumber = Common.GetProjectNameandNumber(query.o.NewProjectId ?? 0);
                            model.Salary = query.o.Basic;
                            model.Status = query.o.Status;
                            model.HRA = query.o.HRA ?? 0;
                            model.isHRA = query.o.isHRA;
                            model.MedicalAmmount = query.o.MedicalAmount ?? 0;
                            model.Medical = query.o.MedicalType ?? 0;
                            model.HRAPercentage = query.o.HRAPercentage ?? 0;
                            model.isMedical = query.o.isMedical;
                            model.GST = query.o.GST ?? 0;
                            model.CommitmentAmount = query.o.CommitmentAmmount ?? 0;
                            if (query.od.WithdrawCommitment == true)
                                model.CommitmentAmount = query.o.WithdrawAmmount ?? 0;
                            model.FromDate = query.o.FromDate;
                            model.ToDate = query.o.ToDate;
                            model.Designation = query.Designation;
                            model.OrderID = query.o.OrderId;
                            model.PILetterPath = query.od.PILetter;
                            model.Comments = query.od.Comments;
                            model.PIJustificationRemarks = query.od.PIJustificationRemarks;
                            model.PILetterFileName = query.od.PILetterFileName;
                            model.RequestReference = query.od.RequestReference ?? 0;
                            model.ReferenceNo = query.od.RequestReferenceNo;
                            model.SourceEmailDate = query.od.RequestEmailDate;
                            model.isWithdrawCommitment = query.od.WithdrawCommitment;
                        }
                    }

                    if (appid > 0)
                    {
                        if (appTypeId == 1)
                        {
                            var QryCON = (from A in context.tblRCTConsultantAppointment
                                          from D in context.tblRCTDesignation
                                          where A.DesignationId == D.DesignationId &&
                                          A.ConsultantAppointmentId == appid && A.isEmployee == true
                                          select new { A, D }).FirstOrDefault();
                            if (QryCON != null)
                            {
                                model.ApplicationNo = QryCON.A.ApplicationNumber;
                                model.EmployeeID = QryCON.A.EmployeersID;
                                model.TypeofappointmentId = QryCON.A.TypeofAppointment ?? 0;
                                model.Typeofappointment = Common.GetCodeControlName(QryCON.A.TypeofAppointment ?? 0, "Appointmenttype");
                                model.Name = Common.GetCodeControlName(QryCON.A.ProfessionalType ?? 0, "RCTProfessional") + QryCON.A.Name;
                                model.Nameoftheguardian = QryCON.A.NameoftheGuardian;
                                model.Email = QryCON.A.Email;
                                model.PresentAddress = QryCON.A.TemporaryAddress;
                                model.PermanentAddress = QryCON.A.PermanentAddress;
                                model.ApplicationNo = QryCON.A.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QryCON.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QryCON.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QryCON.A.ContactNumber;
                                model.staffcategory = QryCON.A.IsICSRStafforProjectStaff == true ? "ICSR Staff" : "Non ICSR Staff";
                                model.DesignationCode = QryCON.D.DesignationCode;
                                //model.GateScore = QryCON.A.GateScore;
                                projectid = QryCON.A.ProjectId ?? 0;
                            }
                        }
                        else if (appTypeId == 2)
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          from D in context.tblRCTDesignation
                                          where A.DesignationId == D.DesignationId &&
                                          A.STEID == appid && A.isEmployee == true
                                          select new { A, D }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.EmployeeID = QrySTE.A.EmployeersID;
                                model.TypeofappointmentId = QrySTE.A.TypeofAppointment ?? 0;
                                model.Typeofappointment = Common.GetCodeControlName(QrySTE.A.TypeofAppointment ?? 0, "STEAppointmenttype");
                                model.Name = Common.GetCodeControlName(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.Email = QrySTE.A.Email;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.PermanentAddress = QrySTE.A.PermanentAddress;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QrySTE.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QrySTE.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QrySTE.A.ContactNumber;
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IsMsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.DesignationCode = QrySTE.D.DesignationCode;
                                projectid = QrySTE.A.ProjectId ?? 0;
                                model.GateScore = QrySTE.A.GateScore ?? 0;
                            }
                        }
                        else if (appTypeId == 3)
                        {
                            var QryOSG = (from A in context.tblRCTOutsourcing
                                          from D in context.tblRCTDesignation
                                          where A.DesignationId == D.DesignationId &&
                                          A.OSGID == appid && A.isEmployee == true
                                          select new { A, D }).FirstOrDefault();
                            if (QryOSG != null)
                            {
                                DateTime today = DateTime.Now;
                                DateTime date = DateTime.Now;
                                var Qrysalcalc = (from O in context.tblRCTSalaryCalcDetails
                                                  where O.ID == appid
                                                  orderby O.SalaryDetailsId descending
                                                  select O).FirstOrDefault();
                                var Qry = (from cm in context.tblRCTStatutory
                                           where cm.ValueDate <= date && (cm.EndDate >= date || cm.EndDate == null)
                                           select cm).FirstOrDefault();
                                model.ApplicationNo = QryOSG.A.ApplicationNumber;
                                model.EmployeeID = QryOSG.A.EmployeersID;
                                model.TypeofappointmentId = QryOSG.A.TypeofAppointment ?? 0;
                                model.Typeofappointment = Common.GetCodeControlName(QryOSG.A.TypeofAppointment ?? 0, "STEAppointmenttype");
                                model.Name = Common.GetCodeControlName(QryOSG.A.ProfessionalType ?? 0, "RCTProfessional") + QryOSG.A.Name;
                                model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                                model.Email = QryOSG.A.Email;
                                model.PresentAddress = QryOSG.A.PresentAddress;
                                model.PermanentAddress = QryOSG.A.PermanentAddress;
                                model.ApplicationNo = QryOSG.A.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QryOSG.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QryOSG.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QryOSG.A.ContactNumber;
                                model.ConsolidatedPay = QryOSG.A.ConsolidatedPay ?? false;
                                model.Fellowship = QryOSG.A.Fellowship ?? false;
                                model.IsMsPhd = QryOSG.A.MsPhd ?? false;
                                model.PhdDetail = QryOSG.A.PhdDetail;
                                model.DesignationCode = QryOSG.D.DesignationCode;
                                model.GateScore = QryOSG.A.GateScore ?? 0;
                                projectid = QryOSG.A.ProjectId ?? 0;
                                if (Qrysalcalc != null)
                                {
                                    model.RecommendedSalary = Qrysalcalc.RecommendSalary;
                                    model.EmpSalutation = Qrysalcalc.Salutation;
                                    model.EmpName = QryOSG.A.Name;
                                    model.EmpDesig = Qrysalcalc.EmpDesignation;
                                    model.EmpType = Qrysalcalc.EmpType;
                                    model.PhysicalyHandicaped = QryOSG.A.PhysicallyChallenged;
                                    model.EmpPFBasicWages = Qrysalcalc.PFBasicWages;
                                    model.EmployeePF = Qrysalcalc.EmployeePF;
                                    model.EmployeeESIC = Qrysalcalc.EmployeeESIC;
                                    model.EmployeeProfessionalTax = Qrysalcalc.EmpProfessionalTax;
                                    model.EmployeeTtlDeduct = Qrysalcalc.EmpTotalDeduction;
                                    model.EmployeeNetSalary = Qrysalcalc.EmpNetSalary;
                                    model.EmployerPF = Qrysalcalc.EmployerPF;
                                    model.EmployerIns = Qrysalcalc.EmployerInsurance;
                                    model.EmployerESIC = Qrysalcalc.EmployerESIC;
                                    model.EmployerTtlContribute = Qrysalcalc.EmployerTotalContribution;
                                    model.EmployeeCTC = Qrysalcalc.EmployerCTC;
                                    model.AgencyFee = Qrysalcalc.EmployerAgencyFee;
                                    model.SalaryGST = Qrysalcalc.EmployerGST;
                                    model.CTCwithAgencyFee = Qrysalcalc.EmployerCTCWithAgencyFee;
                                    model.TotalCTC = Qrysalcalc.TotalCostPerMonth;

                                    var OldTotalCTC = (from O in context.tblRCTSalaryCalcDetails
                                                       where O.ID == appid && O.IsCurrentVersion == true
                                                       orderby O.SalaryDetailsId descending
                                                       select O.TotalCostPerMonth).FirstOrDefault();
                                    model.OldTotalCTC = OldTotalCTC;
                                    model.LWFAmount = Qry.LWFEmployerContribution ?? 0;
                                }
                            }
                        }
                        appType = getAppointmentType(appTypeId);
                        model.ApplicationID = appid;
                        model.TypeCode = appType;
                        model.OrderType = 4;
                        if (model.Status == "Completed")
                            model.Appointmentdetails = getCompletedOldAppointmentDetails(model.OrderID);
                        else
                            model.Appointmentdetails = Getmastappointmentdetails(appid, appTypeId);
                        model.Experience = Common.getExperienceInWordings(appid, appType);
                        model.Qualification = Common.getQualificationWordings(appid, appType);
                        //model.ProjectDetails = getProjectSummary(projectid);
                        model.IITMExperience = IITExperienceInWording(model.EmployeeID);
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public Tuple<int, string> CommitAmendment(AmendmentOrderModel model, int logged_in_userId)
        {
            try
            {
                int res = 0, OrderID = 0;
                string ErrorMsg = "";
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var odQuery = (from O in context.tblOrder
                                           from Od in context.tblOrderDetail
                                           where O.OrderId == Od.OrderId && O.Status == "Open"
                                           && O.isCommitmentReject != true && O.isGovAgencyFund != true
                                           && O.OrderId == model.OrderID
                                           select new { O, Od }).FirstOrDefault();
                            if (odQuery != null)
                            {
                                OrderID = odQuery.O.OrderId;
                                odQuery.O.OrderDate = model.ApplicationReceiveDate;
                                if (model.isWithdrawCommitment)
                                    odQuery.O.WithdrawAmmount = model.CommitmentAmount;
                                else
                                    odQuery.O.CommitmentAmmount = model.CommitmentAmount;
                                odQuery.O.ToDate = model.ToDate;
                                odQuery.O.UpdtTS = DateTime.Now;
                                odQuery.O.UpdtUser = logged_in_userId;
                                odQuery.Od.WithdrawCommitment = model.isWithdrawCommitment;
                                odQuery.Od.RequestReference = model.RequestReference;
                                odQuery.Od.RequestReferenceNo = model.ReferenceNo;
                                odQuery.Od.RequestEmailDate = model.SourceEmailDate;
                                odQuery.Od.PIJustificationRemarks = model.PIJustificationRemarks;
                                if (model.PILetter != null)
                                {
                                    var docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    var docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    odQuery.Od.PILetter = docpath;
                                    odQuery.Od.PILetterFileName = docname;
                                }
                                context.SaveChanges();
                                res = 2;
                            }
                            else if (model.OrderID > 0)
                                return Tuple.Create(0, "Amendment form not allowed for edit.");
                            else
                            {
                                tblOrder Order = new tblOrder();
                                tblOrderDetail OrderDetail = new tblOrderDetail();
                                int AppTypeId = getAppointmentType(model.TypeCode);
                                Order.Status = "Open";
                                Order.AppointmentId = model.ApplicationID;
                                Order.AppointmentType = AppTypeId;
                                Order.OrderDate = model.ApplicationReceiveDate;
                                int? OrderType = context.tblOrderMaster.FirstOrDefault(m => m.CodeDescription == "Amendment").CodeID;
                                Order.OrderType = OrderType;
                                if (AppTypeId == 1)
                                {
                                    var query = (from c in context.tblRCTConsultantAppointment
                                                 where c.ConsultantAppointmentId == model.ApplicationID
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                    {
                                        Order.GST = query.GSTPercentage;
                                        Order.Basic = query.Salary;
                                        Order.NewDesignation = query.DesignationId;
                                        Order.OldDesignation = query.DesignationId;
                                        Order.NewProjectId = query.ProjectId;
                                        Order.OldProjectId = query.ProjectId;
                                    }
                                }
                                else if (AppTypeId == 2)
                                {
                                    var query = (from c in context.tblRCTSTE
                                                 where c.STEID == model.ApplicationID
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                    {
                                        Order.Basic = query.Salary;
                                        Order.MedicalAmount = query.MedicalAmmount;
                                        Order.MedicalType = query.Medical;
                                        Order.NewDesignation = query.DesignationId;
                                        Order.OldDesignation = query.DesignationId;
                                        Order.OldHRA = query.HRA;
                                        Order.HRA = query.HRA;
                                        Order.NewProjectId = query.ProjectId;
                                        Order.OldProjectId = query.ProjectId;
                                        Order.isMedical = model.isMedical;
                                        Order.isHRA = model.isHRA;
                                    }
                                }
                                else if (AppTypeId == 3)
                                {
                                    var query = (from c in context.tblRCTOutsourcing
                                                 where c.OSGID == model.ApplicationID
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                    {
                                        Order.Basic = query.Salary;
                                        Order.MedicalAmount = query.MedicalAmmount;
                                        Order.MedicalType = query.Medical;
                                        Order.NewDesignation = query.DesignationId;
                                        Order.OldDesignation = query.DesignationId;
                                        Order.OldHRA = query.HRA;
                                        Order.HRA = query.HRA;
                                        Order.NewProjectId = query.ProjectId;
                                        Order.OldProjectId = query.ProjectId;
                                        Order.isMedical = model.isMedical;
                                        Order.isHRA = model.isHRA;
                                    }
                                }
                                if (model.isWithdrawCommitment)
                                    Order.WithdrawAmmount = model.CommitmentAmount;
                                else
                                    Order.CommitmentAmmount = model.CommitmentAmount;
                                Order.FromDate = model.FromDate;
                                Order.ToDate = model.ToDate;
                                Order.CrtdTS = DateTime.Now;
                                Order.CrtdUser = logged_in_userId;
                                var maxOrderwiseSeq = (from O in context.tblOrder where O.OrderType == OrderType select O.OrderwiseSeqId).Max() ?? 0;
                                Order.OrderwiseSeqId = maxOrderwiseSeq == 0 ? 1 : maxOrderwiseSeq + 1;
                                var maxSeqId = (from O in context.tblOrder select O.SeqId).Max() ?? 0;
                                var number = maxSeqId == 0 ? 1 : maxSeqId + 1;
                                Order.SeqId = number;
                                string value = number.ToString("D4");
                                Order.OrderNo = "AM" + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                context.tblOrder.Add(Order);
                                context.SaveChanges();
                                OrderID = Order.OrderId;
                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    OrderDetail.PILetter = docpath;
                                    OrderDetail.PILetterFileName = docname;
                                }
                                OrderDetail.OrderId = OrderID;
                                OrderDetail.WithdrawCommitment = model.isWithdrawCommitment;
                                OrderDetail.RequestReference = model.RequestReference;
                                OrderDetail.RequestReferenceNo = model.ReferenceNo;
                                OrderDetail.RequestEmailDate = model.SourceEmailDate;
                                OrderDetail.PIJustificationRemarks = model.PIJustificationRemarks;
                                context.tblOrderDetail.Add(OrderDetail);
                                context.SaveChanges();
                                if (AppTypeId == 3)
                                {
                                    var saldetQuery = (from s in context.tblRCTSalaryCalcDetails
                                                       where s.ID == model.ApplicationID && s.Status == "Active"
                                                       && s.IsCurrentVersion == true
                                                       select s).FirstOrDefault();
                                    if (saldetQuery != null)
                                    {
                                        tblRCTSalaryCalcDetails SalaryCal = new tblRCTSalaryCalcDetails();
                                        SalaryCal.ID = saldetQuery.ID;
                                        SalaryCal.AppointType = "Outsourcing";
                                        SalaryCal.TypeCode = "OSG";
                                        SalaryCal.RecommendSalary = saldetQuery.RecommendSalary;
                                        SalaryCal.Salutation = saldetQuery.Salutation;
                                        SalaryCal.EmpName = saldetQuery.EmpName;
                                        SalaryCal.EmpDesignation = saldetQuery.EmpDesignation;
                                        SalaryCal.PhysicallyHandicapped = saldetQuery.PhysicallyHandicapped;
                                        SalaryCal.PFBasicWages = saldetQuery.PFBasicWages;
                                        SalaryCal.EmployeePF = saldetQuery.EmployeePF;
                                        SalaryCal.EmployeeESIC = saldetQuery.EmployeeESIC;
                                        SalaryCal.EmpProfessionalTax = saldetQuery.EmpProfessionalTax;//
                                        SalaryCal.EmpTotalDeduction = saldetQuery.EmpTotalDeduction;
                                        SalaryCal.EmpNetSalary = saldetQuery.EmpNetSalary;
                                        SalaryCal.EmployerPF = saldetQuery.EmployerPF;
                                        SalaryCal.EmployerInsurance = saldetQuery.EmployerInsurance;
                                        SalaryCal.EmployerESIC = saldetQuery.EmployerESIC;
                                        SalaryCal.EmployerCTC = saldetQuery.EmployerCTC;
                                        SalaryCal.EmployerAgencyFee = saldetQuery.EmployerAgencyFee;
                                        SalaryCal.EmployerGST = saldetQuery.EmployerGST;
                                        SalaryCal.EmployerCTCWithAgencyFee = saldetQuery.EmployerCTCWithAgencyFee;
                                        SalaryCal.TotalCostPerMonth = saldetQuery.TotalCostPerMonth;
                                        SalaryCal.EmployerTotalContribution = saldetQuery.EmployerTotalContribution;
                                        SalaryCal.CrtdTS = DateTime.Now;
                                        SalaryCal.CrtdUserId = logged_in_userId;
                                        SalaryCal.Status = "Active";
                                        SalaryCal.IsCurrentVersion = false;
                                        SalaryCal.OrderId = OrderID;
                                        SalaryCal.FromDate = saldetQuery.FromDate;
                                        SalaryCal.ToDate = model.ToDate;
                                        SalaryCal.StatutoryId = saldetQuery.StatutoryId;
                                        SalaryCal.GSTPercentage = saldetQuery.GSTPercentage;
                                        SalaryCal.AgencyFeePercentage = saldetQuery.AgencyFeePercentage;
                                        context.tblRCTSalaryCalcDetails.Add(SalaryCal);
                                        context.SaveChanges();
                                    }
                                }
                                res = 1;
                            }
                            transaction.Commit();
                            PostOrderStatusLog(OrderID, "", "Open", logged_in_userId);
                            var Data = RecruitAmendmentWFInit(OrderID, logged_in_userId);
                            if (Data.Item1)
                                res = 1;
                            else
                            {
                                res = 3;
                                ErrorMsg = Data.Item2;
                            }
                            return Tuple.Create(res, ErrorMsg);
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, "");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, "");
            }
        }

        #endregion

        #region Change of project,Extension,Enhancement

        public OrderModel getOrderProjectDetails(int appid, string appType, int ordertype)
        {
            OrderModel model = new OrderModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int appTypeId = getAppointmentType(appType);
                    model.MailSent_f = false;
                    if (appid > 0)
                    {
                        if (appTypeId == 1)
                        {
                            var QryCON = (from A in context.tblRCTConsultantAppointment
                                          from D in context.tblRCTDesignation
                                          where A.DesignationId == D.DesignationId &&
                                          A.ConsultantAppointmentId == appid && A.isEmployee == true
                                          select new { A, D }).FirstOrDefault();
                            if (QryCON != null)
                            {
                                model.ApplicationID = appid;
                                model.TypeCode = appType;
                                model.OrderType = ordertype;
                                model.ApplicationNo = QryCON.A.ApplicationNumber;
                                model.EmployeeID = QryCON.A.EmployeersID;
                                model.TypeofappointmentId = QryCON.A.TypeofAppointment ?? 0;
                                model.Typeofappointment = Common.GetCodeControlName(QryCON.A.TypeofAppointment ?? 0, "Appointmenttype");
                                model.Name = Common.GetCodeControlName(QryCON.A.ProfessionalType ?? 0, "RCTProfessional") + QryCON.A.Name;
                                model.Nameoftheguardian = QryCON.A.NameoftheGuardian;
                                model.Email = QryCON.A.Email;
                                model.PresentAddress = QryCON.A.TemporaryAddress;
                                model.PermanentAddress = QryCON.A.PermanentAddress;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QryCON.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QryCON.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QryCON.A.ContactNumber;
                                model.staffcategory = QryCON.A.IsICSRStafforProjectStaff == true ? "ICSR Staff" : "Non ICSR Staff";
                                model.IITMPensionerCSIRStaff = Common.GetCodeControlName(QryCON.A.IITMPensionerorCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                //model.IsMsPhd = QryCON.A.MsPhd ?? false;
                                //model.PhdDetail = QryCON.A.PhdDetail;
                                model.DesignationCode = QryCON.D.DesignationCode;
                                model.OldPrjDetailModel = Getmastappointmentdetails(appid, appTypeId);
                                model.ExperienceInDes = Common.getExperienceDecimal(appid, appType);
                                model.Experience = Common.getExperienceInWordings(appid, appType);
                                model.Qualification = Common.getQualificationWordings(appid, appType);
                                model.ConsolidatedPay = QryCON.A.ConsolidatedPay;
                                model.PayType = QryCON.A.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship pay";
                                model.ToMail = QryCON.A.ToMail;
                                model.CCMail = QryCON.A.Bcc;

                            }
                        }
                        else if (appTypeId == 2)
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          from D in context.tblRCTDesignation
                                          where A.DesignationId == D.DesignationId &&
                                          A.STEID == appid && A.isEmployee == true
                                          select new { A, D }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                model.ApplicationID = appid;
                                model.TypeCode = appType;
                                model.OrderType = ordertype;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.EmployeeID = QrySTE.A.EmployeersID;
                                model.TypeofappointmentId = QrySTE.A.TypeofAppointment ?? 0;
                                model.Typeofappointment = Common.GetCodeControlName(QrySTE.A.TypeofAppointment ?? 0, "STEAppointmenttype");
                                model.Name = Common.GetCodeControlName(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.Email = QrySTE.A.Email;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.PermanentAddress = QrySTE.A.PermanentAddress;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QrySTE.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QrySTE.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QrySTE.A.ContactNumber;
                                model.staffcategory = QrySTE.A.StaffCategory;
                                model.PhysicallyChanged = QrySTE.A.PhysicallyChallenged;
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.PayType = QrySTE.A.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship pay";
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = Common.GetCodeControlName(QrySTE.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                model.IsMsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.OldPrjDetailModel = Getmastappointmentdetails(appid, appTypeId);
                                model.DesignationCode = QrySTE.D.DesignationCode;
                                model.Experience = Common.getExperienceInWordings(appid, appType);
                                model.ExperienceInDes = Common.getExperienceDecimal(appid, appType);
                                model.Qualification = Common.getQualificationWordings(appid, appType);
                                model.ToMail = QrySTE.A.ToMail;
                                model.CCMail = QrySTE.A.bcc;
                            }
                        }
                        else if (appTypeId == 3)
                        {
                            var QryOSG = (from A in context.tblRCTOutsourcing
                                          from D in context.tblRCTDesignation
                                          where A.DesignationId == D.DesignationId &&
                                          A.OSGID == appid && A.isEmployee == true
                                          select new { A, D }).FirstOrDefault();

                            var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                              where A.ID == appid && A.IsCurrentVersion == true && A.Status == "Active"
                                              orderby A.SalaryDetailsId descending
                                              select A).FirstOrDefault();
                            if (QryOSG != null)
                            {
                                model.ApplicationID = appid;
                                model.TypeCode = appType;
                                model.OrderType = ordertype;
                                model.ApplicationNo = QryOSG.A.ApplicationNumber;
                                model.EmployeeID = QryOSG.A.EmployeersID;
                                model.TypeofappointmentId = QryOSG.A.TypeofAppointment ?? 0;
                                model.Typeofappointment = Common.GetCodeControlName(QryOSG.A.TypeofAppointment ?? 0, "OSGAppointmenttype");
                                model.Name = Common.GetCodeControlName(QryOSG.A.ProfessionalType ?? 0, "RCTProfessional") + QryOSG.A.Name;
                                model.PhysicallyChallenged = QryOSG.A.PhysicallyChallenged == "No" ? 2 : QryOSG.A.PhysicallyChallenged == "Yes" ? 1 : 0;
                                model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                                model.Email = QryOSG.A.Email;
                                model.PresentAddress = QryOSG.A.PresentAddress;
                                model.PermanentAddress = QryOSG.A.PermanentAddress;
                                model.ApplicationNo = QryOSG.A.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QryOSG.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QryOSG.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QryOSG.A.ContactNumber;
                                model.staffcategory = QryOSG.A.StaffCategory;
                                model.PhysicallyChanged = QryOSG.A.PhysicallyChallenged;
                                model.ConsolidatedPay = QryOSG.A.ConsolidatedPay ?? false;
                                model.Fellowship = QryOSG.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = Common.GetCodeControlName(QryOSG.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                model.IsMsPhd = QryOSG.A.MsPhd ?? false;
                                model.PhdDetail = QryOSG.A.PhdDetail;
                                model.PayType = QryOSG.A.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship pay";
                                model.OldPrjDetailModel = Getmastappointmentdetails(appid, appTypeId);
                                model.DesignationCode = QryOSG.D.DesignationCode;
                                model.Designation = QryOSG.D.Designation;
                                model.EmpSalutation = QryOSG.A.ProfessionalType;
                                model.EmpName = QryOSG.A.Name;
                                model.EmpDesig = QryOSG.D.Designation;
                                model.PhysicalyHandicaped = QryOSG.A.PhysicallyChallenged;
                                //model.OldTotalCTC = Qrysalcalc.TotalCostPerMonth;
                                model.Experience = Common.getExperienceInWordings(appid, appType);
                                model.ExperienceInDes = Common.getExperienceDecimal(appid, appType);
                                model.Qualification = Common.getQualificationWordings(appid, appType);
                                model.VendorId = Common.GetVendorId(appid);
                                model.ToMail = QryOSG.A.ToMail;
                                model.CCMail = QryOSG.A.bcc;
                                if (Qrysalcalc != null)
                                {
                                    model.OldTotalCTC = Qrysalcalc.EmployerCTC;
                                    model.EmpPFBasicWages = Qrysalcalc.PFBasicWages;
                                }
                            }
                        }

                        if (ordertype == 3)
                        {
                            model.RequestedByPI = model.OldPrjDetailModel.PIId;
                            model.AutoFillRequstedbyPI = model.OldPrjDetailModel.PIName;
                        }
                        model.IITMExperience = IITExperienceInWording(model.EmployeeID);
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public OrderModel getOrderDetails(int orderid)
        {
            OrderModel model = new OrderModel();
            Recruitoldmastdetails oldPrjModel = new Recruitoldmastdetails();
            try
            {
                int appid = 0;
                int apptype = 0;
                using (var context = new IOASDBEntities())
                {
                    if (orderid > 0)
                    {
                        var QryOrder = (from O in context.tblOrder
                                        where O.OrderId == orderid
                                        select O).FirstOrDefault();
                        if (QryOrder != null)
                        {
                            int NewdesignationID = 0;
                            if (QryOrder.OrderType == 1)
                            {
                                model.DesignationId = QryOrder.OldDesignation ?? 0;
                                NewdesignationID = QryOrder.OldDesignation ?? 0;
                            }
                            else if (QryOrder.OrderType == 2)
                            {
                                model.DesignationId = QryOrder.NewDesignation ?? 0;
                                NewdesignationID = QryOrder.NewDesignation ?? 0;

                            }
                            else if (QryOrder.OrderType == 3)
                            {
                                model.DesignationId = QryOrder.OldDesignation ?? 0;
                                NewdesignationID = QryOrder.OldDesignation ?? 0;
                            }

                            if (NewdesignationID > 0)
                            {
                                var QryDes = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == NewdesignationID);
                                model.DesignationCode = QryDes.DesignationCode;
                                model.Designation = QryDes.Designation;
                            }
                            if (NewdesignationID == 0)
                                model.OtherDesignation = context.tblRCTOrderRequest.Where(x => x.OrderRequestId == QryOrder.OrderRequestId).Select(x => x.OtherDesignation).FirstOrDefault();

                            model.DesignationId = NewdesignationID;
                            model.ApplicationReceiveDate = QryOrder.OrderDate;
                            if (QryOrder.OrderDate != null)
                                model.ApplicationRcvDate = string.Format("{0:dd-MMMM-yyyy}", QryOrder.OrderDate);
                            model.ProjectId = QryOrder.NewProjectId;
                            model.ProjectNumber = Common.GetProjectNameandNumber(QryOrder.NewProjectId ?? 0);
                            model.Salary = QryOrder.Basic;
                            model.Status = QryOrder.Status;
                            if (QryOrder.HRA == null && QryOrder.InitByPI_f == true)
                                model.HRA = getHRAValue(QryOrder.AppointmentId ?? 0, QryOrder.AppointmentType ?? 0);
                            else
                                model.HRA = QryOrder.HRA ?? 0;
                            model.isHRA = QryOrder.isHRA;
                            model.HRAPercentage = QryOrder.HRAPercentage ?? 0;
                            model.MedicalAmmount = QryOrder.MedicalAmount ?? 0;
                            model.MedicalInclude = Common.GetCodeControlnameCommon(QryOrder.MedicalType ?? 0, "SETMedical");
                            model.Medical = QryOrder.MedicalType ?? 0;
                            model.isMedical = QryOrder.isMedical;
                            model.GST = QryOrder.GST ?? 0;
                            if (QryOrder.IsGSTApplicable == true)
                                model.IsGSTapplicable = "Yes";
                            else
                                model.IsGSTapplicable = "No";
                            model.CommitmentAmount = QryOrder.CommitmentAmmount ?? 0;
                            //COP
                            model.WithdrawalAmount = QryOrder.WithdrawAmmount ?? 0;
                            model.WithdrawTillDate = QryOrder.WithdrawTillDate;
                            //-----END----
                            model.ArrearOrDeductionTillDate = QryOrder.ArrearOrDeductionTillDate;
                            model.ArrearOrDeductionAmount = QryOrder.ArrearOrDeductionAmount ?? 0;
                            model.strArrearOrDeductionTillDate = string.Format("{0:dd-MMMM-yyyy}", QryOrder.ArrearOrDeductionTillDate);


                            model.Appointmentstartdate = QryOrder.FromDate;
                            model.AppointmentEndDate = QryOrder.ToDate;
                            if (QryOrder.FromDate != null)
                                model.AppointmentstrDate = string.Format("{0:dd-MMMM-yyyy}", QryOrder.FromDate);
                            if (QryOrder.ToDate != null)
                                model.AppointmenttoDate = string.Format("{0:dd-MMMM-yyyy}", QryOrder.ToDate);
                            model.FromDate = QryOrder.FromDate;
                            model.ToDate = QryOrder.ToDate;
                            int Orderid = QryOrder.OrderId;
                            model.OrderID = Orderid;
                            model.OrderType = QryOrder.OrderType ?? 0;
                            model.RequestedByPI = QryOrder.RequestedBy;
                            model.AutoFillRequstedbyPI = Common.GetPIName(QryOrder.RequestedBy ?? 0);
                            model.InitByPI_f = QryOrder.InitByPI_f ?? false;
                            model.SalaryLevelId = QryOrder.SalaryLevelId;
                            if (model.SalaryLevelId > 0)
                            {
                                var data = getSalaryLevelName_Description(model.SalaryLevelId ?? 0);
                                model.SalaryLevel = data.Item1;
                                model.SalaryLevelDescription = data.Item2;
                            }

                            model.CommiteeMemberId1 = QryOrder.CommitteeMember ?? 0;
                            model.CommiteeMemberId2 = QryOrder.CommitteeMembers ?? 0;
                            model.ChairpersonNameId = QryOrder.Chairperson ?? 0;
                            model.CommiteeMember1 = Common.GetPIName(QryOrder.CommitteeMember ?? 0);
                            model.CommiteeMember2 = Common.GetPIName(QryOrder.CommitteeMembers ?? 0);
                            model.ChairpersonName = Common.GetPIName(QryOrder.Chairperson ?? 0);
                            var QryOrderDetail = (from O in context.tblOrderDetail
                                                  where O.OrderId == Orderid
                                                  select O).FirstOrDefault();
                            if (QryOrderDetail != null)
                            {
                                if (QryOrder.OrderType == 2)
                                {
                                    model.ConsolidatedPay = QryOrderDetail.ConsolidatedPay;
                                    model.Fellowship = QryOrderDetail.Fellowship;
                                    model.PayType = QryOrderDetail.ConsolidatedPay == true ? "Consolidated Pay" : QryOrderDetail.Fellowship == true ? "Fellowship pay" : "-";
                                }
                                model.WithdrawnFullAmount = QryOrderDetail.WithdrawnFullAmount;
                                model.FlowofMail = QryOrderDetail.FlowOfMail;
                                model.PILetterPath = QryOrderDetail.PILetter;
                                model.PIJustificationRemarks = QryOrderDetail.PIJustificationRemarks;
                                model.Remarks = QryOrderDetail.PIJustificationRemarks;
                                model.Comments = QryOrderDetail.Comments;
                                model.PILetterFileName = QryOrderDetail.PILetterFileName;
                                model.RequestReference = QryOrderDetail.RequestReference ?? 0;
                                //model.TypeofappointmentId = QryOrderDetail.Typeofappointment ?? 0;
                                model.ReferenceNo = QryOrderDetail.RequestReferenceNo;
                                model.SourceEmailDate = QryOrderDetail.RequestEmailDate;
                                model.OfferDate = QryOrderDetail.OfferDate;
                                model.isWithdrawCommitment = QryOrderDetail.WithdrawCommitment;

                                model.FlowApprover = QryOrderDetail.NotetoCMAdmin == true ? "CMAdmin" : QryOrderDetail.NotetoDean == true ? "NDean" : "";
                                model.isConsolidatePay = QryOrderDetail.ConsolidatedPay == true ? "ConsolidatedPay" : QryOrderDetail.Fellowship == true ? "FellowshipPay" : "";
                            }
                            model.JustificationDoc = (from J in context.tblRCTOrderPIJustificationDocs
                                                      where J.OrderId == Orderid && J.Deleted_f != true
                                                      orderby J.DocsID descending
                                                      select new STEJustificationDoc()
                                                      {
                                                          FilePath = J.DocsName,
                                                          FileName = J.FileName
                                                      }).ToList();
                            //----appointment details----
                            appid = QryOrder.AppointmentId ?? 0;
                            apptype = QryOrder.AppointmentType ?? 0;
                            model.ApplicationID = appid;
                            model.TypeCode = apptype == 1 ? "CON" : apptype == 2 ? "STE" : apptype == 3 ? "OSG" : "";
                            if (apptype == 1)
                            {
                                var QryCON = (from A in context.tblRCTConsultantAppointment
                                              where A.ConsultantAppointmentId == appid
                                              select A).FirstOrDefault();
                                model.ApplicationNo = QryCON.ApplicationNumber;
                                model.EmployeeID = QryCON.EmployeersID;
                                int Typeofappointment = QryCON.TypeofAppointment ?? 0;
                                model.Typeofappointment = Common.GetCodeControlName(Typeofappointment, "Appointmenttype");
                                model.Name = Common.GetCodeControlName(QryCON.ProfessionalType ?? 0, "RCTProfessional") + QryCON.Name;
                                model.Nameoftheguardian = QryCON.NameoftheGuardian;
                                model.Email = QryCON.Email;
                                model.GateScore = 0;
                                model.PresentAddress = QryCON.TemporaryAddress;
                                model.PermanentAddress = QryCON.PermanentAddress;
                                model.ApplicationNo = QryCON.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryCON.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QryCON.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QryCON.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QryCON.ContactNumber;
                                model.IITMPensionerCSIRStaff = Common.GetCodeControlName(QryCON.IITMPensionerorCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                model.OldPrjDetailModel = Getmastappointmentdetails(appid, apptype);
                                model.Experience = Common.getExperienceInWordings(appid, model.TypeCode);
                                model.ExperienceInDes = Common.getExperienceDecimal(appid, model.TypeCode);
                                model.Qualification = Common.getQualificationWordings(appid, model.TypeCode);
                                model.IITMExperience = IITExperienceInWording(model.EmployeeID);
                                model.ToMail = QryCON.ToMail;
                                model.CCMail = QryCON.Bcc;
                                model.PayType = "-";
                                model.MailSent_f = context.tblRCTConsutantAppEmailLog.Any(m => m.OrderId == orderid && m.TypeofMail == 6 && m.IsSend == true);
                            }
                            else if (apptype == 2)
                            {
                                var QrySTE = (from A in context.tblRCTSTE
                                              from D in context.tblRCTDesignation
                                              where A.DesignationId == D.DesignationId && A.STEID == appid
                                              select new { A, D }).FirstOrDefault();
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.EmployeeID = QrySTE.A.EmployeersID;
                                int Typeofappointment = QrySTE.A.TypeofAppointment ?? 0;
                                model.TypeofappointmentId = Typeofappointment;
                                model.Typeofappointment = Common.GetCodeControlName(Typeofappointment, "STEAppointmenttype");
                                model.Name = Common.GetCodeControlName(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.Email = QrySTE.A.Email;
                                model.GateScore = QrySTE.A.GateScore ?? 0;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.PermanentAddress = QrySTE.A.PermanentAddress;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QrySTE.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QrySTE.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QrySTE.A.ContactNumber;
                                model.staffcategory = QrySTE.A.StaffCategory;
                                model.PhysicallyChanged = QrySTE.A.PhysicallyChallenged;
                                if (QryOrder.OrderType != 2)
                                {
                                    model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.PayType = QrySTE.A.ConsolidatedPay == true ? "Consolidated Pay" : QrySTE.A.Fellowship == true ? "Fellowship pay" : "-";
                                }
                                if(QryOrder.OrderType==2&&QryOrder.InitByPI_f==true)
                                {
                                    model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.PayType = QrySTE.A.ConsolidatedPay == true ? "Consolidated Pay" : QrySTE.A.Fellowship == true ? "Fellowship pay" : "-";
                                    model.isConsolidatePay = QrySTE.A.ConsolidatedPay == true ? "ConsolidatedPay" : QrySTE.A.Fellowship == true ? "FellowshipPay" : "";
                                }
                                model.IITMPensionerCSIRStaff = Common.GetCodeControlName(QrySTE.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                model.IsMsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                if (QryOrder.Status == "Completed" && QryOrder.isUpdated)
                                    model.OldPrjDetailModel = getCompletedOldAppointmentDetails(Orderid);
                                else
                                    model.OldPrjDetailModel = Getmastappointmentdetails(appid, apptype);
                                //model.DesignationCode = QrySTE.D.DesignationCode;
                                model.Experience = Common.getExperienceInWordings(appid, model.TypeCode);
                                model.ExperienceInDes = Common.getExperienceDecimal(appid, model.TypeCode);
                                model.Qualification = Common.getQualificationWordings(appid, model.TypeCode);
                                model.IITMExperience = IITExperienceInWording(model.EmployeeID);
                                model.ToMail = QrySTE.A.ToMail;
                                model.CCMail = QrySTE.A.bcc;
                                model.MailSent_f = context.tblRCTSTEEmailLog.Any(m => m.OrderId == orderid && m.TypeofMail == 6 && m.IsSend == true);

                            }
                            else if (apptype == 3)
                            {
                                var QryOSG = (from A in context.tblRCTOutsourcing
                                              from D in context.tblRCTDesignation
                                              where A.DesignationId == D.DesignationId && A.OSGID == appid
                                              select new { A, D }).FirstOrDefault();
                                //var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                //                  where A.ID == appid && A.OrderId == Orderid && A.Status == "Active"
                                //                  select A).FirstOrDefault();
                                //var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                //                  where ((A.ID == appid && A.OrderId == Orderid) || (A.ID == appid && A.IsCurrentVersion == true)) && A.Status == "Active"
                                //                  select A).FirstOrDefault();

                                model.ApplicationNo = QryOSG.A.ApplicationNumber;
                                model.EmployeeID = QryOSG.A.EmployeersID;
                                int Typeofappointment = QryOSG.A.TypeofAppointment ?? 0;
                                model.TypeofappointmentId = Typeofappointment;
                                model.Typeofappointment = Common.GetCodeControlName(Typeofappointment, "OSGAppointmenttype");
                                model.Name = Common.GetCodeControlName(QryOSG.A.ProfessionalType ?? 0, "RCTProfessional") + QryOSG.A.Name;
                                model.PhysicallyChallenged = QryOSG.A.PhysicallyChallenged == "No" ? 2 : QryOSG.A.PhysicallyChallenged == "Yes" ? 1 : 0;
                                model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                                model.Email = QryOSG.A.Email;
                                model.GateScore = QryOSG.A.GateScore ?? 0;
                                model.PresentAddress = QryOSG.A.PresentAddress;
                                model.PermanentAddress = QryOSG.A.PermanentAddress;
                                model.ApplicationNo = QryOSG.A.ApplicationNumber;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                                model.Age = Common.RCTCalculateAge(DateTime.Now, QryOSG.A.DateofBirth ?? DateTime.Now);
                                model.Sex = Common.GetCodeControlName(QryOSG.A.Sex ?? 0, "RCTGender");
                                model.ContactNumber = QryOSG.A.ContactNumber;
                                model.staffcategory = QryOSG.A.StaffCategory;
                                model.PhysicallyChanged = QryOSG.A.PhysicallyChallenged;
                                model.EmpSalutation = QryOSG.A.ProfessionalType;
                                model.EmpName = QryOSG.A.Name;
                                model.EmpDesig = QryOSG.D.Designation;
                                if (QryOrder.OrderType != 2)
                                {
                                    model.ConsolidatedPay = QryOSG.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QryOSG.A.Fellowship ?? false;
                                    model.PayType = QryOSG.A.ConsolidatedPay == true ? "Consolidated Pay" : QryOSG.A.Fellowship == true ? "Fellowship pay" : "-";
                                    
                                }
                                if (QryOrder.OrderType == 2 && QryOrder.InitByPI_f == true)
                                {
                                    model.ConsolidatedPay = QryOSG.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QryOSG.A.Fellowship ?? false;
                                    model.PayType = QryOSG.A.ConsolidatedPay == true ? "Consolidated Pay" : QryOSG.A.Fellowship == true ? "Fellowship pay" : "-";
                                    model.isConsolidatePay = QryOSG.A.ConsolidatedPay == true ? "ConsolidatedPay" : QryOSG.A.Fellowship == true ? "FellowshipPay" : "";
                                }
                                model.IITMPensionerCSIRStaff = Common.GetCodeControlName(QryOSG.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                                model.IsMsPhd = QryOSG.A.MsPhd ?? false;
                                model.PhdDetail = QryOSG.A.PhdDetail;
                                if (QryOrder.Status == "Completed")
                                {
                                    model.OldPrjDetailModel = getCompletedOldAppointmentDetails(Orderid);
                                }
                                else
                                {
                                    model.OldPrjDetailModel = Getmastappointmentdetails(appid, apptype);
                                }
                                //model.DesignationCode = QryOSG.D.DesignationCode;
                                model.VendorId = QryOSG.A.VendorId;
                                model.Experience = Common.getExperienceInWordings(appid, model.TypeCode);
                                model.ExperienceInDes = Common.getExperienceDecimal(appid, model.TypeCode);
                                model.Qualification = Common.getQualificationWordings(appid, model.TypeCode);
                                model.IITMExperience = IITExperienceInWording(model.EmployeeID);
                                model.ToMail = QryOSG.A.ToMail;
                                model.CCMail = QryOSG.A.bcc;
                                model.MailSent_f = context.tblRCTOSGEmailLog.Any(m => m.OrderId == orderid && m.TypeofMail == 6 && !m.Subject.Contains("structure approval"));
                                if (appid >0  && orderid > 0)
                                {
                                    var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                                      where A.ID == appid && A.OrderId == Orderid && A.Status == "Active"
                                                      select A).FirstOrDefault();
                                    if (Qrysalcalc != null)
                                    {
                                        model.RecommendedSalary = Qrysalcalc.RecommendSalary;
                                        model.EmpSalutation = Qrysalcalc.Salutation;
                                        model.EmpName = QryOSG.A.Name;
                                        model.EmpDesig = Qrysalcalc.EmpDesignation;
                                        model.EmpType = Qrysalcalc.EmpType;
                                        model.PhysicalyHandicaped = Qrysalcalc.PhysicallyHandicapped;
                                        model.EmpPFBasicWages = Qrysalcalc.PFBasicWages;
                                        model.EmployeePF = Qrysalcalc.EmployeePF;
                                        model.EmployeeESIC = Qrysalcalc.EmployeeESIC;
                                        model.EmployeeProfessionalTax = Qrysalcalc.EmpProfessionalTax;
                                        model.EmployeeTtlDeduct = Qrysalcalc.EmpTotalDeduction;
                                        model.EmployeeNetSalary = Qrysalcalc.EmpNetSalary;
                                        model.EmployerPF = Qrysalcalc.EmployerPF;
                                        model.EmployerIns = Qrysalcalc.EmployerInsurance;
                                        model.EmployerESIC = Qrysalcalc.EmployerESIC;
                                        model.EmployerTtlContribute = Qrysalcalc.EmployerTotalContribution;
                                        model.EmployeeCTC = Qrysalcalc.EmployerCTC;
                                        model.AgencyFee = Qrysalcalc.EmployerAgencyFee;
                                        model.SalaryGST = Qrysalcalc.EmployerGST;
                                        model.CTCwithAgencyFee = Qrysalcalc.EmployerCTCWithAgencyFee;
                                        model.TotalCTC = Qrysalcalc.TotalCostPerMonth;

                                        var oldEmployeeCTC = (from A in context.tblRCTSalaryCalcDetails
                                                              where A.ID == appid && A.IsCurrentVersion == true && A.Status == "Active"
                                                              orderby A.SalaryDetailsId descending
                                                              select A.EmployerCTC).FirstOrDefault();
                                        model.OldTotalCTC = oldEmployeeCTC;
                                    }
                                }
                                else
                                {
                                    var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                                      where (A.ID == appid && A.IsCurrentVersion == true && A.Status == "Active")
                                                      select A).FirstOrDefault();
                                    if (Qrysalcalc != null)
                                    {
                                        model.RecommendedSalary = Qrysalcalc.RecommendSalary;
                                        model.EmpSalutation = Qrysalcalc.Salutation;
                                        model.EmpName = QryOSG.A.Name;
                                        model.EmpDesig = Qrysalcalc.EmpDesignation;
                                        model.EmpType = Qrysalcalc.EmpType;
                                        model.PhysicalyHandicaped = Qrysalcalc.PhysicallyHandicapped;
                                        model.EmpPFBasicWages = Qrysalcalc.PFBasicWages;
                                        model.EmployeePF = Qrysalcalc.EmployeePF;
                                        model.EmployeeESIC = Qrysalcalc.EmployeeESIC;
                                        model.EmployeeProfessionalTax = Qrysalcalc.EmpProfessionalTax;
                                        model.EmployeeTtlDeduct = Qrysalcalc.EmpTotalDeduction;
                                        model.EmployeeNetSalary = Qrysalcalc.EmpNetSalary;
                                        model.EmployerPF = Qrysalcalc.EmployerPF;
                                        model.EmployerIns = Qrysalcalc.EmployerInsurance;
                                        model.EmployerESIC = Qrysalcalc.EmployerESIC;
                                        model.EmployerTtlContribute = Qrysalcalc.EmployerTotalContribution;
                                        model.EmployeeCTC = Qrysalcalc.EmployerCTC;
                                        model.AgencyFee = Qrysalcalc.EmployerAgencyFee;
                                        model.SalaryGST = Qrysalcalc.EmployerGST;
                                        model.CTCwithAgencyFee = Qrysalcalc.EmployerCTCWithAgencyFee;
                                        model.TotalCTC = Qrysalcalc.TotalCostPerMonth;

                                        var oldEmployeeCTC = (from A in context.tblRCTSalaryCalcDetails
                                                              where A.ID == appid && A.IsCurrentVersion == true && A.Status == "Active"
                                                              orderby A.SalaryDetailsId descending
                                                              select A.EmployerCTC).FirstOrDefault();
                                        model.OldTotalCTC = oldEmployeeCTC;
                                    }
                                }
                            }
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return model;
            }
        }

        public Tuple<int, string> CommitCOP(OrderModel model, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int res = 0, OrderID = 0, apptype = 0;
                            decimal CommitmentBalance = 0;
                            apptype = getAppointmentType(model.TypeCode);
                            string prestatus = "", newstatus = "";

                            var edQuery = (from e in context.tblOrder
                                           where (e.Status.Contains("Note") || e.Status.Contains("Open") || e.Status.Contains("PI Initiated")) && e.isCommitmentReject != true
                                           && e.isGovAgencyFund != true && e.OrderId == model.OrderID
                                           select e).FirstOrDefault();
                            if (edQuery != null)
                            {
                                prestatus = edQuery.Status;
                                edQuery.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                newstatus = edQuery.Status;
                                edQuery.OrderDate = model.ApplicationReceiveDate;
                                edQuery.Basic = model.Salary;
                                edQuery.SalaryLevelId = model.SalaryLevelId;
                                var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                 where vw.ApplicationId == model.ApplicationID && vw.Category == model.TypeCode
                                                 && vw.ApplicationType == "New"
                                                 select new
                                                 {
                                                     vw.isMsPhd,
                                                     vw.TypeofAppointmentinInt,
                                                     vw.CommitmentNumber,
                                                     vw.BasicPay,
                                                     vw.ApplicationId,
                                                     vw.AppointmentStartdate,
                                                     vw.AppointmentEnddate,
                                                     vw.HRA,
                                                     vw.DesignationId,
                                                     vw.MedicalType,
                                                     vw.EmployeeNo,
                                                     vw.IITMPensionerorCSIRStaff
                                                 }).FirstOrDefault();
                                if (mastQuery != null)
                                {

                                    var query = (from c in context.tblCommitment
                                                 where c.CommitmentNumber == mastQuery.CommitmentNumber
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                        CommitmentBalance = query.CommitmentBalance ?? 0;

                                    decimal oldsalary = mastQuery.BasicPay ?? 0;
                                    decimal lwfAmount = 0, oldGST = 0;
                                    if (model.TypeCode == "OSG")
                                    {
                                        lwfAmount = getEmployeeLWFAmount(mastQuery.ApplicationId ?? 0);
                                        oldsalary = getEmployeeCTC(mastQuery.ApplicationId ?? 0);
                                    }
                                    else if (model.TypeCode == "CON")
                                    {
                                        oldGST = getCONGSTPercentage(mastQuery.ApplicationId ?? 0);
                                    }
                                    edQuery.WithdrawTillDate = model.WithdrawTillDate;
                                    if (model.WithdrawnFullAmount)
                                    {
                                        edQuery.WithdrawAmmount = CommitmentBalance;
                                    }
                                    else
                                    {
                                        decimal amount = 0;
                                        if (model.WithdrawTillDate != null)
                                        {
                                            var widthdrawdata = Common.calRCTCommitmentAmount(context, model.WithdrawTillDate.Value.AddDays(+1), mastQuery.AppointmentEnddate ?? DateTime.Now, oldsalary, mastQuery.HRA ?? 0, mastQuery.MedicalType ?? 0, mastQuery.DesignationId ?? 0, mastQuery.isMsPhd ?? false, mastQuery.TypeofAppointmentinInt ?? 0, model.TypeCode, lwfAmount, oldGST);
                                            if (!widthdrawdata.Item6)
                                                return Tuple.Create(0, "");
                                            amount = widthdrawdata.Item1;
                                            //amount = Math.Ceiling(amount);
                                        }
                                        var widthdrawAmount = CommitmentBalance - amount;
                                        if (widthdrawAmount <= 0)
                                            widthdrawAmount = CommitmentBalance;
                                        edQuery.WithdrawAmmount = decimal.Round(widthdrawAmount, 2);
                                    }

                                    decimal newsalary = model.Salary ?? 0;
                                    if (model.TypeCode == "OSG")
                                        newsalary = model.EmployeeCTC ?? 0;

                                    DateTime? StartDate = null;
                                    StartDate = model.Appointmentstartdate;
                                    if (model.WithdrawTillDate != null)
                                        StartDate = model.WithdrawTillDate.Value.AddDays(+1);

                                    var commitmentdata = Common.calRCTCommitmentAmount(context, StartDate ?? DateTime.Now, model.AppointmentEndDate ?? DateTime.Now, newsalary, model.HRA ?? 0, model.Medical, mastQuery.DesignationId ?? 0, mastQuery.isMsPhd ?? false, mastQuery.TypeofAppointmentinInt ?? 0, model.TypeCode, model.LWFAmount ?? 0, model.GST ?? 0);
                                    edQuery.CommitmentAmmount = commitmentdata.Item1;

                                    if (!commitmentdata.Item6)
                                        return Tuple.Create(0, "");

                                    if (model.ArrearOrDeductionTillDate != null)
                                    {
                                        //Back end entry for arrear and payment deduction
                                        var arreardata = Common.calRCTCommitmentAmount(context, mastQuery.AppointmentStartdate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, newsalary, model.HRA ?? 0, model.Medical, mastQuery.DesignationId ?? 0, mastQuery.isMsPhd ?? false, mastQuery.TypeofAppointmentinInt ?? 0, model.TypeCode, 0, model.GST ?? 0);
                                        edQuery.ArrearOrDeductionAmount = arreardata.Item1;
                                        edQuery.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;

                                        var queryupdate = (from dec in context.tblRCTOTHPaymentDeduction
                                                           from det in context.tblRCTOTHPaymentDeductionDetail
                                                           where dec.OTHPayDeductionId == det.OTHPayDeductionId && dec.OrderId == model.OrderID && dec.Status == "Open"
                                                           select new
                                                           {
                                                               dec,
                                                               det
                                                           }).FirstOrDefault();
                                        if (queryupdate != null)
                                        {
                                            queryupdate.dec.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                            queryupdate.dec.UpdtTs = DateTime.Now;
                                            queryupdate.dec.UpdtUser = logged_in_userId;
                                            queryupdate.dec.FromDate = model.Appointmentstartdate;
                                            queryupdate.dec.ToDate = model.ArrearOrDeductionTillDate;
                                            queryupdate.det.Amount = arreardata.Item1;
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                            addpaydeuction.EmployeeNo = mastQuery.EmployeeNo;
                                            addpaydeuction.AppointmentId = model.ApplicationID;
                                            addpaydeuction.AppointmentType = apptype;
                                            addpaydeuction.ProjectId = model.ProjectId;
                                            addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                            addpaydeuction.CrtdTS = DateTime.Now;
                                            addpaydeuction.CrtdUser = logged_in_userId;
                                            addpaydeuction.Status = "Open";
                                            //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                            addpaydeuction.FromDate = model.Appointmentstartdate;
                                            addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                            addpaydeuction.DesignationId = model.DesignationId;
                                            addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                            addpaydeuction.Basic = newsalary;
                                            addpaydeuction.HRA = model.HRA;
                                            addpaydeuction.Medical = model.MedicalAmmount;
                                            addpaydeuction.MedicalInclusive_f = model.Medical == 2 ? true : false;
                                            addpaydeuction.Isbackend_f = true;
                                            addpaydeuction.OrderId = edQuery.OrderId;
                                            context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                            context.SaveChanges();

                                            int othid = addpaydeuction.OTHPayDeductionId;
                                            tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                            var OtherType = 1;
                                            addothdetail.OTHPayDeductionId = othid;
                                            addothdetail.OtherType = OtherType;
                                            if (OtherType == 1)
                                                addothdetail.PaymentType = 9;
                                            addothdetail.HeadId = 9;
                                            addothdetail.Amount = arreardata.Item1;
                                            addothdetail.Remarks = "Back end entry";
                                            addothdetail.Status = "Active";
                                            context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                            context.SaveChanges();
                                        }
                                    }

                                    if (edQuery.AppointmentType == 2 || edQuery.AppointmentType == 3)
                                    {
                                        edQuery.HRA = commitmentdata.Item3;
                                        edQuery.isHRA = commitmentdata.Item2;
                                        edQuery.HRAPercentage = commitmentdata.Item5;
                                        edQuery.MedicalAmount = model.MedicalAmmount;
                                        edQuery.MedicalType = model.Medical;
                                        edQuery.isMedical = commitmentdata.Item4;
                                        if (edQuery.AppointmentType == 3)
                                        {
                                            var osgid = edQuery.AppointmentId;
                                            var odrid = edQuery.OrderId;
                                            var salQuery = (from A in context.tblRCTSalaryCalcDetails
                                                            where A.ID == osgid && A.OrderId == odrid && A.Status == "Active"
                                                            select A).FirstOrDefault();
                                            if (salQuery != null)
                                            {
                                                salQuery.StatutoryId = model.StatutoryId;
                                                salQuery.RecommendSalary = model.RecommendedSalary;
                                                salQuery.Salutation = model.EmpSalutation;
                                                salQuery.EmpDesignation = model.EmpDesig;
                                                salQuery.EmpType = model.EmpType;
                                                salQuery.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                                salQuery.PFBasicWages = model.EmpPFBasicWages;
                                                salQuery.EmployeePF = model.EmployeePF;
                                                salQuery.EmployeeESIC = model.EmployeeESIC;
                                                salQuery.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                                salQuery.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                                salQuery.EmpNetSalary = model.EmployeeNetSalary;
                                                salQuery.EmployerPF = model.EmployerPF;
                                                salQuery.EmployerInsurance = model.EmployerIns;
                                                salQuery.EmployerESIC = model.EmployerESIC;
                                                salQuery.EmployerTotalContribution = model.EmployerTtlContribute;
                                                salQuery.EmployerCTC = model.EmployeeCTC;
                                                salQuery.EmployerAgencyFee = model.AgencyFee;
                                                salQuery.EmployerGST = model.SalaryGST;
                                                salQuery.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                                salQuery.TotalCostPerMonth = model.TotalCTC;
                                                salQuery.IsCurrentVersion = false;
                                                salQuery.Status = "Active";
                                                salQuery.UpdtTS = DateTime.Now;
                                                salQuery.UpdtUserId = logged_in_userId;
                                                var data = getGSTAgencyFee(model.VendorId ?? 0);
                                                if (data != null)
                                                {
                                                    salQuery.GSTPercentage = data.Item1;
                                                    salQuery.AgencyFeePercentage = data.Item2;
                                                }
                                                context.SaveChanges();
                                            }
                                            else
                                            {
                                                tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                                salcalc.ID = model.ApplicationID;
                                                salcalc.StatutoryId = model.StatutoryId;
                                                salcalc.AppointType = "Outsourcing";
                                                salcalc.TypeCode = "OSG";
                                                salcalc.RecommendSalary = model.RecommendedSalary;
                                                salcalc.Salutation = model.EmpSalutation;
                                                salcalc.EmpType = model.EmpType;
                                                salcalc.EmpName = model.EmpName;
                                                salcalc.EmpDesignation = model.EmpDesig;
                                                salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                                salcalc.PFBasicWages = model.EmpPFBasicWages;
                                                salcalc.EmployeePF = model.EmployeePF;
                                                salcalc.EmployeeESIC = model.EmployeeESIC;
                                                salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                                salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                                salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                                salcalc.EmployerPF = model.EmployerPF;
                                                salcalc.EmployerInsurance = model.EmployerIns;
                                                salcalc.EmployerESIC = model.EmployerESIC;
                                                salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                                salcalc.EmployerCTC = model.EmployeeCTC;
                                                salcalc.EmployerAgencyFee = model.AgencyFee;
                                                salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                                salcalc.EmployerGST = model.SalaryGST;
                                                salcalc.TotalCostPerMonth = model.TotalCTC;
                                                salcalc.FromDate = model.FromDate;
                                                salcalc.ToDate = model.ToDate;
                                                salcalc.OrderId = edQuery.OrderId;
                                                salcalc.IsCurrentVersion = false;
                                                salcalc.Status = "Active";
                                                salcalc.CrtdTS = DateTime.Now;
                                                salcalc.CrtdUserId = logged_in_userId;
                                                var datas = getGSTAgencyFee(model.VendorId ?? 0);
                                                if (datas != null)
                                                {
                                                    salcalc.GSTPercentage = datas.Item1;
                                                    salcalc.AgencyFeePercentage = datas.Item2;
                                                }
                                                context.tblRCTSalaryCalcDetails.Add(salcalc);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    else if (edQuery.AppointmentType == 1)
                                    {
                                        edQuery.GST = model.GST;
                                    }
                                }

                                edQuery.FromDate = model.Appointmentstartdate;
                                edQuery.ToDate = model.AppointmentEndDate;
                                edQuery.NewProjectId = model.ProjectId;
                                edQuery.UpdtTS = DateTime.Now;
                                edQuery.UpdtUser = logged_in_userId;
                                edQuery.RequestedBy = model.RequestedByPI;
                                edQuery.SalaryLevelId = model.SalaryLevelId;
                                edQuery.CommitteeMember = model.CommiteeMemberId1;
                                edQuery.CommitteeMembers = model.CommiteeMemberId2;
                                edQuery.Chairperson = model.ChairpersonNameId;
                                context.SaveChanges();
                                OrderID = edQuery.OrderId;
                                //Update Order Detail table

                                var detQuery = (from o in context.tblOrderDetail where o.OrderId == OrderID select o).FirstOrDefault();
                                if (detQuery != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    if (model.PILetter != null)
                                    {
                                        docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                        var docfileId = Guid.NewGuid().ToString();
                                        docpath = docfileId + "_" + docname;
                                        model.PILetter.UploadFile("Requirement", docpath);
                                        detQuery.PILetter = docpath;
                                        detQuery.PILetterFileName = docname;
                                    }
                                    detQuery.PIJustificationRemarks = model.PIJustificationRemarks;
                                    detQuery.WithdrawnFullAmount = model.WithdrawnFullAmount;
                                    detQuery.WithdrawCommitment = model.isWithdrawCommitment;
                                    detQuery.RequestReference = model.RequestReference;
                                    detQuery.RequestReferenceNo = model.ReferenceNo;
                                    detQuery.RequestEmailDate = model.SourceEmailDate;
                                    detQuery.FlowOfMail = model.FlowofMail;
                                    detQuery.Comments = model.Comments;
                                    detQuery.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                    detQuery.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    context.SaveChanges();
                                }

                                foreach (var item in model.PIJustificationFile)
                                {
                                    if (item != null)
                                    {
                                        tblRCTOrderPIJustificationDocs docs = new tblRCTOrderPIJustificationDocs();
                                        docs.OrderId = OrderID;
                                        string actName = System.IO.Path.GetFileName(item.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.UploadFile("Requirement", docName);
                                        docs.DocsName = docName;
                                        docs.FileName = actName;
                                        docs.Description = model.PIJustificationRemarks;
                                        docs.Crt_Ts = DateTime.Now;
                                        docs.CrtUser = logged_in_userId;
                                        context.tblRCTOrderPIJustificationDocs.Add(docs);
                                        context.SaveChanges();
                                    }
                                }

                                context.tblRCTOrderDeviationCheckDetail.Where(x => x.OrderId == OrderID && x.isCurrentVersion == true)
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.isCurrentVersion = false;
                                        m.UptdTs = DateTime.Now;
                                        m.UptdUser = logged_in_userId;
                                    });

                                if (model.CheckListDetail != null)
                                {
                                    if (model.CheckListDetail.Count > 0)
                                    {
                                        foreach (var item in model.CheckListDetail)
                                        {
                                            tblRCTOrderDeviationCheckDetail deviation = new tblRCTOrderDeviationCheckDetail();
                                            deviation.OrderId = OrderID;
                                            deviation.CrtdUser = logged_in_userId;
                                            deviation.CrtdTs = DateTime.Now;
                                            deviation.DeviationCheckListId = item.FunctionCheckListId ?? 0;
                                            deviation.isCurrentVersion = true;
                                            deviation.IsChecked = item.IsChecked;
                                            context.tblRCTOrderDeviationCheckDetail.Add(deviation);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                res = 2;
                            }
                            else if (model.OrderID > 0)
                                return Tuple.Create(0, "Change of project form not allowed for edit.");
                            else
                            {
                                var OrderType = context.tblOrderMaster.FirstOrDefault(m => m.CodeDescription == "Change of project").CodeID;
                                int salarycalcId = 0, othid = 0;
                                tblOrder Order = new tblOrder();
                                Order.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                newstatus = Order.Status;
                                Order.AppointmentId = model.ApplicationID;
                                Order.AppointmentType = apptype;
                                Order.OrderDate = model.ApplicationReceiveDate;
                                Order.OrderType = OrderType;
                                Order.SalaryLevelId = model.SalaryLevelId;

                                var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                 where vw.ApplicationId == model.ApplicationID && vw.AppointmentType == apptype
                                                 && vw.ApplicationType == "New"
                                                 select new
                                                 {
                                                     vw.IITMPensionerorCSIRStaff,
                                                     vw.isMsPhd,
                                                     vw.EmployeeNo,
                                                     vw.TypeofAppointmentinInt,
                                                     vw.ProjectId,
                                                     vw.CommitmentNumber,
                                                     vw.BasicPay,
                                                     vw.ApplicationId,
                                                     vw.AppointmentStartdate,
                                                     vw.AppointmentEnddate,
                                                     vw.HRA,
                                                     vw.DesignationId,
                                                     vw.MedicalType
                                                 }).FirstOrDefault();
                                if (mastQuery != null)
                                {
                                    Order.OldDesignation = mastQuery.DesignationId;
                                    Order.NewDesignation = mastQuery.DesignationId;
                                    Order.OldProjectId = mastQuery.ProjectId;

                                    var query = (from c in context.tblCommitment
                                                 where c.CommitmentNumber == mastQuery.CommitmentNumber
                                                 select c).FirstOrDefault();
                                    if (query != null)
                                        CommitmentBalance = query.CommitmentBalance ?? 0;

                                    decimal oldsalary = mastQuery.BasicPay ?? 0;
                                    decimal lwfAmount = 0, oldGST = 0;
                                    if (model.TypeCode == "OSG")
                                        oldsalary = getEmployeeCTC(mastQuery.ApplicationId ?? 0);
                                    else if (model.TypeCode == "CON")
                                        oldGST = getCONGSTPercentage(mastQuery.ApplicationId ?? 0);

                                    decimal newsalary = model.Salary ?? 0;
                                    if (model.TypeCode == "OSG")
                                    {
                                        lwfAmount = getEmployeeLWFAmount(mastQuery.ApplicationId ?? 0);
                                        newsalary = model.EmployeeCTC ?? 0;
                                    }
                                    DateTime? StartDate = null;
                                    StartDate = model.Appointmentstartdate;
                                    if (model.WithdrawTillDate != null)
                                        StartDate = model.WithdrawTillDate.Value.AddDays(+1);
                                    var commitmentdata = Common.calRCTCommitmentAmount(context, StartDate ?? DateTime.Now, model.AppointmentEndDate ?? DateTime.Now, newsalary, model.HRA ?? 0, model.Medical, model.DesignationId ?? 0, mastQuery.isMsPhd ?? false, mastQuery.TypeofAppointmentinInt ?? 0, model.TypeCode, model.LWFAmount ?? 0, model.GST ?? 0);
                                    Order.CommitmentAmmount = commitmentdata.Item1;
                                    if (!commitmentdata.Item6)
                                        return Tuple.Create(0, "");
                                    Order.Basic = model.Salary;
                                    Order.WithdrawTillDate = model.WithdrawTillDate;
                                    if (model.WithdrawnFullAmount)
                                    {
                                        Order.WithdrawAmmount = CommitmentBalance;
                                    }
                                    else
                                    {
                                        decimal amount = 0;
                                        if (model.WithdrawTillDate != null)
                                        {
                                            var withdrawdata = Common.calRCTCommitmentAmount(context, model.WithdrawTillDate.Value.AddDays(+1), mastQuery.AppointmentEnddate ?? DateTime.Now, oldsalary, mastQuery.HRA ?? 0, mastQuery.MedicalType ?? 0, mastQuery.DesignationId ?? 0, mastQuery.isMsPhd ?? false, mastQuery.TypeofAppointmentinInt ?? 0, model.TypeCode, lwfAmount, oldGST);
                                            amount = withdrawdata.Item1;
                                            amount = Math.Ceiling(amount);
                                            if (!withdrawdata.Item6)
                                                return Tuple.Create(0, "");
                                        }
                                        var widthdrawAmount = CommitmentBalance - amount;
                                        if (widthdrawAmount <= 0)
                                            widthdrawAmount = CommitmentBalance;
                                        Order.WithdrawAmmount = decimal.Round(widthdrawAmount, 2);
                                    }

                                    if (model.ArrearOrDeductionTillDate != null)
                                    {
                                        //Back end entry for arrear and payment deduction
                                        var arreardata = Common.calRCTCommitmentAmount(context, mastQuery.AppointmentStartdate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, newsalary, model.HRA ?? 0, model.Medical, mastQuery.DesignationId ?? 0, mastQuery.isMsPhd ?? false, mastQuery.TypeofAppointmentinInt ?? 0, model.TypeCode, 0, model.GST ?? 0);
                                        Order.ArrearOrDeductionAmount = arreardata.Item1;
                                        Order.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;

                                        tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                        addpaydeuction.EmployeeNo = mastQuery.EmployeeNo;
                                        addpaydeuction.AppointmentId = model.ApplicationID;
                                        addpaydeuction.AppointmentType = apptype;
                                        addpaydeuction.ProjectId = model.ProjectId;
                                        addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        addpaydeuction.CrtdTS = DateTime.Now;
                                        addpaydeuction.CrtdUser = logged_in_userId;
                                        addpaydeuction.Status = "Open";
                                        //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                        addpaydeuction.FromDate = model.Appointmentstartdate;
                                        addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                        addpaydeuction.DesignationId = model.DesignationId;
                                        addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                        addpaydeuction.Basic = newsalary;
                                        addpaydeuction.HRA = model.HRA;
                                        addpaydeuction.Medical = model.MedicalAmmount;
                                        addpaydeuction.MedicalInclusive_f = model.Medical == 2 ? true : false;
                                        addpaydeuction.Isbackend_f = true;
                                        context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                        context.SaveChanges();

                                        othid = addpaydeuction.OTHPayDeductionId;
                                        tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                        var OtherType = 1;
                                        addothdetail.OTHPayDeductionId = othid;
                                        addothdetail.OtherType = OtherType;
                                        if (OtherType == 1)
                                            addothdetail.PaymentType = 9;
                                        addothdetail.HeadId = 9;
                                        addothdetail.Amount = arreardata.Item1;
                                        addothdetail.Remarks = "Back end entry";
                                        addothdetail.Status = "Active";
                                        context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                        context.SaveChanges();
                                    }

                                    if (apptype == 1)
                                    {
                                        Order.GST = model.GST;
                                    }
                                    else if (apptype == 2 || apptype == 3)
                                    {
                                        Order.HRA = commitmentdata.Item3;
                                        Order.isHRA = commitmentdata.Item2;
                                        Order.HRAPercentage = commitmentdata.Item5;
                                        Order.MedicalAmount = model.MedicalAmmount;
                                        Order.MedicalType = model.Medical;
                                        Order.isMedical = commitmentdata.Item4;
                                        if (apptype == 3)
                                        {
                                            tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                            salcalc.ID = model.ApplicationID;
                                            salcalc.StatutoryId = model.StatutoryId;
                                            salcalc.AppointType = "Outsourcing";
                                            salcalc.TypeCode = "OSG";
                                            salcalc.RecommendSalary = model.RecommendedSalary;
                                            salcalc.Salutation = model.EmpSalutation;
                                            salcalc.EmpType = model.EmpType;
                                            salcalc.EmpName = model.EmpName;
                                            salcalc.EmpDesignation = model.EmpDesig;
                                            salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                            salcalc.PFBasicWages = model.EmpPFBasicWages;
                                            salcalc.EmployeePF = model.EmployeePF;
                                            salcalc.EmployeeESIC = model.EmployeeESIC;
                                            salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                            salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                            salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                            salcalc.EmployerPF = model.EmployerPF;
                                            salcalc.EmployerInsurance = model.EmployerIns;
                                            salcalc.EmployerESIC = model.EmployerESIC;
                                            salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                            salcalc.EmployerCTC = model.EmployeeCTC;
                                            salcalc.EmployerAgencyFee = model.AgencyFee;
                                            salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                            salcalc.EmployerGST = model.SalaryGST;
                                            salcalc.TotalCostPerMonth = model.TotalCTC;
                                            salcalc.FromDate = model.FromDate;
                                            salcalc.ToDate = model.ToDate;
                                            salcalc.OrderId = Order.OrderId;
                                            salcalc.IsCurrentVersion = false;
                                            salcalc.Status = "Active";
                                            salcalc.CrtdTS = DateTime.Now;
                                            salcalc.CrtdUserId = logged_in_userId;
                                            var data = getGSTAgencyFee(model.VendorId ?? 0);
                                            if (data != null)
                                            {
                                                salcalc.GSTPercentage = data.Item1;
                                                salcalc.AgencyFeePercentage = data.Item2;
                                            }
                                            context.tblRCTSalaryCalcDetails.Add(salcalc);
                                            context.SaveChanges();
                                            salarycalcId = salcalc.SalaryDetailsId;
                                        }
                                    }
                                }
                                Order.FromDate = model.Appointmentstartdate;
                                Order.ToDate = model.AppointmentEndDate;
                                Order.NewProjectId = model.ProjectId;
                                Order.CrtdTS = DateTime.Now;
                                Order.CrtdUser = logged_in_userId;
                                var ordwiseseq = (from O in context.tblOrder where O.OrderType == OrderType select O.OrderwiseSeqId).Max() ?? 0;
                                Order.OrderwiseSeqId = ordwiseseq == 0 ? 1 : ordwiseseq + 1;
                                var maxseq = (from O in context.tblOrder select O.SeqId).Max() ?? 0;
                                var number = maxseq == 0 ? 1 : maxseq + 1;
                                Order.SeqId = number;
                                string value = number.ToString("D4");
                                Order.OrderNo = "CP" + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                Order.RequestedBy = model.RequestedByPI;
                                Order.SalaryLevelId = model.SalaryLevelId;
                                Order.CommitteeMember = model.CommiteeMemberId1;
                                Order.CommitteeMembers = model.CommiteeMemberId2;
                                Order.Chairperson = model.ChairpersonNameId;
                                context.tblOrder.Add(Order);
                                context.SaveChanges();
                                OrderID = Order.OrderId;
                                if (apptype == 3)
                                {
                                    var salQuery = context.tblRCTSalaryCalcDetails.FirstOrDefault(m => m.SalaryDetailsId == salarycalcId);
                                    salQuery.OrderId = OrderID;
                                    context.SaveChanges();
                                }
                                if (othid > 0)
                                {
                                    var othQuery = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OTHPayDeductionId == othid);
                                    if (othQuery != null)
                                    {
                                        othQuery.OrderId = OrderID;
                                        context.SaveChanges();
                                    }
                                }

                                tblOrderDetail OrderDetail = new tblOrderDetail();
                                OrderDetail.OrderId = OrderID;
                                string docpath = "";
                                string docname = "";
                                if (model.PILetter != null)
                                {
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    OrderDetail.PILetter = docpath;
                                    OrderDetail.PILetterFileName = docname;
                                }
                                OrderDetail.PIJustificationRemarks = model.PIJustificationRemarks;
                                OrderDetail.WithdrawnFullAmount = model.WithdrawnFullAmount;
                                OrderDetail.WithdrawCommitment = model.isWithdrawCommitment;
                                OrderDetail.FlowOfMail = model.FlowofMail;
                                OrderDetail.Comments = model.Comments;
                                OrderDetail.RequestReference = model.RequestReference;
                                OrderDetail.RequestReferenceNo = model.ReferenceNo;
                                OrderDetail.RequestEmailDate = model.SourceEmailDate;
                                OrderDetail.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                OrderDetail.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;

                                context.tblOrderDetail.Add(OrderDetail);
                                context.SaveChanges();

                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var fileDoc in model.PIJustificationFile)
                                    {
                                        if (fileDoc != null)
                                        {
                                            tblRCTOrderPIJustificationDocs doc = new tblRCTOrderPIJustificationDocs();
                                            string actName = System.IO.Path.GetFileName(fileDoc.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            fileDoc.UploadFile("Requirement", docName);
                                            doc.OrderId = OrderID;
                                            doc.DocsName = docName;
                                            doc.FileName = actName;
                                            doc.Description = model.PIJustificationRemarks;
                                            doc.Crt_Ts = DateTime.Now;
                                            doc.CrtUser = logged_in_userId;
                                            context.tblRCTOrderPIJustificationDocs.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                if (model.CheckListDetail != null)
                                {
                                    foreach (var item in model.CheckListDetail)
                                    {
                                        if (item != null)
                                        {
                                            tblRCTOrderDeviationCheckDetail deviationdetail = new tblRCTOrderDeviationCheckDetail();
                                            deviationdetail.OrderId = OrderID;
                                            deviationdetail.CrtdUser = logged_in_userId;
                                            deviationdetail.CrtdTs = DateTime.Now;
                                            deviationdetail.DeviationCheckListId = item.FunctionCheckListId ?? 0;
                                            deviationdetail.isCurrentVersion = true;
                                            deviationdetail.IsChecked = item.IsChecked;
                                            context.tblRCTOrderDeviationCheckDetail.Add(deviationdetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                res = 1;
                            }
                            transaction.Commit();

                            PostOrderStatusLog(OrderID, prestatus, newstatus, logged_in_userId);

                            if (OrderID > 0 && model.FlowofMail == "Nd")
                            {
                                if (model.TypeCode == "STE" && !context.tblRCTSTEEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && m.IsSend == true))
                                    RCTEmailContentService.AcknowledgementForOrders(OrderID, logged_in_userId);
                                if (model.TypeCode == "CON" && !context.tblRCTConsutantAppEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && m.IsSend == true))
                                    RCTEmailContentService.AcknowledgementForOrders(OrderID, logged_in_userId);
                                if (model.TypeCode == "OSG" && model.SendSalaryStructure == "SST")
                                    RCTEmailContentService.AcknowleadgementMailForOSGOrders(OrderID, logged_in_userId, model.SendSalaryStructure ?? null);
                            }
                            else if (OrderID > 0 && (model.FlowofMail == "NP" || model.FlowofMail == "NDean" || model.FlowofMail == "NC"))
                            {
                                if (model.TypeCode == "OSG")
                                    RCTEmailContentService.DeviationMailForOSGOrders(OrderID, logged_in_userId, model.Comments, model.SendSalaryStructure ?? null);
                                else
                                    RCTEmailContentService.DeviationMailForOrders(OrderID, logged_in_userId, model.Comments);
                                res = -1;
                            }

                            if (model.FlowofMail == "Nd" && apptype != 3)
                            {
                                var Data = RecuitCOPWFInit(OrderID, logged_in_userId);
                                if (Data.Item1)
                                    res = 1;
                                else
                                {
                                    res = 3;
                                    return Tuple.Create(res, Data.Item2);
                                }
                            }
                            return Tuple.Create(res, "");
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, "");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, "");
            }
        }

        public Tuple<int, string> CommitExtension(OrderModel model, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int res = 0, OrderID = 0, TypeofAppointmentId = 0;
                            bool MsPhd = false;
                            int apptype = getAppointmentType(model.TypeCode);
                            string prestatus = "", newstatus = "";
                            var odQuery = (from o in context.tblOrder
                                           from od in context.tblOrderDetail
                                           where o.OrderId == od.OrderId && (o.Status.Contains("Note to PI") || o.Status.Contains("Open") || o.Status.Contains("PI Initiated"))
                                           && o.isGovAgencyFund != true && o.isCommitmentReject != true && o.OrderType == 3
                                           && o.OrderId == model.OrderID
                                           select new { o, od }).FirstOrDefault();
                            if (odQuery != null)
                            {
                                prestatus = odQuery.o.Status;
                                odQuery.o.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                newstatus = odQuery.o.Status;
                                odQuery.o.OrderDate = model.ApplicationReceiveDate;
                                odQuery.o.Basic = model.Salary;
                                odQuery.o.FromDate = model.FromDate;
                                odQuery.o.ToDate = model.ToDate;
                                odQuery.o.SalaryLevelId = model.SalaryLevelId;

                                var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                 where vw.ApplicationId == model.ApplicationID && vw.AppointmentType == apptype
                                                 && vw.ApplicationType == "New"
                                                 select new
                                                 {
                                                     vw.isMsPhd,
                                                     vw.TypeofAppointmentinInt,
                                                     vw.EmployeeNo,
                                                     vw.IITMPensionerorCSIRStaff
                                                 }).FirstOrDefault();

                                if (mastQuery != null)
                                {
                                    MsPhd = mastQuery.isMsPhd ?? false;
                                    TypeofAppointmentId = mastQuery.TypeofAppointmentinInt ?? 0;
                                }

                                var salary = model.Salary;
                                if (model.TypeCode == "OSG")
                                    salary = model.EmployeeCTC;
                                var commitmentdata = Common.calRCTCommitmentAmount(context, model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, salary ?? 0, model.HRA ?? 0, model.Medical, model.DesignationId ?? 0, MsPhd, TypeofAppointmentId, model.TypeCode, model.LWFAmount ?? 0, model.GST ?? 0);
                                odQuery.o.CommitmentAmmount = commitmentdata.Item1;

                                if (!commitmentdata.Item6)
                                    return Tuple.Create(0, "");

                                if (apptype == 2 || apptype == 3)
                                {
                                    odQuery.o.HRA = commitmentdata.Item3;
                                    odQuery.o.HRAPercentage = commitmentdata.Item5;
                                    odQuery.o.MedicalAmount = model.MedicalAmmount;
                                    odQuery.o.isMedical = commitmentdata.Item4;
                                    odQuery.o.MedicalType = model.Medical;

                                    //query.HRA = model.HRA;
                                    //query.HRAPercentage = model.HRAPercentage;
                                    //query.MedicalAmount = model.MedicalAmmount;
                                    //query.MedicalType = model.Medical;
                                    //query.isMedical = model.isMedical;

                                    var osgid = odQuery.o.AppointmentId;
                                    var odrid = odQuery.o.OrderId;
                                    var salQuery = (from A in context.tblRCTSalaryCalcDetails
                                                    where A.ID == osgid && A.OrderId == odrid && A.Status == "Active"
                                                    select A).FirstOrDefault();
                                    if (salQuery != null)
                                    {
                                        salQuery.StatutoryId = model.StatutoryId;
                                        salQuery.RecommendSalary = model.RecommendedSalary;
                                        salQuery.Salutation = model.EmpSalutation;
                                        salQuery.EmpDesignation = model.EmpDesig;
                                        salQuery.EmpType = model.EmpType;
                                        salQuery.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                        salQuery.PFBasicWages = model.EmpPFBasicWages;
                                        salQuery.EmployeePF = model.EmployeePF;
                                        salQuery.EmployeeESIC = model.EmployeeESIC;
                                        salQuery.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                        salQuery.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                        salQuery.EmpNetSalary = model.EmployeeNetSalary;
                                        salQuery.EmployerPF = model.EmployerPF;
                                        salQuery.EmployerInsurance = model.EmployerIns;
                                        salQuery.EmployerESIC = model.EmployerESIC;
                                        salQuery.EmployerTotalContribution = model.EmployerTtlContribute;
                                        salQuery.EmployerCTC = model.EmployeeCTC;
                                        salQuery.EmployerAgencyFee = model.AgencyFee;
                                        salQuery.EmployerGST = model.SalaryGST;
                                        salQuery.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                        salQuery.TotalCostPerMonth = model.TotalCTC;
                                        salQuery.IsCurrentVersion = false;
                                        salQuery.Status = "Active";
                                        salQuery.UpdtTS = DateTime.Now;
                                        salQuery.UpdtUserId = logged_in_userId;
                                        var data = getGSTAgencyFee(model.VendorId ?? 0);
                                        if (data != null)
                                        {
                                            salQuery.GSTPercentage = data.Item1;
                                            salQuery.AgencyFeePercentage = data.Item2;
                                        }
                                        context.SaveChanges();
                                    }
                                    else if (apptype == 3)
                                    {
                                        tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                        salcalc.StatutoryId = model.StatutoryId;
                                        salcalc.ID = model.ApplicationID;
                                        salcalc.AppointType = "Outsourcing";
                                        salcalc.TypeCode = "OSG";
                                        salcalc.RecommendSalary = model.RecommendedSalary;
                                        salcalc.Salutation = model.EmpSalutation;
                                        salcalc.EmpType = model.EmpType;
                                        salcalc.EmpName = model.EmpName;
                                        salcalc.EmpDesignation = model.EmpDesig;
                                        salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                        salcalc.PFBasicWages = model.EmpPFBasicWages;
                                        salcalc.EmployeePF = model.EmployeePF;
                                        salcalc.EmployeeESIC = model.EmployeeESIC;
                                        salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                        salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                        salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                        salcalc.EmployerPF = model.EmployerPF;
                                        salcalc.EmployerInsurance = model.EmployerIns;
                                        salcalc.EmployerESIC = model.EmployerESIC;
                                        salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                        salcalc.EmployerCTC = model.EmployeeCTC;
                                        salcalc.EmployerAgencyFee = model.AgencyFee;
                                        salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                        salcalc.EmployerGST = model.SalaryGST;
                                        salcalc.TotalCostPerMonth = model.TotalCTC;
                                        salcalc.FromDate = model.FromDate;
                                        salcalc.ToDate = model.ToDate;
                                        salcalc.OrderId = odQuery.o.OrderId;
                                        salcalc.IsCurrentVersion = false;
                                        salcalc.Status = "Active";
                                        salcalc.CrtdTS = DateTime.Now;
                                        salcalc.CrtdUserId = logged_in_userId;
                                        var datas = getGSTAgencyFee(model.VendorId ?? 0);
                                        if (datas != null)
                                        {
                                            salcalc.GSTPercentage = datas.Item1;
                                            salcalc.AgencyFeePercentage = datas.Item2;
                                        }
                                        context.tblRCTSalaryCalcDetails.Add(salcalc);
                                        context.SaveChanges();
                                    }
                                }
                                else
                                {
                                    odQuery.o.GST = model.GST;
                                    if (model.IsGSTapplicable == "Yes")
                                        odQuery.o.IsGSTApplicable = true;
                                    else
                                        odQuery.o.IsGSTApplicable = false;
                                }

                                if (model.ArrearOrDeductionTillDate != null)
                                {
                                    var arreardata = Common.calRCTCommitmentAmount(context, model.FromDate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, salary ?? 0, model.HRA ?? 0, model.Medical, model.DesignationId ?? 0, MsPhd, TypeofAppointmentId, model.TypeCode, 0, model.GST ?? 0);
                                    odQuery.o.ArrearOrDeductionAmount = arreardata.Item1;
                                    odQuery.o.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;
                                    var othQuery = (from dec in context.tblRCTOTHPaymentDeduction
                                                    from det in context.tblRCTOTHPaymentDeductionDetail
                                                    where dec.OTHPayDeductionId == det.OTHPayDeductionId && dec.OrderId == model.OrderID && dec.Status == "Open"
                                                    select new
                                                    {
                                                        dec,
                                                        det
                                                    }).FirstOrDefault();
                                    if (othQuery != null)
                                    {
                                        othQuery.dec.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        othQuery.dec.UpdtTs = DateTime.Now;
                                        othQuery.dec.UpdtUser = logged_in_userId;
                                        othQuery.dec.FromDate = model.FromDate;
                                        othQuery.dec.ToDate = model.ArrearOrDeductionTillDate;
                                        othQuery.det.Amount = arreardata.Item1;
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                        addpaydeuction.EmployeeNo = mastQuery.EmployeeNo;
                                        addpaydeuction.AppointmentId = model.ApplicationID;
                                        addpaydeuction.AppointmentType = apptype;
                                        addpaydeuction.ProjectId = model.ProjectId;
                                        addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        addpaydeuction.CrtdTS = DateTime.Now;
                                        addpaydeuction.CrtdUser = logged_in_userId;
                                        addpaydeuction.Status = "Open";
                                        //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                        addpaydeuction.FromDate = model.FromDate;
                                        addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                        addpaydeuction.DesignationId = model.DesignationId;
                                        addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                        addpaydeuction.Basic = salary;
                                        addpaydeuction.HRA = model.HRA;
                                        addpaydeuction.Medical = model.MedicalAmmount;
                                        addpaydeuction.MedicalInclusive_f = model.Medical == 2 ? true : false;
                                        addpaydeuction.Isbackend_f = true;
                                        addpaydeuction.OrderId = odQuery.o.OrderId;
                                        context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                        context.SaveChanges();

                                        int othid = addpaydeuction.OTHPayDeductionId;
                                        tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                        var OtherType = 1;
                                        addothdetail.OTHPayDeductionId = othid;
                                        addothdetail.OtherType = OtherType;
                                        if (OtherType == 1)
                                            addothdetail.PaymentType = 9;
                                        addothdetail.HeadId = 9;
                                        addothdetail.Amount = arreardata.Item1;
                                        addothdetail.Remarks = "Back end entry";
                                        addothdetail.Status = "Active";
                                        context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                        context.SaveChanges();
                                    }
                                }
                                odQuery.o.UpdtTS = DateTime.Now;
                                odQuery.o.UpdtUser = logged_in_userId;
                                odQuery.o.RequestedBy = model.RequestedByPI;
                                odQuery.o.CommitteeMember = model.CommiteeMemberId1;
                                odQuery.o.CommitteeMembers = model.CommiteeMemberId2;
                                odQuery.o.Chairperson = model.ChairpersonNameId;
                                context.SaveChanges();
                                OrderID = odQuery.o.OrderId;

                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    odQuery.od.PILetter = docpath;
                                    odQuery.od.PILetterFileName = docname;
                                }

                                odQuery.od.PIJustificationRemarks = model.PIJustificationRemarks;
                                odQuery.od.FlowOfMail = model.FlowofMail;
                                odQuery.od.Comments = model.Comments;
                                odQuery.od.RequestReference = model.RequestReference;
                                odQuery.od.RequestReferenceNo = model.ReferenceNo;
                                odQuery.od.RequestEmailDate = model.SourceEmailDate;
                                odQuery.od.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                odQuery.od.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                context.SaveChanges();

                                //bool Exp_f = false;
                                //if (model.PIJustificationFile != null)
                                //{
                                //    foreach (var item in model.PIJustificationFile)
                                //    {
                                //        if (item != null)
                                //        {
                                //            Exp_f = true;
                                //            if (Exp_f)
                                //                break;
                                //        }

                                //    }
                                //}
                                //if (Exp_f)
                                //{
                                //    context.tblRCTOrderPIJustificationDocs.Where(x => x.OrderId == OrderID && x.Crt_TS_To == null)
                                //           .ToList()
                                //           .ForEach(m =>
                                //           {
                                //               m.Crt_TS_To = DateTime.Now;
                                //           });
                                //}

                                foreach (var item in model.PIJustificationFile)
                                {
                                    if (item != null)
                                    {
                                        tblRCTOrderPIJustificationDocs docs = new tblRCTOrderPIJustificationDocs();
                                        docs.OrderId = OrderID;
                                        string actName = System.IO.Path.GetFileName(item.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.UploadFile("Requirement", docName);
                                        docs.DocsName = docName;
                                        docs.FileName = actName;
                                        docs.Description = model.PIJustificationRemarks;
                                        docs.Crt_Ts = DateTime.Now;
                                        docs.CrtUser = logged_in_userId;
                                        context.tblRCTOrderPIJustificationDocs.Add(docs);
                                        context.SaveChanges();
                                    }
                                }

                                context.tblRCTOrderDeviationCheckDetail.Where(x => x.OrderId == OrderID && x.isCurrentVersion == true)
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.isCurrentVersion = false;
                                        m.UptdTs = DateTime.Now;
                                        m.UptdUser = logged_in_userId;
                                    });


                                if (model.CheckListDetail != null)
                                {
                                    foreach (var item in model.CheckListDetail)
                                    {
                                        if (item != null)
                                        {
                                            tblRCTOrderDeviationCheckDetail deviationdetail = new tblRCTOrderDeviationCheckDetail();
                                            deviationdetail.OrderId = OrderID;
                                            deviationdetail.CrtdUser = logged_in_userId;
                                            deviationdetail.CrtdTs = DateTime.Now;
                                            deviationdetail.DeviationCheckListId = item.FunctionCheckListId ?? 0;
                                            deviationdetail.isCurrentVersion = true;
                                            deviationdetail.IsChecked = item.IsChecked;
                                            context.tblRCTOrderDeviationCheckDetail.Add(deviationdetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                res = 2;
                            }
                            else if (model.OrderID > 0)
                            {
                                return Tuple.Create(0, "Extension form not allowed for edit.");
                            }
                            else
                            {
                                var orderTypeid = context.tblOrderMaster.FirstOrDefault(m => m.CodeDescription == "Extension").CodeID;
                                int salarycalcId = 0, othid = 0;
                                tblOrder Order = new tblOrder();
                                Order.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                prestatus = Order.Status;
                                Order.AppointmentId = model.ApplicationID;
                                Order.AppointmentType = apptype;
                                Order.OrderDate = model.ApplicationReceiveDate;
                                Order.OrderType = orderTypeid;
                                Order.Basic = model.Salary;
                                Order.RequestedBy = model.RequestedByPI;
                                Order.SalaryLevelId = model.SalaryLevelId;
                                var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                 where vw.ApplicationId == model.ApplicationID && vw.AppointmentType == apptype
                                                 && vw.ApplicationType == "New"
                                                 select new
                                                 {
                                                     vw.IITMPensionerorCSIRStaff,
                                                     vw.EmployeeNo,
                                                     vw.isMsPhd,
                                                     vw.TypeofAppointmentinInt,
                                                     vw.ProjectId,
                                                     vw.DesignationId
                                                 }).FirstOrDefault();

                                if (mastQuery != null)
                                {
                                    MsPhd = mastQuery.isMsPhd ?? false;
                                    TypeofAppointmentId = mastQuery.TypeofAppointmentinInt ?? 0;
                                    Order.OldProjectId = mastQuery.ProjectId;
                                    Order.NewProjectId = mastQuery.ProjectId;
                                    Order.OldDesignation = mastQuery.DesignationId;
                                    Order.NewDesignation = mastQuery.DesignationId;
                                    var salary = model.Salary;
                                    if (model.TypeCode == "OSG")
                                        salary = model.EmployeeCTC;

                                    var commitmentdata = Common.calRCTCommitmentAmount(context, model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, salary ?? 0, model.HRA ?? 0, model.Medical, model.DesignationId ?? 0, MsPhd, TypeofAppointmentId, model.TypeCode, model.LWFAmount ?? 0, model.GST ?? 0);
                                    Order.CommitmentAmmount = commitmentdata.Item1;
                                    if (!commitmentdata.Item6)
                                        return Tuple.Create(0, "");

                                    if (apptype == 2 || apptype == 3)
                                    {
                                        Order.HRA = commitmentdata.Item3;
                                        Order.isHRA = commitmentdata.Item2;
                                        Order.HRAPercentage = commitmentdata.Item5;
                                        Order.MedicalAmount = model.MedicalAmmount;
                                        Order.isMedical = commitmentdata.Item4;
                                        Order.MedicalType = model.Medical;
                                        if (apptype == 3)
                                        {
                                            tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                            salcalc.StatutoryId = model.StatutoryId;
                                            salcalc.ID = model.ApplicationID;
                                            salcalc.AppointType = "Outsourcing";
                                            salcalc.TypeCode = "OSG";
                                            salcalc.RecommendSalary = model.RecommendedSalary;
                                            salcalc.Salutation = model.EmpSalutation;
                                            salcalc.EmpType = model.EmpType;
                                            salcalc.EmpName = model.EmpName;
                                            salcalc.EmpDesignation = model.EmpDesig;
                                            salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                            salcalc.PFBasicWages = model.EmpPFBasicWages;
                                            salcalc.EmployeePF = model.EmployeePF;
                                            salcalc.EmployeeESIC = model.EmployeeESIC;
                                            salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                            salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                            salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                            salcalc.EmployerPF = model.EmployerPF;
                                            salcalc.EmployerInsurance = model.EmployerIns;
                                            salcalc.EmployerESIC = model.EmployerESIC;
                                            salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                            salcalc.EmployerCTC = model.EmployeeCTC;
                                            salcalc.EmployerAgencyFee = model.AgencyFee;
                                            salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                            salcalc.EmployerGST = model.SalaryGST;
                                            salcalc.TotalCostPerMonth = model.TotalCTC;
                                            salcalc.FromDate = model.FromDate;
                                            salcalc.ToDate = model.ToDate;
                                            salcalc.OrderId = Order.OrderId;
                                            salcalc.IsCurrentVersion = false;
                                            salcalc.Status = "Active";
                                            salcalc.CrtdTS = DateTime.Now;
                                            salcalc.CrtdUserId = logged_in_userId;
                                            var data = getGSTAgencyFee(model.VendorId ?? 0);
                                            if (data != null)
                                            {
                                                salcalc.GSTPercentage = data.Item1;
                                                salcalc.AgencyFeePercentage = data.Item2;
                                            }
                                            context.tblRCTSalaryCalcDetails.Add(salcalc);
                                            context.SaveChanges();
                                            salarycalcId = salcalc.SalaryDetailsId;
                                        }
                                    }
                                    else
                                    {
                                        Order.GST = model.GST;
                                        if (model.IsGSTapplicable == "Yes")
                                            Order.IsGSTApplicable = true;
                                        else
                                            Order.IsGSTApplicable = false;
                                    }

                                    if (model.ArrearOrDeductionTillDate != null)
                                    {
                                        var arreardata = Common.calRCTCommitmentAmount(context, model.FromDate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, model.Salary ?? 0, model.HRA ?? 0, model.Medical, model.DesignationId ?? 0, MsPhd, TypeofAppointmentId, model.TypeCode, 0, model.GST ?? 0);
                                        Order.ArrearOrDeductionAmount = arreardata.Item1;
                                        Order.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;

                                        tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                        addpaydeuction.EmployeeNo = mastQuery.EmployeeNo;
                                        addpaydeuction.AppointmentId = model.ApplicationID;
                                        addpaydeuction.AppointmentType = apptype;
                                        addpaydeuction.ProjectId = model.ProjectId;
                                        addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        addpaydeuction.CrtdTS = DateTime.Now;
                                        addpaydeuction.CrtdUser = logged_in_userId;
                                        addpaydeuction.Status = "Open";
                                        //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                        addpaydeuction.FromDate = model.FromDate;
                                        addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                        addpaydeuction.DesignationId = model.DesignationId;
                                        addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                        addpaydeuction.Basic = model.Salary;
                                        addpaydeuction.HRA = model.HRA;
                                        addpaydeuction.Medical = model.MedicalAmmount;
                                        addpaydeuction.MedicalInclusive_f = model.Medical == 2 ? true : false;
                                        addpaydeuction.Isbackend_f = true;
                                        context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                        context.SaveChanges();

                                        othid = addpaydeuction.OTHPayDeductionId;
                                        tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                        var OtherType = 1;
                                        addothdetail.OTHPayDeductionId = othid;
                                        addothdetail.OtherType = OtherType;
                                        if (OtherType == 1)
                                            addothdetail.PaymentType = 9;
                                        addothdetail.HeadId = 9;
                                        addothdetail.Amount = arreardata.Item1;
                                        addothdetail.Remarks = "Back end entry";
                                        addothdetail.Status = "Active";
                                        context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                        context.SaveChanges();
                                    }
                                }
                                //Order.CommitmentAmmount = model.CommitmentAmount;
                                Order.FromDate = model.FromDate;
                                Order.ToDate = model.ToDate;
                                Order.CrtdTS = DateTime.Now;
                                Order.CrtdUser = logged_in_userId;
                                var maxOrderwise = (from O in context.tblOrder
                                                    where O.OrderType == orderTypeid
                                                    select O.OrderwiseSeqId).Max() ?? 0;
                                Order.OrderwiseSeqId = maxOrderwise == 0 ? 1 : maxOrderwise + 1;
                                var maxSeq = (from O in context.tblOrder
                                              select O.SeqId).Max() ?? 0;
                                var number = maxSeq == 0 ? 1 : maxSeq + 1;
                                Order.SeqId = number;
                                string value = number.ToString("D4");
                                Order.OrderNo = "EX" + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                Order.CommitteeMember = model.CommiteeMemberId1;
                                Order.CommitteeMembers = model.CommiteeMemberId2;
                                Order.Chairperson = model.ChairpersonNameId;
                                context.tblOrder.Add(Order);
                                context.SaveChanges();
                                OrderID = Order.OrderId;
                                bool result = IsRespondTermEndMail(model.ApplicationID, model.TypeCode, logged_in_userId, OrderID, context);
                                if (apptype == 3)
                                {
                                    var salQuery = context.tblRCTSalaryCalcDetails.FirstOrDefault(m => m.SalaryDetailsId == salarycalcId);
                                    salQuery.OrderId = OrderID;
                                    context.SaveChanges();
                                }
                                if (othid > 0)
                                {
                                    var othQuery = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OTHPayDeductionId == othid);
                                    if (othQuery != null)
                                    {
                                        othQuery.OrderId = OrderID;
                                        context.SaveChanges();
                                    }
                                }

                                tblOrderDetail OrderDetail = new tblOrderDetail();
                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    OrderDetail.PILetter = docpath;
                                    OrderDetail.PILetterFileName = docname;
                                }
                                OrderDetail.OrderId = OrderID;
                                OrderDetail.PIJustificationRemarks = model.PIJustificationRemarks;
                                OrderDetail.FlowOfMail = model.FlowofMail;
                                OrderDetail.Comments = model.Comments;
                                OrderDetail.RequestReference = model.RequestReference;
                                OrderDetail.RequestReferenceNo = model.ReferenceNo;
                                OrderDetail.RequestEmailDate = model.SourceEmailDate;
                                OrderDetail.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                OrderDetail.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                context.tblOrderDetail.Add(OrderDetail);
                                context.SaveChanges();

                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var item in model.PIJustificationFile)
                                    {
                                        if (item != null)
                                        {
                                            tblRCTOrderPIJustificationDocs doc = new tblRCTOrderPIJustificationDocs();
                                            doc.OrderId = OrderID;
                                            string actName = System.IO.Path.GetFileName(item.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            //item.UploadFile("Requirement", docName);
                                            item.UploadFile("Requirement", docName);
                                            doc.DocsName = docName;
                                            doc.FileName = actName;
                                            doc.Description = model.PIJustificationRemarks;
                                            doc.Crt_Ts = DateTime.Now;
                                            doc.CrtUser = logged_in_userId;
                                            context.tblRCTOrderPIJustificationDocs.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                if (model.CheckListDetail != null)
                                {
                                    if (model.CheckListDetail.Count > 0)
                                    {
                                        for (int i = 0; i < model.CheckListDetail.Count; i++)
                                        {
                                            tblRCTOrderDeviationCheckDetail deviation = new tblRCTOrderDeviationCheckDetail();
                                            deviation.OrderId = OrderID;
                                            deviation.CrtdUser = logged_in_userId;
                                            deviation.CrtdTs = DateTime.Now;
                                            deviation.DeviationCheckListId = model.CheckListDetail[i].FunctionCheckListId ?? 0;
                                            deviation.isCurrentVersion = true;
                                            deviation.IsChecked = model.CheckListDetail[i].IsChecked;
                                            context.tblRCTOrderDeviationCheckDetail.Add(deviation);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                res = 1;
                            }
                            transaction.Commit();
                            PostOrderStatusLog(OrderID, prestatus, newstatus, logged_in_userId);

                            if (OrderID > 0 && model.FlowofMail == "Nd")
                            {
                                if (model.TypeCode == "STE" && !context.tblRCTSTEEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && m.IsSend == true))
                                    RCTEmailContentService.AcknowledgementForOrders(OrderID, logged_in_userId);
                                if (model.TypeCode == "CON" && !context.tblRCTConsutantAppEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && m.IsSend == true))
                                    RCTEmailContentService.AcknowledgementForOrders(OrderID, logged_in_userId);
                                if (model.TypeCode == "OSG" && model.SendSalaryStructure == "SST")
                                    RCTEmailContentService.AcknowleadgementMailForOSGOrders(OrderID, logged_in_userId, model.SendSalaryStructure ?? null);
                            }
                            if (OrderID > 0 && (model.FlowofMail == "NP" || model.FlowofMail == "NDean" || model.FlowofMail == "NC"))
                            {
                                if (model.TypeCode == "OSG")
                                    RCTEmailContentService.DeviationMailForOSGOrders(OrderID, logged_in_userId, model.Comments, model.SendSalaryStructure ?? null);
                                else
                                    RCTEmailContentService.DeviationMailForOrders(OrderID, logged_in_userId, model.Comments);
                                res = -1;
                            }

                            if (model.FlowofMail == "Nd" && apptype != 3)
                            {
                                var data = RecruitExtensionWFInit(OrderID, logged_in_userId);
                                if (data.Item1)
                                    res = 1;
                                else
                                {
                                    res = 3;
                                    return Tuple.Create(res, data.Item2);
                                }
                            }
                            return Tuple.Create(res, "");
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, "");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, "");
            }
        }

        public Tuple<int, string> CommitEnhancement(OrderModel model, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int res = 0, OrderID = 0;
                            int AppointmentType = getAppointmentType(model.TypeCode);
                            var prestatus = "";
                            var newstatus = "";
                            var _qryOrderID = context.tblOrderMaster.FirstOrDefault(m => m.CodeDescription == "Enhancement").CodeID;
                            var odQuery = (from o in context.tblOrder
                                           where (o.Status.Contains("Note") || o.Status == "Open" || o.Status.Contains("PI Initiated"))
                                           && o.OrderType == _qryOrderID && o.isGovAgencyFund != true && o.isCommitmentReject != true
                                           && o.OrderId == model.OrderID
                                           select o).FirstOrDefault();
                            if (odQuery != null)
                            {
                                odQuery.OrderDate = model.ApplicationReceiveDate;
                                odQuery.Basic = model.Salary;
                                prestatus = odQuery.Status;
                                odQuery.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                newstatus = odQuery.Status;
                                odQuery.CommitmentAmmount = model.CommitmentAmount;
                                odQuery.WithdrawAmmount = model.WithdrawalAmount;
                                odQuery.RequestedBy = model.RequestedByPI;
                                odQuery.SalaryLevelId = model.SalaryLevelId;
                                if (AppointmentType == 1)
                                {
                                    odQuery.GST = model.IsGSTapplicable == "Yes" ? model.GST : 0;
                                    odQuery.IsGSTApplicable = model.IsGSTapplicable == "Yes" ? true : false;
                                }
                                else if (AppointmentType == 2)
                                {
                                    odQuery.HRA = model.HRA;
                                    odQuery.isHRA = model.isHRA;
                                    odQuery.MedicalAmount = model.MedicalAmmount;
                                    odQuery.isMedical = model.isMedical;
                                    odQuery.MedicalType = model.Medical;
                                }
                                else if (AppointmentType == 3)
                                {
                                    odQuery.MedicalAmount = model.MedicalAmmount;
                                    var osgid = odQuery.AppointmentId;
                                    var odrid = odQuery.OrderId;
                                    var salQuery = (from s in context.tblRCTSalaryCalcDetails
                                                    where s.ID == osgid && s.OrderId == odrid && s.Status == "Active"
                                                    select s).FirstOrDefault();
                                    if (salQuery != null)
                                    {
                                        salQuery.StatutoryId = model.StatutoryId;
                                        salQuery.RecommendSalary = model.RecommendedSalary;
                                        salQuery.Salutation = model.EmpSalutation;
                                        salQuery.EmpDesignation = model.EmpDesig;
                                        salQuery.EmpType = model.EmpType;
                                        salQuery.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                        salQuery.PFBasicWages = model.EmpPFBasicWages;
                                        salQuery.EmployeePF = model.EmployeePF;
                                        salQuery.EmployeeESIC = model.EmployeeESIC;
                                        salQuery.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                        salQuery.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                        salQuery.EmpNetSalary = model.EmployeeNetSalary;
                                        salQuery.EmployerPF = model.EmployerPF;
                                        salQuery.EmployerInsurance = model.EmployerIns;
                                        salQuery.EmployerESIC = model.EmployerESIC;
                                        salQuery.EmployerTotalContribution = model.EmployerTtlContribute;
                                        salQuery.EmployerCTC = model.EmployeeCTC;
                                        salQuery.EmployerAgencyFee = model.AgencyFee;
                                        salQuery.EmployerGST = model.SalaryGST;
                                        salQuery.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                        salQuery.TotalCostPerMonth = model.TotalCTC;
                                        salQuery.Status = "Active";
                                        salQuery.UpdtTS = DateTime.Now;
                                        salQuery.UpdtUserId = logged_in_userId;
                                        var data = getGSTAgencyFee(model.VendorId ?? 0);
                                        if (data != null)
                                        {
                                            salQuery.GSTPercentage = data.Item1;
                                            salQuery.AgencyFeePercentage = data.Item2;
                                        }
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        var _qryOSG = context.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == model.ApplicationID);
                                        tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                        salcalc.StatutoryId = model.StatutoryId;
                                        salcalc.ID = _qryOSG.OSGID;
                                        salcalc.AppointType = "Outsourcing";
                                        salcalc.TypeCode = "OSG";
                                        salcalc.RecommendSalary = model.RecommendedSalary;
                                        salcalc.Salutation = model.EmpSalutation;
                                        salcalc.EmpType = model.EmpType;
                                        salcalc.EmpName = model.EmpName;
                                        salcalc.EmpDesignation = model.EmpDesig;
                                        salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                        salcalc.PFBasicWages = model.EmpPFBasicWages;
                                        salcalc.EmployeePF = model.EmployeePF;
                                        salcalc.EmployeeESIC = model.EmployeeESIC;
                                        salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                        salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                        salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                        salcalc.EmployerPF = model.EmployerPF;
                                        salcalc.EmployerInsurance = model.EmployerIns;
                                        salcalc.EmployerESIC = model.EmployerESIC;
                                        salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                        salcalc.EmployerCTC = model.EmployeeCTC;
                                        salcalc.EmployerAgencyFee = model.AgencyFee;
                                        salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                        salcalc.EmployerGST = model.SalaryGST;
                                        salcalc.TotalCostPerMonth = model.TotalCTC;
                                        salcalc.FromDate = model.FromDate;
                                        salcalc.ToDate = model.ToDate;
                                        salcalc.OrderId = odQuery.OrderId;
                                        salcalc.IsCurrentVersion = false;
                                        salcalc.Status = "Active";
                                        salcalc.CrtdTS = DateTime.Now;
                                        salcalc.CrtdUserId = logged_in_userId;
                                        var datas = getGSTAgencyFee(model.VendorId ?? 0);
                                        if (datas != null)
                                        {
                                            salcalc.GSTPercentage = datas.Item1;
                                            salcalc.AgencyFeePercentage = datas.Item2;
                                        }
                                        context.tblRCTSalaryCalcDetails.Add(salcalc);
                                        context.SaveChanges();
                                    }
                                }
                                odQuery.FromDate = model.FromDate;
                                odQuery.ToDate = model.ToDate;
                                odQuery.NewDesignation = model.DesignationId;
                                odQuery.NewProjectId = model.ProjectId;
                                odQuery.UpdtTS = DateTime.Now;
                                odQuery.UpdtUser = logged_in_userId;
                                odQuery.CommitteeMember = model.CommiteeMemberId1;
                                odQuery.CommitteeMembers = model.CommiteeMemberId2;
                                odQuery.Chairperson = model.ChairpersonNameId;
                                context.SaveChanges();
                                OrderID = odQuery.OrderId;
                                if (model.ArrearOrDeductionTillDate != null)
                                {
                                    var othQuery = (from dec in context.tblRCTOTHPaymentDeduction
                                                    from det in context.tblRCTOTHPaymentDeductionDetail
                                                    where dec.OTHPayDeductionId == det.OTHPayDeductionId && dec.OrderId == model.OrderID && dec.Status == "Open"
                                                    select new { dec, det }
                                                         ).FirstOrDefault();
                                    if (othQuery != null)
                                    {

                                        othQuery.dec.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        othQuery.dec.UpdtTs = DateTime.Now;
                                        othQuery.dec.UpdtUser = logged_in_userId;
                                        othQuery.dec.FromDate = model.FromDate;
                                        othQuery.dec.ToDate = model.ArrearOrDeductionTillDate;
                                        othQuery.det.Amount = model.ArrearOrDeductionAmount;
                                        odQuery.ArrearOrDeductionAmount = model.ArrearOrDeductionAmount;
                                        odQuery.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry
                                                         where vw.ApplicationId == model.ApplicationID && vw.Category == model.TypeCode
                                                         && vw.ApplicationType == "New"
                                                         select new { vw.IITMPensionerorCSIRStaff, vw.EmployeeNo, vw.ProjectId, vw.DesignationId }).FirstOrDefault();
                                        if (mastQuery != null)
                                        {
                                            tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                            addpaydeuction.EmployeeNo = mastQuery.EmployeeNo;
                                            addpaydeuction.AppointmentId = model.ApplicationID;
                                            addpaydeuction.AppointmentType = AppointmentType;
                                            addpaydeuction.ProjectId = model.ProjectId;
                                            addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                            addpaydeuction.CrtdTS = DateTime.Now;
                                            addpaydeuction.CrtdUser = logged_in_userId;
                                            addpaydeuction.Status = "Open";
                                            //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                            addpaydeuction.FromDate = model.FromDate;
                                            addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                            addpaydeuction.DesignationId = model.DesignationId;
                                            addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                            addpaydeuction.Basic = model.Salary;
                                            addpaydeuction.HRA = model.HRA;
                                            addpaydeuction.Medical = model.MedicalAmmount;
                                            addpaydeuction.MedicalInclusive_f = model.Medical == 2 ? true : false;
                                            addpaydeuction.Isbackend_f = true;
                                            addpaydeuction.OrderId = odQuery.OrderId;
                                            context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                            context.SaveChanges();

                                            int othid = addpaydeuction.OTHPayDeductionId;
                                            tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                            var OtherType = 1;
                                            addothdetail.OTHPayDeductionId = othid;
                                            addothdetail.OtherType = OtherType;
                                            if (OtherType == 1)
                                                addothdetail.PaymentType = 9;
                                            addothdetail.HeadId = 9;
                                            addothdetail.Amount = model.ArrearOrDeductionAmount;
                                            addothdetail.Remarks = "Back end entry";
                                            addothdetail.Status = "Active";
                                            context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                //Update Order Detail table
                                var detQuery = (from s in context.tblOrderDetail where s.OrderId == OrderID select s).FirstOrDefault();
                                detQuery.PIJustificationRemarks = model.PIJustificationRemarks;
                                detQuery.FlowOfMail = model.FlowofMail;
                                detQuery.Comments = model.Comments;
                                detQuery.WithdrawCommitment = model.isWithdrawCommitment;
                                detQuery.RequestReference = model.RequestReference;
                                detQuery.RequestReferenceNo = model.ReferenceNo;
                                detQuery.RequestEmailDate = model.SourceEmailDate;
                                detQuery.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                detQuery.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    detQuery.PILetter = docpath;
                                    detQuery.PILetterFileName = docname;
                                }
                                if (AppointmentType == 1)
                                {
                                    detQuery.ConsolidatedPay = false;
                                    detQuery.Fellowship = false;
                                }
                                else
                                {
                                    detQuery.ConsolidatedPay = model.isConsolidatePay == "ConsolidatedPay" ? true : false;
                                    detQuery.Fellowship = model.isConsolidatePay == "FellowshipPay" ? true : false;
                                }
                                context.SaveChanges();

                                if (model.PIJustificationFile != null)
                                {
                                    //var QryUpdatePIJustification = (from P in context.tblRCTOrderPIJustificationDocs where P.OrderId == OrderID orderby P.DocsID select P).ToList();
                                    //if (QryUpdatePIJustification != null)
                                    //{
                                    //    if (QryUpdatePIJustification.Count > 0)
                                    //    {
                                    //        foreach (var item in QryUpdatePIJustification)
                                    //        {
                                    //            item.Crt_TS_To = DateTime.Now;
                                    //            context.SaveChanges();
                                    //        }
                                    //    }
                                    //}

                                    foreach (var item in model.PIJustificationFile)
                                    {
                                        if (item != null)
                                        {
                                            tblRCTOrderPIJustificationDocs docs = new tblRCTOrderPIJustificationDocs();
                                            docs.OrderId = OrderID;
                                            string actName = System.IO.Path.GetFileName(item.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.UploadFile("Requirement", docName);
                                            docs.DocsName = docName;
                                            docs.FileName = actName;
                                            docs.Description = model.Remarks;
                                            docs.Crt_Ts = DateTime.Now;
                                            docs.CrtUser = logged_in_userId;
                                            context.tblRCTOrderPIJustificationDocs.Add(docs);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                context.tblRCTOrderDeviationCheckDetail.Where(x => x.OrderId == OrderID && x.isCurrentVersion == true)
                                    .ToList().ForEach(m =>
                                    {
                                        m.isCurrentVersion = false;
                                        m.UptdTs = DateTime.Now;
                                        m.UptdUser = logged_in_userId;
                                    });

                                if (model.CheckListDetail != null)
                                {
                                    if (model.CheckListDetail.Count > 0)
                                    {
                                        for (int i = 0; i < model.CheckListDetail.Count; i++)
                                        {
                                            tblRCTOrderDeviationCheckDetail deviationDetail = new tblRCTOrderDeviationCheckDetail();
                                            deviationDetail.OrderId = OrderID;
                                            deviationDetail.CrtdUser = logged_in_userId;
                                            deviationDetail.CrtdTs = DateTime.Now;
                                            deviationDetail.DeviationCheckListId = model.CheckListDetail[i].FunctionCheckListId ?? 0;
                                            deviationDetail.isCurrentVersion = true;
                                            deviationDetail.IsChecked = model.CheckListDetail[i].IsChecked;
                                            context.tblRCTOrderDeviationCheckDetail.Add(deviationDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                res = 2;
                            }
                            else if (model.OrderID > 0)
                            {
                                return Tuple.Create(0, "Enhancement form not allowed for edit.");
                            }
                            else
                            {
                                tblOrder Order = new tblOrder();
                                int salarycalcId = 0, othid = 0;
                                Order.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                newstatus = Order.Status;
                                Order.AppointmentId = model.ApplicationID;
                                Order.AppointmentType = AppointmentType;
                                Order.OrderDate = model.ApplicationReceiveDate;
                                Order.OrderType = _qryOrderID;
                                Order.Basic = model.Salary;
                                Order.isUpdated = false;
                                Order.SalaryLevelId = model.SalaryLevelId;
                                if (AppointmentType == 1)
                                {
                                    Order.GST = model.IsGSTapplicable == "Yes" ? model.GST : 0;
                                    Order.IsGSTApplicable = model.IsGSTapplicable == "Yes" ? true : false;
                                }
                                else if (AppointmentType == 2)
                                {
                                    Order.HRA = model.HRA;
                                    Order.MedicalAmount = model.MedicalAmmount;
                                    Order.MedicalType = model.Medical;
                                    Order.isMedical = model.isMedical;
                                    Order.isHRA = model.isHRA;
                                }
                                else if (AppointmentType == 3)
                                {
                                    Order.MedicalAmount = model.MedicalAmmount;
                                    Order.MedicalType = model.Medical;
                                    tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                    salcalc.StatutoryId = model.StatutoryId;
                                    salcalc.ID = model.ApplicationID;
                                    salcalc.AppointType = "Outsourcing";
                                    salcalc.TypeCode = "OSG";
                                    salcalc.RecommendSalary = model.RecommendedSalary;
                                    salcalc.Salutation = model.EmpSalutation;
                                    salcalc.EmpType = model.EmpType;
                                    salcalc.EmpName = model.EmpName;
                                    salcalc.EmpDesignation = model.EmpDesig;
                                    salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                    salcalc.PFBasicWages = model.EmpPFBasicWages;
                                    salcalc.EmployeePF = model.EmployeePF;
                                    salcalc.EmployeeESIC = model.EmployeeESIC;
                                    salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                    salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                    salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                    salcalc.EmployerPF = model.EmployerPF;
                                    salcalc.EmployerInsurance = model.EmployerIns;
                                    salcalc.EmployerESIC = model.EmployerESIC;
                                    salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                    salcalc.EmployerCTC = model.EmployeeCTC;
                                    salcalc.EmployerAgencyFee = model.AgencyFee;
                                    salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                    salcalc.EmployerGST = model.SalaryGST;
                                    salcalc.TotalCostPerMonth = model.TotalCTC;
                                    salcalc.FromDate = model.FromDate;
                                    salcalc.ToDate = model.ToDate;
                                    //salcalc.OrderId = _qryOrder.OrderId;
                                    salcalc.IsCurrentVersion = false;
                                    salcalc.Status = "Active";
                                    salcalc.CrtdTS = DateTime.Now;
                                    salcalc.CrtdUserId = logged_in_userId;
                                    var data = getGSTAgencyFee(model.VendorId ?? 0);
                                    if (data != null)
                                    {
                                        salcalc.GSTPercentage = data.Item1;
                                        salcalc.AgencyFeePercentage = data.Item2;
                                    }
                                    context.tblRCTSalaryCalcDetails.Add(salcalc);
                                    context.SaveChanges();
                                    salarycalcId = salcalc.SalaryDetailsId;
                                }
                                Order.CommitmentAmmount = model.CommitmentAmount;
                                Order.WithdrawAmmount = model.WithdrawalAmount;
                                Order.FromDate = model.FromDate;
                                Order.ToDate = model.ToDate;
                                Order.NewProjectId = model.ProjectId;
                                Order.NewDesignation = model.DesignationId;
                                Order.CrtdTS = DateTime.Now;
                                Order.CrtdUser = logged_in_userId;
                                var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry
                                                 where vw.ApplicationId == model.ApplicationID && vw.Category == model.TypeCode
                                                 && vw.ApplicationType == "New"
                                                 select new { vw.IITMPensionerorCSIRStaff, vw.EmployeeNo, vw.ProjectId, vw.DesignationId }).FirstOrDefault();
                                if (mastQuery != null)
                                {
                                    Order.OldDesignation = mastQuery.DesignationId;
                                    Order.OldProjectId = mastQuery.ProjectId;
                                    if (model.ArrearOrDeductionTillDate != null)
                                    {
                                        Order.ArrearOrDeductionAmount = model.ArrearOrDeductionAmount;
                                        Order.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;

                                        tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                        addpaydeuction.EmployeeNo = mastQuery.EmployeeNo;
                                        addpaydeuction.AppointmentId = model.ApplicationID;
                                        addpaydeuction.AppointmentType = AppointmentType;
                                        addpaydeuction.ProjectId = model.ProjectId;
                                        addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        addpaydeuction.CrtdTS = DateTime.Now;
                                        addpaydeuction.CrtdUser = logged_in_userId;
                                        addpaydeuction.Status = "Open";
                                        //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                        addpaydeuction.FromDate = model.FromDate;
                                        addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                        addpaydeuction.DesignationId = model.DesignationId;

                                        addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                        addpaydeuction.Basic = model.Salary;
                                        addpaydeuction.HRA = model.HRA;
                                        addpaydeuction.Medical = model.MedicalAmmount;
                                        addpaydeuction.MedicalInclusive_f = model.Medical == 2 ? true : false;
                                        addpaydeuction.Isbackend_f = true;
                                        context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                        context.SaveChanges();

                                        othid = addpaydeuction.OTHPayDeductionId;
                                        tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                        var OtherType = 1;
                                        addothdetail.OTHPayDeductionId = othid;
                                        addothdetail.OtherType = OtherType;
                                        if (OtherType == 1)
                                            addothdetail.PaymentType = 9;
                                        addothdetail.HeadId = 9;
                                        addothdetail.Amount = model.ArrearOrDeductionAmount;
                                        addothdetail.Remarks = "Back end entry";
                                        addothdetail.Status = "Active";
                                        context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                        context.SaveChanges();
                                    }
                                }
                                var maxOrderwise = (from O in context.tblOrder where O.OrderType == _qryOrderID select O.OrderwiseSeqId).Max() ?? 0;
                                Order.OrderwiseSeqId = maxOrderwise == 0 ? 1 : maxOrderwise + 1;
                                var maxSeqId = (from O in context.tblOrder select O.SeqId).Max() ?? 0;
                                var number = maxSeqId == 0 ? 1 : maxSeqId + 1;
                                Order.SeqId = number;
                                string value = number.ToString("D4");
                                Order.OrderNo = "EN" + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                Order.RequestedBy = model.RequestedByPI;
                                Order.CommitteeMember = model.CommiteeMemberId1;
                                Order.CommitteeMembers = model.CommiteeMemberId2;
                                Order.Chairperson = model.ChairpersonNameId;
                                context.tblOrder.Add(Order);
                                context.SaveChanges();
                                OrderID = Order.OrderId;
                                bool result = IsRespondTermEndMail(model.ApplicationID, model.TypeCode, logged_in_userId, OrderID, context);
                                if (AppointmentType == 3)
                                {
                                    var salQuery = context.tblRCTSalaryCalcDetails.FirstOrDefault(m => m.SalaryDetailsId == salarycalcId);
                                    salQuery.OrderId = OrderID;
                                    context.SaveChanges();
                                }
                                if (othid > 0)
                                {
                                    var othQuery = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OTHPayDeductionId == othid);
                                    if (othQuery != null)
                                    {
                                        othQuery.OrderId = OrderID;
                                        context.SaveChanges();
                                    }
                                }

                                tblOrderDetail OrderDetail = new tblOrderDetail();
                                if (model.PILetter != null)
                                {
                                    string docpath = "", docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    OrderDetail.PILetter = docpath;
                                    OrderDetail.PILetterFileName = docname;
                                }
                                OrderDetail.OrderId = OrderID;
                                OrderDetail.PIJustificationRemarks = model.PIJustificationRemarks;
                                OrderDetail.FlowOfMail = model.FlowofMail;
                                OrderDetail.Comments = model.Comments;
                                OrderDetail.WithdrawCommitment = model.isWithdrawCommitment;
                                OrderDetail.RequestReference = model.RequestReference;
                                OrderDetail.RequestReferenceNo = model.ReferenceNo;
                                OrderDetail.RequestEmailDate = model.SourceEmailDate;
                                OrderDetail.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                OrderDetail.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                if (AppointmentType == 1)
                                {
                                    OrderDetail.ConsolidatedPay = false;
                                    OrderDetail.Fellowship = false;
                                }
                                else
                                {
                                    OrderDetail.ConsolidatedPay = model.isConsolidatePay == "ConsolidatedPay" ? true : false;
                                    OrderDetail.Fellowship = model.isConsolidatePay == "FellowshipPay" ? true : false;
                                }
                                context.tblOrderDetail.Add(OrderDetail);
                                context.SaveChanges();

                                if (model.CheckListDetail != null)
                                {
                                    if (model.CheckListDetail.Count > 0)
                                    {
                                        for (int i = 0; i < model.CheckListDetail.Count; i++)
                                        {
                                            tblRCTOrderDeviationCheckDetail DeviationDetail = new tblRCTOrderDeviationCheckDetail();
                                            DeviationDetail.OrderId = OrderID;
                                            DeviationDetail.CrtdUser = logged_in_userId;
                                            DeviationDetail.CrtdTs = DateTime.Now;
                                            DeviationDetail.DeviationCheckListId = model.CheckListDetail[i].FunctionCheckListId ?? 0;
                                            DeviationDetail.isCurrentVersion = true;
                                            DeviationDetail.IsChecked = model.CheckListDetail[i].IsChecked;
                                            context.tblRCTOrderDeviationCheckDetail.Add(DeviationDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var FileDoc in model.PIJustificationFile)
                                    {
                                        if (FileDoc != null)
                                        {
                                            tblRCTOrderPIJustificationDocs Docs = new tblRCTOrderPIJustificationDocs();
                                            string actName = System.IO.Path.GetFileName(FileDoc.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            FileDoc.UploadFile("Requirement", docName);
                                            Docs.OrderId = OrderID;
                                            Docs.DocsName = docName;
                                            Docs.FileName = actName;
                                            Docs.Description = model.Remarks;
                                            Docs.Crt_Ts = DateTime.Now;
                                            Docs.CrtUser = logged_in_userId;
                                            context.tblRCTOrderPIJustificationDocs.Add(Docs);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                res = 1;
                            }
                            transaction.Commit();
                            PostOrderStatusLog(OrderID, prestatus, newstatus, logged_in_userId);

                            if (OrderID > 0 && model.FlowofMail == "Nd")
                            {
                                if (model.TypeCode == "STE" && !context.tblRCTSTEEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && m.IsSend == true))
                                    RCTEmailContentService.AcknowledgementForOrders(OrderID, logged_in_userId);
                                if (model.TypeCode == "CON" && !context.tblRCTConsutantAppEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && m.IsSend == true))
                                    RCTEmailContentService.AcknowledgementForOrders(OrderID, logged_in_userId);
                                if (model.TypeCode == "OSG" && model.SendSalaryStructure == "SST")
                                    RCTEmailContentService.AcknowleadgementMailForOSGOrders(OrderID, logged_in_userId, model.SendSalaryStructure ?? null);
                            }
                            if (OrderID > 0 && (model.FlowofMail == "NP" || model.FlowofMail == "NDean" || model.FlowofMail == "NC"))
                            {
                                if (model.TypeCode == "OSG")
                                    RCTEmailContentService.DeviationMailForOSGOrders(OrderID, logged_in_userId, model.Comments, model.SendSalaryStructure ?? null);
                                else
                                    RCTEmailContentService.DeviationMailForOrders(OrderID, logged_in_userId, model.Comments);
                                res = -1;
                            }

                            if (model.FlowofMail == "Nd" && AppointmentType != 3)
                            {
                                var Data = RecruitEnhancementWFInit(OrderID, logged_in_userId);
                                if (Data.Item1)
                                    res = 1;
                                else
                                {
                                    res = 3;
                                    var err = Data.Item2;
                                    return Tuple.Create(res, err);
                                }
                            }
                            return Tuple.Create(res, "");
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, "");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, "");
            }
        }

        public Tuple<bool, string> OSGCOPApprove(OrderModel model, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int OrderID = model.OrderID;
                    if (!context.tblRCTOSGEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && !m.Subject.Contains("structure approval")))
                        RCTEmailContentService.AcknowleadgementMailForOSGOrders(OrderID, logged_in_user);
                    if (model.PIJustificationFile != null)
                    {
                        foreach (var FileDoc in model.PIJustificationFile)
                        {
                            if (FileDoc != null)
                            {
                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var fileDoc in model.PIJustificationFile)
                                    {
                                        if (fileDoc != null)
                                        {
                                            tblRCTOrderPIJustificationDocs doc = new tblRCTOrderPIJustificationDocs();
                                            string actName = System.IO.Path.GetFileName(fileDoc.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            //item.UploadFile("Requirement", docName);
                                            fileDoc.UploadFile("Requirement", docName);
                                            doc.OrderId = OrderID;
                                            doc.DocsName = docName;
                                            doc.FileName = actName;
                                            doc.Description = model.PIJustificationRemarks;
                                            doc.Crt_Ts = DateTime.Now;
                                            doc.CrtUser = logged_in_user;
                                            context.tblRCTOrderPIJustificationDocs.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                            }

                        }
                    }
                    //var sts = OSGWFInit(OSGID, logged_in_user);
                    var sts = RecuitCOPWFInit(OrderID, logged_in_user);
                    if (sts.Item1 == false && sts.Item2 != null)
                    {
                        return Tuple.Create(false, sts.Item2);
                    }
                    else if (sts.Item1 == true && (sts.Item2 == null || sts.Item2 == ""))
                    {
                        return Tuple.Create(true, "");
                    }
                    else if (sts.Item1 == true && (sts.Item2 != null || sts.Item2 != ""))
                    {
                        return Tuple.Create(true, sts.Item2);
                    }
                    else
                    {
                        return Tuple.Create(false, sts.Item2);
                    }

                }

            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> OSGExtensionApprove(OrderModel model, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int OrderID = model.OrderID;
                    if (!context.tblRCTOSGEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && !m.Subject.Contains("structure approval")))
                        RCTEmailContentService.AcknowleadgementMailForOSGOrders(OrderID, logged_in_user);
                    if (model.PIJustificationFile != null)
                    {
                        foreach (var FileDoc in model.PIJustificationFile)
                        {
                            if (FileDoc != null)
                            {
                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var item in model.PIJustificationFile)
                                    {
                                        if (item != null)
                                        {
                                            tblRCTOrderPIJustificationDocs doc = new tblRCTOrderPIJustificationDocs();
                                            doc.OrderId = OrderID;
                                            string actName = System.IO.Path.GetFileName(item.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            //item.UploadFile("Requirement", docName);
                                            item.UploadFile("Requirement", docName);
                                            doc.DocsName = docName;
                                            doc.FileName = actName;
                                            doc.Description = model.PIJustificationRemarks;
                                            doc.Crt_Ts = DateTime.Now;
                                            doc.CrtUser = logged_in_user;
                                            context.tblRCTOrderPIJustificationDocs.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                            }

                        }
                    }

                    var sts = RecruitExtensionWFInit(OrderID, logged_in_user);
                    if (sts.Item1 == false && sts.Item2 != null)
                    {
                        return Tuple.Create(false, sts.Item2);
                    }
                    else if (sts.Item1 == true && (sts.Item2 == null || sts.Item2 == ""))
                    {
                        return Tuple.Create(true, "");
                    }
                    else if (sts.Item1 == true && (sts.Item2 != null || sts.Item2 != ""))
                    {
                        return Tuple.Create(true, sts.Item2);
                    }
                    else
                    {
                        return Tuple.Create(false, sts.Item2);
                    }

                }

            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> OSGEnhancementApprove(OrderModel model, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int OrderID = model.OrderID;
                    if (!context.tblRCTOSGEmailLog.Any(m => m.OrderId == OrderID && m.TypeofMail == 6 && !m.Subject.Contains("structure approval")))
                        RCTEmailContentService.AcknowleadgementMailForOSGOrders(OrderID, logged_in_user);
                    if (model.PIJustificationFile != null)
                    {
                        foreach (var FileDoc in model.PIJustificationFile)
                        {
                            if (FileDoc != null)
                            {
                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var item in model.PIJustificationFile)
                                    {
                                        if (item != null)
                                        {
                                            tblRCTOrderPIJustificationDocs doc = new tblRCTOrderPIJustificationDocs();
                                            doc.OrderId = OrderID;
                                            string actName = System.IO.Path.GetFileName(item.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            //item.UploadFile("Requirement", docName);
                                            item.UploadFile("Requirement", docName);
                                            doc.DocsName = docName;
                                            doc.FileName = actName;
                                            doc.Description = model.PIJustificationRemarks;
                                            doc.Crt_Ts = DateTime.Now;
                                            doc.CrtUser = logged_in_user;
                                            context.tblRCTOrderPIJustificationDocs.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                            }

                        }
                    }

                    var sts = RecruitEnhancementWFInit(OrderID, logged_in_user);
                    if (sts.Item1 == false && sts.Item2 != null)
                    {
                        return Tuple.Create(false, sts.Item2);
                    }
                    else if (sts.Item1 == true && (sts.Item2 == null || sts.Item2 == ""))
                    {
                        return Tuple.Create(true, "");
                    }
                    else if (sts.Item1 == true && (sts.Item2 != null || sts.Item2 != ""))
                    {
                        return Tuple.Create(true, sts.Item2);
                    }
                    else
                    {
                        return Tuple.Create(false, sts.Item2);
                    }

                }

            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        #endregion

        #region HRA Order

        public HRAOrderModel getHRAOrderDetails(int appid, string appType, int orderId = 0, bool isHRABooking = true)
        {
            HRAOrderModel model = new HRAOrderModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int appTypeId = getAppointmentType(appType);

                    var queryorder = (from O in context.tblOrder
                                      from Od in context.tblOrderDetail
                                      where O.OrderId == Od.OrderId && O.OrderId == orderId
                                      select new { O, Od }).FirstOrDefault();
                    if (queryorder != null)
                    {
                        model.DesignationId = queryorder.O.NewDesignation ?? 0;
                        appid = queryorder.O.AppointmentId ?? 0;
                        appTypeId = queryorder.O.AppointmentType ?? 0;
                        model.ApplicationID = appid;
                        model.TypeCode = appTypeId == 2 ? "STE" : "";
                        var querydes = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == queryorder.O.NewDesignation);
                        model.DesignationCode = querydes.DesignationCode;
                        model.Designation = querydes.Designation;
                        model.ApplicationReceiveDate = queryorder.O.OrderDate;
                        model.ProjectId = queryorder.O.NewProjectId;
                        model.ProjectNumber = Common.GetProjectNameandNumber(queryorder.O.NewProjectId ?? 0);
                        model.Salary = queryorder.O.Basic;
                        model.Status = queryorder.O.Status;
                        model.HRA = queryorder.O.HRA ?? 0;
                        model.isHRA = queryorder.O.isHRA;
                        model.HRAPercentage = queryorder.O.HRAPercentage ?? 0;
                        model.MedicalAmmount = queryorder.O.MedicalAmount ?? 0;
                        model.isMedical = queryorder.O.isMedical;
                        model.FromDate = queryorder.O.FromDate;
                        model.ToDate = queryorder.O.ToDate;
                        int Orderid = queryorder.O.OrderId;
                        model.OrderID = Orderid;
                        model.OrderType = queryorder.O.OrderType ?? 0;
                        model.CommitmentAmount = queryorder.O.CommitmentAmmount ?? 0;
                        model.WithdrawalAmount = queryorder.O.WithdrawAmmount ?? 0;
                        model.ArrearOrDeductionTillDate = queryorder.O.ArrearOrDeductionTillDate ?? DateTime.Now;
                        model.ArrearOrDeductionAmount = queryorder.O.ArrearOrDeductionAmount ?? 0;
                        model.strArrearOrDeductionTillDate = string.Format("{0:dd-MMMM-yyyy}", queryorder.O.ArrearOrDeductionTillDate);
                        var query = (from A in context.tblRCTSTE
                                     from D in context.tblRCTDesignation
                                     where A.DesignationId == D.DesignationId && A.STEID == queryorder.O.AppointmentId
                                     select new { A.HRA, A.AppointmentStartdate, A.AppointmentEnddate, isHaveHRA = D.HRA }).FirstOrDefault();
                        if (query != null)
                        {
                            if (queryorder.O.OrderType == 5 && query.isHaveHRA == true && (query.HRA == null || query.HRA == 0))
                            {
                                int?[] exporder = new int?[] { 1, 2, 3, 4 };
                                var ordQuery = (from o in context.tblOrder
                                                where o.AppointmentId == queryorder.O.AppointmentId && o.AppointmentType == 2 && exporder.Contains(o.OrderType)
                                                orderby o.OrderId descending
                                                select o).FirstOrDefault();
                                if (ordQuery != null)
                                {
                                    if (!context.tblOrder.Any(m => m.OrderId > ordQuery.OrderId && m.AppointmentId == queryorder.O.AppointmentId && m.AppointmentType == 2 && m.OrderType == 5 && m.Status == "Completed"))
                                        model.isHRAFullTenure = true;
                                }
                                else
                                    model.isHRAFullTenure = true;
                            }
                            else if (query.HRA > 0)
                            {
                                var querypreodr = (from O in context.tblOrder
                                                   where O.AppointmentId == appid && O.AppointmentType == appTypeId
                                                   && O.OrderType == 5 && O.Status.Contains("Completed") && O.isUpdated == true
                                                   && O.FromDate >= query.AppointmentStartdate && O.ToDate <= query.AppointmentEnddate
                                                   orderby O.OrderId descending
                                                   select O).FirstOrDefault();
                                if (querypreodr != null)
                                {
                                    model.HRAFromDate = string.Format("{0:dd-MMMM-yyyy}", querypreodr.FromDate);
                                    model.HRAToDate = string.Format("{0:dd-MMMM-yyyy}", querypreodr.ToDate);
                                }
                                else
                                {
                                    model.HRAFromDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentStartdate);
                                    model.HRAToDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentEnddate);
                                }
                            }
                        }
                        model.RequestReference = queryorder.Od.RequestReference ?? 0;
                        model.ReferenceNo = queryorder.Od.RequestReferenceNo;
                        model.SourceEmailDate = queryorder.Od.RequestEmailDate;
                        model.Medical = queryorder.O.MedicalType ?? 0;
                        model.PILetterPath = queryorder.Od.PILetter;
                        model.PILetterFileName = queryorder.Od.PILetterFileName;
                        model.HRAFormPath = queryorder.Od.HRAForm;
                        model.HRAFormName = queryorder.Od.HRAFormName;
                        model.AddressProof = queryorder.Od.ProofOfAddress ?? 0;
                        model.AddressProofPath = queryorder.Od.AddressProof;
                        model.AddressProofName = queryorder.Od.AddressProofName;
                    }

                    if (appid > 0 && appTypeId == 2)
                    {
                        var query = (from A in context.tblRCTSTE
                                     from D in context.tblRCTDesignation
                                     where A.DesignationId == D.DesignationId && A.STEID == appid && A.isEmployee == true
                                     select new { A, D }).FirstOrDefault();
                        if (query != null)
                        {
                            model.ApplicationID = appid;
                            model.TypeCode = appType;
                            model.ApplicationNo = query.A.ApplicationNumber;
                            model.EmployeeID = query.A.EmployeersID;
                            model.TypeofappointmentId = query.A.TypeofAppointment ?? 0;
                            model.Typeofappointment = Common.GetCodeControlName(query.A.TypeofAppointment ?? 0, "STEAppointmenttype");
                            model.Name = Common.GetCodeControlName(query.A.ProfessionalType ?? 0, "RCTProfessional") + query.A.Name;
                            model.Nameoftheguardian = query.A.NameoftheGuardian;
                            model.Email = query.A.Email;
                            model.PresentAddress = query.A.PresentAddress;
                            model.PermanentAddress = query.A.PermanentAddress;
                            model.ApplicationNo = query.A.ApplicationNumber;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", query.A.DateofBirth);
                            model.Age = Common.RCTCalculateAge(DateTime.Now, query.A.DateofBirth ?? DateTime.Now);
                            model.Sex = Common.GetCodeControlName(query.A.Sex ?? 0, "RCTGender");
                            model.ContactNumber = query.A.ContactNumber;
                            model.staffcategory = query.A.StaffCategory;
                            model.PhysicallyChanged = query.A.PhysicallyChallenged;
                            model.ConsolidatedPay = query.A.ConsolidatedPay ?? false;
                            model.Fellowship = query.A.Fellowship ?? false;
                            model.IITMPensionerCSIRStaff = Common.GetCodeControlName(query.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                            model.IsMsPhd = query.A.MsPhd ?? false;
                            model.PhdDetail = query.A.PhdDetail;
                            if (model.Status == "Completed")
                                model.Appointmentdetails = getCompletedOldAppointmentDetails(model.OrderID);
                            else
                                model.Appointmentdetails = Getmastappointmentdetails(appid, appTypeId);
                            model.DesignationCode = query.D.DesignationCode;
                            model.Experience = Common.getExperienceInWordings(appid, appType);
                            model.ExperienceInDes = Common.getExperienceDecimal(appid, appType);
                            model.Qualification = Common.getQualificationWordings(appid, appType);
                            if (queryorder == null)
                            {
                                model.OrderType = isHRABooking == false ? 6 : 5;

                                if (isHRABooking == true)
                                {
                                    if (query.D.HRA == true && (query.A.HRA == null || query.A.HRA == 0))
                                    {
                                        //if (context.tblOrder.OrderByDescending(x => x.OrderId).Any(m => m.AppointmentId == appid && m.AppointmentType == appTypeId && m.OrderType == 5 && m.Status.Contains("Completed") && m.isUpdated == true))
                                        //    model.isHRAFullTenure = false;
                                        //else
                                        //    model.isHRAFullTenure = true;

                                        int?[] exporder = new int?[] { 1, 2, 3, 4 };
                                        var ordQuery = (from o in context.tblOrder
                                                        where o.AppointmentId == appid && o.AppointmentType == appTypeId && exporder.Contains(o.OrderType)
                                                        orderby o.OrderId descending
                                                        select o).FirstOrDefault();
                                        if (ordQuery != null)
                                        {
                                            if (!context.tblOrder.Any(m => m.OrderId > ordQuery.OrderId && m.AppointmentId == appid && m.AppointmentType == appTypeId && m.OrderType == 5 && m.Status != "Cancel" && m.Status != "Rejected"))
                                                model.isHRAFullTenure = true;
                                        }
                                        else
                                            model.isHRAFullTenure = true;

                                    }
                                }
                                else if (!isHRABooking && query.A.HRA > 0)
                                {
                                    var querypreodr = (from O in context.tblOrder
                                                       where O.AppointmentId == appid && O.AppointmentType == appTypeId
                                                       && O.OrderType == 5 && O.Status.Contains("Completed") && O.isUpdated == true
                                                       && O.FromDate >= query.A.AppointmentStartdate && O.ToDate <= query.A.AppointmentEnddate
                                                       orderby O.OrderId descending
                                                       select O).FirstOrDefault();
                                    if (querypreodr != null)
                                    {
                                        model.HRAFromDate = string.Format("{0:dd-MMMM-yyyy}", querypreodr.FromDate);
                                        model.HRAToDate = string.Format("{0:dd-MMMM-yyyy}", querypreodr.ToDate);
                                    }
                                    else
                                    {
                                        model.HRAFromDate = string.Format("{0:dd-MMMM-yyyy}", query.A.AppointmentStartdate);
                                        model.HRAToDate = string.Format("{0:dd-MMMM-yyyy}", query.A.AppointmentEnddate);
                                    }
                                }
                            }
                        }
                    }
                    model.IITMExperience = IITExperienceInWording(model.EmployeeID);
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public Tuple<int, string> CommitHRA(HRAOrderModel model, int logged_in_userId, bool IsHRABooking)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int res = 0, OrderID = 0;
                            int AppointmentType = getAppointmentType(model.TypeCode);
                            int Typeofappointment = getTypeofAppointment(model.ApplicationID, model.TypeCode);
                            var odQuery = (from o in context.tblOrder
                                           from od in context.tblOrderDetail
                                           where o.OrderId == od.OrderId && (o.Status.Contains("Note") || o.Status.Contains("Open"))
                                           && o.isGovAgencyFund != true && o.isCommitmentReject != true
                                           && o.OrderId == model.OrderID
                                           select new { o, od }).FirstOrDefault();
                            if (odQuery != null)
                            {
                                OrderID = odQuery.o.OrderId;
                                odQuery.o.OrderDate = model.ApplicationReceiveDate;
                                odQuery.o.HRA = model.HRA;
                                odQuery.o.FromDate = model.FromDate;
                                odQuery.o.ToDate = model.ToDate;
                                odQuery.o.UpdtTS = DateTime.Now;
                                odQuery.o.UpdtUser = logged_in_userId;
                                if (model.ArrearOrDeductionTillDate != null)
                                {
                                    decimal Arrearpay = 0;
                                    if (IsHRABooking)
                                        Arrearpay = Common.calHRA(model.FromDate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, odQuery.o.Basic, odQuery.o.OldDesignation, Typeofappointment);
                                    else
                                        Arrearpay = Common.calHRA(model.FromDate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, odQuery.o.Basic, odQuery.o.OldDesignation, Typeofappointment, odQuery.o.OldHRA ?? 0);
                                    odQuery.o.ArrearOrDeductionAmount = Arrearpay;
                                    odQuery.o.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;
                                    var othQuery = (from dec in context.tblRCTOTHPaymentDeduction
                                                    from det in context.tblRCTOTHPaymentDeductionDetail
                                                    where dec.OTHPayDeductionId == det.OTHPayDeductionId && dec.OrderId == model.OrderID && dec.Status == "Open"
                                                    select new { dec, det }
                                                       ).FirstOrDefault();
                                    if (othQuery != null)
                                    {
                                        othQuery.dec.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        othQuery.dec.UpdtTs = DateTime.Now;
                                        othQuery.dec.UpdtUser = logged_in_userId;
                                        othQuery.dec.FromDate = model.FromDate;
                                        othQuery.dec.ToDate = model.ArrearOrDeductionTillDate;
                                        othQuery.det.Amount = Arrearpay;
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry
                                                         where vw.ApplicationId == model.ApplicationID && vw.Category == model.TypeCode
                                                         && vw.ApplicationType == "New"
                                                         select new { vw.IITMPensionerorCSIRStaff, vw.EmployeeNo, vw.ProjectId, vw.DesignationId, vw.MedicalAmmount, vw.BasicPay }).FirstOrDefault();
                                        if (mastQuery != null)
                                        {
                                            tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                            addpaydeuction.EmployeeNo = mastQuery.EmployeeNo;
                                            addpaydeuction.AppointmentId = model.ApplicationID;
                                            addpaydeuction.AppointmentType = AppointmentType;
                                            addpaydeuction.ProjectId = mastQuery.ProjectId;
                                            addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                            addpaydeuction.CrtdTS = DateTime.Now;
                                            addpaydeuction.CrtdUser = logged_in_userId;
                                            addpaydeuction.Status = "Open";
                                            //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                            addpaydeuction.FromDate = model.FromDate;
                                            addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                            addpaydeuction.DesignationId = mastQuery.DesignationId;
                                            addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                            addpaydeuction.Basic = mastQuery.BasicPay;
                                            addpaydeuction.HRA = model.HRA;
                                            addpaydeuction.Medical = mastQuery.MedicalAmmount;
                                            addpaydeuction.MedicalInclusive_f = model.Medical == 2 ? true : false;
                                            addpaydeuction.Isbackend_f = true;
                                            addpaydeuction.OrderId = odQuery.o.OrderId;
                                            context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                            context.SaveChanges();

                                            int othid = addpaydeuction.OTHPayDeductionId;
                                            tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                            var OtherType = 1;
                                            if (IsHRABooking == false)
                                                OtherType = 2;
                                            addothdetail.OTHPayDeductionId = othid;
                                            addothdetail.OtherType = OtherType;
                                            if (OtherType == 1)
                                            {
                                                addothdetail.HeadId = 203;
                                                addothdetail.PaymentType = 203;
                                            }
                                            else if (OtherType == 2)
                                            {
                                                addothdetail.HeadId = 204;
                                                addothdetail.DeductionType = 204;
                                            }
                                            addothdetail.Amount = Arrearpay;
                                            addothdetail.Remarks = "Back end entry";
                                            addothdetail.Status = "Active";
                                            context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                odQuery.od.FlowOfMail = "Nd";
                                odQuery.od.RequestReference = model.RequestReference;
                                odQuery.od.RequestReferenceNo = model.ReferenceNo;
                                if (IsHRABooking == true)
                                {
                                    //query.o.CommitmentAmmount = model.CommitmentAmount;
                                    var CommitmentAmount = Common.calHRA(model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, odQuery.o.Basic, odQuery.o.OldDesignation, Typeofappointment);
                                    odQuery.o.CommitmentAmmount = CommitmentAmount;
                                    if (model.ProofAddress != null)
                                    {
                                        string docpath = "";
                                        string docname = "";
                                        docname = System.IO.Path.GetFileName(model.ProofAddress.FileName);
                                        var docfileId = Guid.NewGuid().ToString();
                                        docpath = docfileId + "_" + docname;
                                        model.ProofAddress.UploadFile("Requirement", docpath);
                                        odQuery.od.AddressProof = docpath;
                                        odQuery.od.AddressProofName = docname;
                                        odQuery.od.ProofOfAddress = model.AddressProof;
                                    }
                                }
                                else
                                {
                                    var WithdrawalAmount = Common.calHRA(model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, odQuery.o.Basic, odQuery.o.OldDesignation, Typeofappointment, odQuery.o.OldHRA ?? 0);
                                    //query.o.WithdrawAmmount = model.WithdrawalAmount;
                                    odQuery.o.WithdrawAmmount = WithdrawalAmount;
                                }

                                if (model.HRAForm != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.HRAForm.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.HRAForm.UploadFile("Requirement", docpath);
                                    odQuery.od.HRAForm = docpath;
                                    odQuery.od.HRAFormName = docname;
                                }

                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    odQuery.od.PILetter = docpath;
                                    odQuery.od.PILetterFileName = docname;
                                }
                                odQuery.od.PIJustificationRemarks = model.Remarks;
                                context.SaveChanges();
                                res = 2;
                            }
                            else if (model.OrderID > 0)
                            {
                                return Tuple.Create(0, "HRA form not allowed for edit.");
                            }
                            else
                            {
                                tblOrder Order = new tblOrder();
                                tblOrderDetail OrderDetail = new tblOrderDetail();
                                var othid = 0;
                                Order.Status = "Open";
                                Order.isUpdated = false;
                                Order.AppointmentId = model.ApplicationID;
                                Order.AppointmentType = AppointmentType;
                                Order.OrderDate = model.ApplicationReceiveDate;
                                var OrderType = IsHRABooking == true ? 5 : 6;
                                Order.OrderType = OrderType;
                                Order.HRA = model.HRA;
                                if (OrderType == 6)
                                    Order.HRA = 0;
                                Order.FromDate = model.FromDate;
                                Order.ToDate = model.ToDate;
                                Order.CrtdTS = DateTime.Now;
                                Order.CrtdUser = logged_in_userId;

                                var mastQuery = (from s in context.tblRCTSTE
                                                 from d in context.tblRCTDesignation
                                                 where s.DesignationId == d.DesignationId
                                                 && s.STEID == model.ApplicationID
                                                 select new
                                                 {
                                                     s.ProjectId,
                                                     s.DesignationId,
                                                     s.MedicalAmmount,
                                                     s.HRA,
                                                     s.Salary,
                                                     isHRA = d.HRA ?? false,
                                                     d.HRABasic,
                                                     s.Medical,
                                                     s.EmployeersID,
                                                     s.TypeofAppointment,
                                                     s.IITMPensionerOrCSIRStaff,
                                                     s.SalaryLevelId
                                                 }).FirstOrDefault();
                                if (mastQuery != null)
                                {
                                    Order.isHRA = mastQuery.isHRA;
                                    Order.HRAPercentage = mastQuery.HRABasic;
                                    Order.Basic = mastQuery.Salary;
                                    Order.OldProjectId = mastQuery.ProjectId;
                                    Order.NewProjectId = mastQuery.ProjectId;
                                    Order.OldDesignation = mastQuery.DesignationId;
                                    Order.NewDesignation = mastQuery.DesignationId;
                                    Order.MedicalAmount = mastQuery.MedicalAmmount;
                                    Order.MedicalType = mastQuery.Medical;
                                    Order.OldHRA = mastQuery.HRA;
                                    Order.SalaryLevelId = mastQuery.SalaryLevelId;
                                    if (IsHRABooking == true)
                                    {
                                        var CommitmentAmount = Common.calHRA(model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, mastQuery.Salary, mastQuery.DesignationId, mastQuery.TypeofAppointment);
                                        //Order.CommitmentAmmount = model.CommitmentAmount;
                                        Order.CommitmentAmmount = CommitmentAmount;
                                    }
                                    else
                                    {
                                        var WithdrawalAmount = Common.calHRA(model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, mastQuery.Salary, mastQuery.DesignationId, mastQuery.TypeofAppointment, mastQuery.HRA ?? 0);
                                        //Order.WithdrawAmmount = model.WithdrawalAmount;
                                        Order.WithdrawAmmount = WithdrawalAmount;
                                    }

                                    if (model.ArrearOrDeductionTillDate != null)
                                    {
                                        decimal Arrearpay = 0;
                                        if (IsHRABooking == true)
                                            Arrearpay = Common.calHRA(model.FromDate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, mastQuery.Salary, mastQuery.DesignationId, mastQuery.TypeofAppointment);
                                        else
                                            Arrearpay = Common.calHRA(model.FromDate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, mastQuery.Salary, mastQuery.DesignationId, mastQuery.TypeofAppointment, mastQuery.HRA ?? 0);
                                        Order.ArrearOrDeductionAmount = Arrearpay;
                                        Order.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;

                                        tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                        addpaydeuction.EmployeeNo = mastQuery.EmployeersID;
                                        addpaydeuction.AppointmentId = model.ApplicationID;
                                        addpaydeuction.AppointmentType = 2;
                                        addpaydeuction.ProjectId = model.ProjectId;
                                        addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        addpaydeuction.CrtdTS = DateTime.Now;
                                        addpaydeuction.CrtdUser = logged_in_userId;
                                        addpaydeuction.Status = "Open";
                                        //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                        addpaydeuction.FromDate = model.FromDate;
                                        addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                        addpaydeuction.DesignationId = mastQuery.DesignationId;
                                        addpaydeuction.Isbackend_f = true;
                                        addpaydeuction.IITMPensioner_f = mastQuery.IITMPensionerOrCSIRStaff == 2 ? true : false;
                                        addpaydeuction.Basic = mastQuery.Salary;
                                        addpaydeuction.HRA = model.HRA;
                                        addpaydeuction.Medical = mastQuery.MedicalAmmount;
                                        addpaydeuction.MedicalInclusive_f = mastQuery.Medical == 2 ? true : false;
                                        context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                        context.SaveChanges();

                                        othid = addpaydeuction.OTHPayDeductionId;
                                        tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                        var OtherType = 1;
                                        addothdetail.OTHPayDeductionId = othid;
                                        if (IsHRABooking == false)
                                            OtherType = 2;

                                        addothdetail.OtherType = OtherType;
                                        if (OtherType == 1)
                                        {
                                            addothdetail.HeadId = 203;
                                            addothdetail.PaymentType = 203;
                                        }
                                        else if (OtherType == 2)
                                        {
                                            addothdetail.HeadId = 204;
                                            addothdetail.DeductionType = 204;
                                        }
                                        addothdetail.Amount = Arrearpay;
                                        addothdetail.Remarks = "Back end entry";
                                        addothdetail.Status = "Active";
                                        context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                        context.SaveChanges();
                                    }
                                }

                                var maxOrderwiseSeqId = (from O in context.tblOrder where O.OrderType == OrderType select O.OrderwiseSeqId).Max();
                                Order.OrderwiseSeqId = maxOrderwiseSeqId == null ? 1 : maxOrderwiseSeqId + 1;

                                var maxSeqId = (from O in context.tblOrder select O.SeqId).Max() ?? 0;
                                var number = maxSeqId == 0 ? 1 : maxSeqId + 1;
                                Order.SeqId = number;
                                string value = number.ToString("D4");
                                Order.OrderNo = "HR" + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                Order.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;

                                context.tblOrder.Add(Order);
                                context.SaveChanges();
                                OrderID = Order.OrderId;

                                if (othid > 0)
                                {
                                    var othQuery = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OTHPayDeductionId == othid);
                                    if (othQuery != null)
                                    {
                                        othQuery.OrderId = OrderID;
                                        context.SaveChanges();
                                    }
                                }

                                if (IsHRABooking == true)
                                {
                                    if (model.ProofAddress != null)
                                    {
                                        string docpath = "";
                                        string docname = "";
                                        docname = System.IO.Path.GetFileName(model.ProofAddress.FileName);
                                        var docfileId = Guid.NewGuid().ToString();
                                        docpath = docfileId + "_" + docname;
                                        model.ProofAddress.UploadFile("Requirement", docpath);
                                        OrderDetail.AddressProof = docpath;
                                        OrderDetail.AddressProofName = docname;
                                        OrderDetail.ProofOfAddress = model.AddressProof;
                                    }
                                }

                                if (model.HRAForm != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.HRAForm.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.HRAForm.UploadFile("Requirement", docpath);
                                    OrderDetail.HRAForm = docpath;
                                    OrderDetail.HRAFormName = docname;
                                }

                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    OrderDetail.PILetter = docpath;
                                    OrderDetail.PILetterFileName = docname;
                                }

                                OrderDetail.OrderId = OrderID;
                                OrderDetail.PIJustificationRemarks = model.Remarks;
                                OrderDetail.FlowOfMail = model.FlowofMail;
                                OrderDetail.RequestReference = model.RequestReference;
                                OrderDetail.RequestReferenceNo = model.ReferenceNo;
                                OrderDetail.RequestEmailDate = model.SourceEmailDate;
                                context.tblOrderDetail.Add(OrderDetail);
                                context.SaveChanges();
                                res = 1;
                            }

                            transaction.Commit();

                            if (OrderID > 0 & res == 1)
                            {
                                if (IsHRABooking == true)
                                    RCTEmailContentService.SendMailForHRA(OrderID, logged_in_userId, true);
                            }
                            PostOrderStatusLog(OrderID, "", "Open", logged_in_userId);
                            var Data = RecruitHRAWFInit(OrderID, logged_in_userId);
                            if (Data.Item1)
                                res = 1;
                            else
                            {
                                res = 3;
                                string errMsg = Data.Item2;
                                return Tuple.Create(res, errMsg);
                            }
                            return Tuple.Create(res, "");
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, "");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, "");
            }
        }

        #endregion

        #region Maternity Leave

        public OrderModel getMaternityLeaveDetails(int appid, string appType, int orderid = 0)
        {
            OrderModel model = new OrderModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int apptypeid = getAppointmentType(appType);
                    if (orderid > 0)
                    {
                        var odrQuery = (from o in context.tblOrder
                                        where o.OrderId == orderid && o.OrderType == 10
                                        select o).FirstOrDefault();
                        if (odrQuery != null)
                        {
                            appid = odrQuery.AppointmentId ?? 0;
                            apptypeid = odrQuery.AppointmentType ?? 0;
                            model.FromDate = odrQuery.FromDate;
                            model.ToDate = odrQuery.ToDate;
                            model.ApplicationReceiveDate = odrQuery.OrderDate;
                            model.OrderID = odrQuery.OrderId;
                            model.Status = odrQuery.Status;
                            var detQuery = (from o in context.tblOrderDetail
                                            where o.OrderId == odrQuery.OrderId
                                            select o).FirstOrDefault();
                            if (detQuery != null)
                            {
                                model.PILetterPath = detQuery.PILetter;
                                model.PILetterFileName = detQuery.PILetterFileName;
                                model.Rejoin = true;
                                model.RejoinDate = detQuery.RejoinDate;
                                model.RequestReference = detQuery.RequestReference ?? 0;
                                model.ReferenceNo = detQuery.RequestReferenceNo;
                                model.SourceEmailDate = detQuery.RequestEmailDate;
                                model.RejoiningLetterPath = detQuery.RejoinLetterPath;
                                model.RejoiningLetterName = detQuery.RejoinLetterName;
                            }
                        }
                    }

                    var vwQuery = (from vw in context.vw_RCTOverAllApplicationEntry
                                   where vw.ApplicationId == appid && vw.AppointmentType == apptypeid
                                   && vw.ApplicationType == "New" && vw.isEmployee == true
                                   select vw).FirstOrDefault();
                    if (vwQuery != null)
                    {
                        model.ApplicationID = appid;
                        model.TypeCode = vwQuery.Category;
                        model.ApplicationNo = vwQuery.ApplicationNo;
                        model.EmployeeID = vwQuery.EmployeersID;
                        model.Name = vwQuery.ProfessionalType + " " + vwQuery.CandidateName;
                        model.ContactNumber = vwQuery.ContactNumber;
                        model.Sex = Convert.ToString(vwQuery.Sex ?? 0);
                        model.OldPrjDetailModel = Getmastappointmentdetails(appid, apptypeid);
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public Tuple<int, string> CommitMaternityLeave(OrderModel model, int logged_in_userId)
        {
            try
            {
                int res = 0, OrderID = 0, lossPayOrderId = 0;
                string msg = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int apptypeid = getAppointmentType(model.TypeCode);
                            string prestatus = "", newstatus = "";
                            if (model.OrderID > 0)
                            {
                                var odQuery = (from o in context.tblOrder
                                               from od in context.tblOrderDetail
                                               where o.Status == "Open" && o.OrderType == 10
                                               && o.OrderId == od.OrderId && o.OrderId == model.OrderID
                                               select new { o, od }).FirstOrDefault();
                                var reintQuery = (from o in context.tblOrder
                                                  from od in context.tblOrderDetail
                                                  where o.Status == "Initiated" && o.OrderType == 10
                                                  && o.OrderId == od.OrderId && o.OrderId == model.OrderID && o.Is_Clarify == true
                                                  select new { o, od }).FirstOrDefault();
                                var odPIInQuery = (from o in context.tblOrder
                                               from od in context.tblOrderDetail
                                               where o.Status == "PI Initiated" && o.OrderType == 10
                                               && o.OrderId == od.OrderId && o.OrderId == model.OrderID
                                               select new { o, od }).FirstOrDefault();
                                
                                if (odQuery != null)
                                {
                                    OrderID = odQuery.o.OrderId;
                                    prestatus = odQuery.o.Status;
                                    var toDate = odQuery.o.ToDate;
                                    if (toDate.Value.AddDays(+2) <= model.RejoinDate)//If employee take extra leave system take loss of pay
                                        ExecuteSPMaternity(null, model.RejoinDate);
                                    string docname = "", docfileId = "", docpath = "";
                                    odQuery.od.isRejoined = model.RejoinDate != null ? true : false;
                                    odQuery.od.RejoinDate = model.RejoinDate;
                                    if (model.RejoiningLetter != null)
                                    {
                                        docname = System.IO.Path.GetFileName(model.RejoiningLetter.FileName);
                                        docfileId = Guid.NewGuid().ToString();
                                        docpath = docfileId + "_" + docname;
                                        model.RejoiningLetter.UploadFile("Requirement", docpath);
                                        odQuery.od.RejoinLetterPath = docpath;
                                        odQuery.od.RejoinLetterName = docname;
                                    }

                                    odQuery.o.Status = "Rejoined";
                                    newstatus = odQuery.o.Status;
                                    odQuery.o.UpdtTS = DateTime.Now;
                                    odQuery.o.UpdtUser = logged_in_userId;
                                    odQuery.o.ActualAppointmentStartDate = odQuery.o.FromDate;
                                    odQuery.o.ActualAppointmentEndDate = odQuery.o.ToDate;
                                    //Loss of pay
                                    var rejoindate = model.RejoinDate.Value.AddDays(-1);
                                    if (rejoindate <= odQuery.o.FromDate)
                                        rejoindate = odQuery.o.FromDate ?? DateTime.Now;

                                    var matodrQuery = (from o in context.tblOrder
                                                       from od in context.tblOrderDetail
                                                       where o.OrderId == od.OrderId && o.Status == "Completed" &&
                                                       o.MeternityOrderId == OrderID
                                                       select new { o, od }).FirstOrDefault();
                                    if (matodrQuery != null)
                                    {
                                        lossPayOrderId = matodrQuery.o.OrderId;
                                        decimal WidthdrawAmmount = 0;
                                        matodrQuery.o.UpdtTS = DateTime.Now;
                                        matodrQuery.o.UpdtUser = logged_in_userId;
                                        if (model.RejoinDate != null)
                                        {
                                            DateTime fromDate = matodrQuery.o.FromDate ?? DateTime.Now;
                                            matodrQuery.o.ActualAppointmentStartDate = matodrQuery.o.FromDate;
                                            matodrQuery.o.ActualAppointmentEndDate = matodrQuery.o.ToDate;
                                            matodrQuery.o.ToDate = rejoindate;
                                            WidthdrawAmmount = Common.calculateWithdrawalAmount(model.ApplicationID, model.TypeCode, fromDate, model.RejoinDate ?? DateTime.Now);
                                            matodrQuery.o.WithdrawAmmount = WidthdrawAmmount;

                                            var hisQuery = (from h in context.tblRCTOrderHistory
                                                            where h.OrderId == lossPayOrderId
                                                            select h).FirstOrDefault();
                                            if (hisQuery != null)
                                            {
                                                hisQuery.EffectiveTo = matodrQuery.o.ToDate;
                                                context.SaveChanges();
                                            }
                                            var effQuery = (from h in context.tblRCTOrderEffectHistory
                                                            where h.OrderId == lossPayOrderId
                                                            select h).FirstOrDefault();
                                            if (effQuery != null)
                                            {
                                                effQuery.EffectiveTo = matodrQuery.o.ToDate;
                                                context.SaveChanges();
                                            }
                                        }
                                        matodrQuery.od.isRejoined = model.RejoinDate != null ? true : false;
                                        matodrQuery.od.RejoinDate = model.RejoinDate;
                                        matodrQuery.od.RejoinLetterPath = docpath;
                                        matodrQuery.od.RejoinLetterName = docname;

                                        //Get for commitment amount
                                        var vwQuery = context.vw_RCTOverAllApplicationEntry.FirstOrDefault(m => m.OrderId == lossPayOrderId);
                                        tblRCTCommitmentRequest withdraw = new tblRCTCommitmentRequest();
                                        withdraw.ReferenceNumber = vwQuery.ApplicationNo;
                                        withdraw.OrderId = matodrQuery.o.OrderId;
                                        withdraw.AppointmentType = "Loss of pay";
                                        withdraw.TypeCode = matodrQuery.o.AppointmentType == 1 ? "CON" : matodrQuery.o.AppointmentType == 2 ? "STE" : matodrQuery.o.AppointmentType == 3 ? "OSG" : "";
                                        withdraw.CandidateName = vwQuery.CandidateName;
                                        withdraw.CandidateDesignation = vwQuery.PostRecommended;
                                        withdraw.ProjectId = odQuery.o.OldProjectId;
                                        withdraw.ProjectNumber = Common.getprojectnumber(odQuery.o.OldProjectId ?? 0);
                                        withdraw.TotalSalary = odQuery.o.Basic;
                                        withdraw.RequestedCommitmentAmount = WidthdrawAmmount;
                                        withdraw.Status = "Awaiting Commitment Booking";
                                        withdraw.RequestType = "Withdraw Commitment";
                                        withdraw.EmpNumber = vwQuery.EmployeersID;
                                        withdraw.EmpId = logged_in_userId;
                                        context.tblRCTCommitmentRequest.Add(withdraw);
                                        context.SaveChanges();

                                        tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                        addpaydeuction.EmployeeNo = vwQuery.EmployeersID;
                                        addpaydeuction.AppointmentId = odQuery.o.AppointmentId;
                                        addpaydeuction.AppointmentType = odQuery.o.AppointmentType;
                                        addpaydeuction.ProjectId = odQuery.o.OldProjectId;
                                        addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        addpaydeuction.CrtdTS = DateTime.Now;
                                        addpaydeuction.CrtdUser = logged_in_userId;
                                        addpaydeuction.Status = "Open";
                                        //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                        addpaydeuction.FromDate = matodrQuery.o.FromDate;
                                        addpaydeuction.ToDate = matodrQuery.o.ToDate;
                                        addpaydeuction.DesignationId = odQuery.o.OldDesignation;
                                        addpaydeuction.OrderId = lossPayOrderId;
                                        addpaydeuction.Isbackend_f = true;
                                        addpaydeuction.IITMPensioner_f = vwQuery.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                        addpaydeuction.Basic = vwQuery.BasicPay;
                                        addpaydeuction.HRA = vwQuery.HRA;
                                        addpaydeuction.Medical = vwQuery.MedicalAmmount;
                                        addpaydeuction.MedicalInclusive_f = vwQuery.MedicalType == 2 ? true : false;
                                        context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                        context.SaveChanges();

                                        var othid = addpaydeuction.OTHPayDeductionId;
                                        tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                        addothdetail.OTHPayDeductionId = othid;
                                        addothdetail.OtherType = 2;
                                        addothdetail.DeductionType = 110;
                                        addothdetail.HeadId = 110;
                                        addothdetail.Amount = WidthdrawAmmount;
                                        addothdetail.Remarks = "Back end entry";
                                        addothdetail.Status = "Active";
                                        context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                        context.SaveChanges();
                                    }
                                    context.SaveChanges();
                                    res = 2;
                                }
                                else if (reintQuery != null)
                                {
                                    newstatus = reintQuery.o.Status;
                                    prestatus = reintQuery.o.Status;
                                    reintQuery.o.OrderDate = model.ApplicationReceiveDate;
                                    reintQuery.o.Is_Clarify = false;
                                    if (apptypeid == 1)
                                    {
                                        var query = (from c in context.tblRCTConsultantAppointment
                                                     where c.ConsultantAppointmentId == model.ApplicationID
                                                     select c).FirstOrDefault();
                                        if (query != null)
                                        {
                                            reintQuery.o.GST = query.GSTPercentage;
                                            reintQuery.o.Basic = query.Salary;
                                            reintQuery.o.MedicalAmount = 0;
                                            reintQuery.o.NewDesignation = query.DesignationId;
                                            reintQuery.o.OldDesignation = query.DesignationId;
                                            reintQuery.o.OldHRA = 0;
                                            reintQuery.o.HRA = 0;
                                            reintQuery.o.NewProjectId = query.ProjectId;
                                            reintQuery.o.OldProjectId = query.ProjectId;
                                            reintQuery.o.isMedical = false;
                                            reintQuery.o.isHRA = false;
                                            reintQuery.o.SalaryLevelId = query.SalaryLevelId;
                                        }
                                    }
                                    else if (apptypeid == 2)
                                    {

                                        var query = (from c in context.tblRCTSTE
                                                     where c.STEID == model.ApplicationID
                                                     select c).FirstOrDefault();
                                        if (query != null)
                                        {
                                            reintQuery.o.Basic = query.Salary;
                                            reintQuery.o.MedicalAmount = query.MedicalAmmount;
                                            reintQuery.o.MedicalType = query.Medical;
                                            reintQuery.o.NewDesignation = query.DesignationId;
                                            reintQuery.o.OldDesignation = query.DesignationId;
                                            reintQuery.o.OldHRA = query.HRA;
                                            reintQuery.o.HRA = query.HRA;
                                            reintQuery.o.NewProjectId = query.ProjectId;
                                            reintQuery.o.OldProjectId = query.ProjectId;
                                            reintQuery.o.isMedical = query.Medical == 2 ? true : false;
                                            reintQuery.o.isHRA = query.isHaveHRA ?? false;
                                            reintQuery.o.SalaryLevelId = query.SalaryLevelId;
                                        }
                                    }
                                    else if (apptypeid == 3)
                                    {
                                        var query = (from c in context.tblRCTOutsourcing
                                                     where c.OSGID == model.ApplicationID
                                                     select c).FirstOrDefault();
                                        if (query != null)
                                        {
                                            reintQuery.o.Basic = query.Salary;
                                            reintQuery.o.MedicalAmount = query.MedicalAmmount;
                                            reintQuery.o.MedicalType = query.Medical;
                                            reintQuery.o.NewDesignation = query.DesignationId;
                                            reintQuery.o.OldDesignation = query.DesignationId;
                                            reintQuery.o.OldHRA = query.HRA;
                                            reintQuery.o.HRA = query.HRA;
                                            reintQuery.o.NewProjectId = query.ProjectId;
                                            reintQuery.o.OldProjectId = query.ProjectId;
                                            reintQuery.o.isMedical = query.Medical == 2 ? true : false;
                                            reintQuery.o.isHRA = query.isHaveHRA ?? false;
                                            reintQuery.o.SalaryLevelId = query.SalaryLevelId;
                                        }
                                    }
                                    reintQuery.o.FromDate = model.FromDate;
                                    reintQuery.o.ToDate = model.ToDate;
                                    reintQuery.o.UpdtTS = DateTime.Now;
                                    reintQuery.o.UpdtUser = logged_in_userId;
                                    OrderID = reintQuery.o.OrderId;
                                    string docpath = "";
                                    string docname = "";
                                    if (model.PILetter != null)
                                    {
                                        docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                        var docfileId = Guid.NewGuid().ToString();
                                        docpath = docfileId + "_" + docname;
                                        model.PILetter.UploadFile("Requirement", docpath);
                                        reintQuery.od.PILetter = docpath;
                                        reintQuery.od.PILetterFileName = docname;
                                    }
                                    //reintQuery.od.OrderId = reintQuery.o.OrderId;
                                    reintQuery.od.RequestReference = model.RequestReference;
                                    reintQuery.od.RequestReferenceNo = model.ReferenceNo;
                                    reintQuery.od.RequestEmailDate = model.SourceEmailDate;
                                    reintQuery.od.isRejoined = model.Rejoin;
                                    context.SaveChanges();
                                    res = 1;
                                }
                                else if(odPIInQuery != null)
                                {
                                    odPIInQuery.o.Status = "Initiated";
                                    prestatus = "PI Initiated";
                                    newstatus = "Initiated";
                                    odPIInQuery.o.FromDate = model.FromDate;
                                    odPIInQuery.o.ToDate = model.ToDate;
                                    odPIInQuery.o.UpdtTS = DateTime.Now;
                                    odPIInQuery.o.UpdtUser = logged_in_userId;
                                    OrderID = odPIInQuery.o.OrderId;
                                    string docpath = "";
                                    string docname = "";
                                    if (model.PILetter != null)
                                    {
                                        docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                        var docfileId = Guid.NewGuid().ToString();
                                        docpath = docfileId + "_" + docname;
                                        model.PILetter.UploadFile("Requirement", docpath);
                                        odPIInQuery.od.PILetter = docpath;
                                        odPIInQuery.od.PILetterFileName = docname;
                                    }
                                    context.SaveChanges();
                                    res = 1;
                                }
                                else
                                    return Tuple.Create(0, "Something went wrong please contact administrator");
                            }
                            else
                            {
                                int ordertype = context.tblOrderMaster.Where(m => m.CodeDescription == "Maternity Leave Application").Select(x => x.CodeID).FirstOrDefault();
                                tblOrder Order = new tblOrder();
                                Order.Status = "Initiated";
                                newstatus = Order.Status;
                                Order.AppointmentId = model.ApplicationID;
                                Order.AppointmentType = apptypeid;
                                Order.OrderDate = model.ApplicationReceiveDate;
                                if (apptypeid == 1)
                                {
                                    var mastQuery = (from c in context.tblRCTConsultantAppointment where c.ConsultantAppointmentId == model.ApplicationID select c).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        Order.GST = mastQuery.GSTPercentage;
                                        Order.Basic = mastQuery.Salary;
                                        Order.MedicalAmount = 0;
                                        Order.NewDesignation = mastQuery.DesignationId;
                                        Order.OldDesignation = mastQuery.DesignationId;
                                        Order.OldHRA = 0;
                                        Order.HRA = 0;
                                        Order.NewProjectId = mastQuery.ProjectId;
                                        Order.OldProjectId = mastQuery.ProjectId;
                                        Order.isMedical = false;
                                        Order.isHRA = false;
                                        Order.SalaryLevelId = mastQuery.SalaryLevelId;
                                    }
                                }
                                else if (apptypeid == 2)
                                {
                                    var mastQuery = (from c in context.tblRCTSTE where c.STEID == model.ApplicationID select c).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        Order.Basic = mastQuery.Salary;
                                        Order.MedicalAmount = mastQuery.MedicalAmmount;
                                        Order.MedicalType = mastQuery.Medical;
                                        Order.NewDesignation = mastQuery.DesignationId;
                                        Order.OldDesignation = mastQuery.DesignationId;
                                        Order.OldHRA = mastQuery.HRA;
                                        Order.HRA = mastQuery.HRA;
                                        Order.NewProjectId = mastQuery.ProjectId;
                                        Order.OldProjectId = mastQuery.ProjectId;
                                        Order.isMedical = mastQuery.Medical == 2 ? true : false;
                                        Order.isHRA = mastQuery.isHaveHRA ?? false;
                                        Order.SalaryLevelId = mastQuery.SalaryLevelId;
                                    }
                                }
                                else if (apptypeid == 3)
                                {
                                    var mastQuery = (from c in context.tblRCTOutsourcing where c.OSGID == model.ApplicationID select c).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        Order.Basic = mastQuery.Salary;
                                        Order.MedicalAmount = mastQuery.MedicalAmmount;
                                        Order.MedicalType = mastQuery.Medical;
                                        Order.NewDesignation = mastQuery.DesignationId;
                                        Order.OldDesignation = mastQuery.DesignationId;
                                        Order.OldHRA = mastQuery.HRA;
                                        Order.HRA = mastQuery.HRA;
                                        Order.NewProjectId = mastQuery.ProjectId;
                                        Order.OldProjectId = mastQuery.ProjectId;
                                        Order.isMedical = mastQuery.Medical == 2 ? true : false;
                                        Order.isHRA = mastQuery.isHaveHRA ?? false;
                                        Order.SalaryLevelId = mastQuery.SalaryLevelId;
                                    }
                                }
                                Order.OrderType = ordertype;
                                Order.FromDate = model.FromDate;
                                Order.ToDate = model.ToDate;
                                Order.CrtdTS = DateTime.Now;
                                Order.CrtdUser = logged_in_userId;
                                var maxOrderwiseSeq = (from O in context.tblOrder where O.OrderType == ordertype select O.OrderwiseSeqId).Max();
                                Order.OrderwiseSeqId = maxOrderwiseSeq == null ? 1 : maxOrderwiseSeq + 1;
                                var maxSeqId = (from O in context.tblOrder select O.SeqId).Max() ?? 0;
                                var number = maxSeqId == 0 ? 1 : maxSeqId + 1;
                                Order.SeqId = number;
                                string value = number.ToString("D4");
                                Order.OrderNo = "ML" + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                context.tblOrder.Add(Order);
                                context.SaveChanges();
                                OrderID = Order.OrderId;

                                tblOrderDetail OrderDetail = new tblOrderDetail();
                                string docpath = "";
                                string docname = "";
                                if (model.PILetter != null)
                                {
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    OrderDetail.PILetter = docpath;
                                    OrderDetail.PILetterFileName = docname;
                                }
                                OrderDetail.OrderId = OrderID;
                                OrderDetail.RequestReference = model.RequestReference;
                                OrderDetail.RequestReferenceNo = model.ReferenceNo;
                                OrderDetail.RequestEmailDate = model.SourceEmailDate;
                                OrderDetail.isRejoined = model.Rejoin;
                                context.tblOrderDetail.Add(OrderDetail);
                                context.SaveChanges();
                                res = 1;
                            }
                            
                            if (res > 0)
                                transaction.Commit();
                            //if (lossPayOrderId > 0) //Intiate loss of pay
                            //{
                            //    var Data = RecruitSPLOPWFInit(lossPayOrderId, logged_in_userId);
                            //}
                            PostOrderStatusLog(OrderID, prestatus, newstatus, logged_in_userId);
                            if (res == 1 || res == 2)
                            {
                                var Data = RecruitMaternityWFInit(OrderID, logged_in_userId);
                                if (!Data.Item1)
                                {
                                    msg = Data.Item2;
                                    res = 0;
                                    var query = (from q in context.tblOrder where q.OrderId == OrderID select q).FirstOrDefault();
                                    if (query != null)
                                    {
                                        query.Is_Clarify = true;
                                        query.UpdtTS = DateTime.Now;
                                        query.UpdtUser = logged_in_userId;
                                        context.SaveChanges();
                                    }
                                }
                            }
                            return Tuple.Create(res, msg);
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, "Something went wrong please contact administrator");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, "Something went wrong please contact administrator");
            }
        }

        #endregion

        #region Relieving

        public RelievingModel getRelievingDetails(int appid = 0, string appType = null, int orderid = 0)
        {
            RelievingModel model = new RelievingModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int appTypeId = getAppointmentType(appType);

                    if (orderid > 0)
                    {
                        //This state only allow upload noc documents
                        var odrQuery = (from o in context.tblOrder
                                        from d in context.tblOrderDetail
                                        where o.OrderId == d.OrderId && o.OrderId == orderid && o.OrderType == 9
                                        select new { o, d }).FirstOrDefault();
                        if (odrQuery != null)
                        {
                            appid = odrQuery.o.AppointmentId ?? 0;
                            appTypeId = odrQuery.o.AppointmentType ?? 0;
                            model.ApplicationReceiveDate = odrQuery.o.OrderDate;
                            model.OrderID = odrQuery.o.OrderId;
                            model.Status = odrQuery.o.Status;
                            model.InitByPI_f = odrQuery.o.InitByPI_f ?? false;

                            model.WithdrawalAmount = odrQuery.o.WithdrawAmmount ?? 0;
                            model.RelievingMode = odrQuery.d.RelievingMode ?? 0;
                            model.ForenoonOrAfternoon = odrQuery.d.isForenoon == true ? "FN" : "AF";
                            model.PILetterFileName = odrQuery.d.PILetterFileName;
                            model.PILetterPath = odrQuery.d.PILetter;
                            model.RelievingDate = odrQuery.d.RelievingDate;
                            model.CommitmentOption = Convert.ToInt16(odrQuery.d.CommitmentOption);
                            model.RequestReference = odrQuery.d.RequestReference ?? 0;
                            model.ReferenceNo = odrQuery.d.RequestReferenceNo;
                            model.SourceEmailDate = odrQuery.d.RequestEmailDate;
                            model.NODuesFilePath = !string.IsNullOrEmpty(odrQuery.d.NOCForm) ? odrQuery.d.NOCForm.Split(',') : null;
                            model.NODuesFileName = !string.IsNullOrEmpty(odrQuery.d.NOCFormName) ? odrQuery.d.NOCFormName.Split(',') : null;
                            model.PIRemarks = odrQuery.d.PIJustificationRemarks;
                            if (odrQuery.o.OrderRequestId > 0)
                                model.PINoDuesRemarks = (from r in context.tblRCTOrderRequest where r.OrderRequestId == odrQuery.o.OrderRequestId select r.NoDuesRemark).FirstOrDefault();
                            if(odrQuery.o.OrderRequestId>0&& odrQuery.o.InitByPI_f==true)
                                model.PIrequestedRelievingDate= string.Format("{0:dd-MMMM-yyyy}", odrQuery.d.RelievingDate);
                        }
                    }
                    //master table details

                    if (appTypeId == 1)
                    {
                        var mastQuery = (from A in context.tblRCTConsultantAppointment
                                         where A.ConsultantAppointmentId == appid && A.isEmployee == true
                                         select A).FirstOrDefault();
                        if (mastQuery != null)
                        {
                            model.ApplicationID = appid;
                            model.TypeCode = "CON";
                            model.EmployeeID = mastQuery.EmployeersID;
                            model.Name = Common.GetCodeControlName(mastQuery.ProfessionalType ?? 0, "RCTProfessional") + mastQuery.Name;
                            model.Typeofappointment = Common.GetCodeControlName(1, "Appointmenttype");
                            model.ContactNumber = mastQuery.ContactNumber;
                            model.Sex = Common.GetCodeControlName(mastQuery.Sex ?? 0, "RCTGender");
                            model.Age = mastQuery.Age ?? 0;
                            model.PermanentAddress = mastQuery.PermanentAddress;
                            model.PresentAddress = mastQuery.TemporaryAddress;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", mastQuery.DateofBirth);
                            model.Appointmentdetails = Getmastappointmentdetails(appid, appTypeId);
                        }
                    }
                    else if (appTypeId == 2)
                    {
                        var mastQuery = (from A in context.tblRCTSTE
                                         where A.STEID == appid && A.isEmployee == true
                                         select A).FirstOrDefault();
                        if (mastQuery != null)
                        {
                            model.ApplicationID = appid;
                            model.TypeCode = "STE";
                            model.EmployeeID = mastQuery.EmployeersID;
                            model.Name = Common.GetCodeControlName(mastQuery.ProfessionalType ?? 0, "RCTProfessional") + mastQuery.Name;
                            model.Typeofappointment = Common.GetCodeControlName(mastQuery.TypeofAppointment ?? 0, "STEAppointmenttype");
                            model.ContactNumber = mastQuery.ContactNumber;
                            model.Sex = Common.GetCodeControlName(mastQuery.Sex ?? 0, "RCTGender");
                            model.Age = mastQuery.Age ?? 0;
                            model.PermanentAddress = mastQuery.PermanentAddress;
                            model.PresentAddress = mastQuery.PresentAddress;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", mastQuery.DateofBirth);
                            model.Appointmentdetails = Getmastappointmentdetails(appid, appTypeId);
                        }
                    }
                    else if (appTypeId == 3)
                    {
                        var mastQuery = (from A in context.tblRCTOutsourcing
                                         where A.OSGID == appid && A.isEmployee == true
                                         select A).FirstOrDefault();
                        if (mastQuery != null)
                        {
                            model.ApplicationID = appid;
                            model.TypeCode = "OSG";
                            model.EmployeeID = mastQuery.EmployeersID;
                            model.Name = Common.GetCodeControlName(mastQuery.ProfessionalType ?? 0, "RCTProfessional") + mastQuery.Name;
                            model.Typeofappointment = Common.GetCodeControlName(mastQuery.TypeofAppointment ?? 0, "OSGAppointmenttype");
                            model.ContactNumber = mastQuery.ContactNumber;
                            model.Sex = Common.GetCodeControlName(mastQuery.Sex ?? 0, "RCTGender");
                            model.Age = mastQuery.Age ?? 0;
                            model.PermanentAddress = mastQuery.PermanentAddress;
                            model.PresentAddress = mastQuery.PresentAddress;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", mastQuery.DateofBirth);
                            model.Appointmentdetails = Getmastappointmentdetails(appid, appTypeId);
                        }
                    }
                    int maxOrderId = (from m in context.tblOrder where m.AppointmentId == model.ApplicationID && m.AppointmentType == appTypeId select m.OrderId).Max();
                    var spQuery = context.tblOrder.Where(m => m.AppointmentId == model.ApplicationID && m.AppointmentType == appTypeId && m.OrderType == 7 && m.Status == "Completed" && (m.FromDate == m.ToDate || m.FromDate > m.ToDate) && m.OrderId == maxOrderId).FirstOrDefault();
                    if (spQuery != null)
                    {
                        model.RelievingDate = spQuery.FromDate.Value.AddDays(-1);
                        model.Spcomerelieving_f = true;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return model;
            }
        }

        public Tuple<int, string> CommitRelieving(RelievingModel model, int logged_in_userId)
        {
            try
            {
                int OrderID = 0;
                var prestatus = string.Empty;
                var newstatus = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int AppointmentType = getAppointmentType(model.TypeCode);
                            string CommitmentNumber = string.Empty;
                            DateTime? appointmentfromdate = DateTime.Now;
                            DateTime? appointmenttodate = DateTime.Now;
                            var odQuery = (from m in context.tblOrder
                                           where m.OrderId == model.OrderID && (m.Status == "Open" || m.Status == "PI Initiated")
                                           select m).FirstOrDefault();
                            if (odQuery != null)
                            {
                                prestatus = odQuery.Status;

                                if (odQuery.Status == "PI Initiated")
                                {
                                    odQuery.Status = "Relieving initiated";
                                    odQuery.FromDate = model.RelievingDate;
                                    if (AppointmentType == 1)
                                    {
                                        var mastQuery = (from c in context.tblRCTConsultantAppointment
                                                         where c.ConsultantAppointmentId == model.ApplicationID
                                                         select c).FirstOrDefault();
                                        if (mastQuery != null)
                                        {
                                            odQuery.GST = mastQuery.GSTPercentage;
                                            odQuery.Basic = mastQuery.Salary;
                                            odQuery.MedicalAmount = 0;
                                            odQuery.NewDesignation = mastQuery.DesignationId;
                                            odQuery.OldDesignation = mastQuery.DesignationId;
                                            odQuery.OldHRA = 0;
                                            odQuery.HRA = 0;
                                            odQuery.NewProjectId = mastQuery.ProjectId;
                                            odQuery.OldProjectId = mastQuery.ProjectId;
                                            odQuery.isMedical = false;
                                            odQuery.isHRA = false;
                                            CommitmentNumber = mastQuery.CommitmentNo;
                                            appointmentfromdate = mastQuery.AppointmentStartdate;
                                            appointmenttodate = mastQuery.AppointmentEnddate;
                                        }
                                    }
                                    else if (AppointmentType == 2)
                                    {

                                        var mastQuery = (from c in context.tblRCTSTE
                                                         where c.STEID == model.ApplicationID
                                                         select c).FirstOrDefault();
                                        if (mastQuery != null)
                                        {
                                            odQuery.Basic = mastQuery.Salary;
                                            odQuery.MedicalAmount = mastQuery.MedicalAmmount;
                                            odQuery.MedicalType = mastQuery.Medical;
                                            odQuery.NewDesignation = mastQuery.DesignationId;
                                            odQuery.OldDesignation = mastQuery.DesignationId;
                                            odQuery.OldHRA = mastQuery.HRA;
                                            odQuery.HRA = mastQuery.HRA;
                                            odQuery.NewProjectId = mastQuery.ProjectId;
                                            odQuery.OldProjectId = mastQuery.ProjectId;
                                            odQuery.isMedical = mastQuery.Medical == 2 ? true : false;
                                            odQuery.isHRA = mastQuery.isHaveHRA ?? false;
                                            CommitmentNumber = mastQuery.CommitmentNo;
                                            appointmentfromdate = mastQuery.AppointmentStartdate;
                                            appointmenttodate = mastQuery.AppointmentEnddate;
                                        }
                                    }
                                    else if (AppointmentType == 3)
                                    {
                                        var mastQuery = (from c in context.tblRCTOutsourcing
                                                         where c.OSGID == model.ApplicationID
                                                         select c).FirstOrDefault();
                                        if (mastQuery != null)
                                        {
                                            odQuery.Basic = mastQuery.Salary;
                                            odQuery.MedicalAmount = mastQuery.MedicalAmmount;
                                            odQuery.MedicalType = mastQuery.Medical;
                                            odQuery.NewDesignation = mastQuery.DesignationId;
                                            odQuery.OldDesignation = mastQuery.DesignationId;
                                            odQuery.OldHRA = mastQuery.HRA;
                                            odQuery.HRA = mastQuery.HRA;
                                            odQuery.NewProjectId = mastQuery.ProjectId;
                                            odQuery.OldProjectId = mastQuery.ProjectId;
                                            odQuery.isMedical = mastQuery.Medical == 2 ? true : false;
                                            odQuery.isHRA = mastQuery.isHaveHRA ?? false;
                                            CommitmentNumber = mastQuery.CommitmentNo;
                                            appointmentfromdate = mastQuery.AppointmentStartdate;
                                            appointmenttodate = mastQuery.AppointmentEnddate;
                                        }
                                    }
                                }

                                if (model.CommitmentOption == 3)
                                {
                                    odQuery.WithdrawAmmount = Common.GetCommitmentBalance(CommitmentNumber);
                                }
                                else if (model.CommitmentOption == 1)
                                {
                                    if (model.RelievingDate > appointmentfromdate)
                                        appointmentfromdate = model.RelievingDate;
                                    odQuery.WithdrawAmmount = Common.calculateWithdrawalAmount(model.ApplicationID, model.TypeCode, appointmentfromdate ?? DateTime.Now, appointmenttodate ?? DateTime.Now);
                                }
                                if(odQuery.InitByPI_f == true&&model.CommitmentOption==2)
                                {
                                    odQuery.WithdrawAmmount = 0;
                                }
                                string[] noduesfilepath = new string[model.NODuesFile == null ? 0 : model.NODuesFile.Count()];
                                string[] noduesfilename = new string[model.NODuesFile == null ? 0 : model.NODuesFile.Count()];
                                if (model.NODuesFile != null)
                                {
                                    var i = 0;
                                    foreach (var nocfile in model.NODuesFile)
                                    {
                                        if (nocfile != null)
                                        {
                                            string docpath = "";
                                            string docname = "";
                                            docname = System.IO.Path.GetFileName(nocfile.FileName);
                                            var docfileId = Guid.NewGuid().ToString();
                                            docpath = docfileId + "_" + docname;
                                            nocfile.UploadFile("Requirement", docpath);
                                            noduesfilepath[i] = docpath;
                                            noduesfilename[i] = docname;
                                            i++;
                                        }
                                    }
                                }
                                OrderID = odQuery.OrderId;
                                odQuery.UpdtTS = DateTime.Now;
                                odQuery.UpdtUser = logged_in_userId;

                                string NOC = "";
                                var detQuery = (from m in context.tblOrderDetail
                                                where m.OrderId == OrderID
                                                orderby m.OrderId descending
                                                select m).FirstOrDefault();
                                if (detQuery != null)
                                {
                                    detQuery.NOCForm = noduesfilepath.Count() > 0 ? string.Join(",", noduesfilepath) : "";
                                    detQuery.NOCFormName = noduesfilename.Count() > 0 ? string.Join(",", noduesfilename) : "";
                                    detQuery.NOCDocSubmitted = noduesfilepath.Count() > 0 ? true : false;
                                    NOC = string.Join(",", noduesfilepath);
                                    detQuery.NOCDocSubmitted = !string.IsNullOrEmpty(NOC) ? true : false;
                                    if (odQuery.InitByPI_f == true)
                                    {
                                        detQuery.CommitmentOption = Convert.ToString(model.CommitmentOption);
                                        detQuery.RelievingMode = model.RelievingMode;
                                        detQuery.isForenoon = model.ForenoonOrAfternoon == "FN" ? true : false;
                                        detQuery.RelievingDate = model.RelievingDate;
                                        if (model.PILetter != null)
                                        {
                                            string docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                            string docpath = Guid.NewGuid().ToString() + "_" + docname;
                                            model.PILetter.UploadFile("Requirement", docpath);
                                            detQuery.PILetter = docpath;
                                            detQuery.PILetterFileName = docname;
                                        }
                                    }
                                }
                                if (odQuery.OrderRequestId > 0 && !detQuery.NOCDocSubmitted)//PI initiate relieve are no need to upload no dues
                                {
                                    var orderreqQuery = context.tblRCTOrderRequest.Where(x => x.OrderRequestId == odQuery.OrderRequestId).FirstOrDefault();
                                    detQuery.NOCForm = orderreqQuery.NoDuesDoc;
                                    detQuery.NOCFormName = orderreqQuery.NoDuesDocName;
                                    NOC = !string.IsNullOrEmpty(orderreqQuery.NoDuesDocName) ? orderreqQuery.NoDuesDocName : !string.IsNullOrEmpty(orderreqQuery.NoDuesRemark) ? orderreqQuery.NoDuesRemark : "";
                                    detQuery.NOCDocSubmitted = !string.IsNullOrEmpty(NOC) ? true : false;
                                    //if (orderreqQuery.NoDues_f == false)
                                    //   detQuery.NOCDocSubmitted = true;
                                }
                                if (odQuery.InitByPI_f == false || odQuery.InitByPI_f == null)
                                    odQuery.Status = !string.IsNullOrEmpty(NOC) ? "Completed" : "Open";
                                newstatus = odQuery.Status;
                                context.SaveChanges();
                                transaction.Commit();
                                PostOrderStatusLog(OrderID, prestatus, newstatus, logged_in_userId);
                                if (newstatus == "Relieving initiated")
                                {
                                    var data = RecruitRelieveWFInit(OrderID, logged_in_userId);
                                    if (!data.Item1)
                                        return Tuple.Create(0, data.Item2);
                                    if (string.IsNullOrEmpty(NOC))
                                        return Tuple.Create(1, "Employee Relieved successfully. Please upload No dues certificate for further action.");
                                    else
                                        return Tuple.Create(1, "Employee Relieved successfully");
                                }
                                if (odQuery.Status == "Completed")
                                    return Tuple.Create(1, "Employee Relieved successfully");
                                else
                                    return Tuple.Create(1, "Employee Relieved successfully. Please upload No dues certificate for further action.");

                            }
                            else if (model.OrderID > 0)
                            {
                                return Tuple.Create(0, "Reliveing form not allowed for edit.");
                            }
                            else
                            {

                                decimal? WithdrawalAmount = null;
                                tblOrder order = new tblOrder();
                                tblOrderDetail orderdetail = new tblOrderDetail();
                                order.AppointmentId = model.ApplicationID;
                                order.AppointmentType = AppointmentType;
                                order.Status = "Relieving initiated";
                                newstatus = order.Status;
                                order.OrderDate = model.ApplicationReceiveDate;
                                order.OrderType = 9;
                                order.WithdrawAmmount = model.WithdrawalAmount;
                                if (AppointmentType == 1)
                                {
                                    var mastQuery = (from c in context.tblRCTConsultantAppointment
                                                     where c.ConsultantAppointmentId == model.ApplicationID
                                                     select c).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        order.GST = mastQuery.GSTPercentage;
                                        order.Basic = mastQuery.Salary;
                                        order.MedicalAmount = 0;
                                        order.NewDesignation = mastQuery.DesignationId;
                                        order.OldDesignation = mastQuery.DesignationId;
                                        order.OldHRA = 0;
                                        order.HRA = 0;
                                        order.NewProjectId = mastQuery.ProjectId;
                                        order.OldProjectId = mastQuery.ProjectId;
                                        order.isMedical = false;
                                        order.isHRA = false;

                                        CommitmentNumber = "";
                                        appointmentfromdate = mastQuery.AppointmentStartdate;
                                        appointmenttodate = mastQuery.AppointmentEnddate;
                                    }
                                }
                                else if (AppointmentType == 2)
                                {

                                    var mastQuery = (from c in context.tblRCTSTE
                                                     where c.STEID == model.ApplicationID
                                                     select c).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        order.Basic = mastQuery.Salary;
                                        order.MedicalAmount = mastQuery.MedicalAmmount;
                                        order.MedicalType = mastQuery.Medical;
                                        order.NewDesignation = mastQuery.DesignationId;
                                        order.OldDesignation = mastQuery.DesignationId;
                                        order.OldHRA = mastQuery.HRA;
                                        order.HRA = mastQuery.HRA;
                                        order.NewProjectId = mastQuery.ProjectId;
                                        order.OldProjectId = mastQuery.ProjectId;
                                        order.isMedical = mastQuery.Medical == 2 ? true : false;
                                        order.isHRA = mastQuery.isHaveHRA ?? false;

                                        CommitmentNumber = mastQuery.CommitmentNo;
                                        appointmentfromdate = mastQuery.AppointmentStartdate;
                                        appointmenttodate = mastQuery.AppointmentEnddate;
                                    }
                                }
                                else if (AppointmentType == 3)
                                {
                                    var mastQuery = (from c in context.tblRCTOutsourcing
                                                     where c.OSGID == model.ApplicationID
                                                     select c).FirstOrDefault();
                                    if (mastQuery != null)
                                    {
                                        order.Basic = mastQuery.Salary;
                                        order.MedicalAmount = mastQuery.MedicalAmmount;
                                        order.MedicalType = mastQuery.Medical;
                                        order.NewDesignation = mastQuery.DesignationId;
                                        order.OldDesignation = mastQuery.DesignationId;
                                        order.OldHRA = mastQuery.HRA;
                                        order.HRA = mastQuery.HRA;
                                        order.NewProjectId = mastQuery.ProjectId;
                                        order.OldProjectId = mastQuery.ProjectId;
                                        order.isMedical = mastQuery.Medical == 2 ? true : false;
                                        order.isHRA = mastQuery.isHaveHRA ?? false;

                                        CommitmentNumber = mastQuery.CommitmentNo;
                                        appointmentfromdate = mastQuery.AppointmentStartdate;
                                        appointmenttodate = mastQuery.AppointmentEnddate;
                                    }
                                }

                                order.CrtdTS = DateTime.Now;
                                order.CrtdUser = logged_in_userId;
                                var maxOrderwiseSeq = (from o in context.tblOrder where o.OrderType == 9 select o.OrderwiseSeqId).Max();
                                order.OrderwiseSeqId = maxOrderwiseSeq == null ? 1 : maxOrderwiseSeq + 1;
                                var maxSeqId = (from O in context.tblOrder select O.SeqId).Max() ?? 0;
                                var number = maxSeqId == 0 ? 1 : maxSeqId + 1;
                                order.SeqId = number;
                                string value = number.ToString("D4");
                                order.OrderNo = "RL" + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                if (model.CommitmentOption == 3)
                                {
                                    WithdrawalAmount = Common.GetCommitmentBalance(CommitmentNumber);
                                }
                                else if (model.CommitmentOption == 1)
                                {
                                    if (model.RelievingDate > appointmentfromdate)
                                        appointmentfromdate = model.RelievingDate;
                                    WithdrawalAmount = Common.calculateWithdrawalAmount(model.ApplicationID, model.TypeCode, appointmentfromdate ?? DateTime.Now, appointmenttodate ?? DateTime.Now);
                                }
                                order.WithdrawAmmount = WithdrawalAmount;
                                order.FromDate = model.RelievingMode == 1 ? appointmenttodate : model.RelievingDate;
                                order.ToDate = model.AppointmentEndDate;
                                context.tblOrder.Add(order);
                                context.SaveChanges();
                                OrderID = order.OrderId;
                                bool result = IsRespondTermEndMail(model.ApplicationID, model.TypeCode, logged_in_userId, OrderID, context);
                                orderdetail.OrderId = OrderID;
                                if (model.PILetter != null)
                                {
                                    string docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    string docpath = Guid.NewGuid().ToString() + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    orderdetail.PILetter = docpath;
                                    orderdetail.PILetterFileName = docname;
                                }
                                string[] noduesfilepath = new string[model.NODuesFile.Count()];
                                string[] noduesfilename = new string[model.NODuesFile.Count()];
                                if (model.NODuesFile != null)
                                {
                                    var i = 0;
                                    foreach (var filenoc in model.NODuesFile)
                                    {
                                        if (filenoc != null)
                                        {
                                            string docname = System.IO.Path.GetFileName(filenoc.FileName);
                                            string docpath = Guid.NewGuid().ToString() + "_" + docname;
                                            filenoc.UploadFile("Requirement", docpath);
                                            noduesfilepath[i] = docpath;
                                            noduesfilename[i] = docname;
                                            i++;
                                        }
                                    }
                                }
                                orderdetail.NOCForm = noduesfilepath.Count() > 0 ? string.Join(",", noduesfilepath) : "";
                                orderdetail.NOCFormName = noduesfilename.Count() > 0 ? string.Join(",", noduesfilename) : "";
                                string NOC = string.Join(",", noduesfilepath);
                                orderdetail.NOCDocSubmitted = NOC != "" ? true : false;

                                orderdetail.RequestReference = model.RequestReference;
                                orderdetail.RequestReferenceNo = model.ReferenceNo;
                                orderdetail.RequestEmailDate = model.SourceEmailDate;
                                orderdetail.CommitmentOption = Convert.ToString(model.CommitmentOption);
                                orderdetail.RelievingMode = model.RelievingMode;
                                orderdetail.isForenoon = model.ForenoonOrAfternoon == "FN" ? true : false;
                                orderdetail.RelievingDate = model.RelievingDate;
                                context.tblOrderDetail.Add(orderdetail);
                                context.SaveChanges();

                                tblRCTRelievingLog relievelog = new tblRCTRelievingLog();
                                relievelog.OrderId = OrderID;
                                relievelog.CRTD_TS = DateTime.Now;
                                relievelog.CRTD_US = logged_in_userId;
                                relievelog.RelieveDate = model.RelievingDate;
                                context.tblRCTRelievingLog.Add(relievelog);
                                context.SaveChanges();

                                transaction.Commit();

                                PostOrderStatusLog(OrderID, prestatus, newstatus, logged_in_userId);
                                var data = RecruitRelieveWFInit(OrderID, logged_in_userId);
                                if (!data.Item1)
                                {
                                    context.tblOrder.RemoveRange(context.tblOrder.Where(m => m.OrderId == OrderID));
                                    context.tblOrderDetail.RemoveRange(context.tblOrderDetail.Where(m => m.OrderId == OrderID));
                                    context.tblRCTRelievingLog.RemoveRange(context.tblRCTRelievingLog.Where(m => m.OrderId == OrderID));
                                    context.SaveChanges();
                                    return Tuple.Create(0, data.Item2);
                                }

                                if (string.IsNullOrEmpty(NOC))
                                    return Tuple.Create(1, "Employee Relieved successfully. Please upload No dues certificate for further action.");
                                else
                                    return Tuple.Create(1, "Employee Relieved successfully");

                            }

                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, "Something went wrong please contact administrator");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, "Something went wrong please contact administrator");
            }
        }

        public bool UpdateRelifOrderGeneration(int orderid, string ordercategory)
        {
            bool res = false;
            try
            {
                if (orderid > 0)
                {
                    string user_logged_in = System.Web.HttpContext.Current.User.Identity.Name;
                    int UserId = Common.GetUserid(user_logged_in);
                    using (var context = new IOASDBEntities())
                    {
                        var Query = (from o in context.tblRCTRelievingLog where o.OrderId == orderid select o).FirstOrDefault();
                        if (Query != null)
                        {
                            Query.UPTD_TS = DateTime.Now;
                            Query.UPTD_US = UserId;
                            if (ordercategory == "Relieve Order")
                                Query.isGenarateRelieveOrder = true;
                            else if (ordercategory == "Final Settlement")
                                Query.isGenarateFinalSettlement = true;
                            else if (ordercategory == "Service Certificate")
                                Query.isGenarateServiceCertificate = true;
                            context.SaveChanges();
                            return true;
                        }
                        else
                        {
                            tblRCTRelievingLog log = new tblRCTRelievingLog();
                            log.OrderId = orderid;
                            log.CRTD_TS = DateTime.Now;
                            log.CRTD_US = UserId;
                            if (ordercategory == "Relieve Order")
                                log.isGenarateRelieveOrder = true;
                            else if (ordercategory == "Final Settlement")
                                log.isGenarateFinalSettlement = true;
                            else if (ordercategory == "Service Certificate")
                                log.isGenarateServiceCertificate = true;
                            context.tblRCTRelievingLog.Add(log);
                            context.SaveChanges();
                            return true;
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        #endregion

        #region Stop payment and Loss of pay

        public StopaymentlosspayModel getSPLOPDetailsbyorder(int orderid)
        {
            StopaymentlosspayModel odrmodel = new StopaymentlosspayModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderid > 0)
                    {
                        var QryOrder = (from O in context.tblOrder
                                        where O.OrderId == orderid
                                        orderby O.OrderId descending
                                        select O).FirstOrDefault();
                        if (QryOrder != null)
                        {
                            int appid = QryOrder.AppointmentId ?? 0;
                            string appType = QryOrder.AppointmentType == 1 ? "CON" : QryOrder.AppointmentType == 2 ? "STE" : QryOrder.AppointmentType == 3 ? "OSG" : "";
                            odrmodel.ApplicationID = appid;
                            odrmodel.TypeCode = appType;
                            odrmodel.ApplicationReceiveDate = QryOrder.OrderDate;
                            odrmodel.ApplicationRevDate = string.Format("{0:dd-MMMM-yyyy}", QryOrder.OrderDate);
                            odrmodel.InitByPI_f = QryOrder.InitByPI_f ?? false;
                            odrmodel.OrderRequestId = QryOrder.OrderRequestId;
                            odrmodel.OrderID = QryOrder.OrderId;
                            odrmodel.Status = QryOrder.Status;
                            odrmodel.FromDateStr = string.Format("{0:dd-MMMM-yyyy}", QryOrder.FromDate);
                            odrmodel.FromDate = QryOrder.FromDate;
                            odrmodel.ToDateStr = string.Format("{0:dd-MMMM-yyyy}", QryOrder.ToDate);
                            odrmodel.ToDate = QryOrder.ToDate;
                            odrmodel.OrderType = QryOrder.OrderType ?? 0;
                            odrmodel.WithdrawalAmount = QryOrder.WithdrawAmmount ?? 0;
                            odrmodel.ArrearOrDeductionTillDate = QryOrder.ArrearOrDeductionTillDate;
                            odrmodel.ArrearOrDeductionAmount = QryOrder.ArrearOrDeductionAmount ?? 0;
                            var QryOrderDetail = (from O in context.tblOrderDetail
                                                  where O.OrderId == QryOrder.OrderId
                                                  select O).FirstOrDefault();
                            if (QryOrderDetail != null)
                            {

                                if (QryOrder.Status == "PI Initiated")
                                {
                                    odrmodel.ToMeridiem = 2;
                                    odrmodel.FromMeridiem = 1;
                                    odrmodel.lblToMeridiem = odrmodel.ToMeridiem == 1 ? "AM" : "PM";
                                    odrmodel.lblFromMeridiem = odrmodel.FromMeridiem == 1 ? "AM" : "PM";
                                }
                                else
                                {
                                    odrmodel.ToMeridiem = QryOrderDetail.ToMeridiem ?? 0;
                                    odrmodel.FromMeridiem = QryOrderDetail.FromMeridiem ?? 0;
                                    odrmodel.lblToMeridiem = QryOrderDetail.ToMeridiem == 1 ? "AM" : "PM";
                                    odrmodel.lblFromMeridiem = QryOrderDetail.FromMeridiem == 1 ? "AM" : "PM";
                                }
                                //odrmodel.Signature = QryOrderDetail.Signature ?? 0;
                                //odrmodel.lblSignature = Common.GetCodeControlName(QryOrderDetail.Signature ?? 0, "Signature");
                                odrmodel.PILetterPath = QryOrderDetail.PILetter;
                                odrmodel.PILetterFileName = QryOrderDetail.PILetterFileName;
                                odrmodel.RequestReference = QryOrderDetail.RequestReference ?? 0;
                                odrmodel.ReferenceNo = QryOrderDetail.RequestReferenceNo;
                                odrmodel.SourceEmailDate = QryOrderDetail.RequestEmailDate;
                                odrmodel.PIRemarks = QryOrderDetail.PIJustificationRemarks;
                                //odrmodel.Rejoin = QryOrderDetail.isRejoined;
                                odrmodel.RejoinDate = QryOrderDetail.RejoinDate;
                                odrmodel.RejoiningLetterPath = QryOrderDetail.RejoinLetterPath;
                                odrmodel.RejoiningLetterName = QryOrderDetail.RejoinLetterName;
                            }

                            //master table details
                            var query = (from m in context.vw_RCTOverAllApplicationEntry
                                         where m.ApplicationId == appid && m.AppointmentType == QryOrder.AppointmentType
                                         select m).FirstOrDefault();
                            if (query != null)
                            {
                                odrmodel.ApplicationNo = query.ApplicationNo;
                                odrmodel.EmployeeID = query.EmployeersID;
                                odrmodel.Name = query.ProfessionalType + "" + query.CandidateName;
                                odrmodel.Typeofappointment = query.TypeofAppointment;
                                odrmodel.TypeofappointmentId = query.TypeofAppointmentinInt ?? 0;
                                odrmodel.ContactNumber = query.ContactNumber;
                                odrmodel.Sex = Common.GetCodeControlName(query.Sex ?? 0, "RCTGender");
                                odrmodel.ConsolidatedPay = query.ConsolidatedPay ?? false;
                                odrmodel.IITMPensionerCSIRStaff = query.IITMPensionerorCSIRStaff;
                                odrmodel.IsMsPhd = query.isMsPhd ?? false;
                                odrmodel.Appointmentdetails = Getmastappointmentdetails(appid, QryOrder.AppointmentType ?? 0);
                            }
                        }
                    }
                }
                return odrmodel;
            }
            catch (Exception ex)
            {
                return odrmodel;
            }
        }

        public StopaymentlosspayModel getSPLOPDetails(int appid, string appType, bool islossofpay)
        {
            StopaymentlosspayModel odrmodel = new StopaymentlosspayModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (appid > 0)
                    {
                        var query = (from m in context.vw_RCTOverAllApplicationEntry
                                     where m.ApplicationId == appid && m.Category == appType
                                     && m.ApplicationType == "New"
                                     select m).FirstOrDefault();
                        if (query != null)
                        {
                            odrmodel.ApplicationID = appid;
                            odrmodel.TypeCode = appType;
                            odrmodel.ApplicationNo = query.ApplicationNo;
                            odrmodel.EmployeeID = query.EmployeersID;
                            odrmodel.Name = query.ProfessionalType + "" + query.CandidateName;
                            odrmodel.Typeofappointment = query.TypeofAppointment;
                            odrmodel.TypeofappointmentId = query.TypeofAppointmentinInt ?? 0;
                            odrmodel.ContactNumber = query.ContactNumber;
                            odrmodel.Sex = Common.GetCodeControlName(query.Sex ?? 0, "RCTGender");
                            odrmodel.ConsolidatedPay = query.ConsolidatedPay ?? false;
                            odrmodel.IITMPensionerCSIRStaff = query.IITMPensionerorCSIRStaff;
                            odrmodel.IsMsPhd = query.isMsPhd ?? false;
                            odrmodel.Appointmentdetails = Getmastappointmentdetails(appid, query.AppointmentType ?? 0);
                            odrmodel.OrderType = islossofpay == false ? 7 : 8;
                        }
                    }
                }
                return odrmodel;
            }
            catch (Exception ex)
            {
                return odrmodel;
            }
        }

        public int CommitSPLOP(StopaymentlosspayModel model, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int res = 0, OrderID = 0;
                            string Status = string.Empty;
                            string prestatus = string.Empty;

                            int AppTypeId = getAppointmentType(model.TypeCode);
                            var queryPIorder = (from o in context.tblOrder
                                                from od in context.tblOrderDetail
                                                where o.OrderId == od.OrderId && o.OrderId == model.OrderID
                                                && o.Status == "PI Initiated" && o.OrderType == 8
                                                select new { o, od }).FirstOrDefault();
                            var queryorder = (from o in context.tblOrder
                                              from od in context.tblOrderDetail
                                              where o.OrderId == od.OrderId && o.OrderId == model.OrderID
                                              && o.Status == "Approved" && o.OrderType == 7
                                              select new { o, od }).FirstOrDefault();
                            if (queryorder != null)
                            {
                                prestatus = queryorder.o.Status;
                                OrderID = model.OrderID ?? 0;
                                Status = "Reversal";
                                queryorder.o.Status = Status;
                                queryorder.o.ActualAppointmentStartDate = queryorder.o.FromDate;
                                queryorder.o.ActualAppointmentEndDate = queryorder.o.ToDate;
                                var Rejoinsub = model.RejoinDate.Value.AddDays(-1);
                                if (Rejoinsub < queryorder.o.FromDate)
                                {
                                    queryorder.o.ToDate = model.RejoinDate;
                                    Rejoinsub = model.RejoinDate ?? DateTime.Now;
                                }
                                else
                                {
                                    queryorder.o.ToDate = model.RejoinDate.Value.AddDays(-1);
                                }

                                if (queryorder.o.FromDate < queryorder.o.ToDate)
                                {
                                    decimal WidthdrawAmmount = Common.calculateWithdrawalAmount(model.ApplicationID, model.TypeCode, queryorder.o.FromDate ?? DateTime.Now, queryorder.o.ToDate ?? DateTime.Now, true);
                                    queryorder.o.WithdrawAmmount = WidthdrawAmmount;
                                }
                                else
                                {
                                    queryorder.o.WithdrawAmmount = 0;
                                }


                                if (model.ArrearOrDeductionTillDate != null)
                                {
                                    //Back end entry for arrear and payment deduction
                                    decimal WidthdrawAmmount = Common.calculateWithdrawalAmount(model.ApplicationID, model.TypeCode, queryorder.o.FromDate ?? DateTime.Now, model.ArrearOrDeductionTillDate ?? DateTime.Now, true);
                                    queryorder.o.ArrearOrDeductionAmount = WidthdrawAmmount;
                                    queryorder.o.ArrearOrDeductionTillDate = model.ArrearOrDeductionTillDate;
                                    var querymast = (from vw in context.vw_RCTOverAllApplicationEntry
                                                     where vw.ApplicationId == model.ApplicationID && vw.Category == model.TypeCode
                                                     && vw.ApplicationType == "New"
                                                     select new { vw.MedicalType, vw.BasicPay, vw.HRA, vw.MedicalAmmount, vw.IITMPensionerorCSIRStaff, vw.EmployeeNo, vw.ProjectId, vw.DesignationId }).FirstOrDefault();
                                    if (querymast != null)
                                    {
                                        tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                        addpaydeuction.EmployeeNo = querymast.EmployeeNo;
                                        addpaydeuction.AppointmentId = model.ApplicationID;
                                        addpaydeuction.AppointmentType = AppTypeId;
                                        addpaydeuction.ProjectId = model.ProjectId;
                                        addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                        addpaydeuction.CrtdTS = DateTime.Now;
                                        addpaydeuction.CrtdUser = logged_in_userId;
                                        addpaydeuction.Status = "Open";
                                        //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                                        addpaydeuction.FromDate = queryorder.o.FromDate;
                                        addpaydeuction.ToDate = model.ArrearOrDeductionTillDate;
                                        addpaydeuction.DesignationId = querymast.DesignationId;
                                        addpaydeuction.IITMPensioner_f = querymast.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                        addpaydeuction.Basic = querymast.BasicPay;
                                        addpaydeuction.HRA = querymast.HRA;
                                        addpaydeuction.Medical = querymast.MedicalAmmount;
                                        addpaydeuction.MedicalInclusive_f = querymast.MedicalType == 2 ? true : false;
                                        addpaydeuction.Isbackend_f = true;
                                        addpaydeuction.OrderId = model.OrderID;
                                        context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                        context.SaveChanges();

                                        int othid = addpaydeuction.OTHPayDeductionId;
                                        tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                        addothdetail.OTHPayDeductionId = othid;
                                        addothdetail.OtherType = 1;
                                        addothdetail.PaymentType = 9;
                                        addothdetail.HeadId = 9;
                                        addothdetail.Amount = WidthdrawAmmount;
                                        addothdetail.Remarks = "Back end entry";
                                        addothdetail.Status = "Active";
                                        context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                        context.SaveChanges();
                                    }
                                }

                                queryorder.o.UpdtTS = DateTime.Now;
                                queryorder.o.UpdtUser = logged_in_userId;
                                queryorder.od.RejoinDate = model.RejoinDate;
                                queryorder.od.isRejoined = true;
                                //Update rejoin date in order history tables
                                var query = (from h in context.tblRCTOrderHistory
                                             where h.OrderId == model.OrderID
                                             select h).FirstOrDefault();
                                if (query != null)
                                {
                                    query.EffectiveTo = Rejoinsub;
                                    context.SaveChanges();
                                }

                                var queryeffect = (from h in context.tblRCTOrderEffectHistory
                                                   where h.OrderId == model.OrderID
                                                   select h).FirstOrDefault();
                                if (queryeffect != null)
                                {
                                    queryeffect.EffectiveTo = Rejoinsub;
                                    context.SaveChanges();
                                }

                                if (model.RejoiningLetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.RejoiningLetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.RejoiningLetter.UploadFile("Requirement", docpath);
                                    queryorder.od.RejoinLetterPath = docpath;
                                    queryorder.od.RejoinLetterName = docname;
                                }
                                context.SaveChanges();
                                res = 2;
                            }
                            else if (queryPIorder != null)
                            {
                                Status = "Initiated";
                                OrderID = queryPIorder.o.OrderId;
                                queryPIorder.o.Status = Status;
                                decimal WidthdrawAmmount = 0;
                                var query = context.vw_RCTOverAllApplicationEntry.Where(m => m.ApplicationId == model.ApplicationID && m.Category == model.TypeCode && m.ApplicationType == "New")
                                      .Select(m => new
                                      {
                                          m.BasicPay,
                                          m.HRA,
                                          m.ProjectId,
                                          m.DesignationId,
                                          m.MedicalAmmount,
                                          m.MedicalType
                                      }).FirstOrDefault();
                                if (query != null)
                                {
                                    queryPIorder.o.Basic = query.BasicPay;
                                    queryPIorder.o.OldHRA = query.HRA;
                                    queryPIorder.o.OldProjectId = query.ProjectId;
                                    queryPIorder.o.OldDesignation = query.DesignationId;
                                    queryPIorder.o.HRA = query.HRA;
                                    queryPIorder.o.MedicalAmount = query.MedicalAmmount;
                                    queryPIorder.o.MedicalType = query.MedicalType;
                                    queryPIorder.o.CommitmentAmmount = 0;
                                }

                                if (model.FromMeridiem == 2)
                                    model.FromDate = model.FromDate.Value.AddHours(+12);
                                if (model.ToMeridiem == 1)
                                    model.ToDate = model.ToDate.Value.AddHours(+12);
                                WidthdrawAmmount = Common.calculateWithdrawalAmount(model.ApplicationID, model.TypeCode, model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, true);
                                queryPIorder.o.FromDate = model.FromDate;
                                queryPIorder.o.ToDate = model.ToDate;
                                queryPIorder.o.WithdrawAmmount = WidthdrawAmmount;
                                context.SaveChanges();
                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    queryPIorder.od.PILetter = docpath;
                                    queryPIorder.od.PILetterFileName = docname;
                                }
                                queryPIorder.od.RequestReference = model.RequestReference;
                                queryPIorder.od.RequestReferenceNo = model.ReferenceNo;
                                queryPIorder.od.RequestEmailDate = model.SourceEmailDate;
                                queryPIorder.od.FromMeridiem = model.FromMeridiem;
                                queryPIorder.od.ToMeridiem = model.ToMeridiem;
                                queryPIorder.od.RejoinDate = model.ToDate;
                                queryPIorder.od.isRejoined = true;
                                context.SaveChanges();
                                res = 1;
                            }
                            else if (model.OrderID > 0)
                            {
                                return 0;
                            }
                            else
                            {
                                Status = "Initiated";
                                tblOrder order = new tblOrder();
                                tblOrderDetail orderdetail = new tblOrderDetail();
                                order.AppointmentId = model.ApplicationID;
                                order.AppointmentType = AppTypeId;
                                order.Status = Status;
                                decimal WidthdrawAmmount = 0;
                                var query = context.vw_RCTOverAllApplicationEntry.Where(m => m.ApplicationId == model.ApplicationID && m.Category == model.TypeCode && m.ApplicationType == "New")
                                    .Select(m => new
                                    {
                                        m.BasicPay,
                                        m.HRA,
                                        m.ProjectId,
                                        m.DesignationId,
                                        m.MedicalAmmount,
                                        m.MedicalType
                                    }).FirstOrDefault();
                                if (query != null)
                                {
                                    order.Basic = query.BasicPay;
                                    order.OldHRA = query.HRA;
                                    order.OldProjectId = query.ProjectId;
                                    order.OldDesignation = query.DesignationId;
                                    order.HRA = query.HRA;
                                    order.MedicalAmount = query.MedicalAmmount;
                                    order.MedicalType = query.MedicalType;
                                    order.CommitmentAmmount = 0;
                                }
                                if (model.FromMeridiem == 2)
                                    model.FromDate = model.FromDate.Value.AddHours(+12);
                                if (model.ToMeridiem == 1)
                                    model.ToDate = model.ToDate.Value.AddHours(+12);
                                WidthdrawAmmount = Common.calculateWithdrawalAmount(model.ApplicationID, model.TypeCode, model.FromDate ?? DateTime.Now, model.ToDate ?? DateTime.Now, true);
                                order.OrderDate = model.ApplicationReceiveDate;
                                order.OrderType = model.OrderType;
                                order.FromDate = model.FromDate;
                                order.ToDate = model.ToDate;
                                order.CrtdTS = DateTime.Now;
                                order.CrtdUser = logged_in_userId;
                                var qryOrderwiseSeq = (from O in context.tblOrder where O.OrderType == model.OrderType select O.OrderwiseSeqId).Max();
                                order.OrderwiseSeqId = qryOrderwiseSeq == null ? 1 : qryOrderwiseSeq + 1;
                                var qrySeqId = (from O in context.tblOrder select O.SeqId).Max() ?? 0;
                                var number = qrySeqId == 0 ? 1 : qrySeqId + 1;
                                order.SeqId = number;
                                string value = number.ToString("D4");
                                var type = model.OrderType == 8 ? "LP" : "SP";
                                order.OrderNo = type + DateTime.Now.Year + "" + DateTime.Now.Month + "" + value;
                                order.WithdrawAmmount = WidthdrawAmmount;
                                context.tblOrder.Add(order);
                                context.SaveChanges();
                                OrderID = order.OrderId;
                                if (model.PILetter != null)
                                {
                                    string docpath = "";
                                    string docname = "";
                                    docname = System.IO.Path.GetFileName(model.PILetter.FileName);
                                    var docfileId = Guid.NewGuid().ToString();
                                    docpath = docfileId + "_" + docname;
                                    model.PILetter.UploadFile("Requirement", docpath);
                                    orderdetail.PILetter = docpath;
                                    orderdetail.PILetterFileName = docname;
                                }
                                orderdetail.OrderId = OrderID;
                                orderdetail.RequestReference = model.RequestReference;
                                orderdetail.RequestReferenceNo = model.ReferenceNo;
                                orderdetail.RequestEmailDate = model.SourceEmailDate;
                                orderdetail.FromMeridiem = model.FromMeridiem;
                                orderdetail.ToMeridiem = model.ToMeridiem;
                                if (model.OrderType == 8)
                                {
                                    orderdetail.RejoinDate = model.ToDate;
                                    orderdetail.isRejoined = true;
                                }
                                context.tblOrderDetail.Add(orderdetail);
                                context.SaveChanges();
                                res = 1;
                            }
                            transaction.Commit();
                            PostOrderStatusLog(OrderID, prestatus, Status, logged_in_userId);
                            if (Status == "Initiated" || Status == "Reversal")
                            {
                                var Data = RecruitSPLOPWFInit(OrderID, logged_in_userId);
                            }
                            return res;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return 0;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return 0;
            }
        }

        public static bool SendSPLOPMail(int orderId, int logged_in_userId, bool isRelease = false)
        {
            List<string> addcc = new List<string>();
            List<string> AttachmentList = new List<string>();
            var res = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderId > 0)
                    {
                        var Qry = (from A in context.vw_RCTOverAllApplicationEntry
                                   from O in context.tblOrderDetail
                                   where A.OrderId == O.OrderId && A.OrderId == orderId
                                   select new { A, O.RejoinDate }).FirstOrDefault();
                        if (Qry != null)
                        {
                            EmailBuilder _eb = new EmailBuilder();
                            EmailModel emodel = new EmailModel();
                            ApplicationAckModel ackmodel = new ApplicationAckModel();

                            if (Qry.A.ToMail != null)
                            {
                                var bcc = Qry.A.ToMail.Split(',');
                                foreach (var bccEmail in bcc)
                                    addcc.Add(bccEmail.Trim());
                            }
                            //emodel.toMail = getPIDetails(ProjectID ?? 0).Email;
                            string ProjectNo = Common.getprojectnumber(Qry.A.ProjectId ?? 0);
                            ackmodel.ApplicatntName = "Sir / Madam";
                            if (isRelease == true)
                            {
                                if (Qry.A.ApplicationType == "Stop Payment")
                                {
                                    ackmodel.subject = "ICSR - Release of Stop payment" + "-" + Qry.A.OrderNo;
                                    ackmodel.Body = "With reference to your instruction, stop payment is released for " + Qry.A.ProfessionalType + "" + Qry.A.CandidateName.ToUpper() + ", " + ProjectNo + " from " + string.Format("{0:dd-MMMM-yyyy}", Qry.RejoinDate);
                                }
                                else
                                {
                                    ackmodel.subject = "ICSR - Release of Loss of pay" + "-" + Qry.A.OrderNo;
                                    ackmodel.Body = "With reference to your instruction, loss of pay is released for " + Qry.A.ProfessionalType + "" + Qry.A.CandidateName.ToUpper() + ", " + ProjectNo + " from " + string.Format("{0:dd-MMMM-yyyy}", Qry.RejoinDate);
                                }
                            }
                            else
                            {
                                if (Qry.A.ApplicationType == "Stop Payment")
                                {
                                    ackmodel.subject = "ICSR - Stop payment" + "-" + Qry.A.OrderNo;
                                    ackmodel.Body = "With reference to your instruction, we have initiated Stop payment for the " + Qry.A.ProfessionalType + "" + Qry.A.CandidateName.ToUpper() + ", from " + string.Format("{0:dd-MMMM-yyyy}", Qry.A.AppointmentStartdate) + " to " + string.Format("{0:dd-MMMM-yyyy}", Qry.A.AppointmentEnddate) + " till further action.";
                                }
                                else
                                {
                                    ackmodel.subject = "ICSR - Loss of pay" + "-" + Qry.A.OrderNo;
                                    ackmodel.Body = "With reference to your instruction, we have initiated Loss of pay for the " + Qry.A.ProfessionalType + "" + Qry.A.CandidateName.ToUpper() + ", from " + string.Format("{0:dd-MMMM-yyyy}", Qry.A.AppointmentStartdate) + " to " + string.Format("{0:dd-MMMM-yyyy}", Qry.A.AppointmentEnddate) + "till further action.";
                                }
                            }
                            ackmodel.toMail = Qry.A.Email;
                            ackmodel.cc = addcc;
                            emodel = ackmodel;
                            var bodyResp = _eb.RunCompile("EmailTemplate.cshtml", "", ackmodel, typeof(ApplicationAckModel));
                            if (bodyResp.Item1)
                            {
                                var isSend = _eb.RCTSendEmail(emodel, bodyResp.Item2);
                                if (Qry.A.AppointmentType == 1)
                                {
                                    tblRCTConsutantAppEmailLog EmailStatus = new tblRCTConsutantAppEmailLog();
                                    EmailStatus.ToMail = emodel.toMail;
                                    EmailStatus.Subject = emodel.subject;
                                    EmailStatus.Body = bodyResp.Item2;
                                    if (emodel.cc != null)
                                        EmailStatus.Cc = string.Join(", ", emodel.cc);
                                    else
                                        EmailStatus.Cc = "";
                                    if (emodel.bcc != null)
                                        EmailStatus.Bcc = string.Join(", ", emodel.bcc);
                                    else
                                        EmailStatus.Bcc = "";
                                    if (emodel.attachment != null)
                                        EmailStatus.Attachment = string.Join(", ", emodel.attachment);
                                    else
                                        EmailStatus.Attachment = "";
                                    EmailStatus.CRTD_Ts = DateTime.Now;
                                    EmailStatus.CRTD_By = logged_in_userId;
                                    EmailStatus.IsSend = isSend;
                                    EmailStatus.TypeofMail = 5;
                                    EmailStatus.ConsultantAppointmentId = Qry.A.ApplicationId;
                                    EmailStatus.OrderId = Qry.A.OrderId;
                                    context.tblRCTConsutantAppEmailLog.Add(EmailStatus);
                                    context.SaveChanges();
                                    return true;
                                }
                                else if (Qry.A.AppointmentType == 2)
                                {
                                    tblRCTSTEEmailLog EmailStatus = new tblRCTSTEEmailLog();
                                    EmailStatus.ToMail = emodel.toMail;
                                    EmailStatus.Subject = emodel.subject;
                                    EmailStatus.Body = bodyResp.Item2;
                                    if (emodel.cc != null)
                                        EmailStatus.Cc = string.Join(", ", emodel.cc);
                                    else
                                        EmailStatus.Cc = "";
                                    if (emodel.bcc != null)
                                        EmailStatus.Bcc = string.Join(", ", emodel.bcc);
                                    else
                                        EmailStatus.Bcc = "";
                                    if (emodel.attachment != null)
                                        EmailStatus.Attachment = string.Join(", ", emodel.attachment);
                                    else
                                        EmailStatus.Attachment = "";
                                    EmailStatus.CRTD_Ts = DateTime.Now;
                                    EmailStatus.CRTD_By = logged_in_userId;
                                    EmailStatus.IsSend = isSend;
                                    EmailStatus.TypeofMail = 5;
                                    EmailStatus.STEID = Qry.A.ApplicationId;
                                    EmailStatus.OrderId = Qry.A.OrderId;
                                    context.tblRCTSTEEmailLog.Add(EmailStatus);
                                    context.SaveChanges();
                                    return true;
                                }
                                else if (Qry.A.AppointmentType == 3)
                                {
                                    tblRCTOSGEmailLog EmailStatus = new tblRCTOSGEmailLog();
                                    EmailStatus.ToMail = emodel.toMail;
                                    EmailStatus.Subject = emodel.subject;
                                    EmailStatus.Body = bodyResp.Item2;
                                    if (emodel.cc != null)
                                        EmailStatus.Cc = string.Join(", ", emodel.cc);
                                    else
                                        EmailStatus.Cc = "";
                                    if (emodel.bcc != null)
                                        EmailStatus.Bcc = string.Join(", ", emodel.bcc);
                                    else
                                        EmailStatus.Bcc = "";
                                    if (emodel.attachment != null)
                                        EmailStatus.Attachment = string.Join(", ", emodel.attachment);
                                    else
                                        EmailStatus.Attachment = "";
                                    EmailStatus.CRTD_Ts = DateTime.Now;
                                    EmailStatus.CRTD_By = logged_in_userId;
                                    EmailStatus.IsSend = isSend;
                                    EmailStatus.TypeofMail = 5;
                                    EmailStatus.OSGID = Qry.A.ApplicationId;
                                    EmailStatus.OrderId = Qry.A.OrderId;
                                    context.tblRCTOSGEmailLog.Add(EmailStatus);
                                    context.SaveChanges();
                                    return true;
                                }
                            }
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool UpdateSPLOPDetails(int orderid, int loggedInUser)
        {
            bool res = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var queryorder = (from o in context.tblOrder
                                      from vw in context.vw_RCTOverAllApplicationEntry
                                      from od in context.tblOrderDetail
                                      where o.OrderId == od.OrderId && o.OrderId == vw.OrderId && o.OrderId == orderid
                                      select new { o, od, vw }).FirstOrDefault();
                    if (queryorder != null)
                    {
                        string PreStatus = "";
                        PreStatus = queryorder.o.Status;
                        if (queryorder.o.Status == "Initiated")
                        {
                            if (!Common.EmployeeHistoryLog(queryorder.o.AppointmentId ?? 0, queryorder.vw.Category, queryorder.o.OrderId))
                                return false;

                            if (queryorder.o.OrderType == 8)
                            {
                                if (!RCTEmailContentService.SendSPLOPMail(orderid, loggedInUser, true))
                                    return false;
                            }
                            else
                            {
                                if (!RCTEmailContentService.SendSPLOPMail(orderid, loggedInUser))
                                    return false;
                            }

                            //if (queryorder.o.FromDate <= DateTime.Now)
                            //{
                            ExecuteSPRCTEmployeeEffectHistoryLog(orderid);
                            //}

                            if (queryorder.o.OrderType == 7)
                            {
                                queryorder.o.Status = "Approved";
                            }
                            else if (queryorder.o.OrderType == 8 && queryorder.o.WithdrawAmmount > 0)
                            {
                                queryorder.o.Status = "Completed";
                                queryorder.o.isUpdated = true;
                                //Widthdraw commitment
                                tblRCTCommitmentRequest withdraw = new tblRCTCommitmentRequest();
                                withdraw.ReferenceNumber = queryorder.vw.ApplicationNo;
                                withdraw.OrderId = orderid;
                                withdraw.AppointmentType = "Loss of pay";
                                withdraw.TypeCode = queryorder.vw.Category;
                                withdraw.CandidateName = queryorder.vw.CandidateName;
                                withdraw.CandidateDesignation = queryorder.vw.PostRecommended;
                                withdraw.ProjectId = queryorder.vw.ProjectId;
                                withdraw.ProjectNumber = Common.getprojectnumber(queryorder.vw.ProjectId ?? 0);
                                withdraw.TotalSalary = queryorder.vw.BasicPay;
                                withdraw.RequestedCommitmentAmount = queryorder.o.WithdrawAmmount;
                                withdraw.Status = "Awaiting Commitment Booking";
                                withdraw.RequestType = "Withdraw Commitment";
                                withdraw.EmpNumber = queryorder.vw.EmployeersID;
                                withdraw.EmpId = loggedInUser;
                                context.tblRCTCommitmentRequest.Add(withdraw);
                                context.SaveChanges();

                                tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                                addpaydeuction.EmployeeNo = queryorder.vw.EmployeersID;
                                addpaydeuction.AppointmentId = queryorder.o.AppointmentId;
                                addpaydeuction.AppointmentType = queryorder.o.AppointmentType;
                                addpaydeuction.ProjectId = queryorder.o.OldProjectId;
                                addpaydeuction.MonthandYear = string.Format("{0:MMM}", DateTime.Now) + "-" + DateTime.Now.Year;
                                addpaydeuction.CrtdTS = DateTime.Now;
                                addpaydeuction.CrtdUser = loggedInUser;
                                addpaydeuction.Status = "Open";
                                addpaydeuction.FromDate = queryorder.o.FromDate;
                                addpaydeuction.ToDate = queryorder.o.ToDate;
                                addpaydeuction.DesignationId = queryorder.o.OldDesignation;
                                addpaydeuction.Isbackend_f = true;
                                addpaydeuction.OrderId = orderid;
                                addpaydeuction.IITMPensioner_f = queryorder.vw.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                addpaydeuction.Basic = queryorder.vw.BasicPay;
                                addpaydeuction.HRA = queryorder.vw.HRA;
                                addpaydeuction.Medical = queryorder.vw.MedicalAmmount;
                                addpaydeuction.MedicalInclusive_f = queryorder.vw.MedicalType == 2 ? true : false;
                                context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                                context.SaveChanges();
                                var othid = addpaydeuction.OTHPayDeductionId;
                                tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                addothdetail.OTHPayDeductionId = othid;
                                addothdetail.OtherType = 2;
                                addothdetail.DeductionType = 110;
                                addothdetail.HeadId = 110;
                                addothdetail.Amount = queryorder.o.WithdrawAmmount;
                                addothdetail.Remarks = "Back end entry";
                                addothdetail.Status = "Active";
                                context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                context.SaveChanges();
                            }
                            context.SaveChanges();
                            PostOrderStatusLog(orderid, PreStatus, queryorder.o.Status, loggedInUser);
                            return true;
                        }
                        else if (queryorder.o.Status == "Reversal")
                        {
                            if (!RCTEmailContentService.SendSPLOPMail(orderid, loggedInUser, true))
                                return false;
                            if (queryorder.od.RejoinDate <= DateTime.Now)
                                queryorder.o.isRelisedPayment = true;
                            if (queryorder.o.WithdrawAmmount > 0)
                            {
                                tblRCTCommitmentRequest withdraw = new tblRCTCommitmentRequest();
                                withdraw.ReferenceNumber = queryorder.vw.ApplicationNo;
                                withdraw.OrderId = orderid;
                                withdraw.AppointmentType = "Stop payment";
                                withdraw.TypeCode = queryorder.vw.Category;
                                withdraw.CandidateName = queryorder.vw.CandidateName;
                                withdraw.CandidateDesignation = queryorder.vw.PostRecommended;
                                withdraw.ProjectId = queryorder.vw.ProjectId;
                                withdraw.ProjectNumber = Common.getprojectnumber(queryorder.vw.ProjectId ?? 0);
                                withdraw.TotalSalary = queryorder.vw.BasicPay;
                                withdraw.RequestedCommitmentAmount = queryorder.o.WithdrawAmmount;
                                withdraw.Status = "Awaiting Commitment Booking";
                                withdraw.RequestType = "Withdraw Commitment";
                                withdraw.EmpNumber = queryorder.vw.EmployeersID;
                                withdraw.EmpId = loggedInUser;
                                context.tblRCTCommitmentRequest.Add(withdraw);
                                context.SaveChanges();
                            }
                            queryorder.o.Status = "Completed";
                            queryorder.o.isUpdated = true;
                            var queryDeduction = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OrderId == orderid);
                            if (queryDeduction != null)
                            {
                                queryDeduction.Status = "Completed";
                                queryDeduction.UpdtUser = loggedInUser;
                                queryDeduction.UpdtTs = DateTime.Now;
                                context.SaveChanges();
                            }
                            context.SaveChanges();
                            PostOrderStatusLog(orderid, PreStatus, queryorder.o.Status, loggedInUser);
                            return true;
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        #endregion

        #endregion

        #region Order approval initiate

        public Tuple<bool, string> RecuitCOPWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    string ApplicationNumber = "";

                    var query = (from o in IOAScontext.tblOrder
                                 from od in IOAScontext.tblOrderDetail
                                 where o.OrderId == od.OrderId &&
                                 o.Status == "Open" && o.OrderId == id
                                 select new { o, od }).FirstOrDefault();
                    if (query != null)//AppointmentType-1 CON,AppointmentType-2 STE,AppointmentType-3 OSG,
                    {
                        ApplicationNumber = IOAScontext.vw_RCTOverAllApplicationEntry.Where(m => m.OrderId == id).Select(x => x.ApplicationNo).FirstOrDefault();

                        string Type = "";
                        if (query.od.NotetoDean && query.o.AppointmentType == 3)
                            Type = "RCT / OSG COP Dean Flow";
                        else if (query.od.NotetoDean && query.o.AppointmentType == 2)
                            Type = "RCT / STE COP Dean Flow";
                        else if (query.od.NotetoDean && query.o.AppointmentType == 1)
                            Type = "RCT / CON COP Dean Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 3)
                            Type = "RCT / OSG COP CM Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 2)
                            Type = "RCT / STE COP CM Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 1)
                            Type = "RCT / CON COP CM Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 3)
                            Type = "RCT / OSG COP HR Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 2)
                            Type = "RCT / STE COP HR Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 1)
                            Type = "RCT / CON COP HR Flow";
                        var fw = CoreAccount.ProcessTrigger(196, Type, 0, id, logged_in_user, "OrderId", ApplicationNumber);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.o.Status = "Sent for approval";
                            query.o.UpdtUser = logged_in_user;
                            query.o.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostOrderStatusLog(id, "Open", "Sent for approval", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");

                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> RecruitExtensionWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    string ApplicationNumber = "";

                    var query = (from o in IOAScontext.tblOrder
                                 from od in IOAScontext.tblOrderDetail
                                 where o.OrderId == od.OrderId && o.OrderId == id
                                 select new { o, od }).FirstOrDefault();

                    if (query != null)
                    {

                        ApplicationNumber = IOAScontext.vw_RCTOverAllApplicationEntry.Where(m => m.OrderId == id).Select(x => x.ApplicationNo).FirstOrDefault();

                        string Type = "";
                        if (query.od.NotetoDean && query.o.AppointmentType == 3)
                            Type = "RCT / OSG EX Dean Flow";
                        else if (query.od.NotetoDean && query.o.AppointmentType == 2)
                            Type = "RCT / STE EX Dean Flow";
                        else if (query.od.NotetoDean && query.o.AppointmentType == 1)
                            Type = "RCT / CON EX Dean Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 3)
                            Type = "RCT / OSG EX CM Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 2)
                            Type = "RCT / STE EX CM Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 1)
                            Type = "RCT / CON EX CM Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 3)
                            Type = "RCT / OSG EX HR Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 2)
                            Type = "RCT / STE EX HR Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 1)
                            Type = "RCT / CON EX HR Flow";
                        var fw = CoreAccount.ProcessTrigger(197, Type, 0, id, logged_in_user, "OrderId", ApplicationNumber);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.o.Status = "Sent for approval";
                            query.o.UpdtUser = logged_in_user;
                            query.o.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostOrderStatusLog(id, "Open", "Sent for approval", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");

                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> RecruitEnhancementWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    string ApplicationNumber = "";

                    var query = (from o in IOAScontext.tblOrder
                                 from od in IOAScontext.tblOrderDetail
                                 where o.OrderId == od.OrderId && o.OrderId == id
                                 select new { o, od }).FirstOrDefault();

                    if (query != null)
                    {
                        ApplicationNumber = IOAScontext.vw_RCTOverAllApplicationEntry.Where(m => m.OrderId == id).Select(x => x.ApplicationNo).FirstOrDefault();
                        string Type = "";
                        if (query.od.NotetoDean && query.o.AppointmentType == 3)
                            Type = "RCT / OSG EN Dean Flow";
                        else if (query.od.NotetoDean && query.o.AppointmentType == 2)
                            Type = "RCT / STE EN Dean Flow";
                        else if (query.od.NotetoDean && query.o.AppointmentType == 1)
                            Type = "RCT / CON EN Dean Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 3)
                            Type = "RCT / OSG EN CM Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 2)
                            Type = "RCT / STE EN CM Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 1)
                            Type = "RCT / CON EN CM Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 3)
                            Type = "RCT / OSG EN HR Flow";
                        else if (!query.od.NotetoDean && !query.od.NotetoCMAdmin && query.o.AppointmentType == 2)
                            Type = "RCT / STE EN HR Flow";
                        else if (query.od.NotetoCMAdmin && query.o.AppointmentType == 1)
                            Type = "RCT / CON EN HR Flow";
                        var fw = CoreAccount.ProcessTrigger(198, Type, 0, id, logged_in_user, "OrderId", ApplicationNumber);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.o.Status = "Sent for approval";
                            query.o.UpdtUser = logged_in_user;
                            query.o.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostOrderStatusLog(id, "Open", "Sent for approval", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");

                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> RecruitHRAWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    string ApplicationNumber = "";
                    var query = IOAScontext.tblOrder.FirstOrDefault(m => m.OrderId == id && m.Status == "Open");
                    if (query != null)
                    {
                        if (query.AppointmentType == 2)
                            ApplicationNumber = IOAScontext.tblRCTSTE.FirstOrDefault(m => m.STEID == query.AppointmentId).ApplicationNumber;

                        string Type = "RCT / STE HRA Flow";
                        var fw = CoreAccount.ProcessTrigger(190, Type, 0, id, logged_in_user, "OrderId", ApplicationNumber);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Sent for approval";
                            query.UpdtUser = logged_in_user;
                            query.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostOrderStatusLog(id, "Open", "Sent for approval", logged_in_user);

                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> RecruitSPLOPWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    string ApplicationNumber = "";
                    var query = IOAScontext.tblOrder.FirstOrDefault(m => m.OrderId == id);
                    if (query != null)
                    {
                        ApplicationNumber = IOAScontext.vw_RCTOverAllApplicationEntry.Where(m => m.OrderId == id).Select(x => x.ApplicationNo).FirstOrDefault();
                        string Type = "";

                        if (query.Status == "Initiated" && query.AppointmentType == 3 && query.OrderType == 8)
                            Type = "RCT / OSG LOP Flow";
                        else if (query.Status == "Initiated" && query.AppointmentType == 2 && query.OrderType == 8)
                            Type = "RCT / STE LOP Flow";
                        else if (query.Status == "Initiated" && query.AppointmentType == 1 && query.OrderType == 8)
                            Type = "RCT / CON LOP Flow";
                        else if (query.Status == "Initiated" && query.AppointmentType == 3 && query.OrderType == 7)
                            Type = "RCT / OSG SP Flow";
                        else if (query.Status == "Initiated" && query.AppointmentType == 2 && query.OrderType == 7)
                            Type = "RCT / STE SP Flow";
                        else if (query.Status == "Initiated" && query.AppointmentType == 1 && query.OrderType == 7)
                            Type = "RCT / CON SP Flow";
                        else if (query.Status == "Reversal" && query.AppointmentType == 3 && query.OrderType == 7)
                            Type = "RCT / OSG SPR Flow";
                        else if (query.Status == "Reversal" && query.AppointmentType == 2 && query.OrderType == 7)
                            Type = "RCT / STE SPR Flow";
                        else if (query.Status == "Reversal" && query.AppointmentType == 1 && query.OrderType == 7)
                            Type = "RCT / CON SPR Flow";
                        var fw = CoreAccount.ProcessTrigger(203, Type, 0, id, logged_in_user, "OrderId", ApplicationNumber);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.UpdtUser = logged_in_user;
                            query.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> RecruitRelieveWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var query = IOAScontext.tblOrder.FirstOrDefault(m => m.OrderId == id);
                    if (query != null)
                    {
                        string Type = "";
                        if (query.Status == "Relieving initiated" && query.AppointmentType == 3)
                            Type = "RCT / OSG RE Flow";
                        if (query.Status == "Relieving initiated" && query.AppointmentType == 2)
                            Type = "RCT / STE RE Flow";
                        if (query.Status == "Relieving initiated" && query.AppointmentType == 1)
                            Type = "RCT / CON RE Flow";
                        var fw = CoreAccount.ProcessTrigger(201, Type, 0, id, logged_in_user, "OrderId", query.OrderNo);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.UpdtUser = logged_in_user;
                            query.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> RecruitMaternityWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var query = IOAScontext.tblOrder.FirstOrDefault(m => m.OrderId == id);
                    if (query != null)
                    {
                        string Type = "";
                        if (query.Status == "Initiated" && query.AppointmentType == 3)
                            Type = "RCT / OSG MAT Flow";
                        else if (query.Status == "Initiated" && query.AppointmentType == 2)
                            Type = "RCT / STE MAT Flow";
                        else if (query.Status == "Initiated" && query.AppointmentType == 1)
                            Type = "RCT / CON MAT Flow";
                        else if (query.Status == "Rejoined" && query.AppointmentType == 3)
                            Type = "RCT / OSG MATR Flow";
                        else if (query.Status == "Rejoined" && query.AppointmentType == 2)
                            Type = "RCT / STE MATR Flow";
                        else if (query.Status == "Rejoined" && query.AppointmentType == 1)
                            Type = "RCT / CON MATR Flow";
                        var fw = CoreAccount.ProcessTrigger(202, Type, 0, id, logged_in_user, "OrderId", query.OrderNo);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.UpdtUser = logged_in_user;
                            query.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> RecruitAmendmentWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var query = IOAScontext.tblOrder.FirstOrDefault(m => m.OrderId == id && m.Status == "Open");
                    if (query != null)
                    {
                        string Type = "";
                        if (query.AppointmentType == 3)
                            Type = "RCT / OSG AM Flow";
                        else if (query.AppointmentType == 2)
                            Type = "RCT / STE AM Flow";
                        else if (query.AppointmentType == 1)
                            Type = "RCT / CON AM Flow";
                        var fw = CoreAccount.ProcessTrigger(209, Type, 0, id, logged_in_user, "OrderId", query.OrderNo);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Sent for approval";
                            query.UpdtUser = logged_in_user;
                            query.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            PostOrderStatusLog(id, "Open", "Sent for approval", logged_in_user);
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        #endregion

        #region Employee Basic Details, id card genaration,office order and Reliving orders

        public GenerateIDCardModel getIDCardDetails(int appid, string appType)
        {
            GenerateIDCardModel model = new GenerateIDCardModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string signpath = WebConfigurationManager.AppSettings["RCTSignaturePath"];
                    string imagepath = WebConfigurationManager.AppSettings["RCTPhotosPath"];
                    if (appType == "STE")
                    {
                        var steQuery = (from s in context.tblRCTSTE
                                        join d in context.tblRCTDesignation on s.DesignationId equals d.DesignationId
                                        where s.STEID == appid
                                        select new { s, d }).FirstOrDefault();
                        if (steQuery != null)
                        {
                            model.EmployeeId = steQuery.s.EmployeersID;
                            model.Name = steQuery.s.Name.ToUpper();
                            model.Nameoftheguardian = steQuery.s.NameoftheGuardian;
                            model.Email = steQuery.s.Email;
                            model.PresentAddress = steQuery.s.PresentAddress;
                            model.PermanentAddress = steQuery.s.PermanentAddress;
                            model.ApplicationNo = steQuery.s.ApplicationNumber;
                            model.Age = Common.RCTCalculateAge(DateTime.Now, steQuery.s.DateofBirth ?? DateTime.Now);
                            model.Sex = steQuery.s.Sex ?? 0;
                            model.ConsolidatedPay = steQuery.s.ConsolidatedPay ?? false;
                            model.ContactNumber = steQuery.s.EmergencyContact;
                            model.ProjectDetail = getProjectSummary(steQuery.s.ProjectId ?? 0);
                            model.ProjectNumber = model.ProjectDetail.ProjectNumber;
                            model.DepartmentName = model.ProjectDetail.PIDepartmentName;
                            model.Designation = steQuery.d.Designation;
                            model.CantidateSignatureFilePath = signpath + steQuery.s.EmployeersID + ".jpg";
                            model.PersonImagePath = imagepath + steQuery.s.EmployeersID + ".jpg";
                            model.AppointmentEndDate = string.Format("{0:dd-MMM-yyyy}", steQuery.s.AppointmentEnddate);
                        }
                    }
                    else if (appType == "CON")
                    {
                        var conQuery = (from A in context.tblRCTConsultantAppointment
                                        join d in context.tblRCTDesignation on A.DesignationId equals d.DesignationId
                                        where A.ConsultantAppointmentId == appid
                                        select new { A, d }).FirstOrDefault();
                        if (conQuery != null)
                        {
                            model.ApplicationNo = conQuery.A.ApplicationNumber;
                            model.EmployeeId = conQuery.A.EmployeersID;
                            model.Name = conQuery.A.Name.ToUpper();
                            model.Nameoftheguardian = conQuery.A.NameoftheGuardian;
                            model.Email = conQuery.A.Email;
                            model.PresentAddress = conQuery.A.TemporaryAddress;
                            model.PermanentAddress = conQuery.A.PermanentAddress;
                            model.ApplicationNo = conQuery.A.ApplicationNumber;
                            model.Age = Common.RCTCalculateAge(DateTime.Now, conQuery.A.DateofBirth ?? DateTime.Now);
                            model.Sex = conQuery.A.Sex ?? 0;
                            model.ContactNumber = conQuery.A.EmergencyContact;
                            model.ProjectDetail = getProjectSummary(conQuery.A.ProjectId ?? 0);
                            model.ProjectNumber = model.ProjectDetail.ProjectNumber;
                            model.DepartmentName = model.ProjectDetail.PIDepartmentName;
                            model.Designation = conQuery.d.Designation;
                            model.CantidateSignatureFilePath = signpath + conQuery.A.EmployeersID + ".jpg";
                            model.PersonImagePath = imagepath + conQuery.A.EmployeersID + ".jpg";
                            model.AppointmentEndDate = string.Format("{0:dd-MMM-yyyy}", conQuery.A.AppointmentEnddate);
                        }
                    }
                    else if (appType == "OSG")
                    {
                        var osgQuery = (from A in context.tblRCTOutsourcing
                                        join d in context.tblRCTDesignation on A.DesignationId equals d.DesignationId
                                        where A.OSGID == appid
                                        select new { A, d }).FirstOrDefault();
                        if (osgQuery != null)
                        {
                            model.EmployeeId = osgQuery.A.EmployeersID;
                            model.Name = osgQuery.A.Name.ToUpper();
                            model.Nameoftheguardian = osgQuery.A.NameoftheGuardian;
                            model.Email = osgQuery.A.Email;
                            model.PresentAddress = osgQuery.A.PresentAddress;
                            model.PermanentAddress = osgQuery.A.PermanentAddress;
                            model.ApplicationNo = osgQuery.A.ApplicationNumber;
                            model.Age = Common.RCTCalculateAge(DateTime.Now, osgQuery.A.DateofBirth ?? DateTime.Now);
                            model.Sex = osgQuery.A.Sex ?? 0;
                            model.ConsolidatedPay = osgQuery.A.ConsolidatedPay ?? false;
                            model.ContactNumber = osgQuery.A.EmergencyContact;
                            model.ProjectDetail = getProjectSummary(osgQuery.A.ProjectId ?? 0);
                            model.ProjectNumber = model.ProjectDetail.ProjectNumber;
                            model.DepartmentName = model.ProjectDetail.PIDepartmentName;
                            model.Designation = osgQuery.d.Designation;
                            model.CantidateSignatureFilePath = signpath + osgQuery.A.EmployeersID + ".jpg";
                            model.PersonImagePath = imagepath + osgQuery.A.EmployeersID + ".jpg";
                            model.AppointmentEndDate = string.Format("{0:dd-MMM-yyyy}", osgQuery.A.AppointmentEnddate);
                        }
                    }

                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public GenerateOrdersModel GenearateOrders(int orderid)
        {
            GenerateOrdersModel model = new GenerateOrdersModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderid > 0)
                    {
                        var query = (from o in context.vw_RCTOverAllApplicationEntry
                                     where o.OrderId == orderid
                                     select o).FirstOrDefault();
                        if (query != null)
                        {
                            model.applicationtype = query.Category;
                            model.ApplicantName = query.ProfessionalType + " " + query.CandidateName.ToUpper();
                            //model.OrderNo = query.OrderNo;
                            model.OrderNo = getOfferDetails(query.ApplicationId ?? 0, query.Category, orderid); /*query.S.ApplicationNumber;*/
                            model.PayType = query.ConsolidatedPay == true ? "Consolidated pay" : "fellowship pay";
                            model.Pay = query.BasicPay ?? 0;
                            model.HRA = query.HRA ?? 0;
                            model.MedicalAmount = (query.MedicalType == 1 || query.MedicalType == 2) ? query.MedicalAmmount : (Decimal)0;
                            model.Designation = query.PostRecommended;
                            model.ProjectDetail = getProjectSummary(query.ProjectId ?? 0);
                            model.FromDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentStartdate);
                            model.ToDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentEnddate);
                            DateTime OfferDate = getOfferLetterDate(query.ApplicationId ?? 0, query.Category, "Order", orderid);
                            model.OrderDate = string.Format("{0:dd-MMMM-yyyy}", OfferDate);
                            model.PaymentThroughAgency_f = query.CSIRStaffPayMode == 2 ? true : false;
                            model.MsPhd_f = query.isMsPhd;
                            model.RollNumber = query.PhdDetail;
                            model.Gender = query.Sex;
                            var OrrderDetail = getReferenceOfferDetails(query.ApplicationId ?? 0, query.AppointmentType ?? 0, query.OrderId);
                            if (OrrderDetail != null)
                            {
                                model.ReferenceNumber = OrrderDetail.Item1;
                                model.ReferenceOrder = OrrderDetail.Item2;
                            }
                            model.EmployeeNo = query.EmployeersID;
                            model.Email = query.Email;
                            model.ApplicationNo = query.ApplicationNo;
                            model.isConsolidatePay = query.ConsolidatedPay ?? false;
                            model.ContactNumber = query.ContactNumber;
                            if (query.AppointmentType == 3)
                            {
                                var mastquery = context.tblRCTOutsourcing.Where(m => m.OSGID == query.ApplicationId).FirstOrDefault();
                                if (mastquery != null)
                                {
                                    if (query.isMsPhd == true)
                                        model.MsPhdType = mastquery.MsPhdType == 1 ? "M.S" : mastquery.MsPhdType == 2 ? "Ph.D" : "";
                                    model.AmendmentFromDate = string.Format("{0:dd-MMMM-yyyy}", mastquery.ActualAppointmentStartDate);
                                    model.AmendmentToDate = string.Format("{0:dd-MMMM-yyyy}", mastquery.ActualAppointmentEndDate);
                                }
                            }
                            else if (query.AppointmentType == 2)
                            {
                                var mastquery = context.tblRCTSTE.Where(m => m.STEID == query.ApplicationId).FirstOrDefault();
                                if (mastquery != null)
                                {
                                    if (query.isMsPhd == true)
                                        model.MsPhdType = mastquery.MsPhdType == 1 ? "M.S" : mastquery.MsPhdType == 2 ? "Ph.D" : "";
                                    model.AmendmentFromDate = string.Format("{0:dd-MMMM-yyyy}", mastquery.ActualAppointmentStartDate);
                                    model.AmendmentToDate = string.Format("{0:dd-MMMM-yyyy}", mastquery.ActualAppointmentEndDate);
                                }
                            }
                            else if (query.AppointmentType == 1)
                            {
                                var mastquery = context.tblRCTConsultantAppointment.Where(m => m.ConsultantAppointmentId == query.ApplicationId).FirstOrDefault();
                                if (mastquery != null)
                                {
                                    model.AmendmentFromDate = string.Format("{0:dd-MMMM-yyyy}", mastquery.ActualAppointmentStartDate);
                                    model.AmendmentToDate = string.Format("{0:dd-MMMM-yyyy}", mastquery.ActualAppointmentEndDate);
                                }
                            }

                            int?[] expType = new int?[] { 2, 3, 4 };
                            if (context.tblOrder.Any(m => m.AppointmentId == query.ApplicationId && m.AppointmentType == query.AppointmentType && m.Status == "Completed" && expType.Contains(m.OrderType) && m.isExtended == true && m.isUpdated == true))
                            {
                                var queryodr = context.tblOrder.OrderByDescending(m => m.OrderId).FirstOrDefault(m => m.AppointmentId == query.ApplicationId && m.AppointmentType == query.AppointmentType && m.Status == "Completed" && expType.Contains(m.OrderType) && m.isExtended == true && m.isUpdated == true);
                                if (queryodr != null)
                                    model.AmendmentToDate = string.Format("{0:dd-MMMM-yyyy}", queryodr.ToDate);
                            }

                            if (query.ApplicationType == "Relieving")
                            {
                                var qurryrelieving = (from O in context.tblOrder
                                                      from r in context.tblRCTRelievingLog
                                                      from Od in context.tblOrderDetail
                                                      where O.OrderId == Od.OrderId && O.OrderId == r.OrderId && O.OrderId == query.OrderId
                                                      select new { Od.RelievingDate, r.isGenarateRelieveOrder, Od.RelievingMode }).FirstOrDefault();
                                if (qurryrelieving != null)
                                {
                                    model.RelievingDate = string.Format("{0:dd-MMMM-yyyy}", qurryrelieving.RelievingDate);
                                    model.RelievingDueDate = string.Format("{0:dd-MMMM-yyyy}", qurryrelieving.RelievingDate.Value.AddDays(+1));
                                    model.RelieveMode = qurryrelieving.RelievingMode;
                                    model.isDuplicate = qurryrelieving.isGenarateRelieveOrder;
                                }
                            }
                            model.CommitmentNo = (from O in context.tblRCTCommitmentRequest where O.OrderId == orderid select O.CommitmentNumber).FirstOrDefault();
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return model;
            }
        }

        public RCTOfficeOrderModel getOfficeOrderDetails(int appid, string appType, int? orderid = null)
        {
            RCTOfficeOrderModel model = new RCTOfficeOrderModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from s in context.vw_RCTOverAllApplicationEntry
                                 where s.ApplicationId == appid && s.Category == appType
                                 && (s.OrderId == orderid || orderid == null)
                                 select s).FirstOrDefault();
                    if (query != null)
                    {
                        model.EmployeeId = query.EmployeersID;
                        model.Name = query.ProfessionalType + " " + query.CandidateName.ToUpper();
                        model.ApplicationNo = getOfferDetails(query.ApplicationId ?? 0, query.Category, orderid);
                        model.ProjectDetail = getProjectSummary(query.ProjectId ?? 0);
                        model.Designation = query.PostRecommended;
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentStartdate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentEnddate);
                        model.PayType = query.ConsolidatedPay == true ? "consolidated pay" : "fellowship pay";
                        model.BasicPay = query.BasicPay ?? 0;
                        model.MedicalAmount = (query.MedicalType == 1 || query.MedicalType == 2) ? query.MedicalAmmount : (Decimal)0;
                        var OfficeOrderDate = getOfferLetterDate(query.ApplicationId ?? 0, query.Category, "OfficeOrder", orderid);
                        var OfferDate = getOfferLetterDate(query.ApplicationId ?? 0, query.Category, "OfferLetter", orderid);
                        model.OfficeOrderDate = string.Format("{0:dd-MMMM-yyyy}", OfficeOrderDate);
                        model.OfferLetterDate = string.Format("{0:dd-MMMM-yyyy}", OfferDate);
                        if (appType == "CON" && orderid == null)
                        {
                            var querycon = (from ste in context.tblRCTConsultantAppointment
                                            where ste.ConsultantAppointmentId == appid
                                            select ste).FirstOrDefault();
                            if (querycon != null)
                            {
                                model.GSTType = Common.GetCodeControlnameCommon(querycon.GSTApplicable ?? 0, "GSTApplicable");
                            }
                        }
                        model.OfferLetterNumber = getOfferDetails(query.ApplicationId ?? 0, query.Category, orderid, "OfferLetter");
                        model.PaymentThroughAgency_f = query.CSIRStaffPayMode == 2 ? true : false;
                        model.MsPhd_f = query.isMsPhd;
                        model.RollNumber = query.PhdDetail;
                        model.TypeofAppointment = query.TypeofAppointment;
                        if (query.AppointmentType == 3 && query.isMsPhd == true)
                        {
                            var QryOSG = context.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == query.ApplicationId);
                            if (QryOSG != null)
                                model.MsPhdType = QryOSG.MsPhdType == 1 ? "M.S" : QryOSG.MsPhdType == 2 ? "Ph.D" : "";
                        }
                        else if (query.AppointmentType == 2 && query.isMsPhd == true)
                        {
                            var QrySTE = context.tblRCTSTE.FirstOrDefault(m => m.STEID == query.ApplicationId);
                            if (QrySTE != null)
                                model.MsPhdType = QrySTE.MsPhdType == 1 ? "M.S" : QrySTE.MsPhdType == 2 ? "Ph.D" : "";
                        }

                        model.ConsolidatedPay = query.ConsolidatedPay ?? false;
                        model.ContactNumber = query.ContactNumber;
                        model.ProjectId = query.ProjectId ?? 0;
                        model.Email = query.Email;
                        model.HRA = query.HRA ?? 0;
                        model.TypeofAppointmentId = query.TypeofAppointmentinInt;
                        model.appCategory = appType;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public RelieveCertificateModel getFinalSettelment(int orderid)
        {
            var HRName = WebConfigurationManager.AppSettings["RCTHRName"];
            RelieveCertificateModel model = new RelieveCertificateModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderid > 0)
                    {
                        var query = (from s in context.vw_RCTOverAllApplicationEntry
                                     from o in context.tblOrder
                                     from prj in context.tblProject
                                     from vw in context.vwFacultyStaffDetails
                                     from lg in context.tblRCTRelievingLog
                                     where s.ProjectId == prj.ProjectId && prj.PIName == vw.UserId
                                     && s.OrderId == o.OrderId && o.OrderId == lg.OrderId
                                     && o.OrderId == orderid
                                     //&& s.ApplicationType == "New" && s.Status == "Relieved"
                                     orderby s.OrderId descending
                                     select new
                                     {
                                         s.EmployeersID,
                                         s.ProfessionalType,
                                         s.CandidateName,
                                         s.PostRecommended,
                                         prj.ProjectTitle,
                                         prj.SponsoringAgency,
                                         vw.DepartmentName,
                                         vw.FirstName,
                                         s.OrderNo,
                                         lg.isGenarateFinalSettlement
                                     }).FirstOrDefault();
                        if (query != null)
                        {
                            var AgencyQry = context.tblAgencyMaster.Where(m => m.AgencyId == query.SponsoringAgency).FirstOrDefault();
                            model.HRName = HRName;
                            model.EmployeeID = query.EmployeersID;
                            model.InitialGender = query.ProfessionalType;
                            model.CandidateName = query.CandidateName;
                            model.Designation = query.PostRecommended;
                            model.AgencyName = AgencyQry == null ? "" : AgencyQry.AgencyName;
                            model.ProjectTitle = query.ProjectTitle;
                            model.Department = query.DepartmentName;
                            model.OrderNo = query.OrderNo;
                            model.PIName = query.FirstName;
                            model.isDuplicate = query.isGenarateFinalSettlement;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public RelieveCertificateModel getServiceCertificateDatails(int orderid)
        {
            RelieveCertificateModel model = new RelieveCertificateModel();
            List<SevicesListModel> listmodel = new List<SevicesListModel>();
            List<SevicesListModel> list = new List<SevicesListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from s in context.tblOrder
                                 from vw in context.vw_RCTOverAllApplicationEntry
                                 from lg in context.tblRCTRelievingLog
                                 where s.AppointmentId == vw.ApplicationId && s.AppointmentType == vw.AppointmentType
                                 && vw.ApplicationType == "New" && s.OrderId == lg.OrderId && s.OrderId == orderid
                                 select new
                                 {
                                     vw.EmployeersID,
                                     vw.CandidateName,
                                     vw.Category,
                                     s.AppointmentId,
                                     lg.isGenarateServiceCertificate,
                                     vw.ProfessionalType,
                                     vw.ConsolidatedPay,
                                     vw.Sex,
                                     vw.AppointmentStartdate,
                                     s.FromDate
                                 }).FirstOrDefault();
                    if (query != null)
                    {
                        model.OrderNo = getOfferDetails(query.AppointmentId ?? 0, query.Category, orderid); /*query.S.ApplicationNumber;*/
                        model.CandidateName = query.ProfessionalType + " " + query.CandidateName;
                        model.Paytype = query.ConsolidatedPay == true ? "Consolidated pay" : "Fellowship pay";
                        model.Gender = query.Sex;
                        model.EmployeeID = query.EmployeersID;
                        var RelieveDate = query.FromDate;
                        int[] ids = { 0, 1, 2, 3, 4 };

                        list = (from s in context.tblRCTOrderHistory
                                from p in context.tblProject
                                from d in context.tblRCTDesignation
                                where s.ProjectId == p.ProjectId && s.DesignationId == d.DesignationId
                                && s.ApplicationId == query.AppointmentId && s.AppointmentType == query.Category
                                && ids.Contains(s.OrderTypeId ?? 0) && s.IsCanceled != true
                                select new SevicesListModel()
                                {
                                    ProjectNo = p.ProjectNumber,
                                    Designation = d.Designation,
                                    DesignationId = d.DesignationId,
                                    EffectiveFrom = s.EffectiveFrom,
                                    EffectiveTo = (s.ActualAppointmentEndDate != null && s.isHRAUpdate == false) ? s.ActualAppointmentEndDate : s.EffectiveTo,
                                    Basic = s.Basic,
                                    HRA = s.HRA,
                                    ProjectId = s.ProjectId
                                }).ToList();


                        list.ForEach(m =>
                        {
                            if (m.EffectiveFrom <= RelieveDate && m.EffectiveTo >= RelieveDate)
                                m.EffectiveTo = RelieveDate;
                        });

                        if (list.Count > 0)
                        {
                            int preproject = 0, newproject = 0, predesignation = 0, newdesignation = 0;
                            DateTime? effctivefrom = null, effctiveto = null;
                            for (int i = 0; i < list.Count; i++)
                            {
                                if (i == 0)
                                {
                                    effctivefrom = list[i].EffectiveFrom;

                                    preproject = list[i].ProjectId ?? 0;
                                    predesignation = list[i].DesignationId;
                                }
                                if (i > 0)
                                {
                                    newproject = list[i].ProjectId ?? 0;
                                    newdesignation = list[i].DesignationId;
                                }

                                if ((preproject != newproject || predesignation != newdesignation) && i != 0)
                                    effctiveto = list[i - 1].EffectiveTo;

                                if (effctivefrom != null && effctiveto != null)
                                {
                                    var data = Common.GetEmployeeDepartment(preproject);
                                    string ProjectNumber = Common.getprojectnumber(preproject);
                                    string Designation = getDesignationName(predesignation);
                                    listmodel.Add(new SevicesListModel()
                                    {
                                        ProjectNo = ProjectNumber,
                                        Designation = Designation,
                                        FromDate = string.Format("{0:dd-MMMM-yyyy}", effctivefrom),
                                        ToDate = string.Format("{0:dd-MMMM-yyyy}", effctiveto),
                                        Salary = Convert.ToDecimal(list[i - 1].Basic),
                                        EmployeeDepartmentname = data.Item2
                                    });

                                    preproject = newproject;
                                    predesignation = newdesignation;
                                    effctivefrom = list[i].EffectiveFrom;
                                    effctiveto = null;
                                }
                                if (i == list.Count - 1)
                                {
                                    var data = Common.GetEmployeeDepartment(list[i].ProjectId ?? 0);
                                    listmodel.Add(new SevicesListModel()
                                    {
                                        ProjectNo = list[i].ProjectNo,
                                        Designation = list[i].Designation,
                                        FromDate = string.Format("{0:dd-MMMM-yyyy}", effctivefrom),
                                        ToDate = string.Format("{0:dd-MMMM-yyyy}", list[i].EffectiveTo),
                                        Salary = Convert.ToDecimal(list[i].Basic),
                                        EmployeeDepartmentname = data.Item2
                                    });
                                }
                            }
                        }
                    }
                    if (listmodel.Count == 1)
                    {
                        model.FromDate = listmodel[0].FromDate;
                        model.ToDate = listmodel[0].ToDate;
                        model.SalaryPerMonth = listmodel[0].Salary;
                        model.Designation = listmodel[0].Designation;
                    }
                    else
                    {
                        model.SalaryPerMonth = listmodel[listmodel.Count - 1].Salary;
                        model.Designation = listmodel[listmodel.Count - 1].Designation;
                    }
                    model.ExperienceList = listmodel.Count > 1 ? listmodel : null;
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public RCTPopupModel getEmployeeWorkingDatails(string EmployeeNo)
        {
            RCTPopupModel model = new RCTPopupModel();
            List<RCTPopupListModel> ListModel = new List<RCTPopupListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (!string.IsNullOrEmpty(EmployeeNo))
                    {
                        var query = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                     where vw.EmployeeNo == EmployeeNo && vw.ApplicationType == "New"
                                     && vw.IsActiveNow == true
                                     select new
                                     {
                                         vw.EmployeersID,
                                         vw.ProfessionalType,
                                         vw.CandidateName,
                                         vw.TypeofAppointment
                                     }).FirstOrDefault();
                        if (query != null)
                        {
                            model.EmployeeID = query.EmployeersID;
                            model.CandidateName = query.ProfessionalType + "" + query.CandidateName;
                            model.EmployeeMode = query.TypeofAppointment;

                            model.ExperienceList = (from s in context.vw_RCTEmployeeHistory.AsNoTracking()
                                                    where s.EmployeeId == EmployeeNo && s.IsCanceled != true
                                                    orderby s.EffectiveFrom, s.OrderDate
                                                    select new
                                                    {
                                                        s.ProjectNumber,
                                                        s.Designation,
                                                        s.EffectiveFrom,
                                                        s.EffectiveTo,
                                                        s.Basic,
                                                        s.HRA,
                                                        s.Medical,
                                                        s.OfferLetter,
                                                        s.OfficeOrder,
                                                        s.OrderType,
                                                        s.JoiningReport,
                                                        s.isUpdated,
                                                        s.ApplicationId,
                                                        s.AppointmentType,
                                                        s.CommitmentNumber,
                                                        s.TypeofAppointment,
                                                        OrderId = (s.OrderId == 0 || s.OrderId == null) ? null : s.OrderId
                                                    }).AsEnumerable().Select((x) => new RCTPopupListModel()
                                                    {
                                                        AppId = x.ApplicationId ?? 0,
                                                        AppType = x.AppointmentType,
                                                        OrderId = x.OrderId ?? 0,
                                                        isUpdated = x.isUpdated ?? false,
                                                        ProjectNo = x.ProjectNumber,
                                                        Designation = x.Designation,
                                                        FromDate = string.Format("{0:dd-MMMM-yyyy}", x.EffectiveFrom),
                                                        ToDate = string.Format("{0:dd-MMMM-yyyy}", x.EffectiveTo),
                                                        Salary = Convert.ToDecimal(x.Basic),
                                                        Hra = Convert.ToDecimal(x.HRA),
                                                        CommitmentNumber = x.CommitmentNumber,
                                                        TypeofAppointment = x.TypeofAppointment,
                                                        OrderType = x.OrderType,
                                                        OfferLetter = x.OfferLetter,
                                                        OfferLetterActualName = string.IsNullOrEmpty(x.OfferLetter) ? "" : x.OfferLetter.Contains("_") ? x.OfferLetter.Split(new char[] { '_' }, 2)[1] : x.OfferLetter.Contains("/") ? x.OfferLetter.Substring(x.OfferLetter.LastIndexOf("/") + 1) : "",
                                                        OfficeOrder = x.OfficeOrder,
                                                        OfficeOrderActualName = string.IsNullOrEmpty(x.OfficeOrder) ? "" : x.OfficeOrder.Substring(x.OfficeOrder.LastIndexOf("_") + 1),
                                                        JoiningReport = string.IsNullOrEmpty(x.JoiningReport) ? "" : x.JoiningReport,
                                                        JoiningReportActualName = string.IsNullOrEmpty(x.JoiningReport) ? "" : x.JoiningReport.Substring(x.JoiningReport.LastIndexOf("_") + 1),
                                                    }).ToList();
                            if (model.ExperienceList.Count > 0)
                            {
                                model.ExperienceList.ForEach(x =>
                                {
                                    x.SendOrder_f = context.tblRCTOfferDetails.Any(m => m.OfferCategory == "Order" && m.OrderId == x.OrderId && m.isSend != true);
                                    x.SendOfferLetter_f = context.tblRCTOfferDetails.OrderByDescending(o => o.OfferDetailId).Any(m => m.ApplicationId == x.AppId && m.Category == x.AppType && m.OfferCategory == "OfferLetter" && ((x.OrderId == 0 && (m.OrderId == null || m.OrderId == 0)) || m.OrderId == x.OrderId) && m.isSend != true);
                                    x.SendOfficeOrder_f = context.tblRCTOfferDetails.OrderByDescending(o => o.OfferDetailId).Any(m => m.ApplicationId == x.AppId && m.Category == x.AppType && m.OfferCategory == "OfficeOrder" && ((x.OrderId == 0 && (m.OrderId == null || m.OrderId == 0)) || m.OrderId == x.OrderId) && m.isSend != true);
                                    if (x.AppType == "OSG")
                                    {
                                        var emppfQuery = context.tblRCTSalaryCalcDetails.Where(s => s.ID == x.AppId && (x.OrderId == 0 || s.OrderId == x.OrderId)).Select(s => s.PFBasicWages).FirstOrDefault();
                                        x.PFBasicWages = emppfQuery ?? 0;
                                    }
                                    x.SalaryLevel = context.vw_RCTOverAllApplicationEntry.Where(m => m.ApplicationId == x.AppId && m.Category == x.AppType && m.ApplicationType == x.OrderType && ((x.OrderId == 0 && (m.OrderId == null || m.OrderId == 0)) || m.OrderId == x.OrderId)).Select(m => m.SalaryLevel).FirstOrDefault();
                                });
                            }
                            model.ExperienceList = model.ExperienceList.Count > 0 ? model.ExperienceList : null;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return model;
            }
        }

        public static bool ExecuteSPEmployeeExperience()
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    context.Database.ExecuteSqlCommand("SPRCTEmployeeExperience");
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public RCTPopupModel getStaffWorkingDatails(string EmployeeNo)
        {
            RCTPopupModel model = new RCTPopupModel();
            List<RCTPopupListModel> listmodel = new List<RCTPopupListModel>();
            List<AppointmenttypeExperienceModel> totexplistmodel = new List<AppointmenttypeExperienceModel>();
            try
            {
                ExecuteSPEmployeeExperience();
                using (var context = new IOASDBEntities())
                {
                    if (!string.IsNullOrEmpty(EmployeeNo))
                    {
                        var query = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                     where vw.EmployeeNo == EmployeeNo && vw.ApplicationType == "New"
                                     orderby vw.ApplicationNo descending
                                     select new
                                     {
                                         vw.EmployeersID,
                                         vw.ProfessionalType,
                                         vw.CandidateName,
                                         vw.TypeofAppointment,
                                         vw.DateofBirth
                                     }).FirstOrDefault();
                        if (query != null)
                        {
                            model.EmployeeID = query.EmployeersID;
                            model.CandidateName = query.ProfessionalType + "" + query.CandidateName;
                            model.EmployeeMode = query.TypeofAppointment;
                            model.DateOfBirth = string.Format("{0:dd-MMMM-yyyy}", query.DateofBirth);
                            model.AsOnDate = string.Format("{0:dd-MMMM-yyyy}", DateTime.Now);
                            listmodel = (from s in context.vw_RCTEmployeeExperience
                                         from vw in context.vw_RCTOverAllApplicationEntry
                                         where vw.ApplicationId == s.ApplicationId && vw.Category == s.AppointmentType && vw.ApplicationType == "New"
                                         && s.EmployeeId == EmployeeNo
                                         orderby s.EffectiveFrom
                                         select new
                                         {
                                             s.ProjectNumber,
                                             s.Designation,
                                             s.EffectiveFrom,
                                             s.EffectiveTo,
                                             s.Basic,
                                             s.HRA,
                                             s.OrderType,
                                             vw.Status,
                                             vw.TypeofAppointment,
                                             s.AppointmentType,
                                             s.ApplicationId,
                                             s.OrderId
                                         }).AsEnumerable().Select((x) => new RCTPopupListModel()
                                         {
                                             AppId = x.ApplicationId ?? 0,
                                             AppType = x.AppointmentType,
                                             Status = (x.EffectiveFrom <= DateTime.Now && x.EffectiveTo >= DateTime.Now && x.Status != "Relieved") ? "A" : "IN",
                                             ProjectNo = x.ProjectNumber,
                                             Designation = x.Designation,
                                             FromDate = string.Format("{0:dd-MMMM-yyyy}", x.EffectiveFrom),
                                             ToDate = string.Format("{0:dd-MMMM-yyyy}", x.EffectiveTo),
                                             EffectFromDate = x.EffectiveFrom ?? DateTime.Now,
                                             EffectToDate = x.EffectiveTo ?? DateTime.Now,
                                             Salary = x.Basic ?? 0,
                                             Hra = x.HRA ?? 0,
                                             OrderType = x.OrderType,
                                             TypeofAppointment = x.TypeofAppointment,
                                             OrderId = x.OrderId ?? 0,
                                         }).ToList();

                            listmodel.ForEach(x =>
                            {
                                var data = DateDifference(x.EffectFromDate, x.EffectToDate);
                                x.Years = data.Item1;
                                x.Months = data.Item2;
                                x.Days = data.Item3;
                                if (x.AppType == "OSG")
                                {
                                    var emppfQuery = context.tblRCTSalaryCalcDetails.Where(s => s.ID == x.AppId && (x.OrderId == 0 || s.OrderId == x.OrderId)).Select(s => s.PFBasicWages).FirstOrDefault();
                                    x.PFBasicWages = emppfQuery ?? 0;
                                }
                                x.SalaryLevel = context.vw_RCTOverAllApplicationEntry.Where(m => m.ApplicationId == x.AppId && m.Category == x.AppType && m.ApplicationType == x.OrderType && ((x.OrderId == 0 && (m.OrderId == null || m.OrderId == 0)) || m.OrderId == x.OrderId)).Select(m => m.SalaryLevel).FirstOrDefault();
                            });

                            if (listmodel.Count > 0)
                            {
                                totexplistmodel = (from g in listmodel
                                                   group g by g.TypeofAppointment into grp
                                                   orderby grp.Key
                                                   select grp).AsEnumerable().Select((x) => new AppointmenttypeExperienceModel()
                                                   {
                                                       TypeofAppointment = x.Key,
                                                       effectFrom = x.Select(m => m.EffectFromDate).ToArray(),
                                                       effectTo = x.Select(m => m.EffectToDate).ToArray()
                                                   }).ToList();

                                totexplistmodel.ForEach(x =>
                                {
                                    var dateDiff = DateDifference(x.effectFrom, x.effectTo);
                                    x.Years = dateDiff.Item1;
                                    x.Months = dateDiff.Item2;
                                    x.Days = dateDiff.Item3;
                                });

                                var arrEffectFrom = listmodel.Select(x => x.EffectFromDate).ToArray();
                                var arrEffectTo = listmodel.Select(x => x.EffectToDate).ToArray();
                                var toatlExp = DateDifference(arrEffectFrom, arrEffectTo);

                                totexplistmodel.Add(new AppointmenttypeExperienceModel()
                                {
                                    TypeofAppointment = "Total",
                                    Years = toatlExp.Item1,
                                    Months = toatlExp.Item2,
                                    Days = toatlExp.Item3,
                                });
                            }
                            model.ExperienceList = listmodel.Count > 0 ? listmodel : null;
                            model.AppointmenttypeWiseExperience = totexplistmodel.Count > 0 ? totexplistmodel : null;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return model;
            }
        }

        #endregion

        #region CommitmentRequest

        public CommitReqstSearchModel GetCommitRequestList(CommitReqstSearchModel model, int page, int pageSize)
        {
            CommitReqstSearchModel commitReqstmodel = new CommitReqstSearchModel();
            List<CommitmentRequestListModel> list = new List<CommitmentRequestListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from rc in context.tblRCTCommitmentRequest
                                    where /*rc.Category == "STE" && */
                                    rc.Status != "Awaiting Committee Approval" && rc.Status != "InActive" && rc.Status != "Rejected"
                                    && rc.Status != "Cancel"
                                    && rc.Status != "Commitment Booked" && rc.Status != "Commitment Withdrawn"
                                    && (rc.IsBookedFullRequestAmount == false || rc.IsBookedFullRequestAmount == null)
                                    select new CommitmentRequestListModel()
                                    {
                                        CommitmentRequestId = rc.RecruitmentRequestId,
                                        CandidateName = rc.CandidateName,
                                        ReferenceNumber = rc.ReferenceNumber,
                                        CandidateDesignation = rc.CandidateDesignation,
                                        EmpNumber = rc.EmpNumber,
                                        ProjectNumber = rc.ProjectNumber,
                                        TotalSalaryAmount = rc.TotalSalary,
                                        CommitmentAmount = rc.RequestedCommitmentAmount,
                                        AllocationHead = rc.AllocationHead,
                                        Status = rc.Status,
                                        OrderNumber = rc.OrderNumber,
                                        CommitmentNumber = rc.CommitmentNumber,
                                        TypeofAppointment = rc.AppointmentType,
                                        AppointmentTypeCode = rc.TypeCode,
                                        RequestType = rc.RequestType,

                                    });
                    var predicate = PredicateBuilder.BaseAnd<CommitmentRequestListModel>();
                    if (!string.IsNullOrEmpty(model.ApplNo))
                        predicate = predicate.And(d => d.ReferenceNumber.Contains(model.ApplNo) || d.RequestType.Contains(model.ApplNo));
                    if (!string.IsNullOrEmpty(model.AppointType))
                        predicate = predicate.And(d => d.TypeofAppointment.Contains(model.AppointType));
                    if (!string.IsNullOrEmpty(model.RequestType))
                        predicate = predicate.And(d => d.RequestType.Contains(model.RequestType));
                    if (!string.IsNullOrEmpty(model.ProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.ProjectNumber));
                    if (!string.IsNullOrEmpty(model.CandidateName))
                        predicate = predicate.And(d => d.CandidateName.Contains(model.CandidateName) || d.CandidateDesignation.Contains(model.CandidateName));
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status.Contains(model.Status));
                    if (model.TotalSalaryAmount != null)
                        predicate = predicate.And(d => d.TotalSalaryAmount == model.TotalSalaryAmount);
                    if (model.CommitmentAmount != null)
                        predicate = predicate.And(d => d.CommitmentAmount == model.CommitmentAmount);
                    var query = prequery.Where(predicate).OrderByDescending(m => m.CommitmentRequestId).Skip(skiprec).Take(pageSize).ToList();
                    commitReqstmodel.TotalRecords = prequery.Where(predicate).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            int commitrequestid = query[i].CommitmentRequestId;
                            var refno = query[i].ReferenceNumber;
                            if (query[i].RequestType != "New Appointment" && query[i].EmpNumber != null)
                            {
                                refno = query[i].ReferenceNumber;
                            }
                            list.Add(new CommitmentRequestListModel()
                            {
                                SNo = sno + i,
                                CommitmentRequestId = query[i].CommitmentRequestId,
                                //ReferenceNumber = query[i].ReferenceNumber,
                                ReferenceNumber = refno,
                                CandidateName = query[i].CandidateName,
                                CandidateDesignation = query[i].CandidateDesignation == null ? "" : query[i].CandidateDesignation,
                                ProjectNumber = query[i].ProjectNumber,
                                TotalSalaryAmount = query[i].TotalSalaryAmount,
                                CommitmentAmount = query[i].CommitmentAmount,
                                AllocationHead = query[i].AllocationHead,
                                Status = query[i].Status,
                                OrderNumber = query[i].OrderNumber,
                                CommitmentNumber = query[i].CommitmentNumber,
                                TypeofAppointment = query[i].TypeofAppointment,
                                AppointmentTypeCode = query[i].AppointmentTypeCode,
                                RequestType = query[i].RequestType,
                            });
                        }
                    }
                }
                commitReqstmodel.commitreqList = list;
                return commitReqstmodel;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return commitReqstmodel;
            }
        }

        public STEViewModel GetRecruitBookCommitDetails(int CommitRequestID, string appltype = null, bool isView = false)
        {
            RecruitCommitRequestModel commitreqmodel = new RecruitCommitRequestModel();

            STEViewModel model = new STEViewModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();

            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (CommitRequestID > 0)
                    {
                        var QryRecruitCommitReq = (from A in context.tblRCTCommitmentRequest
                                                   where A.RecruitmentRequestId == CommitRequestID
                                                   && (A.IsBookedFullRequestAmount == false || A.IsBookedFullRequestAmount == null)
                                                   select new { A }).FirstOrDefault();
                        var Refno = QryRecruitCommitReq.A.ReferenceNumber;
                        var Apltype = QryRecruitCommitReq.A.TypeCode;
                        var orderid = QryRecruitCommitReq.A.OrderId;
                        var reqtype = QryRecruitCommitReq.A.RequestType;
                        if (Apltype == "STE")
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          where A.ApplicationNumber == Refno
                                          select new { A }).FirstOrDefault();
                            var STEID = QrySTE.A.STEID;
                            model.EmployeeID = QrySTE.A.EmployeersID;
                            model.Status = QrySTE.A.Status;
                            model.STEId = QrySTE.A.STEID;
                            model.ApplicationNo = QrySTE.A.ApplicationNumber;
                            model.PresentAddress = QrySTE.A.PresentAddress;
                            model.EmployeeType = QrySTE.A.EmployeeCategory;
                            model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                            model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                            model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                            model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                            model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                            model.Fellowship = QrySTE.A.Fellowship ?? false;
                            model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                            model.MsPhd = QrySTE.A.MsPhd ?? false;
                            model.PhdDetail = QrySTE.A.PhdDetail;
                            model.ProjectId = QrySTE.A.ProjectId;
                            model.DesignationId = QrySTE.A.DesignationId;
                            int designationID = QrySTE.A.DesignationId ?? 0;
                            var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                            model.Designation = designation;
                            model.Medical = QrySTE.A.Medical ?? 0;
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                            model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                            model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                            //model.Comments = QrySTE.A.Comments;
                            //model.Note = QrySTE.A.Note;
                            model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                            model.PIJustificationDocuments = (from c in context.tblRCTSTEPIJustificationDocs
                                                              where c.STEID == STEID && c.Deleted_f != true
                                                              orderby c.DocsID
                                                              select new STEJustificationDoc()
                                                              {
                                                                  FilePath = c.DocsName,
                                                                  FileName = c.FileName
                                                              }).ToList();
                            List<string> PICommands = new List<string>();
                            var QryNote = (from c in context.tblRCTSTEPIJustificationDocs
                                           where c.STEID == STEID && c.Deleted_f != true
                                           orderby c.DocsID descending
                                           group c by c.Description into grp
                                           select new { grp.Key }
                                       ).ToArray();
                            if (QryNote != null)
                            {
                                for (int i = 0; i < QryNote.Count(); i++)
                                {
                                    if (!string.IsNullOrEmpty(QryNote[i].Key))
                                    {
                                        PICommands.Add(QryNote[i].Key);
                                    }
                                }
                            }
                            model.PIJustificationCommands = PICommands;
                            model.Comments = QrySTE.A.Comments;
                            model.Notes = (from c in context.tblRCTSTENotes
                                           where c.STEID == STEID
                                           orderby c.NotesID descending
                                           group c by c.PICommends into grp
                                           select new STENotes()
                                           {
                                               PICommends = grp.Key,
                                           }).ToList();
                            model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                            model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                            model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                            model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                            model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                            int ProjectID = QrySTE.A.ProjectId ?? 0;
                            model.ProjectDetailsModel = getProjectSummary(ProjectID);
                            model.CommitReqModel = getCommitreqdetls(CommitRequestID);
                            model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                            model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                            model.CommitReqModel.ReferenceNumber = Refno;
                            model.CommitReqModel.AppointmentTypeCode = Apltype;
                            model.CommitReqModel.ApplicationType = appltype;
                            model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                        }
                        if (Apltype == "CON")
                        {
                            var QrySTE = (from A in context.tblRCTConsultantAppointment
                                          where A.ApplicationNumber == Refno
                                          select new { A }).FirstOrDefault();
                            var STEID = QrySTE.A.ConsultantAppointmentId;
                            model.EmployeeID = QrySTE.A.EmployeersID;
                            model.Status = QrySTE.A.Status;
                            model.STEId = QrySTE.A.ConsultantAppointmentId;
                            model.ApplicationNo = QrySTE.A.ApplicationNumber;
                            model.PresentAddress = QrySTE.A.PermanentAddress;
                            //model.EmployeeType = Common.GetCodeControlnameCommon(QrySTE.A.EmployeeType ?? 0, "");
                            model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                            model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                            model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                            model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                            // model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                            //model.Fellowship = QrySTE.A.Fellowship ?? false;
                            model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerorCSIRStaff ?? 0;
                            //model.MsPhd = QrySTE.A.MsPhd ?? false;
                            //model.PhdDetail = QrySTE.A.PhdDetail;
                            model.ProjectId = QrySTE.A.ProjectId;
                            model.DesignationId = QrySTE.A.DesignationId;
                            int designationID = QrySTE.A.DesignationId ?? 0;
                            var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                            model.Designation = designation;
                            model.Medical = 0;
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                            model.MedicalAmmount = 0;
                            model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                            model.Comments = QrySTE.A.Comments;
                            model.Note = QrySTE.A.Note;
                            model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                            model.PIJustificationDocuments = (from c in context.tblRCTCONPIJustificationDocument
                                                              where c.ConsultantAppointmentId == STEID && c.Status != "InActive"
                                                              orderby c.CONPIJustificationDocumentId
                                                              select new STEJustificationDoc()
                                                              {
                                                                  FilePath = c.PIJustificationDocumentFile,
                                                                  FileName = c.PIJustificationDocumentName
                                                              }).ToList();
                            model.Notes = (from c in context.tblRCTCONNotes
                                           where c.ConsultantAppointmentId == STEID
                                           orderby c.CONNotesID descending
                                           select new STENotes()
                                           {
                                               PICommends = c.PICommends,
                                           }).ToList();
                            List<string> PICommands = new List<string>();
                            var QryNote = (from c in context.tblRCTCONPIJustificationDocument
                                           where c.ConsultantAppointmentId == STEID
                                           orderby c.ConsultantAppointmentId descending
                                           select new { c.PIJustificationDescription, }
                                       ).ToArray();
                            if (QryNote != null)
                            {
                                for (int i = 0; i < QryNote.Count(); i++)
                                {
                                    if (!string.IsNullOrEmpty(QryNote[i].PIJustificationDescription))
                                    {
                                        PICommands.Add(QryNote[i].PIJustificationDescription);
                                    }
                                }
                            }
                            model.PIJustificationCommands = PICommands;
                            model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                            model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                            model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                            model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                            model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                            int ProjectID = QrySTE.A.ProjectId ?? 0;
                            model.ProjectDetailsModel = getProjectSummary(ProjectID);
                            model.CommitReqModel = getCommitreqdetls(CommitRequestID);
                            model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                            model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                            model.CommitReqModel.ReferenceNumber = Refno;
                            model.CommitReqModel.AppointmentTypeCode = Apltype;
                            model.CommitReqModel.ApplicationType = appltype;
                            model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;

                        }
                        if (Apltype == "OSG")
                        {
                            var QrySTE = (from A in context.tblRCTOutsourcing
                                          where A.ApplicationNumber == Refno
                                          select new { A }).FirstOrDefault();
                            var STEID = QrySTE.A.OSGID;
                            model.EmployeeID = QrySTE.A.EmployeersID;
                            model.Status = QrySTE.A.Status;
                            model.STEId = QrySTE.A.OSGID;
                            model.ApplicationNo = QrySTE.A.ApplicationNumber;
                            model.PresentAddress = QrySTE.A.PresentAddress;
                            model.EmployeeType = QrySTE.A.EmployeeCategory;
                            model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                            model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                            model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                            model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                            model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                            model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                            model.Fellowship = QrySTE.A.Fellowship ?? false;
                            model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                            model.MsPhd = QrySTE.A.MsPhd ?? false;
                            model.PhdDetail = QrySTE.A.PhdDetail;
                            model.ProjectId = QrySTE.A.ProjectId;
                            model.DesignationId = QrySTE.A.DesignationId;
                            int designationID = QrySTE.A.DesignationId ?? 0;
                            var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                            model.Designation = designation;
                            model.Medical = QrySTE.A.Medical ?? 0;
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                            model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                            model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                            model.Comments = QrySTE.A.Comments;
                            model.Note = QrySTE.A.Note;
                            model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                            model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                              where c.OSGID == STEID && c.Deleted_f != true
                                                              orderby c.DocsID
                                                              select new STEJustificationDoc()
                                                              {
                                                                  FilePath = c.DocsName,
                                                                  FileName = c.FileName
                                                              }).ToList();
                            List<string> PICommands = new List<string>();
                            var QryNote = (from c in context.tblRCTOSGPIJustificationDoc
                                           where c.OSGID == STEID && c.Deleted_f != true
                                           orderby c.DocsID descending
                                           select new { c.Description, }
                                       ).ToArray();
                            if (QryNote != null)
                            {
                                for (int i = 0; i < QryNote.Count(); i++)
                                {
                                    if (!string.IsNullOrEmpty(QryNote[i].Description))
                                    {
                                        PICommands.Add(QryNote[i].Description);
                                    }
                                }
                            }
                            model.PIJustificationCommands = PICommands;
                            model.Notes = (from c in context.tblRCTOSGNotes
                                           where c.OSGNotesID == STEID
                                           orderby c.OSGId descending
                                           select new STENotes()
                                           {
                                               PICommends = c.PICommends,
                                           }).ToList();
                            model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                            model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                            model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                            model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                            model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                            int ProjectID = QrySTE.A.ProjectId ?? 0;
                            model.ProjectDetailsModel = getProjectSummary(ProjectID);
                            model.CommitReqModel = getCommitreqdetls(CommitRequestID);
                            model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                            model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                            model.CommitReqModel.ReferenceNumber = Refno;
                            model.CommitReqModel.AppointmentTypeCode = Apltype;
                            model.CommitReqModel.ApplicationType = appltype;
                            model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                        }
                        if ((appltype == "Change of Project") || (appltype == "Extension" && reqtype == "New Commitment") || (appltype == "Enhancement" && reqtype == "New Commitment"))
                        {
                            var order = (from ord in context.tblOrder
                                         where ord.OrderId == orderid
                                         select ord).FirstOrDefault();
                            int newprojectid = 0;
                            if (order != null)
                            {
                                newprojectid = order.NewProjectId ?? 0;
                                model.ProjectId = newprojectid;
                            }
                            model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                            model.ProjectDetailsModel = getProjectSummary(newprojectid);
                            model.ProjectNumber = Common.GetProjectNameandNumber(newprojectid);
                            model.CommitReqModel.BasicPayAmount = order.Basic;
                            model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", order.FromDate); /*String.Format("{0:ddd dd-MMM-yyyy}", order.FromDate);*/
                            model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", order.ToDate);  /*String.Format("{0:ddd dd-MMM-yyyy}", order.ToDate);*/
                            model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                        }
                        if (isView == true)
                        {
                            model.CommitReqModel = getCommitreqdetls(CommitRequestID, true);
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public STEViewModel GetAddorWithdrawCommitDetails(int CommitRequestID, bool isView = false)
        {
            RecruitCommitRequestModel commitreqmodel = new RecruitCommitRequestModel();

            STEViewModel model = new STEViewModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();

            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (CommitRequestID > 0)
                    {
                        var QryRecruitCommitReq = (from A in context.tblRCTCommitmentRequest
                                                   where A.RecruitmentRequestId == CommitRequestID
                                                   && (A.IsBookedFullRequestAmount == false || A.IsBookedFullRequestAmount == null)
                                                   select new { A }).FirstOrDefault();
                        if (QryRecruitCommitReq == null)
                        {
                            model.STEId = -1;
                            return model;
                        }
                        if (QryRecruitCommitReq.A.Status != "Awaiting Commitment Booking")
                        {
                            model.STEId = -1;
                            model.Status = QryRecruitCommitReq.A.Status;
                            return model;
                        }
                        var empno = QryRecruitCommitReq.A.EmpNumber;
                        var refid = QryRecruitCommitReq.A.RefId;
                        var refnum = QryRecruitCommitReq.A.ReferenceNumber;
                        var appointype = QryRecruitCommitReq.A.AppointmentType;
                        var reqsttype = QryRecruitCommitReq.A.RequestType;
                        model.EmployeeID = empno;
                        var projectid = QryRecruitCommitReq.A.ProjectId;
                        if (appointype == "Change of Project" && reqsttype == "Withdraw Commitment")
                        {
                            var Aptype = QryRecruitCommitReq.A.TypeCode;
                            if (Aptype == "STE")
                            {
                                var QrySTE = (from A in context.tblRCTSTE
                                              where A.ApplicationNumber == refnum
                                              select new { A }).FirstOrDefault();
                                var pjtid = QrySTE.A.ProjectId;
                                if (pjtid != projectid)
                                {
                                    projectid = pjtid;
                                }
                            }
                            if (Aptype == "CON")
                            {
                                var QrySTE = (from A in context.tblRCTConsultantAppointment
                                              where A.ApplicationNumber == refnum
                                              select new { A }).FirstOrDefault();
                                var pjtid = QrySTE.A.ProjectId;
                                if (pjtid != projectid)
                                {
                                    projectid = pjtid;
                                }
                            }
                            if (Aptype == "OSG")
                            {
                                var QrySTE = (from A in context.tblRCTOutsourcing
                                              where A.ApplicationNumber == refnum
                                              select new { A }).FirstOrDefault();
                                var pjtid = QrySTE.A.ProjectId;
                                if (pjtid != projectid)
                                {
                                    projectid = pjtid;
                                }
                            }
                        }
                        if (appointype == "Cancel")
                        {
                            var empcommitquery = (from A in context.tblRCTCommitmentRequest
                                                  where A.ReferenceNumber == refnum && (A.IsClosed_f == false || A.IsClosed_f == null) && A.ProjectId == projectid
                                                  && A.CommitmentNumber != null && A.Status == "Commitment Booked"
                                                  orderby A.RecruitmentRequestId descending
                                                  select new { A }).FirstOrDefault();
                            var Apltype = empcommitquery.A.TypeCode;
                            var Refno = empcommitquery.A.ReferenceNumber;
                            var newempbookcommitid = empcommitquery.A.RecruitmentRequestId;
                            var odrid = QryRecruitCommitReq.A.OrderId;
                            if (Apltype == "STE")
                            {
                                var QrySTE = (from A in context.tblRCTSTE
                                              where A.ApplicationNumber == refnum
                                              select new { A }).FirstOrDefault();
                                if (QrySTE != null)
                                {
                                    var STEID = QrySTE.A.STEID;
                                    model.Status = QrySTE.A.Status;
                                    model.STEId = QrySTE.A.STEID;
                                    model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                    model.PresentAddress = QrySTE.A.PresentAddress;
                                    model.EmployeeType = QrySTE.A.EmployeeCategory;
                                    model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                    model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                    model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                    model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                    model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                    model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                    model.MsPhd = QrySTE.A.MsPhd ?? false;
                                    model.PhdDetail = QrySTE.A.PhdDetail;
                                    model.ProjectId = QrySTE.A.ProjectId;
                                    model.DesignationId = QrySTE.A.DesignationId;
                                    int designationID = QrySTE.A.DesignationId ?? 0;
                                    var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                    model.Designation = designation;
                                    model.Medical = QrySTE.A.Medical ?? 0;
                                    model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                    model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                    model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                    // model.Comments = QrySTE.A.Comments;
                                    // model.Note = QrySTE.A.Note;

                                    model.PIJustificationDocuments = (from c in context.tblRCTSTEPIJustificationDocs
                                                                      where c.STEID == STEID && c.Deleted_f != true
                                                                      orderby c.DocsID
                                                                      select new STEJustificationDoc()
                                                                      {
                                                                          FilePath = c.DocsName,
                                                                          FileName = c.FileName
                                                                      }).ToList();
                                    List<string> PICommands = new List<string>();
                                    var QryNote = (from c in context.tblRCTSTEPIJustificationDocs
                                                   where c.STEID == STEID && c.Deleted_f != true
                                                   orderby c.DocsID descending
                                                   group c by c.Description into grp
                                                   select new { grp.Key }
                                               ).ToArray();
                                    if (QryNote != null)
                                    {
                                        for (int i = 0; i < QryNote.Count(); i++)
                                        {
                                            if (!string.IsNullOrEmpty(QryNote[i].Key))
                                            {
                                                PICommands.Add(QryNote[i].Key);
                                            }
                                        }
                                    }
                                    model.PIJustificationCommands = PICommands;
                                    model.Notes = (from c in context.tblRCTSTENotes
                                                   where c.STEID == STEID
                                                   orderby c.NotesID descending
                                                   group c by c.PICommends into grp
                                                   select new STENotes()
                                                   {
                                                       PICommends = grp.Key,
                                                   }).ToList();
                                    model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                    model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                    model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                    model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                    model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                    int ProjectID = QrySTE.A.ProjectId ?? 0;
                                    if (ProjectID != projectid)
                                    {
                                        ProjectID = projectid ?? 0;
                                        model.ProjectId = projectid;
                                    }
                                    model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                    model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                    model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                    model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                    model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                    model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                    model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                    model.CommitReqModel.ReferenceNumber = Refno;
                                    model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                    model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                    model.CommitReqModel.AppointmentTypeCode = Apltype;
                                    //if(QryRecruitCommitReq.A.RequestType == "HRA")
                                    //{
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    if (orderqry != null)
                                    {
                                        if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                        }
                                        else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = model.Appointmentstartdate;
                                        }
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ToDate);
                                        model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                        if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                        {
                                            model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                            model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        }
                                    }
                                    //}
                                    if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                    }
                                    if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                    {
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                        //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                    }
                                }
                            }
                            if (Apltype == "CON")
                            {
                                var QrySTE = (from A in context.tblRCTConsultantAppointment
                                              where A.ApplicationNumber == refnum
                                              select new { A }).FirstOrDefault();
                                if (QrySTE != null)
                                {
                                    var STEID = QrySTE.A.ConsultantAppointmentId;
                                    model.Status = QrySTE.A.Status;
                                    model.STEId = QrySTE.A.ConsultantAppointmentId;
                                    model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                    model.PresentAddress = QrySTE.A.PermanentAddress;
                                    //model.EmployeeType = Common.GetCodeControlnameCommon(QrySTE.A.EmployeeType ?? 0, "");
                                    model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                    model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                    model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                    model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                    model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                    // model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    //model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerorCSIRStaff ?? 0;
                                    //model.MsPhd = QrySTE.A.MsPhd ?? false;
                                    //model.PhdDetail = QrySTE.A.PhdDetail;
                                    model.ProjectId = QrySTE.A.ProjectId;
                                    model.DesignationId = QrySTE.A.DesignationId;
                                    int designationID = QrySTE.A.DesignationId ?? 0;
                                    var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                    model.Designation = designation;
                                    model.Medical = 0;
                                    model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                    model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    model.MedicalAmmount = 0;
                                    model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                    model.Comments = QrySTE.A.Comments;
                                    model.Note = QrySTE.A.Note;
                                    //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                    model.PIJustificationDocuments = (from c in context.tblRCTCONPIJustificationDocument
                                                                      where c.ConsultantAppointmentId == STEID && c.Status != "InActive"
                                                                      orderby c.CONPIJustificationDocumentId
                                                                      select new STEJustificationDoc()
                                                                      {
                                                                          FilePath = c.PIJustificationDocumentFile,
                                                                          FileName = c.PIJustificationDocumentName
                                                                      }).ToList();
                                    List<string> PICommands = new List<string>();
                                    var QryNote = (from c in context.tblRCTCONPIJustificationDocument
                                                   where c.ConsultantAppointmentId == STEID
                                                   orderby c.CONPIJustificationDocumentId descending
                                                   group c by c.PIJustificationDescription into grp
                                                   select new { grp.Key }
                                               ).ToArray();
                                    if (QryNote != null)
                                    {
                                        for (int i = 0; i < QryNote.Count(); i++)
                                        {
                                            if (!string.IsNullOrEmpty(QryNote[i].Key))
                                            {
                                                PICommands.Add(QryNote[i].Key);
                                            }
                                        }
                                    }
                                    model.PIJustificationCommands = PICommands;
                                    model.Notes = (from c in context.tblRCTCONNotes
                                                   where c.ConsultantAppointmentId == STEID
                                                   orderby c.CONNotesID descending
                                                   select new STENotes()
                                                   {
                                                       PICommends = c.PICommends,
                                                   }).ToList();
                                    model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                    model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                    model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                    model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                    var Curr = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                                    model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                    int ProjectID = QrySTE.A.ProjectId ?? 0;
                                    if (ProjectID != projectid)
                                    {
                                        ProjectID = projectid ?? 0;
                                        model.ProjectId = projectid;
                                    }
                                    model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                    model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                    model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                    model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                    model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                    model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                    model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                    model.CommitReqModel.ReferenceNumber = Refno;
                                    model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                    model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                    model.CommitReqModel.AppointmentTypeCode = Apltype;
                                    //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                    //{
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    if (orderqry != null)
                                    {
                                        if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                        }
                                        else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = model.Appointmentstartdate;
                                        }
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                        model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                        model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                        if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                        {
                                            model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                            model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        }
                                    }
                                    if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                    }
                                    if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                    {
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                        //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                    }
                                    //}
                                }
                            }
                            if (Apltype == "OSG")
                            {
                                var QrySTE = (from A in context.tblRCTOutsourcing
                                              where A.ApplicationNumber == refnum
                                              select new { A }).FirstOrDefault();
                                if (QrySTE != null)
                                {
                                    var STEID = QrySTE.A.OSGID;
                                    model.Status = QrySTE.A.Status;
                                    model.STEId = QrySTE.A.OSGID;
                                    model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                    model.PresentAddress = QrySTE.A.PresentAddress;
                                    model.EmployeeType = QrySTE.A.EmployeeCategory;
                                    model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                    model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                    model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                    model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                    model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                    model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                    model.MsPhd = QrySTE.A.MsPhd ?? false;
                                    model.PhdDetail = QrySTE.A.PhdDetail;
                                    model.ProjectId = QrySTE.A.ProjectId;
                                    model.DesignationId = QrySTE.A.DesignationId;
                                    int designationID = QrySTE.A.DesignationId ?? 0;
                                    var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                    model.Designation = designation;
                                    model.Medical = QrySTE.A.Medical ?? 0;
                                    model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                    model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                    model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                    model.Comments = QrySTE.A.Comments;
                                    model.Note = QrySTE.A.Note;
                                    //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                    model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                                      where c.OSGID == STEID && c.Deleted_f != true
                                                                      orderby c.DocsID
                                                                      select new STEJustificationDoc()
                                                                      {
                                                                          FilePath = c.DocsName,
                                                                          FileName = c.FileName
                                                                      }).ToList();
                                    List<string> PICommands = new List<string>();
                                    var QryNote = (from c in context.tblRCTOSGPIJustificationDoc
                                                   where c.OSGID == STEID && c.Deleted_f != true
                                                   orderby c.DocsID descending
                                                   group c by c.Description into grp
                                                   select new { grp.Key }
                                               ).ToArray();
                                    if (QryNote != null)
                                    {
                                        for (int i = 0; i < QryNote.Count(); i++)
                                        {
                                            if (!string.IsNullOrEmpty(QryNote[i].Key))
                                            {
                                                PICommands.Add(QryNote[i].Key);
                                            }
                                        }
                                    }
                                    model.PIJustificationCommands = PICommands;
                                    model.Notes = (from c in context.tblRCTOSGNotes
                                                   where c.OSGNotesID == STEID
                                                   orderby c.OSGId descending
                                                   select new STENotes()
                                                   {
                                                       PICommends = c.PICommends,
                                                   }).ToList();
                                    model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                    model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                    model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                    model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                    model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                    int ProjectID = QrySTE.A.ProjectId ?? 0;
                                    if (ProjectID != projectid)
                                    {
                                        ProjectID = projectid ?? 0;
                                        model.ProjectId = projectid;
                                    }
                                    model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                    model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                    model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                    model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                    model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                    model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                    model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                    model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                    model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                    model.CommitReqModel.ReferenceNumber = Refno;
                                    model.CommitReqModel.AppointmentTypeCode = Apltype;
                                    //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                    //{
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    if (orderqry != null)
                                    {
                                        if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                        }
                                        else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = model.Appointmentstartdate;
                                        }
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                        model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                        model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                        if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                        {
                                            model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                            model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        }
                                    }
                                    if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                    }
                                    if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                    {
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                        //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                    }
                                    //}
                                }

                            }
                            if (isView == true)
                            {
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid, true);
                            }
                        }
                        else
                        {

                            var empcommitquery = (from A in context.tblRCTCommitmentRequest
                                                  where A.ReferenceNumber == refnum && (A.EmpNumber == empno || empno == null) && (A.IsClosed_f == null || A.IsClosed_f == false)
                                                  && A.CommitmentNumber != null && A.Status == "Commitment Booked" && A.ProjectId == projectid
                                                  orderby A.RecruitmentRequestId descending
                                                  select new { A }).FirstOrDefault();
                            var Apltype = empcommitquery.A.TypeCode;
                            var Refno = empcommitquery.A.ReferenceNumber;
                            var newempbookcommitid = empcommitquery.A.RecruitmentRequestId;
                            var odrid = QryRecruitCommitReq.A.OrderId;

                            if (Apltype == "STE")
                            {
                                var QrySTE = (from A in context.tblRCTSTE
                                              where A.EmployeersID == empno
                                              select new { A }).FirstOrDefault();
                                if (QrySTE != null)
                                {
                                    var STEID = QrySTE.A.STEID;
                                    model.Status = QrySTE.A.Status;
                                    model.STEId = QrySTE.A.STEID;
                                    model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                    model.PresentAddress = QrySTE.A.PresentAddress;
                                    model.EmployeeType = QrySTE.A.EmployeeCategory;
                                    model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                    model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                    model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                    model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                    model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                    model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                    model.MsPhd = QrySTE.A.MsPhd ?? false;
                                    model.PhdDetail = QrySTE.A.PhdDetail;
                                    model.ProjectId = QrySTE.A.ProjectId;
                                    model.DesignationId = QrySTE.A.DesignationId;
                                    int designationID = QrySTE.A.DesignationId ?? 0;
                                    var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                    model.Designation = designation;
                                    model.Medical = QrySTE.A.Medical ?? 0;
                                    model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                    model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                    model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                    // model.Comments = QrySTE.A.Comments;
                                    // model.Note = QrySTE.A.Note;
                                    //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                    model.PIJustificationDocuments = (from c in context.tblRCTSTEPIJustificationDocs
                                                                      where c.STEID == STEID && c.Deleted_f != true
                                                                      orderby c.DocsID
                                                                      select new STEJustificationDoc()
                                                                      {
                                                                          FilePath = c.DocsName,
                                                                          FileName = c.FileName
                                                                      }).ToList();
                                    List<string> PICommands = new List<string>();
                                    var QryNote = (from c in context.tblRCTSTEPIJustificationDocs
                                                   where c.STEID == STEID && c.Deleted_f != true
                                                   orderby c.DocsID descending
                                                   group c by c.Description into grp
                                                   select new { grp.Key }
                                               ).ToArray();
                                    if (QryNote != null)
                                    {
                                        for (int i = 0; i < QryNote.Count(); i++)
                                        {
                                            if (!string.IsNullOrEmpty(QryNote[i].Key))
                                            {
                                                PICommands.Add(QryNote[i].Key);
                                            }
                                        }
                                    }
                                    model.PIJustificationCommands = PICommands;
                                    model.Notes = (from c in context.tblRCTSTENotes
                                                   where c.STEID == STEID
                                                   orderby c.NotesID descending
                                                   select new STENotes()
                                                   {
                                                       PICommends = c.PICommends,
                                                   }).ToList();
                                    model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                    model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                    model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                    model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                    model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                    int ProjectID = QrySTE.A.ProjectId ?? 0;
                                    if (ProjectID != projectid)
                                    {
                                        ProjectID = projectid ?? 0;
                                        model.ProjectId = projectid;
                                    }
                                    model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                    model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                    model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                    model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                    model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                    model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                    model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                    model.CommitReqModel.ReferenceNumber = Refno;
                                    model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                    model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                    model.CommitReqModel.AppointmentTypeCode = Apltype;
                                    //if(QryRecruitCommitReq.A.RequestType == "HRA")
                                    //{
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    if (orderqry != null)
                                    {
                                        if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                        }
                                        else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = model.Appointmentstartdate;
                                        }
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ToDate);
                                        model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                        if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                        {
                                            model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                            model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        }
                                    }
                                    if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                    }
                                    //}
                                    if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                    {
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                        //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                    }
                                }
                            }
                            if (Apltype == "CON")
                            {
                                var QrySTE = (from A in context.tblRCTConsultantAppointment
                                              where A.EmployeersID == empno
                                              select new { A }).FirstOrDefault();
                                if (QrySTE != null)
                                {
                                    var STEID = QrySTE.A.ConsultantAppointmentId;
                                    model.Status = QrySTE.A.Status;
                                    model.STEId = QrySTE.A.ConsultantAppointmentId;
                                    model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                    model.PresentAddress = QrySTE.A.PermanentAddress;
                                    //model.EmployeeType = Common.GetCodeControlnameCommon(QrySTE.A.EmployeeType ?? 0, "");
                                    model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                    model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                    model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                    model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                    model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                    // model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    //model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerorCSIRStaff ?? 0;
                                    //model.MsPhd = QrySTE.A.MsPhd ?? false;
                                    //model.PhdDetail = QrySTE.A.PhdDetail;
                                    model.ProjectId = QrySTE.A.ProjectId;
                                    model.DesignationId = QrySTE.A.DesignationId;
                                    int designationID = QrySTE.A.DesignationId ?? 0;
                                    var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                    model.Designation = designation;
                                    model.Medical = 0;
                                    model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                    model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    model.MedicalAmmount = 0;
                                    model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                    model.Comments = QrySTE.A.Comments;
                                    model.Note = QrySTE.A.Note;
                                    //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                    model.PIJustificationDocuments = (from c in context.tblRCTCONPIJustificationDocument
                                                                      where c.ConsultantAppointmentId == STEID && c.Status != "InActive"
                                                                      orderby c.CONPIJustificationDocumentId
                                                                      select new STEJustificationDoc()
                                                                      {
                                                                          FilePath = c.PIJustificationDocumentFile,
                                                                          FileName = c.PIJustificationDocumentName
                                                                      }).ToList();
                                    List<string> PICommands = new List<string>();
                                    var QryNote = (from c in context.tblRCTCONPIJustificationDocument
                                                   where c.ConsultantAppointmentId == STEID
                                                   orderby c.CONPIJustificationDocumentId descending
                                                   group c by c.PIJustificationDescription into grp
                                                   select new { grp.Key }
                                               ).ToArray();
                                    if (QryNote != null)
                                    {
                                        for (int i = 0; i < QryNote.Count(); i++)
                                        {
                                            if (!string.IsNullOrEmpty(QryNote[i].Key))
                                            {
                                                PICommands.Add(QryNote[i].Key);
                                            }
                                        }
                                    }
                                    model.PIJustificationCommands = PICommands;
                                    model.Notes = (from c in context.tblRCTCONNotes
                                                   where c.ConsultantAppointmentId == STEID
                                                   orderby c.CONNotesID descending
                                                   select new STENotes()
                                                   {
                                                       PICommends = c.PICommends,
                                                   }).ToList();
                                    model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                    model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                    model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                    model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                    model.Experience = Common.getExperienceInWordings(STEID, Apltype);

                                    int ProjectID = QrySTE.A.ProjectId ?? 0;
                                    if (ProjectID != projectid)
                                    {
                                        ProjectID = projectid ?? 0;
                                        model.ProjectId = projectid;
                                    }
                                    model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                    model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                    model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                    model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                    model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                    model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                    model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                    model.CommitReqModel.ReferenceNumber = Refno;
                                    model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                    model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                    model.CommitReqModel.AppointmentTypeCode = Apltype;
                                    //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                    //{
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    if (orderqry != null)
                                    {
                                        if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                        }
                                        else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = model.Appointmentstartdate;
                                        }
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                        model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                        model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                        if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                        {
                                            model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                            model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        }
                                    }
                                    if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                    }
                                    if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                    {
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                        //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                    }
                                    //}
                                }
                            }
                            if (Apltype == "OSG")
                            {
                                var QrySTE = (from A in context.tblRCTOutsourcing
                                              where A.EmployeersID == empno
                                              select new { A }).FirstOrDefault();
                                if (QrySTE != null)
                                {
                                    var STEID = QrySTE.A.OSGID;
                                    model.Status = QrySTE.A.Status;
                                    model.STEId = QrySTE.A.OSGID;
                                    model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                    model.PresentAddress = QrySTE.A.PresentAddress;
                                    model.EmployeeType = QrySTE.A.EmployeeCategory;
                                    model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                    model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                    model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                    model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                    model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                    model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                    model.Fellowship = QrySTE.A.Fellowship ?? false;
                                    model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                    model.MsPhd = QrySTE.A.MsPhd ?? false;
                                    model.PhdDetail = QrySTE.A.PhdDetail;
                                    model.ProjectId = QrySTE.A.ProjectId;
                                    model.DesignationId = QrySTE.A.DesignationId;
                                    int designationID = QrySTE.A.DesignationId ?? 0;
                                    var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                    model.Designation = designation;
                                    model.Medical = QrySTE.A.Medical ?? 0;
                                    model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                    model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                    model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                    model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                    model.Comments = QrySTE.A.Comments;
                                    model.Note = QrySTE.A.Note;
                                    //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                    model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                                      where c.OSGID == STEID && c.Deleted_f != true
                                                                      orderby c.DocsID
                                                                      select new STEJustificationDoc()
                                                                      {
                                                                          FilePath = c.DocsName,
                                                                          FileName = c.FileName
                                                                      }).ToList();
                                    List<string> PICommands = new List<string>();
                                    var QryNote = (from c in context.tblRCTOSGPIJustificationDoc
                                                   where c.OSGID == STEID && c.Deleted_f != true
                                                   orderby c.DocsID descending
                                                   group c by c.Description into grp
                                                   select new { grp.Key }
                                               ).ToArray();
                                    if (QryNote != null)
                                    {
                                        for (int i = 0; i < QryNote.Count(); i++)
                                        {
                                            if (!string.IsNullOrEmpty(QryNote[i].Key))
                                            {
                                                PICommands.Add(QryNote[i].Key);
                                            }
                                        }
                                    }
                                    model.PIJustificationCommands = PICommands;
                                    model.Notes = (from c in context.tblRCTOSGNotes
                                                   where c.OSGNotesID == STEID
                                                   orderby c.OSGId descending
                                                   select new STENotes()
                                                   {
                                                       PICommends = c.PICommends,
                                                   }).ToList();
                                    model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                    model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                    model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                    model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                    model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                    int ProjectID = QrySTE.A.ProjectId ?? 0;
                                    if (ProjectID != projectid)
                                    {
                                        ProjectID = projectid ?? 0;
                                        model.ProjectId = projectid;
                                    }
                                    model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                    model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                    model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                    model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                    model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                    model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                    model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                    model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                    model.CommitReqModel.ReferenceNumber = Refno;
                                    model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                    model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                    model.CommitReqModel.AppointmentTypeCode = Apltype;
                                    //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                    //{
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    if (orderqry != null)
                                    {
                                        if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                        }
                                        else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                        {
                                            model.AppointmentEndDate = model.Appointmentstartdate;
                                        }
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                        model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                        model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                        if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                        {
                                            model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                            model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                        }
                                    }
                                    if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                    }
                                    if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                    {
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                        //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                    }
                                    //}
                                }

                            }
                            if (isView == true)
                            {
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid, true);
                            }
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public RecruitCommitRequestModel getCommitreqdetls(int CommitRequestID, bool isView = false)
        {
            try
            {
                RecruitCommitRequestModel recrcommit = new RecruitCommitRequestModel();
                using (var context = new IOASDBEntities())
                {
                    CommitAllocationHeadDetails allocdetails = new CommitAllocationHeadDetails();
                    var qry = (from prj in context.tblRCTCommitmentRequest
                               where prj.RecruitmentRequestId == CommitRequestID
                               select prj).FirstOrDefault();
                    if (qry != null)
                    {
                        recrcommit.AllocationHead = qry.AllocationHead ?? "Staff";
                        recrcommit.AllocationHeadId = qry.AllocationHeadId ?? 1;
                        recrcommit.RequestedAmount = qry.RequestedCommitmentAmount;
                        recrcommit.EmpId = qry.EmpId;
                        recrcommit.EmpNumber = qry.EmpNumber;
                        //recrcommit.PrevBookedCommitAmount = qry.BookedAmount ?? 0;
                        recrcommit.CommitmentAmount = qry.RequestedCommitmentAmount;
                        recrcommit.Remarks = qry.Remarks;
                        if (isView == true)
                        {
                            recrcommit.CommitmentAmount = qry.BookedAmount;
                        }
                    }
                }
                return recrcommit;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                RecruitCommitRequestModel recrcommit = new RecruitCommitRequestModel();
                return recrcommit;
            }
        }

        public int UpdateCommitDetails(STEViewModel model, int commitmentId, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            string typecode = string.Empty;
                            string applno = string.Empty;
                            if (model.CommitReqModel.CommitmentRequestId > 0)
                            {
                                var commit = (from prj in context.tblCommitment
                                              where prj.CommitmentId == commitmentId
                                              select prj).FirstOrDefault();
                                var comitrquestid = model.CommitReqModel.CommitmentRequestId;
                                var commitrequest = (from prj in context.tblRCTCommitmentRequest
                                                     where prj.RecruitmentRequestId == comitrquestid
                                                     select prj).FirstOrDefault();
                                if (commit != null && commitrequest != null)
                                {
                                    applno = commitrequest.ReferenceNumber;
                                    typecode = commitrequest.TypeCode;

                                    commitrequest.CommitmentNumber = commit.CommitmentNumber;
                                    commitrequest.CommitmentCrtdBy = logged_in_userId;
                                    commitrequest.CommitmentCrtdTS = DateTime.Now;
                                    commitrequest.EmpId = model.CommitReqModel.EmpId;
                                    commitrequest.EmpNumber = model.CommitReqModel.EmpNumber;
                                    commitrequest.AllocationHeadId = model.CommitReqModel.AllocationHeadId;
                                    var allocheadid = model.CommitReqModel.AllocationHeadId ?? 0;
                                    commitrequest.AllocationHead = Common.getAllocationHeadName(allocheadid);
                                    commitrequest.Remarks = model.CommitReqModel.Remarks;
                                    commitrequest.BookedAmount = (commitrequest.BookedAmount ?? 0) + (model.CommitReqModel.CommitmentAmount);
                                    commitrequest.IsBookedFullRequestAmount = true;
                                    commitrequest.Status = "Commitment Booked";
                                    context.SaveChanges();

                                    #region log
                                    tblRCTCommitmentBookLog log = new tblRCTCommitmentBookLog();
                                    log.RecruitmentRequestId = model.CommitReqModel.CommitmentRequestId;
                                    log.CommitmentNumber = commit.CommitmentNumber;
                                    log.CommitmentCrtdBy = logged_in_userId;
                                    log.CommitmentCrtdTS = DateTime.Now;
                                    log.RequestedCommitmentAmount = commitrequest.RequestedCommitmentAmount;
                                    log.BookedAmount = commitrequest.BookedAmount ?? 0;
                                    log.RefNumber = commitrequest.ReferenceNumber;
                                    context.tblRCTCommitmentBookLog.Add(log);
                                    context.SaveChanges();
                                    #endregion

                                    int mastId = 0;
                                    string Newstatus = string.Empty;
                                    int typeofappointment = 0;
                                    if (typecode == "STE")
                                    {
                                        var STEquery = (from prj in context.tblRCTSTE
                                                        where prj.ApplicationNumber == applno
                                                        select prj).FirstOrDefault();
                                        if (STEquery != null)
                                        {
                                            typeofappointment = STEquery.TypeofAppointment ?? 0;
                                            if (STEquery.TypeofAppointment == 3)
                                                STEquery.Status = "Awaiting Verification";
                                            else if (STEquery.TypeofAppointment == 4 && STEquery.isGovAgencyFund == true)
                                                STEquery.Status = "Awaiting Verification";
                                            else
                                                STEquery.Status = "Awaiting Committee Approval";
                                            STEquery.UptdTs = DateTime.Now;
                                            STEquery.UptdUser = logged_in_userId;
                                            Newstatus = STEquery.Status;
                                            mastId = STEquery.STEID;
                                            context.SaveChanges();
                                        }
                                    }
                                    else if (typecode == "CON")
                                    {
                                        var CONquery = (from prj in context.tblRCTConsultantAppointment
                                                        where prj.ApplicationNumber == applno
                                                        select prj).FirstOrDefault();
                                        if (CONquery != null)
                                        {
                                            CONquery.Status = "Awaiting Verification";
                                            CONquery.UptdTs = DateTime.Now;
                                            CONquery.UptdUser = logged_in_userId;
                                            Newstatus = CONquery.Status;
                                            mastId = CONquery.ConsultantAppointmentId;
                                            context.SaveChanges();
                                        }
                                    }
                                    else if (typecode == "OSG")
                                    {
                                        var OSGquery = (from prj in context.tblRCTOutsourcing
                                                        where prj.ApplicationNumber == applno
                                                        select prj).FirstOrDefault();
                                        if (OSGquery != null)
                                        {
                                            OSGquery.UptdTs = DateTime.Now;
                                            OSGquery.UptdUser = logged_in_userId;
                                            OSGquery.Status = "Awaiting Committee Approval";
                                            Newstatus = OSGquery.Status;
                                            mastId = OSGquery.OSGID;
                                            context.SaveChanges();
                                        }
                                    }
                                    transaction.Commit();

                                    if (typecode == "STE")
                                        PostSTEStatusLog(mastId, "Awaiting Commitment Booking", Newstatus, logged_in_userId);
                                    else if (typecode == "OSG")
                                        PostOSGStatusLog(mastId, "Awaiting Commitment Booking", Newstatus, logged_in_userId);
                                    else if (typecode == "CON")
                                        PostCONStatusLog(mastId, "Awaiting Commitment Booking", Newstatus, logged_in_userId);

                                    if ((Newstatus == "Awaiting Verification" && typecode == "CON") || (Newstatus == "Awaiting Verification" && typeofappointment == 3 && typecode == "STE"))
                                        PostOfferDetails(mastId, typecode, "OfferLetter", logged_in_userId);
                                    return 1;
                                }
                            }
                            return -1;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return -1;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return -1;
            }
        }

        public RecruitCommitRequestModel getAddorWithdrawCommitreqdetls(int CommitRequestID, bool isView = false)
        {
            try
            {
                RecruitCommitRequestModel recrcommit = new RecruitCommitRequestModel();
                using (var context = new IOASDBEntities())
                {
                    CommitAllocationHeadDetails allocdetails = new CommitAllocationHeadDetails();
                    var qry = (from prj in context.tblRCTCommitmentRequest
                               where prj.RecruitmentRequestId == CommitRequestID
                               select prj).FirstOrDefault();
                    if (qry != null)
                    {
                        var comitnum = qry.CommitmentNumber;
                        var commit = (from prj in context.tblCommitment
                                      where prj.CommitmentNumber == comitnum
                                      select prj).FirstOrDefault();
                        var commitid = commit.CommitmentId;
                        var commitdet = (from prj in context.tblCommitmentDetails
                                         where prj.CommitmentId == commitid
                                         select prj).FirstOrDefault();
                        recrcommit.RequestedAmount = qry.RequestedCommitmentAmount;
                        //recrcommit.PrevBookedCommitAmount = qry.BookedAmount ?? 0;
                        recrcommit.CommitmentAmount = commit.CommitmentAmount;
                        recrcommit.CommitmentBalanceAmount = commitdet.BalanceAmount;
                        recrcommit.CommitmentNumber = commit.CommitmentNumber;
                        recrcommit.CommitmentId = commit.CommitmentId;
                        recrcommit.Remarks = commit.Description;
                    }
                }
                return recrcommit;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                RecruitCommitRequestModel recrcommit = new RecruitCommitRequestModel();
                return recrcommit;
            }
        }

        public int UpdateAddCommitDetails(STEViewModel model, int commitmentId, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            //New Draft Announcement
                            var appointmenttype = "";
                            var newstatus = "";
                            if (model.CommitReqModel.CommitmentRequestId > 0)
                            {
                                var commit = (from prj in context.tblCommitment
                                              where prj.CommitmentId == commitmentId
                                              select prj).FirstOrDefault();
                                var comitrquestid = model.CommitReqModel.CommitmentRequestId;
                                var commitbookedid = model.CommitReqModel.CommitmentBookedId;
                                var commitrequest = (from prj in context.tblRCTCommitmentRequest
                                                     where prj.RecruitmentRequestId == comitrquestid
                                                     select prj).FirstOrDefault();
                                if (commit != null && commitrequest != null)
                                {
                                    var typecode = commitrequest.TypeCode;
                                    var empno = commitrequest.EmpNumber;
                                    appointmenttype = commitrequest.AppointmentType;
                                    commitrequest.CommitmentNumber = commit.CommitmentNumber;
                                    commitrequest.CommitmentCrtdBy = logged_in_userId;
                                    commitrequest.CommitmentCrtdTS = DateTime.Now;
                                    commitrequest.AllocationHeadId = model.CommitReqModel.AllocationHeadId;
                                    var allocheadid = model.CommitReqModel.AllocationHeadId ?? 0;
                                    commitrequest.AllocationHead = Common.getAllocationHeadName(allocheadid);
                                    commitrequest.Remarks = model.CommitReqModel.Remarks;
                                    commitrequest.BookedAmount = model.CommitReqModel.AddCommitmentAmount;
                                    var reason = Common.getreason(model.CommitReqModel.Reason);
                                    commitrequest.ReasonforClose = reason;
                                    commitrequest.ReasonId = model.CommitReqModel.Reason;
                                    commitrequest.IsBookedFullRequestAmount = true;
                                    commitrequest.Status = "Commitment Booked";
                                    context.SaveChanges();

                                    decimal basicpay = 0;
                                    bool? isgovtagency = false;
                                    bool transactionCommit_f = false;
                                    int? appointtyp = 0;

                                    if (typecode == "STE")
                                    {
                                        var STEquery = (from prj in context.tblRCTSTE
                                                        where prj.EmployeersID == empno && prj.IsActiveNow == true
                                                        orderby prj.STEID descending
                                                        select prj).FirstOrDefault();
                                        if (STEquery != null)
                                        {
                                            basicpay = STEquery.Salary ?? 0;
                                            isgovtagency = STEquery.isGovAgencyFund;
                                            appointtyp = STEquery.TypeofAppointment;
                                        }
                                    }
                                    else if (typecode == "CON")
                                    {
                                        var CONquery = (from prj in context.tblRCTConsultantAppointment
                                                        where prj.EmployeersID == empno && prj.IsActiveNow == true
                                                        orderby prj.ConsultantAppointmentId descending
                                                        select prj).FirstOrDefault();
                                        if (CONquery != null)
                                        {
                                            basicpay = CONquery.Salary ?? 0;
                                            appointtyp = CONquery.TypeofAppointment;
                                        }
                                    }
                                    else if (typecode == "OSG")
                                    {
                                        var OSGquery = (from prj in context.tblRCTOutsourcing
                                                        where prj.EmployeersID == empno && prj.IsActiveNow == true
                                                        orderby prj.OSGID descending
                                                        select prj).FirstOrDefault();
                                        if (OSGquery != null)
                                        {
                                            basicpay = OSGquery.Salary ?? 0;
                                            appointtyp = OSGquery.TypeofAppointment;
                                        }
                                    }

                                    #region log
                                    tblRCTCommitmentBookLog log = new tblRCTCommitmentBookLog();
                                    log.RecruitmentRequestId = model.CommitReqModel.CommitmentRequestId;
                                    log.CommitmentNumber = commit.CommitmentNumber;
                                    log.CommitmentCrtdBy = logged_in_userId;
                                    log.CommitmentCrtdTS = DateTime.Now;
                                    log.RequestedCommitmentAmount = commitrequest.RequestedCommitmentAmount;
                                    log.BookedAmount = commitrequest.BookedAmount;
                                    log.RequestType = commitrequest.RequestType;
                                    log.RefNumber = commitrequest.ReferenceNumber;
                                    context.tblRCTCommitmentBookLog.Add(log);
                                    context.SaveChanges();
                                    #endregion

                                    var orderquery = (from prj in context.tblOrder
                                                      where prj.OrderId == commitrequest.OrderId
                                                      select prj).FirstOrDefault();
                                    if (orderquery != null)
                                    {
                                        //if (commitrequest.AppointmentType == "Change of Project")
                                        //{
                                        //    orderquery.Status = "Awaiting Committee Approval";
                                        //    if (typecode == "CON")
                                        //        orderquery.Status = "Awaiting Verification";
                                        //}

                                        if (commitrequest.AppointmentType == "Amendment")
                                        {
                                            if (orderquery.AppointmentType == 2)
                                            {
                                                var empdetls = (from A in context.tblRCTSTE
                                                                where A.STEID == orderquery.AppointmentId
                                                                select A).FirstOrDefault();
                                                if (empdetls != null)
                                                {
                                                    ExecuteSPApplicationlog(empdetls.STEID, "STE", logged_in_userId, commitrequest.OrderId, context);
                                                    empdetls.AppointmentStartdate = orderquery.FromDate;
                                                    empdetls.AppointmentEnddate = orderquery.ToDate;
                                                    empdetls.UptdTs = DateTime.Now;
                                                    empdetls.UptdUser = logged_in_userId;
                                                    context.SaveChanges();
                                                }
                                            }
                                            else if (orderquery.AppointmentType == 1)
                                            {
                                                var empdetls = (from A in context.tblRCTConsultantAppointment
                                                                where A.ConsultantAppointmentId == orderquery.AppointmentId
                                                                select A).FirstOrDefault();
                                                if (empdetls != null)
                                                {
                                                    ExecuteSPApplicationlog(empdetls.ConsultantAppointmentId, "CON", logged_in_userId, commitrequest.OrderId, context);
                                                    empdetls.AppointmentStartdate = orderquery.FromDate;
                                                    empdetls.AppointmentEnddate = orderquery.ToDate;
                                                    empdetls.UptdTs = DateTime.Now;
                                                    empdetls.UptdUser = logged_in_userId;
                                                    context.SaveChanges();
                                                }
                                            }
                                            else if (orderquery.AppointmentType == 3)
                                            {
                                                var empdetls = (from A in context.tblRCTOutsourcing
                                                                where A.OSGID == orderquery.AppointmentId
                                                                select A).FirstOrDefault();
                                                if (empdetls != null)
                                                {
                                                    ExecuteSPApplicationlog(empdetls.OSGID, "OSG", logged_in_userId, commitrequest.OrderId, context);
                                                    empdetls.AppointmentStartdate = orderquery.FromDate;
                                                    empdetls.AppointmentEnddate = orderquery.ToDate;
                                                    empdetls.UptdTs = DateTime.Now;
                                                    empdetls.UptdUser = logged_in_userId;
                                                    context.SaveChanges();
                                                }
                                            }
                                            orderquery.Status = "Completed";
                                            orderquery.isUpdated = true;
                                        }
                                        else if (commitrequest.AppointmentType == "HRA")
                                        {
                                            orderquery.Status = "Completed";
                                        }
                                        else if (commitrequest.AppointmentType == "Enhancement")
                                        {
                                            if (orderquery.AppointmentType == 2)
                                            {
                                                var empdetls = (from A in context.tblRCTSTE
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                orderby A.STEID descending
                                                                select A).FirstOrDefault();
                                                if (orderquery.FromDate >= empdetls.AppointmentStartdate && orderquery.ToDate <= empdetls.AppointmentEnddate && orderquery.Basic > empdetls.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                    orderquery.Status = "Completed";
                                                else
                                                {
                                                    orderquery.Status = "Awaiting Committee Approval";
                                                    if (orderquery.isGovAgencyFund)
                                                        orderquery.Status = "Awaiting Verification";
                                                }
                                            }
                                            else if (orderquery.AppointmentType == 1)
                                            {
                                                var empdetls = (from A in context.tblRCTConsultantAppointment
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                orderby A.ConsultantAppointmentId descending
                                                                select A).FirstOrDefault();

                                                if (orderquery.FromDate >= empdetls.AppointmentStartdate && orderquery.ToDate <= empdetls.AppointmentEnddate && orderquery.Basic > empdetls.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                    orderquery.Status = "Completed";
                                                else
                                                    orderquery.Status = "Awaiting Verification";
                                            }
                                            else if (orderquery.AppointmentType == 3)
                                            {
                                                var empdetls = (from A in context.tblRCTOutsourcing
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                orderby A.OSGID descending
                                                                select A).FirstOrDefault();

                                                if (orderquery.FromDate >= empdetls.AppointmentStartdate && orderquery.ToDate <= empdetls.AppointmentEnddate && orderquery.Basic > empdetls.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                    orderquery.Status = "Completed";
                                                else
                                                    orderquery.Status = "Awaiting Committee Approval";
                                            }
                                        }
                                        else
                                        {
                                            if (commitrequest.AppointmentType == "Extension" && orderquery.Basic < basicpay && appointtyp != 4 && (isgovtagency == false || isgovtagency == null))
                                            {
                                                orderquery.Status = "Awaiting Committee Approval";
                                                if (typecode == "CON")
                                                    orderquery.Status = "Awaiting Verification";
                                            }
                                            else if (commitrequest.AppointmentType == "Extension" && typecode == "STE" && orderquery.Basic < basicpay && appointtyp == 4 && isgovtagency == true)
                                            {
                                                orderquery.Status = "Awaiting Verification";
                                            }
                                            else if (commitrequest.AppointmentType == "Extension" && orderquery.Basic >= basicpay)
                                            {
                                                orderquery.Status = "Completed";
                                            }
                                        }
                                        orderquery.UpdtTS = DateTime.Now;
                                        orderquery.UpdtUser = logged_in_userId;
                                        context.SaveChanges();
                                        transactionCommit_f = true;
                                        transaction.Commit();
                                        newstatus = orderquery.Status;
                                        if (orderquery.Status == "Completed")
                                        {
                                            Common.EmployeeHistoryLog(orderquery.AppointmentId ?? 0, typecode, orderquery.OrderId);
                                        }
                                        if (orderquery.Status == "Completed" && (commitrequest.AppointmentType == "HRA" || commitrequest.AppointmentType == "Enhancement" || commitrequest.AppointmentType == "Extension"))
                                        {
                                            ExecuteSPSalaryChangeComponent();
                                        }
                                        if (orderquery.Status == "Completed")
                                        {
                                            var queryOTH = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OrderId == commitrequest.OrderId && m.Status == "Open");
                                            if (queryOTH != null)
                                            {
                                                queryOTH.UpdtTs = DateTime.Now;
                                                queryOTH.UpdtUser = logged_in_userId;
                                                queryOTH.Status = "Completed";
                                                context.SaveChanges();
                                            }
                                        }

                                        if (orderquery.Status == "Awaiting Verification" && typecode == "CON")
                                        {
                                            PostOfferDetails(orderquery.AppointmentId ?? 0, typecode, "OfferLetter", logged_in_userId, orderquery.OrderId);
                                        }
                                        if (orderquery.Status == "Completed")
                                        {
                                            PostOfferDetails(orderquery.AppointmentId ?? 0, typecode, "Order", logged_in_userId, orderquery.OrderId);
                                        }

                                    }
                                    else if (commitrequest.AppointmentType == "OtherPayment" || commitrequest.AppointmentType == "OtherDeduction")
                                    {
                                        var refid = commitrequest.RefId;
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        if (othqry != null)
                                        {
                                            othqry.A.Status = "Completed";
                                            othqry.A.UpdtTs = DateTime.Now;
                                            othqry.A.UpdtUser = logged_in_userId;
                                            context.SaveChanges();
                                            transactionCommit_f = true;
                                            transaction.Commit();
                                        }
                                    }

                                    if (!transactionCommit_f)
                                        transaction.Commit();
                                    if (commitrequest.OrderId > 0)
                                        PostOrderStatusLog(commitrequest.OrderId ?? 0, "Awaiting Commitment Booking", newstatus, logged_in_userId);

                                    return 1;
                                }
                            }
                            return -1;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return -1;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return -1;
            }
        }

        public int UpdateCloseCommitDetails(STEViewModel model, int commitmentId, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            //New Draft Announcement
                            if (model.CommitReqModel.CommitmentRequestId > 0)
                            {
                                var commit = (from prj in context.tblCommitment
                                              where prj.CommitmentId == commitmentId
                                              select prj).FirstOrDefault();
                                var comitrquestid = model.CommitReqModel.CommitmentRequestId;
                                var commitbookedid = model.CommitReqModel.CommitmentBookedId;
                                var commitrequest = (from prj in context.tblRCTCommitmentRequest
                                                     where prj.RecruitmentRequestId == comitrquestid
                                                     select prj).FirstOrDefault();
                                if (commit != null && commitrequest != null)
                                {

                                    DateTime? fromdt = DateTime.Now;
                                    DateTime? todate = DateTime.Now;
                                    var typecode = commitrequest.TypeCode;
                                    var empno = commitrequest.EmpNumber;
                                    var refNo = commitrequest.ReferenceNumber;
                                    var transactionCommit_f = false;
                                    commitrequest.CommitmentNumber = commit.CommitmentNumber;
                                    commitrequest.CommitmentCrtdBy = logged_in_userId;
                                    commitrequest.CommitmentCrtdTS = DateTime.Now;
                                    commitrequest.AllocationHeadId = model.CommitReqModel.AllocationHeadId;
                                    var allocheadid = model.CommitReqModel.AllocationHeadId ?? 0;
                                    commitrequest.AllocationHead = Common.getAllocationHeadName(allocheadid);
                                    commitrequest.Remarks = model.CommitReqModel.Remarks;
                                    var reason = Common.getreason(model.CommitReqModel.Reason);
                                    commitrequest.ReasonforClose = reason;
                                    commitrequest.ReasonId = model.CommitReqModel.Reason;
                                    commitrequest.BookedAmount = model.CommitReqModel.AddCommitmentAmount;
                                    if (commit.Status == "Closed")
                                    {
                                        commitrequest.IsClosed_f = true;
                                    }
                                    if (commitrequest.AppointmentType.Contains("Change of Project"))
                                    {
                                        commitrequest.IsClosed_f = true;
                                    }
                                    if (commitrequest.AppointmentType.Contains("Relieving"))
                                    {
                                        commitrequest.IsClosed_f = true;
                                    }
                                    commitrequest.Updt_TS = DateTime.Now;
                                    commitrequest.Updt_UserId = logged_in_userId;
                                    commitrequest.Status = "Commitment Withdrawn";
                                    context.SaveChanges();

                                    #region log
                                    tblRCTCommitmentBookLog log = new tblRCTCommitmentBookLog();
                                    log.RecruitmentRequestId = model.CommitReqModel.CommitmentRequestId;
                                    log.CommitmentNumber = commit.CommitmentNumber;
                                    log.CommitmentCrtdBy = logged_in_userId;
                                    log.CommitmentCrtdTS = DateTime.Now;
                                    log.RequestedCommitmentAmount = commitrequest.RequestedCommitmentAmount;
                                    log.BookedAmount = commitrequest.BookedAmount;
                                    log.RequestType = commitrequest.RequestType;
                                    log.RefNumber = commitrequest.ReferenceNumber;
                                    context.tblRCTCommitmentBookLog.Add(log);
                                    context.SaveChanges();
                                    #endregion

                                    var ordernum = commitrequest.OrderNumber;
                                    var orderid = commitrequest.OrderId;
                                    var status = "";

                                    var orderquery = (from prj in context.tblOrder
                                                      where prj.OrderId == orderid
                                                      select prj).FirstOrDefault();
                                    if (orderquery != null)
                                    {
                                        fromdt = orderquery.FromDate;
                                        todate = orderquery.ToDate;
                                        orderquery.UpdtTS = DateTime.Now;
                                        orderquery.UpdtUser = logged_in_userId;
                                        if (commitrequest.AppointmentType == "Change of Project")
                                        {
                                            orderquery.Status = "Awaiting Committee Approval";
                                            if (typecode == "CON")
                                                orderquery.Status = "Awaiting Verification";
                                        }
                                        else if (commitrequest.AppointmentType.Contains("Relieving") || commitrequest.AppointmentType.Contains("Loss of pay") || commitrequest.AppointmentType.Contains("Stop payment") || commitrequest.AppointmentType == "Cancel")
                                        {

                                        }
                                        else if (commitrequest.AppointmentType == "HRA")
                                        {
                                            orderquery.Status = "Completed";
                                        }
                                        else if (commitrequest.AppointmentType == "Amendment")
                                        {

                                            if (orderquery.AppointmentType == 2)
                                            {
                                                var empdetls = (from A in context.tblRCTSTE
                                                                where A.STEID == orderquery.AppointmentId
                                                                select A).FirstOrDefault();
                                                if (empdetls != null)
                                                {
                                                    ExecuteSPApplicationlog(empdetls.STEID, "STE", logged_in_userId, commitrequest.OrderId, context);
                                                    empdetls.AppointmentStartdate = orderquery.FromDate;
                                                    empdetls.AppointmentEnddate = orderquery.ToDate;
                                                    empdetls.UptdUser = logged_in_userId;
                                                    empdetls.UptdTs = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                            else if (orderquery.AppointmentType == 1)
                                            {
                                                var empdetls = (from A in context.tblRCTConsultantAppointment
                                                                where A.ConsultantAppointmentId == orderquery.AppointmentId
                                                                select A).FirstOrDefault();
                                                if (empdetls != null)
                                                {
                                                    ExecuteSPApplicationlog(empdetls.ConsultantAppointmentId, "CON", logged_in_userId, commitrequest.OrderId, context);
                                                    empdetls.AppointmentStartdate = orderquery.FromDate;
                                                    empdetls.AppointmentEnddate = orderquery.ToDate;
                                                    empdetls.UptdUser = logged_in_userId;
                                                    empdetls.UptdTs = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                            else if (orderquery.AppointmentType == 3)
                                            {
                                                var empdetls = (from A in context.tblRCTOutsourcing
                                                                where A.OSGID == orderquery.AppointmentId
                                                                select A).FirstOrDefault();
                                                if (empdetls != null)
                                                {
                                                    ExecuteSPApplicationlog(empdetls.OSGID, "OSG", logged_in_userId, commitrequest.OrderId, context);
                                                    empdetls.AppointmentStartdate = orderquery.FromDate;
                                                    empdetls.AppointmentEnddate = orderquery.ToDate;
                                                    empdetls.UptdUser = logged_in_userId;
                                                    empdetls.UptdTs = DateTime.Now;
                                                    var salpredetQuery = (from s in context.tblRCTSalaryCalcDetails
                                                                          where s.ID == orderquery.AppointmentId && s.IsCurrentVersion == true
                                                                          select s).FirstOrDefault();
                                                    if (salpredetQuery != null)
                                                    {
                                                        salpredetQuery.IsCurrentVersion = false;
                                                    }
                                                    context.SaveChanges();
                                                    var saldetQuery = (from s in context.tblRCTSalaryCalcDetails
                                                                       where s.OrderId == commitrequest.OrderId
                                                                       select s).FirstOrDefault();
                                                    if (saldetQuery != null)
                                                    {
                                                        saldetQuery.IsCurrentVersion = true;
                                                    }

                                                    context.SaveChanges();
                                                }
                                            }
                                            orderquery.Status = "Completed";
                                            orderquery.isUpdated = true;
                                            context.SaveChanges();
                                        }
                                        else if (commitrequest.AppointmentType == "Enhancement")
                                        {
                                            var id = orderquery.AppointmentId;
                                            if (typecode == "STE")
                                            {
                                                var empdetls = (from A in context.tblRCTSTE
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                select new { A }).FirstOrDefault();

                                                if (empdetls != null && orderquery.FromDate >= empdetls.A.AppointmentStartdate && orderquery.ToDate <= empdetls.A.AppointmentEnddate && orderquery.Basic > empdetls.A.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                    orderquery.Status = "Completed";
                                                else
                                                    orderquery.Status = "Awaiting Committee Approval";
                                            }
                                            else if (typecode == "CON")
                                            {
                                                var empdetls = (from A in context.tblRCTConsultantAppointment
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                select new { A }).FirstOrDefault();
                                                if (empdetls != null && orderquery.FromDate >= empdetls.A.AppointmentStartdate && orderquery.ToDate <= empdetls.A.AppointmentEnddate && orderquery.Basic > empdetls.A.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                    orderquery.Status = "Completed";
                                                else
                                                    orderquery.Status = "Awaiting Verification";
                                            }
                                            else if (typecode == "OSG")
                                            {
                                                var empdetls = (from A in context.tblRCTOutsourcing
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                select new { A }).FirstOrDefault();
                                                if (empdetls != null && orderquery.FromDate >= empdetls.A.AppointmentStartdate && orderquery.ToDate <= empdetls.A.AppointmentEnddate && orderquery.Basic > empdetls.A.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                    orderquery.Status = "Completed";
                                                else
                                                    orderquery.Status = "Awaiting Committee Approval";
                                            }
                                        }
                                        else
                                        {
                                            orderquery.Status = "Completed";
                                        }
                                        status = orderquery.Status;
                                        context.SaveChanges();
                                        transactionCommit_f = true;
                                        transaction.Commit();

                                        if (orderquery.Status == "Completed")
                                        {
                                            var queryOTH = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OrderId == orderid && m.Status == "Open");
                                            if (queryOTH != null)
                                            {
                                                queryOTH.UpdtTs = DateTime.Now;
                                                queryOTH.UpdtUser = logged_in_userId;
                                                queryOTH.Status = "Completed";
                                                context.SaveChanges();
                                            }

                                            Common.EmployeeHistoryLog(orderquery.AppointmentId ?? 0, typecode, orderquery.OrderId);
                                        }

                                        if (orderquery.Status == "Completed" && (commitrequest.AppointmentType == "HRA" || commitrequest.AppointmentType == "Enhancement"))
                                        {
                                            ExecuteSPSalaryChangeComponent();
                                        }
                                        if (orderquery.Status == "Awaiting Verification" && typecode == "CON")
                                        {
                                            PostOfferDetails(orderquery.AppointmentId ?? 0, typecode, "OfferLetter", logged_in_userId, orderquery.OrderId);
                                        }
                                        if (orderquery.Status == "Completed" && (orderquery.OrderType == 2 || orderquery.OrderType == 4))
                                        {
                                            PostOfferDetails(orderquery.AppointmentId ?? 0, typecode, "Order", logged_in_userId, orderquery.OrderId);
                                        }
                                        if (commitrequest.AppointmentType == "HRA")
                                            RCTEmailContentService.SendMailForHRA(orderquery.OrderId, logged_in_userId);
                                    }
                                    else if (commitrequest.AppointmentType == "OtherPayment" || commitrequest.AppointmentType == "OtherDeduction")
                                    {
                                        var refid = commitrequest.RefId;
                                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                      where A.OTHPayDeductionId == refid
                                                      select new { A }).FirstOrDefault();
                                        if (othqry != null)
                                        {
                                            othqry.A.Status = "Completed";
                                            othqry.A.UpdtTs = DateTime.Now;
                                            othqry.A.UpdtUser = logged_in_userId;
                                            context.SaveChanges();
                                            transactionCommit_f = true;
                                            transaction.Commit();
                                        }
                                    }

                                    if (!transactionCommit_f)
                                        transaction.Commit();

                                    if (orderid > 0)
                                        PostOrderStatusLog(orderid ?? 0, "Awaiting Commitment Booking", status, logged_in_userId);

                                }
                            }
                            return 1;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return -1;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return -1;
            }
        }

        public int UpdateNewCommitDetails(STEViewModel model, int commitmentId, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var fromdate = "";
                            var todate = "";
                            if (model.CommitReqModel.CommitmentRequestId > 0)
                            {
                                var commit = (from prj in context.tblCommitment
                                              where prj.CommitmentId == commitmentId
                                              select prj).FirstOrDefault();
                                var comitrquestid = model.CommitReqModel.CommitmentRequestId;
                                var commitrequest = (from prj in context.tblRCTCommitmentRequest
                                                     where prj.RecruitmentRequestId == comitrquestid
                                                     select prj).FirstOrDefault();
                                var empno = commitrequest.EmpNumber;
                                var orderid = commitrequest.OrderId;
                                var status = "";
                                var empcommitquery = (from A in context.tblRCTCommitmentRequest
                                                      where A.EmpNumber == empno && (A.IsClosed_f == false || A.IsClosed_f == null)
                                                      && A.Status == "Commitment Booked"
                                                      orderby A.RecruitmentRequestId descending
                                                      select new { A }).FirstOrDefault();
                                if (empcommitquery != null && commitrequest != null && commit != null)
                                {
                                    var applno = commitrequest.ReferenceNumber;
                                    var typecode = commitrequest.TypeCode;
                                    //var empnum = commitrequest.EmpNumber;
                                    var empcommitnum = empcommitquery.A.CommitmentNumber;
                                    var transactionCommit_f = false;
                                    commitrequest.CommitmentNumber = commit.CommitmentNumber;
                                    commitrequest.CommitmentCrtdBy = logged_in_userId;
                                    commitrequest.CommitmentCrtdTS = DateTime.Now;
                                    commitrequest.AllocationHeadId = model.CommitReqModel.AllocationHeadId;
                                    var allocheadid = model.CommitReqModel.AllocationHeadId ?? 0;
                                    commitrequest.AllocationHead = Common.getAllocationHeadName(allocheadid);
                                    commitrequest.Remarks = model.CommitReqModel.Remarks;
                                    commitrequest.BookedAmount = (commitrequest.BookedAmount) ?? 0 + (model.CommitReqModel.CommitmentAmount);
                                    commitrequest.IsBookedFullRequestAmount = true;
                                    commitrequest.Status = "Commitment Booked";
                                    context.SaveChanges();

                                    #region log
                                    tblRCTCommitmentBookLog log = new tblRCTCommitmentBookLog();
                                    log.RecruitmentRequestId = model.CommitReqModel.CommitmentRequestId;
                                    log.CommitmentNumber = commit.CommitmentNumber;
                                    log.CommitmentCrtdBy = logged_in_userId;
                                    log.CommitmentCrtdTS = DateTime.Now;
                                    log.RequestedCommitmentAmount = commitrequest.RequestedCommitmentAmount;
                                    log.BookedAmount = commitrequest.BookedAmount;
                                    log.RefNumber = commitrequest.ReferenceNumber;
                                    context.tblRCTCommitmentBookLog.Add(log);
                                    context.SaveChanges();
                                    #endregion

                                    var orderquery = (from prj in context.tblOrder
                                                      where prj.OrderId == orderid
                                                      select prj).FirstOrDefault();
                                    if (orderquery != null)
                                    {
                                        orderquery.UpdtTS = DateTime.Now;
                                        orderquery.UpdtUser = logged_in_userId;
                                        if (commitrequest.AppointmentType == "Change of Project")
                                        {
                                            orderquery.Status = "Awaiting Committee Approval";
                                            if (typecode == "CON")
                                                orderquery.Status = "Awaiting Verification";
                                        }
                                        else if (commitrequest.AppointmentType == "Enhancement")
                                        {
                                            if (typecode == "STE")
                                            {
                                                var empdetls = (from A in context.tblRCTSTE
                                                                from C in context.tblCodeControl
                                                                where C.CodeValAbbr == A.ProfessionalType && C.CodeName == "RCTProfessional"
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                select new { A, C }).FirstOrDefault();

                                                if (orderquery.FromDate >= empdetls.A.AppointmentStartdate && orderquery.ToDate <= empdetls.A.AppointmentEnddate && orderquery.Basic > empdetls.A.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                {
                                                    orderquery.Status = "Completed";
                                                }
                                                else
                                                {
                                                    orderquery.Status = "Awaiting Committee Approval";
                                                    if (orderquery.isGovAgencyFund)
                                                        orderquery.Status = "Awaiting Verification";
                                                }
                                            }
                                            else if (typecode == "CON")
                                            {
                                                var empdetls = (from A in context.tblRCTConsultantAppointment
                                                                from C in context.tblCodeControl
                                                                where C.CodeValAbbr == A.ProfessionalType && C.CodeName == "RCTProfessional"
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                select new { A, C }).FirstOrDefault();

                                                if (orderquery.FromDate >= empdetls.A.AppointmentStartdate && orderquery.ToDate <= empdetls.A.AppointmentEnddate && orderquery.Basic > empdetls.A.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                {
                                                    orderquery.Status = "Completed";
                                                }
                                                else
                                                {
                                                    orderquery.Status = "Awaiting Verification";
                                                }
                                            }
                                            else if (typecode == "OSG")
                                            {
                                                var empdetls = (from A in context.tblRCTOutsourcing
                                                                from C in context.tblCodeControl
                                                                where C.CodeValAbbr == A.ProfessionalType && C.CodeName == "RCTProfessional"
                                                                where A.EmployeersID == empno && A.IsActiveNow == true
                                                                select new { A, C }).FirstOrDefault();

                                                if (orderquery.FromDate >= empdetls.A.AppointmentStartdate && orderquery.ToDate <= empdetls.A.AppointmentEnddate && orderquery.Basic > empdetls.A.Salary && orderquery.OldProjectId == orderquery.NewProjectId && orderquery.NewDesignation != null && orderquery.OldDesignation == orderquery.NewDesignation)
                                                {

                                                    orderquery.Status = "Completed";
                                                }
                                                else
                                                {
                                                    orderquery.Status = "Awaiting Committee Approval";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            orderquery.Status = "Completed";
                                        }
                                        status = orderquery.Status;
                                        context.SaveChanges();
                                        transactionCommit_f = true;
                                        transaction.Commit();
                                        fromdate = string.Format("{0:dd-MMMM-yyyy}", orderquery.FromDate);
                                        todate = string.Format("{0:dd-MMMM-yyyy}", orderquery.ToDate);

                                        if (orderquery.Status == "Completed")
                                        {
                                            Common.EmployeeHistoryLog(orderquery.AppointmentId ?? 0, typecode, orderquery.OrderId);
                                        }
                                        if (orderquery.Status == "Completed" && (commitrequest.AppointmentType == "Enhancement" || commitrequest.AppointmentType == "Extension"))
                                        {
                                            ExecuteSPSalaryChangeComponent();
                                        }
                                        if (orderquery.Status == "Completed")
                                        {
                                            var queryOTH = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OrderId == orderid && m.Status == "Open");
                                            if (queryOTH != null)
                                            {
                                                queryOTH.Status = "Completed";
                                                queryOTH.UpdtTs = DateTime.Now;
                                                queryOTH.UpdtUser = logged_in_userId;
                                                context.SaveChanges();
                                            }
                                        }

                                        if (orderquery.Status == "Awaiting Verification" && typecode == "CON")
                                        {
                                            PostOfferDetails(orderquery.AppointmentId ?? 0, typecode, "OfferLetter", logged_in_userId, orderquery.OrderId);
                                        }
                                        if (orderquery.Status == "Completed")
                                        {
                                            PostOfferDetails(orderquery.AppointmentId ?? 0, typecode, "Order", logged_in_userId, orderquery.OrderId);
                                        }
                                    }

                                    var withdrawreq = (from prj in context.tblRCTCommitmentRequest
                                                       where prj.ReferenceNumber == applno && prj.OrderId == orderid && (prj.AppointmentType == "Change of Project" || prj.AppointmentType == "Extension" || prj.AppointmentType == "Enhancement" || prj.AppointmentType == "Amendment")
                                                       && prj.RequestType == "Withdraw Commitment" && prj.Status != "InActive" && prj.Status != "Complete"
                                                       //orderby prj.RecruitmentRequestId descending
                                                       select prj).FirstOrDefault();
                                    if (withdrawreq != null)
                                    {
                                        var withdrawcommit = (from com in context.tblCommitment
                                                              where com.CommitmentNumber == empcommitnum
                                                              select com).FirstOrDefault();
                                        if (withdrawcommit != null)
                                        {
                                            var withdrawcomitrquestid = withdrawreq.RecruitmentRequestId;
                                            var withdrawcomitbookedid = empcommitquery.A.RecruitmentRequestId;
                                            CommitmentResultModel comitment = new CommitmentResultModel();
                                            comitment.LogTypeId = 3;
                                            comitment.ComitmentId = withdrawcommit.CommitmentId;
                                            comitment.strRemarks = "Change of Project Request from Recruitment.";
                                            comitment.AddCloseAmt = withdrawreq.RequestedCommitmentAmount ?? 0;
                                            comitment.ProjectId = model.ProjectId ?? 0;
                                            comitment.Reason = 1;
                                            comitment.AllHeadId = empcommitquery.A.AllocationHeadId ?? 0;
                                            //commit.selAllocationHead = model.CommitReqModel.AllocationHeadId ?? 0;
                                            comitment.Remarks = "Change of Project Request from Recruitment.";
                                            var result = AccountService.CloseThisCommitment(comitment, logged_in_userId);
                                            if (result == 1)
                                            {
                                                withdrawreq.CommitmentNumber = withdrawcommit.CommitmentNumber;
                                                withdrawreq.Updt_UserId = logged_in_userId;
                                                withdrawreq.Updt_TS = DateTime.Now;
                                                withdrawreq.AllocationHeadId = empcommitquery.A.AllocationHeadId;
                                                allocheadid = empcommitquery.A.AllocationHeadId ?? 0;
                                                withdrawreq.AllocationHead = Common.getAllocationHeadName(allocheadid);
                                                withdrawreq.Remarks = "Change of Project Request from Recruitment.";
                                                var reason = Common.getreason(1);
                                                withdrawreq.ReasonforClose = reason;
                                                withdrawreq.ReasonId = 1;
                                                withdrawreq.BookedAmount = withdrawreq.RequestedCommitmentAmount ?? 0;
                                                if (withdrawcommit.Status == "Closed")
                                                {
                                                    empcommitquery.A.IsClosed_f = true;
                                                }
                                                if (withdrawreq.AppointmentType.Contains("Change of Project") || withdrawreq.AppointmentType.Contains("Extension") || withdrawreq.AppointmentType.Contains("Amendment") || withdrawreq.AppointmentType.Contains("Relieving"))
                                                {
                                                    empcommitquery.A.IsClosed_f = true;
                                                }
                                                empcommitquery.A.Updt_TS = DateTime.Now;
                                                empcommitquery.A.Updt_UserId = logged_in_userId;
                                                withdrawreq.Status = "Commitment Withdrawn";
                                                context.SaveChanges();
                                                #region log
                                                tblRCTCommitmentBookLog withdrawlog = new tblRCTCommitmentBookLog();
                                                withdrawlog.RecruitmentRequestId = withdrawcomitrquestid;
                                                withdrawlog.CommitmentNumber = withdrawcommit.CommitmentNumber;
                                                withdrawlog.CommitmentCrtdBy = logged_in_userId;
                                                withdrawlog.CommitmentCrtdTS = DateTime.Now;
                                                withdrawlog.RequestedCommitmentAmount = withdrawreq.RequestedCommitmentAmount ?? 0;
                                                withdrawlog.BookedAmount = withdrawreq.RequestedCommitmentAmount ?? 0;
                                                withdrawlog.RefNumber = withdrawreq.ReferenceNumber;
                                                context.tblRCTCommitmentBookLog.Add(log);
                                                context.SaveChanges();
                                                #endregion
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (commitrequest.AppointmentType == "Extension")
                                        {
                                            empcommitquery.A.IsClosed_f = true;
                                            empcommitquery.A.Updt_TS = DateTime.Now;
                                            empcommitquery.A.Updt_UserId = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                        else if (commitrequest.AppointmentType == "Enhancement")
                                        {
                                            var currpjctid = commitrequest.ProjectId;
                                            var prevpjctid = empcommitquery.A.ProjectId;
                                            var empnum = commitrequest.EmpNumber;
                                            var prevrqt = (from prj in context.tblRCTCommitmentRequest
                                                           where prj.EmpNumber == empnum && prj.ProjectId == currpjctid
                                                           && prj.RecruitmentRequestId != commitrequest.RecruitmentRequestId && prj.Status == "Commitment Booked"
                                                           && (prj.IsClosed_f == false || prj.IsClosed_f == null)
                                                           select prj).FirstOrDefault();
                                            if (prevrqt != null)
                                            {
                                                empcommitquery.A.IsClosed_f = true;
                                                empcommitquery.A.Updt_TS = DateTime.Now;
                                                empcommitquery.A.Updt_UserId = logged_in_userId;
                                                context.SaveChanges();
                                            }
                                        }
                                    }

                                    if (!transactionCommit_f)
                                        transaction.Commit();

                                    if (orderid > 0)
                                        PostOrderStatusLog(orderid ?? 0, "Awaiting Commitment Booking", status, logged_in_userId);
                                    return 1;
                                }
                            }
                            return -1;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return -1;
                        }
                    }
                }
                return -1;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return -1;
            }
        }

        public int RejectCommitRequestDetails(STEViewModel model, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            //New Draft Announcement
                            var commitrequestid = model.CommitReqModel.CommitmentRequestId;
                            int mastid = 0;
                            int orderid = 0;
                            string apptype = string.Empty;
                            if (commitrequestid > 0)
                            {

                                var commitrequest = (from prj in context.tblRCTCommitmentRequest
                                                     where prj.RecruitmentRequestId == commitrequestid
                                                     select prj).FirstOrDefault();
                                var typecode = commitrequest.TypeCode;
                                var applno = commitrequest.ReferenceNumber;
                                var tomail = "";
                                var user = Common.GetUserFirstName(logged_in_userId);
                                if (model.CommitReqModel.Remarks != null)
                                {
                                    commitrequest.Remarks = model.CommitReqModel.Remarks + ". Reject Commitment request raised by " + user;
                                }
                                else
                                {
                                    commitrequest.Remarks = "Reject Commitment request raised by " + user;
                                }

                                commitrequest.Status = "Rejected";
                                context.SaveChanges();

                                #region log
                                tblRCTCommitmentBookLog log = new tblRCTCommitmentBookLog();
                                log.RecruitmentRequestId = commitrequest.RecruitmentRequestId;
                                log.CommitmentNumber = "NA";
                                log.CommitmentCrtdBy = logged_in_userId;
                                log.CommitmentCrtdTS = DateTime.Now;
                                log.RequestedCommitmentAmount = commitrequest.RequestedCommitmentAmount;
                                log.BookedAmount = 0;
                                log.RequestType = "Rejection of Commitment Booking Request";
                                log.RefNumber = commitrequest.ReferenceNumber;
                                context.tblRCTCommitmentBookLog.Add(log);
                                context.SaveChanges();
                                #endregion

                                if ((commitrequest.AppointmentType == "Short Term Engagement" && commitrequest.RequestType == "New Appointment") || (commitrequest.TypeCode == "STE" && commitrequest.AppointmentType == "Verification"))
                                {
                                    var empdetls = (from A in context.tblRCTSTE
                                                    where A.ApplicationNumber == applno
                                                    select A).FirstOrDefault();
                                    if (empdetls != null)
                                    {
                                        mastid = empdetls.STEID;
                                        apptype = "STE";
                                        empdetls.Status = "Open";
                                        empdetls.isCommitmentReject = true;
                                        empdetls.UptdTs = DateTime.Now;
                                        empdetls.UptdUser = logged_in_userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if ((commitrequest.AppointmentType == "Consultant Appointment" && commitrequest.RequestType == "New Appointment") || (commitrequest.TypeCode == "CON" && commitrequest.AppointmentType == "Verification"))
                                {
                                    var empdetls = (from A in context.tblRCTConsultantAppointment
                                                    where A.ApplicationNumber == applno
                                                    select A).FirstOrDefault();
                                    if (empdetls != null)
                                    {
                                        mastid = empdetls.ConsultantAppointmentId;
                                        empdetls.Status = "Open";
                                        apptype = "CON";
                                        empdetls.isCommitmentReject = true;
                                        empdetls.UptdTs = DateTime.Now;
                                        empdetls.UptdUser = logged_in_userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if ((commitrequest.AppointmentType == "Outsourcing" && commitrequest.RequestType == "New Appointment") || (commitrequest.TypeCode == "OSG" && commitrequest.AppointmentType == "Verification"))
                                {
                                    var empdetls = (from A in context.tblRCTOutsourcing
                                                    where A.ApplicationNumber == applno
                                                    select A).FirstOrDefault();
                                    if (empdetls != null)
                                    {
                                        mastid = empdetls.OSGID;
                                        empdetls.Status = "Open";
                                        apptype = "OSG";
                                        empdetls.isCommitmentReject = true;
                                        empdetls.UptdTs = DateTime.Now;
                                        empdetls.UptdUser = logged_in_userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if (commitrequest.AppointmentType == "Change of Project" || commitrequest.AppointmentType == "Enhancement" || commitrequest.AppointmentType == "Extension" || commitrequest.AppointmentType == "Relieving" || commitrequest.AppointmentType == "HRA")
                                {
                                    var ordernum = commitrequest.OrderNumber;
                                    orderid = commitrequest.OrderId ?? 0;
                                    var order = (from prj in context.tblOrder where prj.OrderId == orderid select prj).FirstOrDefault();
                                    if (order != null)
                                    {
                                        order.Status = "Open";
                                        order.isCommitmentReject = true;
                                        order.UpdtTS = DateTime.Now;
                                        order.UpdtUser = logged_in_userId;
                                        context.SaveChanges();
                                    }
                                }
                                else if (commitrequest.AppointmentType == "OtherPayment" || commitrequest.AppointmentType == "OtherDeduction")
                                {
                                    var refid = commitrequest.RefId;
                                    var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                  where A.OTHPayDeductionId == refid
                                                  select new { A }).FirstOrDefault();
                                    if (othqry != null)
                                    {
                                        othqry.A.Status = "Rejected";
                                        othqry.A.UpdtTs = DateTime.Now;
                                        othqry.A.UpdtUser = logged_in_userId;
                                        context.SaveChanges();
                                    }
                                }
                            }
                            transaction.Commit();

                            if (orderid > 0)
                                PostOrderStatusLog(orderid, "Awaiting Commitment Booking", "Open", logged_in_userId);
                            else if (apptype == "STE")
                                PostSTEStatusLog(mastid, "Awaiting Commitment Booking", "Open", logged_in_userId);
                            else if (apptype == "OSG")
                                PostOSGStatusLog(mastid, "Awaiting Commitment Booking", "Open", logged_in_userId);
                            else if (apptype == "CON")
                                PostCONStatusLog(mastid, "Awaiting Commitment Booking", "Open", logged_in_userId);
                            return 1;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return -1;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return -1;
            }
        }

        public STEViewModel GetRejectCommitRequestDetails(int CommitRequestID)
        {
            RecruitCommitRequestModel commitreqmodel = new RecruitCommitRequestModel();

            STEViewModel model = new STEViewModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();

            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (CommitRequestID > 0)
                    {
                        var QryRecruitCommitReq = (from A in context.tblRCTCommitmentRequest
                                                   where A.RecruitmentRequestId == CommitRequestID
                                                   && (A.IsBookedFullRequestAmount == false || A.IsBookedFullRequestAmount == null)
                                                   select new { A }).FirstOrDefault();

                        //var empno = QryRecruitCommitReq.A.EmpNumber;
                        //var empcommitquery = (from A in context.tblRCTCommitmentRequest
                        //                      where A.EmpNumber == empno && (A.IsClosed_f == false || A.IsClosed_f == null)
                        //                      select new { A }).FirstOrDefault();
                        //var Apltype = empcommitquery.A.TypeCode;                        
                        //var newempbookcommitid = empcommitquery.A.RecruitmentRequestId;
                        var refid = QryRecruitCommitReq.A.RefId;
                        var Apltype = QryRecruitCommitReq.A.TypeCode;
                        var Refno = QryRecruitCommitReq.A.ReferenceNumber;
                        var odrid = QryRecruitCommitReq.A.OrderId;
                        if (Apltype == "STE")
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          where A.ApplicationNumber == Refno
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.STEID;
                                model.EmployeeID = QrySTE.A.EmployeersID;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.STEID;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.EmployeeType = QrySTE.A.EmployeeCategory;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                // model.Comments = QrySTE.A.Comments;
                                // model.Note = QrySTE.A.Note;
                                model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTSTEPIJustificationDocs
                                                                  where c.STEID == STEID && c.Deleted_f != true
                                                                  orderby c.DocsID
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.DocsName,
                                                                      FileName = c.FileName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTSTEPIJustificationDocs
                                               where c.STEID == STEID && c.Deleted_f != true
                                               orderby c.DocsID descending
                                               group c by c.Description into grp
                                               select new { grp.Key }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].Key))
                                        {
                                            PICommands.Add(QryNote[i].Key);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTSTENotes
                                               where c.STEID == STEID
                                               orderby c.NotesID descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(CommitRequestID);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                //model.CommitReqModel.CommitmentBookedId = CommitRequestID;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = QryRecruitCommitReq.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = QryRecruitCommitReq.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if(QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                if (odrid > 0)
                                {
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.BasicPayAmount = orderqry.A.Basic;
                                    if ((model.CommitReqModel.TypeofAppointment == "Enhancement" || model.CommitReqModel.TypeofAppointment == "Change of Project" && orderqry.A.OldProjectId != orderqry.A.NewProjectId))
                                    {
                                        ProjectID = orderqry.A.NewProjectId ?? 0;
                                        model.ProjectId = ProjectID;
                                        model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                        model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    }
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment")
                                {
                                    var Othpayqry = (from A in context.tblRCTOTHPaymentDeduction
                                                     where A.OTHPayDeductionId == refid
                                                     select new { A }).FirstOrDefault();
                                    //model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", Othpayqry.A.FromDate);
                                    //model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", Othpayqry.A.ToDate);
                                }

                                //}
                            }
                        }
                        if (Apltype == "CON")
                        {
                            var QrySTE = (from A in context.tblRCTConsultantAppointment
                                          where A.ApplicationNumber == Refno
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.ConsultantAppointmentId;
                                model.EmployeeID = QrySTE.A.EmployeersID;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.ConsultantAppointmentId;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PermanentAddress;
                                //model.EmployeeType = Common.GetCodeControlnameCommon(QrySTE.A.EmployeeType ?? 0, "");
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                // model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                //model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerorCSIRStaff ?? 0;
                                //model.MsPhd = QrySTE.A.MsPhd ?? false;
                                //model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.Note = QrySTE.A.Note;
                                model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTCONPIJustificationDocument
                                                                  where c.ConsultantAppointmentId == STEID && c.Status != "InActive"
                                                                  orderby c.CONPIJustificationDocumentId
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.PIJustificationDocumentFile,
                                                                      FileName = c.PIJustificationDocumentName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTCONPIJustificationDocument
                                               where c.ConsultantAppointmentId == STEID
                                               orderby c.CONPIJustificationDocumentId descending
                                               group c by c.PIJustificationDescription into grp
                                               select new { grp.Key }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].Key))
                                        {
                                            PICommands.Add(QryNote[i].Key);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTCONNotes
                                               where c.ConsultantAppointmentId == STEID
                                               orderby c.CONNotesID descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(CommitRequestID);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                //model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = QryRecruitCommitReq.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = QryRecruitCommitReq.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                if (odrid > 0)
                                {
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.BasicPayAmount = orderqry.A.Basic;
                                    if ((model.CommitReqModel.TypeofAppointment == "Enhancement" || model.CommitReqModel.TypeofAppointment == "Change of Project" && orderqry.A.OldProjectId != orderqry.A.NewProjectId))
                                    {
                                        ProjectID = orderqry.A.NewProjectId ?? 0;
                                        model.ProjectId = ProjectID;
                                        model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                        model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                    }
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment")
                                {
                                    var Othpayqry = (from A in context.tblRCTOTHPaymentDeduction
                                                     where A.OTHPayDeductionId == refid
                                                     select new { A }).FirstOrDefault();
                                    //model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", Othpayqry.A.FromDate);
                                    //model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", Othpayqry.A.ToDate);
                                }
                                //}
                            }
                        }
                        if (Apltype == "OSG")
                        {
                            var QrySTE = (from A in context.tblRCTOutsourcing
                                          where A.ApplicationNumber == Refno
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.OSGID;
                                model.EmployeeID = QrySTE.A.EmployeersID;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.OSGID;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.EmployeeType = QrySTE.A.EmployeeCategory;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.Note = QrySTE.A.Note;
                                model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                                  where c.OSGID == STEID && c.Deleted_f != true
                                                                  orderby c.DocsID
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.DocsName,
                                                                      FileName = c.FileName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTOSGPIJustificationDoc
                                               where c.OSGID == STEID && c.Deleted_f != true
                                               orderby c.DocsID descending
                                               group c by c.Description into grp
                                               select new { grp.Key }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].Key))
                                        {
                                            PICommands.Add(QryNote[i].Key);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTOSGNotes
                                               where c.OSGNotesID == STEID
                                               orderby c.OSGId descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(CommitRequestID);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                //model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = QryRecruitCommitReq.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = QryRecruitCommitReq.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                if (odrid > 0)
                                {
                                    var orderqry = (from A in context.tblOrder
                                                    where A.OrderId == odrid
                                                    select new { A }).FirstOrDefault();
                                    if (orderqry != null)
                                    {
                                        model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                        model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                        model.CommitReqModel.BasicPayAmount = orderqry.A.Basic;
                                        if ((model.CommitReqModel.TypeofAppointment == "Enhancement" || model.CommitReqModel.TypeofAppointment == "Change of Project" && orderqry.A.OldProjectId != orderqry.A.NewProjectId))
                                        {
                                            ProjectID = orderqry.A.NewProjectId ?? 0;
                                            model.ProjectId = ProjectID;
                                            model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                            model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                        }
                                    }
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment")
                                {
                                    var Othpayqry = (from A in context.tblRCTOTHPaymentDeduction
                                                     where A.OTHPayDeductionId == refid
                                                     select new { A }).FirstOrDefault();
                                    //model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", Othpayqry.A.FromDate);
                                    //model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", Othpayqry.A.ToDate);
                                }
                                //}
                            }
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }

        public static string GetRejectCommitment(string RefNo, int OrderID = 0)
        {
            string Remarks = "";
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    if (OrderID == 0)
                    {
                        var QryRemarks = (from C in IOAScontext.tblRCTCommitmentRequest
                                          where C.ReferenceNumber == RefNo
                                          orderby C.RecruitmentRequestId descending
                                          select C).FirstOrDefault();
                        if (QryRemarks != null)
                        {
                            if (QryRemarks.Status == "Rejected")
                            {
                                Remarks = QryRemarks.Remarks;
                            }
                        }
                    }
                    else
                    {
                        var QryRemarks = (from C in IOAScontext.tblRCTCommitmentRequest
                                          where C.OrderId == OrderID
                                          orderby C.RecruitmentRequestId descending
                                          select C).FirstOrDefault();
                        if (QryRemarks != null)
                        {
                            if (QryRemarks.Status == "Rejected")
                            {
                                Remarks = QryRemarks.Remarks;
                            }
                        }
                    }
                }
                return Remarks;
            }
            catch (Exception ex)
            {
                return Remarks;
            }
        }

        #endregion

        #region OverallApplicationList

        public static ApplicationSearchListModel GetNoteToDeanList(ApplicationSearchListModel model, int page, int pageSize)
        {
            ApplicationSearchListModel appseamodel = new ApplicationSearchListModel();
            List<ApplicationListModel> list = new List<ApplicationListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var query = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                 orderby vw.ApplicationId descending
                                 where (vw.Status == "Note to Dean") && vw.ApplicationType == "New"
                                 && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                 && (vw.Category.Contains(model.Category) || model.Category == null)
                                 && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                 && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                 && (vw.Status.Contains(model.Status) || model.Status == null)
                                 && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                 select vw).Skip(skiprec).Take(pageSize).ToList();

                    appseamodel.TotalRecords = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                orderby vw.ApplicationId descending
                                                where (vw.Status == "Note to Dean") && vw.ApplicationType == "New"
                                                && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                                && (vw.Category.Contains(model.Category) || model.Category == null)
                                                && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                                && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                                && (vw.Status.Contains(model.Status) || model.Status == null)
                                                && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                                select vw).Count();
                    if (query.Count > 0)
                    {
                        int emailcount = 0;
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            if (query[i].Category == "CON")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTConsutantAppEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.ConsultantAppointmentId == appid).Count();
                            }
                            else if (query[i].Category == "STE")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTSTEEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.STEID == appid).Count();
                            }
                            list.Add(new ApplicationListModel()
                            {
                                SNo = sno + i,
                                ApplicationId = query[i].ApplicationId,
                                ApplicationNumber = query[i].ApplicationNo,
                                Category = query[i].Category,
                                CondidateName = query[i].CandidateName,
                                PIName = query[i].PIName,
                                Email = query[i].PIEmail,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount
                            });

                        }
                    }
                }
                appseamodel.ApplicationList = list;
                return appseamodel;
            }
            catch (Exception ex)
            {
                return appseamodel;
            }
        }

        public static ApplicationSearchListModel GetApplicationList(ApplicationSearchListModel model, int page, int pageSize)
        {
            ApplicationSearchListModel appseamodel = new ApplicationSearchListModel();
            List<ApplicationListModel> list = new List<ApplicationListModel>();
            //string []Statuslist= "Submit for approval","Awaiting commitment booking";

            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var query = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                 orderby vw.ApplicationId descending
                                 where (vw.Status != "Draft" && vw.Status != "Verification Completed") && vw.ApplicationType == "New"
                                 //(vw.Status == "Submit for approval" || vw.Status == "Awaiting commitment booking")
                                 && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                 && (vw.Category.Contains(model.Category) || model.Category == null)
                                 && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                 && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                 && (vw.Status.Contains(model.Status) || model.Status == null)
                                 && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                 select vw).Skip(skiprec).Take(pageSize).ToList();

                    appseamodel.TotalRecords = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                orderby vw.ApplicationId descending
                                                where (vw.Status != "Draft" && vw.Status != "Verification Completed") && vw.ApplicationType == "New"
                                                //(vw.Status == "Submit for approval" || vw.Status == "Awaiting commitment booking")
                                                && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                                && (vw.Category.Contains(model.Category) || model.Category == null)
                                                && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                                && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                                && (vw.Status.Contains(model.Status) || model.Status == null)
                                                && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                                select vw).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        int emailcount = 0;
                        for (int i = 0; i < query.Count; i++)
                        {
                            if (query[i].Category == "CON")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTConsutantAppEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.ConsultantAppointmentId == appid).Count();
                            }
                            else if (query[i].Category == "STE")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTSTEEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.STEID == appid).Count();
                            }
                            list.Add(new ApplicationListModel()
                            {
                                SNo = sno + i,
                                ApplicationId = query[i].ApplicationId,
                                ApplicationNumber = query[i].ApplicationNo,
                                Category = query[i].Category,
                                CondidateName = query[i].CandidateName,
                                PIName = query[i].PIName,
                                Email = query[i].PIEmail,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount
                            });

                        }
                    }
                }
                appseamodel.ApplicationList = list;
                return appseamodel;
            }
            catch (Exception ex)
            {
                return appseamodel;
            }
        }

        public static ProjectExtentionEnhmentSearchListModel GetExtandEnhment(ProjectExtentionEnhmentSearchListModel model, int page, int pageSize, DateFilterModel StrFrmDate, DateFilterModel StrtoDate, int RoleId)
        {
            ProjectExtentionEnhmentSearchListModel searenhext = new ProjectExtentionEnhmentSearchListModel();
            List<ProjectExtentionEnhmentListModel> list = new List<ProjectExtentionEnhmentListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                if (StrFrmDate.to != null)
                    StrFrmDate.to = StrFrmDate.to.Value.Date.AddDays(1).AddTicks(-2);
                if (StrtoDate.to != null)
                    StrtoDate.to = StrtoDate.to.Value.Date.AddDays(1).AddTicks(-2);

                var CategoryName = "";
                if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                    CategoryName = "STE";
                else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                    CategoryName = "OSG";
                else if (RoleId == 94 || RoleId == 93)
                    CategoryName = "CON";

                using (var context = new IOASDBEntities())
                {
                    var query = (from ord in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                 join ordin in context.tblOrder on ord.OrderId equals ordin.OrderId
                                 join prj in context.tblProject on ordin.NewProjectId equals prj.ProjectId
                                 join vw in context.vwFacultyStaffDetails on prj.PIName equals vw.UserId
                                 orderby ord.OrderId descending
                                 where ord.Status != "InActive" && ord.Status != "Cancel" && (ord.Category == CategoryName || CategoryName == "") && (ord.ApplicationType == "Extension" || ord.ApplicationType == "Enhancement" || ord.ApplicationType == "Amendment")
                                 && (ord.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                 && (ord.ApplicationType.Contains(model.ExtensionEnhCategory) || model.ExtensionEnhCategory == null)
                                 && (ord.Category.Contains(model.ApplicationCategory) || model.ApplicationCategory == null)
                                 && (prj.ProjectNumber.Contains(model.ProjectNumber) || model.ProjectNumber == null)
                                 && (ord.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                 && ((ordin.FromDate >= StrFrmDate.@from && ordin.FromDate <= StrFrmDate.to) || (StrFrmDate.@from == null && StrFrmDate.to == null))
                                 && ((ordin.ToDate >= StrtoDate.@from && ordin.FromDate <= StrtoDate.to) || (StrtoDate.@from == null && StrtoDate.to == null))
                                 && (ord.Status.Contains(model.Status) || model.Status == null)
                                  && (vw.DepartmentName.Contains(model.DepartmentName) || model.DepartmentName == null)
                                  && (ord.TypeofAppointment.Contains(model.SearchTypeofAppointmentName) || model.SearchTypeofAppointmentName == null)
                                 select new { ord.TypeofAppointment, ord.OrderId, ordin.FromDate, ordin.ToDate, ord.Status, ord.EmployeeNo, ord.Category, ord.CandidateName, ord.ApplicationId, ord.ApplicationType, prj.ProjectNumber, ordin.isCommitmentReject, vw.DepartmentName }).Skip(skiprec).Take(pageSize).ToList();

                    searenhext.TotalRecords = (from ord in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                               join ordin in context.tblOrder on ord.OrderId equals ordin.OrderId
                                               join prj in context.tblProject on ordin.NewProjectId equals prj.ProjectId
                                               join vw in context.vwFacultyStaffDetails on prj.PIName equals vw.UserId
                                               orderby ord.OrderId descending
                                               where ord.Status != "InActive" && ord.Status != "Cancel" && (ord.Category == CategoryName || CategoryName == "") && (ord.ApplicationType == "Extension" || ord.ApplicationType == "Enhancement" || ord.ApplicationType == "Amendment")
                                               && (ord.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                               && (ord.ApplicationType.Contains(model.ExtensionEnhCategory) || model.ExtensionEnhCategory == null)
                                               && (ord.Category.Contains(model.ApplicationCategory) || model.ApplicationCategory == null)
                                               && (prj.ProjectNumber.Contains(model.ProjectNumber) || model.ProjectNumber == null)
                                               && (ord.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                               && ((ordin.FromDate >= StrFrmDate.@from && ordin.FromDate <= StrFrmDate.to) || (StrFrmDate.@from == null && StrFrmDate.to == null))
                                               && ((ordin.ToDate >= StrtoDate.@from && ordin.FromDate <= StrtoDate.to) || (StrtoDate.@from == null && StrtoDate.to == null))
                                               && (ord.Status.Contains(model.Status) || model.Status == null)
                                                && (vw.DepartmentName.Contains(model.DepartmentName) || model.DepartmentName == null)
                                  && (ord.TypeofAppointment.Contains(model.SearchTypeofAppointmentName) || model.SearchTypeofAppointmentName == null)

                                               select new { ord.TypeofAppointment, ord.OrderId, ordin.FromDate, ordin.ToDate, ord.Status, ord.EmployeeNo, ord.Category, ord.CandidateName, ord.ApplicationId, ord.ApplicationType, prj.ProjectNumber, ordin.isCommitmentReject, vw.DepartmentName }).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            var SendOffer_f = false;
                            var OrderId = query[i].OrderId;
                            SendOffer_f = context.tblRCTOfferDetails.
                                  Where(x => x.OfferCategory == "OfferLetter" && x.OrderId == OrderId && x.isSend != true).Any();
                            list.Add(new ProjectExtentionEnhmentListModel()
                            {
                                SNo = sno + i,
                                OrderId = query[i].OrderId,
                                EmployeeNo = query[i].EmployeeNo,
                                ExtensionEnhCategory = query[i].ApplicationType,
                                EmployeeName = query[i].CandidateName,
                                ProjectNumber = query[i].ProjectNumber,
                                ApplicationId = query[i].ApplicationId ?? 0,
                                ApplicationCategory = query[i].Category,
                                StrFrmDate = String.Format("{0:s}", query[i].FromDate),
                                StrtoDate = String.Format("{0:s}", query[i].ToDate),
                                Status = query[i].Status,
                                isCommitmentRejection = query[i].isCommitmentReject,
                                EmployeeDept = query[i].DepartmentName,
                                TypeofAppointmentName = query[i].TypeofAppointment,
                                SendOffer_f = SendOffer_f
                            });
                        }
                    }
                }
                searenhext.ExtandEnhList = list;
                return searenhext;
            }
            catch (Exception ex)
            {
                return searenhext;
            }
        }

        public static ApplicationSearchListModel GetCancelApplicationList(ApplicationSearchListModel model, int page, int pageSize, int RoleId)
        {
            ApplicationSearchListModel appseamodel = new ApplicationSearchListModel();
            List<ApplicationListModel> list = new List<ApplicationListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                var CategoryName = "";
                if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                    CategoryName = "STE";
                else if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                    CategoryName = "OSG";
                else if (RoleId == 94 || RoleId == 93)
                    CategoryName = "CON";

                using (var context = new IOASDBEntities())
                {
                    var query = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                 orderby vw.ApplicationId descending
                                 where vw.Status == "Cancel"
                                 && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                 && (vw.Category.Contains(model.Category) || model.Category == null) && (vw.Category == CategoryName || CategoryName == "")
                                 && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                 && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                 && (vw.Status.Contains(model.Status) || model.Status == null)
                                 && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                 && (vw.ApplicationType.Contains(model.ApplicationType) || model.ApplicationType == null)
                                 && vw.isEmployee == true
                                 select vw).Skip(skiprec).Take(pageSize).ToList();

                    appseamodel.TotalRecords = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                orderby vw.ApplicationId descending
                                                where vw.Status == "Cancel"
                                                && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                                && (vw.Category.Contains(model.Category) || model.Category == null) && (vw.Category == CategoryName || CategoryName == "")
                                                && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                                && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                                && (vw.Status.Contains(model.Status) || model.Status == null)
                                                && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                                && (vw.ApplicationType.Contains(model.ApplicationType) || model.ApplicationType == null)
                                                && vw.isEmployee == true
                                                select vw).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        int emailcount = 0;
                        for (int i = 0; i < query.Count; i++)
                        {
                            if (query[i].Category == "CON")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTConsutantAppEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.ConsultantAppointmentId == appid).Count();
                            }
                            else if (query[i].Category == "STE")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTSTEEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.STEID == appid).Count();
                            }
                            list.Add(new ApplicationListModel()
                            {
                                SNo = sno + i,
                                OrderId = query[i].ApplicationId,
                                ApplicationId = query[i].ApplicationId,
                                ApplicationNumber = query[i].ApplicationNo,
                                ApplicationType = query[i].ApplicationType,
                                Category = query[i].Category,
                                CondidateName = query[i].CandidateName,
                                PIName = query[i].PIName,
                                Email = query[i].PIEmail,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount,
                                EmployeeNo = query[i].EmployeeNo
                            });

                        }
                    }
                }
                appseamodel.ApplicationList = list;
                return appseamodel;
            }
            catch (Exception ex)
            {
                return appseamodel;
            }
        }

        #endregion

        #region  Re-send Commitment and  Committee

        //Note to dean status approval or decline
        public bool DeanInitApproval(int id, string Category, bool isApproval, int UserID)
        {
            bool res = false;
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    if (Category == "CON")
                    {
                        var query = IOAScontext.tblRCTConsultantAppointment.FirstOrDefault(m => m.ConsultantAppointmentId == id);
                        res = true;
                    }
                    else if (Category == "STE")
                    {
                        var query = IOAScontext.tblRCTSTE.FirstOrDefault(m => m.STEID == id);
                        if (query != null)
                        {
                            query.Status = "Open";
                            query.UptdTs = DateTime.Now;
                            query.UptdUser = UserID;
                            IOAScontext.SaveChanges();
                            if (isApproval)
                            {
                                var Data = STEWFInit(id, UserID);
                                res = Data.Item1;
                            }
                            else
                                res = true;

                        }
                    }
                    else if (Category == "OSG")
                    {
                        var query = IOAScontext.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == id).ApplicationNumber;
                        res = true;
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        //Committe status approval or decline
        public bool SendForCommitteeApproval(int appid, string apptype, int? orderid, int loggedinUser, string Comments, HttpPostedFileBase attachement)
        {
            bool res = false;
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {

                    var Query = (from vw in IOAScontext.vw_RCTOverAllApplicationEntry
                                 where vw.ApplicationId == appid && vw.Category == apptype
                                 && vw.Status == "Committee Clarify"
                                 && (orderid == null || vw.OrderId == orderid)
                                 select new { vw.OrderId, vw.Category, vw.ApplicationId }).FirstOrDefault();
                    if (Query != null)
                    {
                        if (Query.OrderId > 0)
                        {
                            var query = IOAScontext.tblOrder.FirstOrDefault(m => m.OrderId == Query.OrderId && m.Status == "Committee Clarify");
                            if (query != null)
                            {
                                query.Status = "Awaiting Committee Approval";
                                query.UpdtTS = DateTime.Now;
                                query.UpdtUser = loggedinUser;
                                var querydetail = IOAScontext.tblOrderDetail.FirstOrDefault(m => m.OrderId == Query.OrderId);
                                if (querydetail != null)
                                    querydetail.Comments = Comments;
                                if (attachement != null)
                                {
                                    tblRCTOrderPIJustificationDocs doc = new tblRCTOrderPIJustificationDocs();
                                    string actName = System.IO.Path.GetFileName(attachement.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    //item.UploadFile("Requirement", docName);
                                    attachement.UploadFile("Requirement", docName);
                                    doc.OrderId = Query.OrderId;
                                    doc.FileName = actName;
                                    doc.DocsName = docName;
                                    doc.Description = Comments;
                                    doc.Crt_Ts = DateTime.Now;
                                    doc.CrtUser = loggedinUser;
                                    IOAScontext.tblRCTOrderPIJustificationDocs.Add(doc);
                                    IOAScontext.SaveChanges();
                                }
                                IOAScontext.SaveChanges();
                                PostOrderStatusLog(query.OrderId, "Committee Clarify", "Awaiting Committee Approval", loggedinUser);
                                return true;
                            }
                        }
                        else
                        {
                            if (Query.Category == "CON")
                            {
                                var query = IOAScontext.tblRCTConsultantAppointment.FirstOrDefault(m => m.ConsultantAppointmentId == Query.ApplicationId && m.Status == "Committee Clarify");
                                if (query != null)
                                {
                                    query.Status = "Awaiting Committee Approval";
                                    query.UptdTs = DateTime.Now;
                                    query.UptdUser = loggedinUser;
                                    query.Comments = Comments;
                                    if (attachement != null)
                                    {
                                        tblRCTCONPIJustificationDocument Docs = new tblRCTCONPIJustificationDocument();
                                        string actName = System.IO.Path.GetFileName(attachement.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //item.UploadFile("Requirement", docName);
                                        attachement.UploadFile("Requirement", docName);
                                        Docs.ConsultantAppointmentId = Query.ApplicationId;
                                        Docs.PIJustificationDocumentName = docName;
                                        Docs.PIJustificationDocumentFile = actName;
                                        Docs.PIJustificationDescription = Comments;
                                        Docs.CrtdTs = DateTime.Now;
                                        Docs.CrtdUser = loggedinUser;
                                        IOAScontext.tblRCTCONPIJustificationDocument.Add(Docs);
                                        IOAScontext.SaveChanges();
                                    }
                                    IOAScontext.SaveChanges();
                                    PostCONStatusLog(query.ConsultantAppointmentId, "Committee Clarify", "Awaiting Committee Approval", loggedinUser);
                                    return true;
                                }
                            }
                            else if (Query.Category == "STE")
                            {
                                var query = IOAScontext.tblRCTSTE.FirstOrDefault(m => m.STEID == Query.ApplicationId && m.Status == "Committee Clarify");
                                if (query != null)
                                {
                                    query.Status = "Awaiting Committee Approval";
                                    query.UptdTs = DateTime.Now;
                                    query.UptdUser = loggedinUser;
                                    query.Comments = Comments;
                                    if (attachement != null)
                                    {
                                        tblRCTSTEPIJustificationDocs Docs = new tblRCTSTEPIJustificationDocs();
                                        string actName = System.IO.Path.GetFileName(attachement.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //item.UploadFile("Requirement", docName);
                                        attachement.UploadFile("Requirement", docName);
                                        Docs.STEID = Query.ApplicationId;
                                        Docs.DocsName = docName;
                                        Docs.FileName = actName;
                                        Docs.Description = Comments;
                                        Docs.Crt_Ts = DateTime.Now;
                                        Docs.CrtUser = loggedinUser;
                                        IOAScontext.tblRCTSTEPIJustificationDocs.Add(Docs);
                                        IOAScontext.SaveChanges();
                                    }
                                    IOAScontext.SaveChanges();
                                    PostSTEStatusLog(query.STEID, "Committee Clarify", "Awaiting Committee Approval", loggedinUser);
                                    return true;
                                }
                            }
                            else if (Query.Category == "OSG")
                            {
                                var query = IOAScontext.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == Query.ApplicationId && m.Status == "Committee Clarify");
                                if (query != null)
                                {
                                    query.Status = "Awaiting Committee Approval";
                                    query.UptdTs = DateTime.Now;
                                    query.UptdUser = loggedinUser;
                                    query.Comments = Comments;
                                    if (attachement != null)
                                    {
                                        tblRCTOSGPIJustificationDoc Docs = new tblRCTOSGPIJustificationDoc();
                                        string actName = System.IO.Path.GetFileName(attachement.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //item.UploadFile("Requirement", docName);
                                        attachement.UploadFile("Requirement", docName);
                                        Docs.OSGID = Query.ApplicationId;
                                        Docs.DocsName = docName;
                                        Docs.FileName = actName;
                                        Docs.Description = Comments;
                                        Docs.Crt_Ts = DateTime.Now;
                                        Docs.CrtUser = loggedinUser;
                                        IOAScontext.tblRCTOSGPIJustificationDoc.Add(Docs);
                                        IOAScontext.SaveChanges();
                                    }
                                    IOAScontext.SaveChanges();
                                    PostOSGStatusLog(query.OSGID, "Committee Clarify", "Awaiting Committee Approval", loggedinUser);
                                    return true;
                                }
                            }
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        public bool SendForCommitmentBooking(int appid, string apptype, int? orderid, int loggedinUser, string Comments)
        {
            bool res = false;
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    if (orderid > 0)
                    {

                        var query = IOAScontext.tblOrder.FirstOrDefault(m => m.OrderId == orderid && m.Status == "Open" && (m.isGovAgencyFund == true || m.isCommitmentReject == true));
                        if (query != null)
                        {
                            if (query.Status == "Open" && query.isCommitmentReject == true)
                                query.isCommitmentReject = false;
                            query.Status = "Awaiting Commitment Booking";
                            query.UpdtUser = loggedinUser;
                            query.UpdtTS = DateTime.Now;
                            IOAScontext.SaveChanges();
                            var querydetail = IOAScontext.tblOrderDetail.FirstOrDefault(m => m.OrderId == orderid);
                            if (querydetail != null)
                                querydetail.Comments = Comments;
                            IOAScontext.SaveChanges();
                            var qryVw = (from vw in IOAScontext.vw_RCTOverAllApplicationEntry
                                         where vw.ApplicationId == query.AppointmentId
                                         && vw.AppointmentType == query.AppointmentType && vw.ApplicationType == "New"
                                         select new
                                         {
                                             vw.ApplicationNo,
                                             vw.ProjectId,
                                             vw.Category,
                                             vw.CandidateName,
                                             vw.PostRecommended,
                                             vw.EmployeersID
                                         }).FirstOrDefault();
                            if (qryVw != null)
                            {
                                if (query.OrderType == 1 || query.OrderType == 2 || query.OrderType == 3 || query.OrderType == 4 || query.OrderType == 5)
                                {
                                    tblRCTCommitmentRequest AddCommitment = new tblRCTCommitmentRequest();
                                    AddCommitment.ReferenceNumber = qryVw.ApplicationNo;
                                    AddCommitment.OrderNumber = query.OrderNo;
                                    AddCommitment.OrderId = orderid;
                                    if (query.OrderType == 1)
                                    {
                                        AddCommitment.AppointmentType = "Change of Project";
                                        AddCommitment.RequestType = "New Commitment";
                                        AddCommitment.RequestedCommitmentAmount = query.CommitmentAmmount;
                                    }
                                    else if (query.OrderType == 2)
                                    {
                                        AddCommitment.AppointmentType = "Enhancement";
                                        if (qryVw.ProjectId != query.NewProjectId)
                                            AddCommitment.RequestType = "New Commitment";
                                        else if (qryVw.ProjectId == query.NewProjectId && !querydetail.WithdrawCommitment)
                                            AddCommitment.RequestType = "Add Commitment";
                                        AddCommitment.RequestedCommitmentAmount = query.WithdrawAmmount;
                                    }
                                    else if (query.OrderType == 3)
                                    {
                                        AddCommitment.AppointmentType = "Extension";
                                        AddCommitment.RequestType = "Add Commitment";
                                        AddCommitment.RequestedCommitmentAmount = query.CommitmentAmmount;
                                    }
                                    else if (query.OrderType == 4)
                                    {
                                        AddCommitment.AppointmentType = "Amendment";
                                        AddCommitment.RequestType = "Add Commitment";
                                        AddCommitment.RequestedCommitmentAmount = query.CommitmentAmmount;
                                    }
                                    else if (query.OrderType == 5)
                                    {
                                        AddCommitment.AppointmentType = "HRA";
                                        AddCommitment.RequestType = "Add Commitment";
                                        AddCommitment.RequestedCommitmentAmount = query.CommitmentAmmount;
                                    }
                                    AddCommitment.TypeCode = qryVw.Category;
                                    AddCommitment.CandidateName = qryVw.CandidateName;
                                    AddCommitment.CandidateDesignation = qryVw.PostRecommended;
                                    AddCommitment.ProjectId = query.NewProjectId;
                                    AddCommitment.ProjectNumber = RequirementService.getProjectSummary(query.NewProjectId ?? 0).ProjectNumber;
                                    AddCommitment.TotalSalary = query.Basic;
                                    AddCommitment.Status = "Awaiting Commitment Booking";
                                    AddCommitment.EmpNumber = qryVw.EmployeersID;
                                    AddCommitment.EmpId = loggedinUser;
                                    AddCommitment.Crtd_TS = DateTime.Now;
                                    AddCommitment.Crtd_UserId = loggedinUser;
                                    IOAScontext.tblRCTCommitmentRequest.Add(AddCommitment);
                                    IOAScontext.SaveChanges();
                                    return true;
                                }
                            }
                            PostOrderStatusLog(query.OrderId, "Open", "Awaiting Commitment Booking", loggedinUser);
                        }
                    }
                    else
                    {
                        if (appid > 0 && apptype == "STE")
                        {
                            // Add flaq isGovAgencyFund
                            var query = IOAScontext.tblRCTSTE.FirstOrDefault(m => m.STEID == appid && m.Status == "Open" && (m.isGovAgencyFund == true || m.isCommitmentReject == true));
                            if (query != null)
                            {
                                if (query.Status == "Open" && query.isCommitmentReject == true)
                                    query.isCommitmentReject = false;
                                var PresentStatus = "";
                                var NewStatus = "";
                                PresentStatus = query.Status;
                                NewStatus = "Awaiting Commitment Booking";
                                query.Status = NewStatus;
                                query.UptdTs = DateTime.Now;
                                query.UptdUser = loggedinUser;
                                query.Comments = Comments;
                                IOAScontext.SaveChanges();

                                tblRCTCommitmentRequest Commitment = new tblRCTCommitmentRequest();
                                Commitment.ReferenceNumber = query.ApplicationNumber;
                                Commitment.AppointmentType = "Short Term Engagement";
                                Commitment.TypeCode = "STE";
                                Commitment.CandidateName = query.Name;
                                int designationID = query.DesignationId ?? 0;
                                var Designation = IOAScontext.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                Commitment.CandidateDesignation = Designation;
                                Commitment.ProjectId = query.ProjectId;
                                Commitment.ProjectNumber = RequirementService.getProjectSummary(query.ProjectId ?? 0).ProjectNumber;
                                Commitment.TotalSalary = query.Salary;
                                Commitment.RequestedCommitmentAmount = query.CommitmentAmount;
                                Commitment.Status = "Awaiting Commitment Booking";
                                Commitment.RequestType = "New Appointment";
                                Commitment.Crtd_TS = DateTime.Now;
                                Commitment.Crtd_UserId = loggedinUser;
                                IOAScontext.tblRCTCommitmentRequest.Add(Commitment);
                                IOAScontext.SaveChanges();
                                PostSTEStatusLog(query.STEID, "Open", "Awaiting Commitment Booking", loggedinUser);
                                return true;
                            }
                        }
                        else if (appid > 0 && apptype == "OSG")
                        {
                            var Qry = IOAScontext.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == appid && m.Status == "Open" && m.isCommitmentReject == true);
                            if (Qry != null)
                            {
                                Qry.isCommitmentReject = false;
                                Qry.Status = "Awaiting Commitment Booking";
                                Qry.UptdUser = loggedinUser;
                                Qry.UptdTs = DateTime.Now;
                                Qry.Comments = Comments;
                                IOAScontext.SaveChanges();
                                tblRCTCommitmentRequest Commitment = new tblRCTCommitmentRequest();
                                Commitment.ReferenceNumber = Qry.ApplicationNumber;
                                Commitment.AppointmentType = "Outsourcing";
                                Commitment.TypeCode = "OSG";
                                Commitment.CandidateName = Qry.Name;
                                int designationID = Qry.DesignationId ?? 0;
                                var Designation = IOAScontext.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                Commitment.CandidateDesignation = Designation;
                                Commitment.ProjectId = Qry.ProjectId;
                                Commitment.ProjectNumber = RequirementService.getProjectSummary(Qry.ProjectId ?? 0).ProjectNumber;
                                Commitment.TotalSalary = Qry.Salary;
                                Commitment.RequestedCommitmentAmount = Qry.CommitmentAmount;
                                Commitment.Status = "Awaiting Commitment Booking";
                                Commitment.RequestType = "New Appointment";
                                Commitment.EmpNumber = Qry.EmployeersID;
                                Commitment.Crtd_TS = DateTime.Now;
                                Commitment.Crtd_UserId = loggedinUser;
                                IOAScontext.tblRCTCommitmentRequest.Add(Commitment);
                                IOAScontext.SaveChanges();
                                PostOSGStatusLog(Qry.OSGID, "Open", "Awaiting Commitment Booking", loggedinUser);
                                return true;
                            }
                        }
                        else if (appid > 0 && apptype == "CON")
                        {
                            var Qry = IOAScontext.tblRCTConsultantAppointment.FirstOrDefault(m => m.ConsultantAppointmentId == appid && m.Status == "Open" && m.isCommitmentReject == true);
                            if (Qry != null)
                            {
                                Qry.isCommitmentReject = false;
                                Qry.Status = "Awaiting commitment booking";
                                Qry.UptdUser = loggedinUser;
                                Qry.UptdTs = DateTime.Now;
                                Qry.Comments = Comments;
                                IOAScontext.SaveChanges();
                                tblRCTCommitmentRequest Commitment = new tblRCTCommitmentRequest();
                                Commitment.ReferenceNumber = Qry.ApplicationNumber;
                                Commitment.AppointmentType = "Consultant Appointment";
                                Commitment.TypeCode = "CON";
                                Commitment.CandidateName = Qry.Name;
                                int designationID = Qry.DesignationId ?? 0;
                                var Designation = IOAScontext.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                Commitment.CandidateDesignation = Designation;
                                Commitment.ProjectId = Qry.ProjectId;
                                Commitment.ProjectNumber = RequirementService.getProjectSummary(Qry.ProjectId ?? 0).ProjectNumber;
                                Commitment.TotalSalary = Qry.Salary;
                                Commitment.RequestedCommitmentAmount = Qry.CommitmentAmount;
                                Commitment.Status = "Awaiting Commitment Booking";
                                Commitment.RequestType = "New Appointment";
                                IOAScontext.tblRCTCommitmentRequest.Add(Commitment);
                                IOAScontext.SaveChanges();
                                PostCONStatusLog(Qry.ConsultantAppointmentId, "Open", "Awaiting Commitment Booking", loggedinUser);
                                return true;
                            }
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        #endregion

        #region Validations

        public int getEditOrderId(int appid, string apptype, int ordertype)
        {
            try
            {
                int appTypeId = getAppointmentType(apptype);
                using (var context = new IOASDBEntities())
                {
                    var query = (from O in context.tblOrder
                                 where (O.Status == "Open" || O.Status == "Note to PI" || O.Status == "Initiated")
                                 && O.AppointmentType == appTypeId && O.AppointmentId == appid && O.OrderType == ordertype
                                 orderby O.OrderId descending
                                 select O).FirstOrDefault();
                    if (query != null)
                    {
                        if ((query.Status == "Initiated" && query.Is_Clarify) || query.Status == "Open" || query.Status == "Note to PI")
                            return query.OrderId;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return 0;
            }
        }

        public bool IsEmployee(int appid, string apptype)
        {
            try
            {
                bool res = false;
                using (var context = new IOASDBEntities())
                {
                    if (appid > 0 && !string.IsNullOrEmpty(apptype))
                    {
                        if (context.vw_RCTOverAllApplicationEntry.Any(m => m.ApplicationId == appid && m.Category == apptype && m.ApplicationType == "New" && m.isEmployee == true))
                            return true;
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        public static Tuple<bool, string> validPreOrder(int appid, string apptype, int ordertype, int? orderid = null)
        {
            try
            {
                var errMsg = string.Empty;
                int appointmenttype = getAppointmentType(apptype);
                int[] checkorders = { 1, 2, 3, 4, 5, 6, 9, 10, 7, 8 };
                using (var context = new IOASDBEntities())
                {
                    if (appid > 0 && !string.IsNullOrEmpty(apptype))
                    {
                        string[] noexpstatus = new string[] { "Rejected", "Canceled", "Cancel" };
                        var query = (from O in context.tblOrder
                                     from M in context.tblOrderMaster
                                     where O.OrderType == M.CodeID && !noexpstatus.Contains(O.Status)
                                     && O.AppointmentType == appointmenttype && O.AppointmentId == appid
                                     && checkorders.Contains(O.OrderType ?? 0)
                                     orderby O.OrderId descending
                                     select new
                                     {
                                         O.OrderType,
                                         O.Status,
                                         O.OrderNo,
                                         O.OrderId,
                                         OrderTypeStr = M.CodeDescription,
                                         O.isCommitmentReject,
                                         O.isUpdated
                                     }).FirstOrDefault();
                        if (query != null)
                        {
                            if (ordertype != 7 && ordertype != 8 && query.isCommitmentReject == false && query.OrderType == ordertype && query.OrderId == orderid && (query.Status == "Open" || query.Status == "PI Initiated" || query.Status == "Note to PI"))
                            {
                                return Tuple.Create(false, "");
                            }
                            if ((ordertype == 7 || ordertype == 8) && query.OrderId == orderid && (query.Status == "Approved" || query.Status == "PI Initiated"))
                            {
                                return Tuple.Create(false, "");
                            }
                            if (query.Status != "Completed")
                            {
                                errMsg = "Previous request (" + query.OrderNo + ") is yet to be completed.";
                                return Tuple.Create(true, errMsg);
                            }
                            if (query.Status == "Completed" && query.isUpdated != true)
                            {
                                errMsg = "Previous " + query.OrderTypeStr.ToLower() + " (" + query.OrderNo + ") is not started";
                                return Tuple.Create(true, errMsg);
                            }
                        }
                    }
                }
                return Tuple.Create(false, "");
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(true, "Please contact administrator");
            }
        }

        public static bool checkIsHaveExperience(int appid, string category)
        {
            try
            {
                bool res = false;
                using (var context = new IOASDBEntities())
                {
                    if (appid > 0 && !string.IsNullOrEmpty(category))
                    {
                        decimal experience = 0;
                        string oldemployee = string.Empty;
                        int appTypeid = getAppointmentType(category);
                        int[] CourseId = new int[] { 0 };
                        if (category == "STE")
                        {
                            oldemployee = context.tblRCTSTE.Where(x => x.STEID == appid && x.EmployeeCategory == "Old Employee").Select(x => x.OldNumber).FirstOrDefault();
                            CourseId = context.tblRCTSTEEducationDetail.Where(x => x.STEID == appid && x.isCurrentVersion == true).Select(x => x.DisciplineID ?? 0).ToArray();
                        }
                        else if (category == "CON")
                        {
                            oldemployee = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == appid && x.EmployeeCategory == "Old Employee").Select(x => x.OldNumber).FirstOrDefault();
                            CourseId = context.tblRCTConsultantEducationDetail.Where(x => x.ConsultantAppointmentId == appid && x.Status == "Active").Select(x => x.DisciplineId ?? 0).ToArray();
                        }
                        else if (category == "OSG")
                        {
                            oldemployee = context.tblRCTOutsourcing.Where(x => x.OSGID == appid && x.EmployeeCategory == "Old Employee").Select(x => x.OldNumber).FirstOrDefault();
                            CourseId = context.tblRCTOSGEducationDetail.Where(x => x.OSGId == appid && x.isCurrentVersion == true).Select(x => x.DisciplineId ?? 0).ToArray();
                        }

                        int days = 0;
                        if (category == "STE")
                            context.tblRCTSTEExperienceDetail.Where(x => x.STEID == appid && x.isCurrentVersion == true).Select(x => new { x.FromYear, x.ToYear })
                                .ToList().ForEach(m =>
                                {
                                    days = days + (m.ToYear.Value.Subtract(m.FromYear.Value).Days + 1);
                                });
                        else if (category == "CON")
                            context.tblRCTConsultantExperienceDetail.Where(x => x.ConsultantAppointmentId == appid && x.Status == "Active").Select(x => new { x.FromYear, x.ToYear })
                                .ToList().ForEach(m =>
                                {
                                    days = days + (m.ToYear.Value.Subtract(m.FromYear.Value).Days + 1);
                                });
                        else if (category == "OSG")
                            context.tblRCTOSGExperienceDetail.Where(x => x.OSGId == appid && x.isCurrentVersion == true).Select(x => new { x.FromYear, x.ToYear })
                                .ToList().ForEach(m =>
                                {
                                    days = days + (m.ToYear.Value.Subtract(m.FromYear.Value).Days + 1);
                                });
                        experience = days / 365;
                        if (!string.IsNullOrEmpty(oldemployee))
                            experience += getIITExperience(oldemployee);

                        var query = (from m in context.vw_RCTOverAllApplicationEntry
                                     from d in context.tblRCTDesignation
                                     from dt in context.tblRCTDesignationDetail
                                     from q in context.tblRCTQualificationDetail
                                     from c in context.tblCodeControl
                                     where m.DesignationId == d.DesignationId && d.DesignationId == dt.DesignationId
                                     && dt.DesignationId == q.Designationid && dt.DesignationDetailId == q.DesignationDetailId && dt.IsCurrentVersion == true
                                     && CourseId.Contains(q.CourseId ?? 0)
                                     && m.ApplicationId == appid && m.Category == category && m.ApplicationType == "New"
                                     && c.CodeName == "RelevantExperienceType" && c.CodeValAbbr == dt.RelevantExperience
                                     && (d.SalaryLevel == 0 || d.SalaryLevel == null)
                                     //&& c.CodeValAbbr != 1
                                     select new { c.CodeValDetail }).ToList();
                        query = (from m in context.vw_RCTOverAllApplicationEntry
                                 from d in context.tblRCTDesignation
                                 from dt in context.tblRCTSalaryLevelDetail
                                 from q in context.tblRCTSalaryLevelCourses
                                 from c in context.tblCodeControl
                                 where m.DesignationId == d.DesignationId && d.SalaryLevel == dt.SalaryLevelId
                                 && dt.SalaryLevelDetailId == q.SalaryLevelDetailId && dt.IsCurrentVersion == true
                                 && CourseId.Contains(q.CourseId ?? 0)
                                 && m.ApplicationId == appid && m.Category == category && m.ApplicationType == "New"
                                 && c.CodeName == "RelevantExperienceType" && c.CodeValAbbr == dt.RelevantExperience
                                 && d.SalaryLevel != 0
                                 //&& c.CodeValAbbr != 1
                                 select new { c.CodeValDetail }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                decimal min = 0, max = 0;
                                min = Convert.ToDecimal(query[i].CodeValDetail.Split('-')[0].Trim());
                                max = Convert.ToDecimal(query[i].CodeValDetail.Split('-')[1].Trim());
                                if (min <= experience && (max >= experience || max <= experience))
                                    return false;
                            }
                            if (category == "STE")
                            {
                                if (context.tblRCTSTEDeviationCheckDetail.Any(m => m.STEID == appid && m.DeviationCheckListId == 38))
                                    return false;
                                else
                                    return true;
                            }
                            else if (category == "CON")
                            {
                                if (context.tblRCTConsultantDevCheckDetail.Any(m => m.ConsultantAppointmentId == appid && m.DeviationCheckListId == 38))
                                    return false;
                                else
                                    return true;
                            }
                            else if (category == "OSG")
                            {
                                if (context.tblRCTOSGDeviationCheckDetail.Any(m => m.OSGID == appid && m.DeviationCheckListId == 38))
                                    return false;
                                else
                                    return true;
                            }
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                return true;
            }
        }

        #endregion

        #region Outsourcing

        public STEModel GetEditOSG(int OSGID)
        {
            STEModel model = new STEModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OSGID > 0)
                    {
                        var QryOSG = (from A in context.tblRCTOutsourcing
                                      where A.OSGID == OSGID
                                      select new { A }).FirstOrDefault();
                        var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                          where A.ID == OSGID && A.IsCurrentVersion == true && A.Status == "Active"
                                          select A).FirstOrDefault();
                        model.Status = QryOSG.A.Status;
                        model.bccSaved = QryOSG.A.bcc != null ? true : false;
                        model.STEId = QryOSG.A.OSGID;
                        model.ApplicationNo = QryOSG.A.ApplicationNumber;
                        model.TypeofappointmentId = QryOSG.A.TypeofAppointment;
                        model.EmployeeType = QryOSG.A.EmployeeCategory;
                        model.VendorName = QryOSG.A.VendorName;
                        model.VendorCode = QryOSG.A.VendorCode;
                        model.VendorId = QryOSG.A.VendorId;
                        model.NIDNumber = QryOSG.A.NIDNumber;
                        model.OldEmployeeNumber = QryOSG.A.OldNumber;
                        if (!string.IsNullOrEmpty(model.OldEmployeeNumber))
                            model.OldEmpId = model.OldEmployeeNumber;
                        model.PersonImagePath = QryOSG.A.CandidateImage;
                        if (QryOSG.A.ResumeFile != null)
                            model.ResumeFileName = QryOSG.A.ResumeFile.Substring((QryOSG.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = QryOSG.A.ResumeFile;
                        model.ProfessionalId = QryOSG.A.ProfessionalType;
                        model.Name = QryOSG.A.Name;
                        model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                        if (!string.IsNullOrEmpty(QryOSG.A.AadhaarNumber))
                            model.aadharnumber = long.Parse(QryOSG.A.AadhaarNumber == "" ? "0" : QryOSG.A.AadhaarNumber);
                        else
                            model.aadharnumber = null;
                        if (QryOSG.A.AadhaarNumber == "")
                            model.aadharnumber = null;
                        model.PAN = QryOSG.A.PANNo;
                        model.DateofBirth = QryOSG.A.DateofBirth;
                        model.strDateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                        model.Age = QryOSG.A.Age ?? 0;
                        model.Sex = QryOSG.A.Sex ?? 0;
                        model.Caste = QryOSG.A.Caste ?? 0;
                        model.ContactNumber = QryOSG.A.ContactNumber;
                        model.AlternativeContactNumber = QryOSG.A.AlternativeContactNumber;
                        model.EmergencyContactNo = QryOSG.A.EmergencyContact;
                        model.Email = QryOSG.A.Email;
                        model.PresentAddress = QryOSG.A.PresentAddress;
                        model.isSameasPermanentAddress = QryOSG.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = QryOSG.A.PermanentAddress;
                        model.BloodGroup = QryOSG.A.Bloodgroup ?? 0;
                        model.BloodGroupRH = QryOSG.A.BloodgroupRH ?? 0;
                        model.StaffCategory = QryOSG.A.StaffCategory; if (!string.IsNullOrEmpty(model.OldEmployeeNumber))
                            model.OldEmpId = model.OldEmployeeNumber;
                        model.PersonImagePath = QryOSG.A.CandidateImage;
                        if (QryOSG.A.ResumeFile != null)
                            model.ResumeFileName = QryOSG.A.ResumeFile.Substring((QryOSG.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = QryOSG.A.ResumeFile;
                        model.ProfessionalId = QryOSG.A.ProfessionalType;
                        model.Name = QryOSG.A.Name;
                        model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                        if (!string.IsNullOrEmpty(QryOSG.A.AadhaarNumber))
                            model.aadharnumber = long.Parse(QryOSG.A.AadhaarNumber == "" ? "0" : QryOSG.A.AadhaarNumber);
                        else
                            model.aadharnumber = null;
                        if (QryOSG.A.AadhaarNumber == "")
                            model.aadharnumber = null;
                        model.PAN = QryOSG.A.PANNo;
                        model.DateofBirth = QryOSG.A.DateofBirth;
                        model.strDateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                        model.Age = QryOSG.A.Age ?? 0;
                        model.Sex = QryOSG.A.Sex ?? 0;
                        model.Caste = QryOSG.A.Caste ?? 0;
                        model.ContactNumber = QryOSG.A.ContactNumber;
                        model.AlternativeContactNumber = QryOSG.A.AlternativeContactNumber;
                        model.EmergencyContactNo = QryOSG.A.EmergencyContact;
                        model.Email = QryOSG.A.Email;
                        model.PresentAddress = QryOSG.A.PresentAddress;
                        model.isSameasPermanentAddress = QryOSG.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = QryOSG.A.PermanentAddress;
                        model.BloodGroup = QryOSG.A.Bloodgroup ?? 0;
                        model.BloodGroupRH = QryOSG.A.BloodgroupRH ?? 0;
                        model.StaffCategory = QryOSG.A.StaffCategory;
                        model.Nationality = QryOSG.A.Nationality ?? 0;
                        model.PhysicallyChallenged = QryOSG.A.PhysicallyChallenged == "No" ? 2 : QryOSG.A.PhysicallyChallenged == "Yes" ? 1 : 0;
                        model.Relationship = QryOSG.A.Relationship;
                        model.RelationshipName = QryOSG.A.RelationshipDetails;
                        model.RelatedIITMadras = QryOSG.A.RelatedIIT;
                        model.ApplicationEntryDate = QryOSG.A.ApplicationEntryDate;
                        model.ApplicationReceiveDate = QryOSG.A.ApplicationReceiveDate;
                        model.ConsolidatedPay = QryOSG.A.ConsolidatedPay ?? false;
                        model.Fellowship = QryOSG.A.Fellowship ?? false;
                        model.IITMPensionerCSIRStaff = QryOSG.A.IITMPensionerOrCSIRStaff ?? 0;
                        model.PPONo = QryOSG.A.PPONo;
                        model.CSIRStaff = QryOSG.A.CSIRStaffPayMode ?? 0;
                        model.MsPhd = QryOSG.A.MsPhd ?? false;
                        model.MsPhdType = QryOSG.A.MsPhdType;
                        model.PhdDetail = QryOSG.A.PhdDetail;
                        model.ProjectId = QryOSG.A.ProjectId;
                        model.DesignationId = QryOSG.A.DesignationId;
                        model.Medical = QryOSG.A.Medical ?? 0;
                        model.Appointmentstartdate = QryOSG.A.AppointmentStartdate;
                        model.AppointmentEndDate = QryOSG.A.AppointmentEnddate;
                        model.MedicalAmmount = QryOSG.A.MedicalAmmount ?? 0;
                        model.Salary = QryOSG.A.Salary ?? 0;
                        model.HRA = QryOSG.A.HRA ?? 0;
                        model.isHRA = QryOSG.A.isHaveHRA ?? false;
                        model.CommitmentAmount = QryOSG.A.CommitmentAmount ?? 0;
                        model.SalaryPayHigh = QryOSG.A.SalaryPayHigh;
                        //model.PIJustificationFilePath = QrySTE.A.PIJustificationDocument1;
                        model.BankAccountNo = QryOSG.A.BankAccountNumber;
                        model.BankName = QryOSG.A.BankName;
                        model.IFSCCode = QryOSG.A.IFSCCode;
                        model.ProjectNumber = Common.GetProjectNameandNumber(QryOSG.A.ProjectId ?? 0);
                        model.isHaveGateScore = QryOSG.A.isHaveGateScore == true ? "Yes" : "No";
                        model.GateScore = QryOSG.A.GateScore ?? 0;
                        model.EmployeeWorkplace = QryOSG.A.EmployeeWorkplace;

                        model.StatutoryId = Qrysalcalc.StatutoryId;
                        model.RecommendedSalary = Qrysalcalc.RecommendSalary;
                        model.EmpSalutation = Qrysalcalc.Salutation;
                        model.EmpName = QryOSG.A.Name;
                        model.EmpDesig = Qrysalcalc.EmpDesignation;
                        model.EmpType = Qrysalcalc.EmpType;
                        model.PhysicalyHandicaped = Qrysalcalc.PhysicallyHandicapped;
                        model.EmpPFBasicWages = Qrysalcalc.PFBasicWages;
                        model.EmployeePF = Qrysalcalc.EmployeePF;
                        model.EmployeeESIC = Qrysalcalc.EmployeeESIC;
                        model.EmployeeProfessionalTax = Qrysalcalc.EmpProfessionalTax;
                        model.EmployeeTtlDeduct = Qrysalcalc.EmpTotalDeduction;
                        model.EmployeeNetSalary = Qrysalcalc.EmpNetSalary;
                        model.EmployerPF = Qrysalcalc.EmployerPF;
                        model.EmployerIns = Qrysalcalc.EmployerInsurance;
                        model.EmployerESIC = Qrysalcalc.EmployerESIC;
                        model.EmployerTtlContribute = Qrysalcalc.EmployerTotalContribution;
                        model.EmployeeCTC = Qrysalcalc.EmployerCTC;
                        model.AgencyFee = Qrysalcalc.EmployerAgencyFee;
                        model.SalaryGST = Qrysalcalc.EmployerGST;
                        model.CTCwithAgencyFee = Qrysalcalc.EmployerCTCWithAgencyFee;
                        model.TotalCTC = Qrysalcalc.TotalCostPerMonth;

                        model.EducationDetail = (from c in context.tblRCTOSGEducationDetail
                                                 from q in context.tblRCTQualificationList
                                                 where c.OSGId == OSGID && c.isCurrentVersion == true && c.QualificationId == q.QualificationId
                                                 orderby c.OSGEducationDetailId
                                                 select new STEEducationModel()
                                                 {
                                                     Education = q.Qualification,
                                                     EducationId = c.OSGEducationDetailId,
                                                     QualificationId = c.QualificationId,
                                                     DisciplineId = c.DisciplineId,
                                                     Institution = c.UniversityorInstitution,
                                                     YearofPassing = c.YearOfPassing,
                                                     Marks = c.Marks,
                                                     MarkType = c.MarkType,
                                                     DivisionClassObtained = c.DivisionClassObtained,
                                                     CertificatePath = c.DocumentFilePath,
                                                     CertificateName = c.FileName,
                                                     Remarks = c.Remarks,
                                                 }).ToList();
                        if (model.EducationDetail != null)
                        {
                            for (int i = 0; i < model.EducationDetail.Count; i++)
                            {
                                int EducationID = model.EducationDetail[i].QualificationId ?? 0;
                                int DisciplineID = model.EducationDetail[i].DisciplineId ?? 0;

                                var list = Common.GetCourseList(EducationID);
                                var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();
                                model.EducationDetail[i].DisiplineList = list;
                                model.EducationDetail[i].Discipline = Discipline;
                            }
                        }
                        model.EducationDetail = model.EducationDetail.Count > 0 ? model.EducationDetail : null;
                        //model.ExperienceDetail = (from c in context.tblRCTOSGExperienceDetail
                        //                          from d in context.tblCodeControl
                        //                          where c.OSGId == OSGID && c.isCurrentVersion == true && c.TypeId == d.CodeValAbbr && d.CodeName == "RCTExperienceType"
                        //                          orderby c.OSGExperienceDetailId
                        //                          select new STEExperienceModel()
                        //                          {
                        //                              ExperienceId = c.OSGExperienceDetailId,
                        //                              ExperienceTypeId = c.TypeId,
                        //                              ExperienceType = d.CodeValDetail,

                        //                              Organisation = c.Organisation,
                        //                              DesignationListId = c.DesignationId,
                        //                              DesignationautoComplete = c.Designation,
                        //                              FromDate = c.FromYear,
                        //                              ToDate = c.ToYear,
                        //                              SalaryDrawn = c.SalaryDrawn,
                        //                              ExperienceFilePath = c.DocumentFilePath,
                        //                              ExperienceFileName = c.FileName,
                        //                              Remarks = c.Remarks,
                        //                              strFromDate = string.Format("{0:dd-MMMM-yyyy}", c.FromYear),
                        //                              strToDate = string.Format("{0:dd-MMMM-yyyy}", c.ToYear)
                        //                          }).ToList();
                        model.ExperienceDetail = (from c in context.tblRCTOSGExperienceDetail
                                                  join d in context.tblCodeControl on c.TypeId equals d.CodeValAbbr into lft
                                                  from j in lft.DefaultIfEmpty()
                                                  where c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTExperienceType")
                                                  && c.OSGId == OSGID
                                                  orderby c.OSGExperienceDetailId
                                                  select new
                                                  {
                                                      c.OSGExperienceDetailId,
                                                      c.TypeId,
                                                      j.CodeValDetail,
                                                      c.Organisation,
                                                      c.DesignationId,
                                                      c.Designation,
                                                      c.FromYear,
                                                      c.ToYear,
                                                      c.SalaryDrawn,
                                                      c.DocumentFilePath,
                                                      c.FileName,
                                                      c.Remarks,
                                                  }).AsEnumerable().Select((x) => new STEExperienceModel()
                                                  {
                                                      ExperienceId = x.OSGExperienceDetailId,
                                                      ExperienceTypeId = x.TypeId,
                                                      ExperienceType = x.CodeValDetail,
                                                      Organisation = x.Organisation,
                                                      DesignationListId = x.DesignationId,
                                                      DesignationautoComplete = x.Designation,
                                                      FromDate = x.FromYear,
                                                      ToDate = x.ToYear,
                                                      SalaryDrawn = x.SalaryDrawn,
                                                      ExperienceFilePath = x.DocumentFilePath,
                                                      ExperienceFileName = x.FileName,
                                                      Remarks = x.Remarks,
                                                      strFromDate = string.Format("{0:dd-MMMM-yyyy}", x.FromYear),
                                                      strToDate = string.Format("{0:dd-MMMM-yyyy}", x.ToYear)
                                                  }).ToList();
                        model.ExperienceDetail = model.ExperienceDetail.Count > 0 ? model.ExperienceDetail : null;

                        model.OtherDetail = (from c in context.tblRCTOSGOtherDetail
                                             where c.OSGId == OSGID && c.Status == "Active"
                                             orderby c.OtherDetailsId
                                             select new OtherDetailModel()
                                             {
                                                 OtherNames = c.OthersName,
                                                 OtherDetailId = c.OtherDetailsId,
                                                 Description = c.Description,
                                                 OtherDetailFileName = c.AttachmentName,
                                                 OtherDetailFilePath = c.AttachmentPath,
                                                 Remarks = c.Remarks,
                                             }).ToList();
                        model.OtherDetail = model.OtherDetail.Count > 0 ? model.OtherDetail : null;

                        model.JustificationDoc = (from c in context.tblRCTOSGPIJustificationDoc
                                                  where c.OSGID == OSGID && c.Deleted_f != true
                                                  orderby c.DocsID
                                                  select new STEJustificationDoc()
                                                  {
                                                      FilePath = c.DocsName,
                                                      FileName = c.FileName,
                                                  }).ToList();

                        model.PIJustificationDocDetail = (from c in context.tblRCTOSGPIJustificationDoc
                                                          where c.OSGID == OSGID && c.Deleted_f != true
                                                          orderby c.DocsID
                                                          select new PIJustificationModel()
                                                          {
                                                              PIJustificationDocumentPath = c.DocsName,
                                                              PIJustificationDocument = c.FileName
                                                          }).ToList();

                        //if (model.ExperienceDetail != null)
                        //{
                        //    if (model.ExperienceDetail.Count > 0)
                        //    {
                        //        var Qry = (from c in context.tblRCTOSGExperienceDetail
                        //                   where c.OSGId == OSGID && c.isCurrentVersion == true
                        //                   orderby c.OSGExperienceDetailId
                        //                   select c).ToList();
                        //        for (int i = 0; i < model.ExperienceDetail.Count; i++)
                        //        {
                        //            model.ExperienceDetail[i].strFromDate = string.Format("{0:dd-MMMM-yyyy}", Qry[i].FromYear);
                        //            model.ExperienceDetail[i].strToDate = string.Format("{0:dd-MMMM-yyyy}", Qry[i].ToYear);
                        //        }
                        //    }
                        //}
                        var justificdocs = (from c in context.tblRCTOSGPIJustificationDoc
                                            where c.OSGID == OSGID && c.Deleted_f != true
                                            select c).ToList();
                        for (int i = 0; i < justificdocs.Count(); i++)
                        {
                            model.PIJustificationRemarks = justificdocs[i].Description;
                        }

                        //model.Comments = QrySTE.A.Comments;
                        //model.Note = QrySTE.A.Note;
                        model.Notes = (from c in context.tblRCTOSGNotes
                                       where c.OSGId == OSGID
                                       orderby c.OSGNotesID descending
                                       select new STENotes()
                                       {
                                           HRNote = c.HRNote,
                                       }).ToList();
                        model.CommiteeMemberId1 = QryOSG.A.CommitteeMember ?? 0;
                        model.CommiteeMemberId2 = QryOSG.A.CommitteeMembers ?? 0;
                        model.ChairpersonNameId = QryOSG.A.Chairperson ?? 0;
                        model.CommiteeMember1 = Common.GetPIName(QryOSG.A.CommitteeMember ?? 0);
                        model.CommiteeMember2 = Common.GetPIName(QryOSG.A.CommitteeMembers ?? 0);
                        model.ChairpersonName = Common.GetPIName(QryOSG.A.Chairperson ?? 0);
                        model.FlowofMail = QryOSG.A.NotetoPI == true ? "NP" : QryOSG.A.NotetoCommittee == true ? "NC" : QryOSG.A.NotetoDean == true ? "NDean" : "Nd";
                        CheckListDetail = (from c in context.tblRCTOSGDeviationCheckDetail
                                           where c.OSGID == OSGID && c.isCurrentVersion == true
                                           orderby c.DeviationCheckDetailId
                                           select new CheckListModel()
                                           {
                                               FunctionCheckListId = c.DeviationCheckListId,
                                               IsChecked = true
                                           }).ToList();
                        model.EmergencyContactNo = QryOSG.A.EmergencyContact;
                        model.EmployeeId = QryOSG.A.EmployeersID;
                        model.ToMail = QryOSG.A.ToMail;
                        model.bcc = QryOSG.A.bcc;
                        if (QryOSG.A.NotetoCMAdmin == true)
                            model.FlowApprover = "CMAdmin";
                        if (QryOSG.A.NotetoDean == true)
                            model.FlowApprover = "NDean";
                        model.ApplicationRefNo = QryOSG.A.RefNumber;
                        model.AutoFillRequstedbyPI = Common.GetPIName(QryOSG.A.RequestedBy ?? 0);
                        model.RequestedByPI = QryOSG.A.RequestedBy;
                        model.SalaryLevelId = QryOSG.A.SalaryLevelId;
                        model.Comments = QryOSG.A.Comments;
                        if (QryOSG.A.EmployeeCategory == "Old Employee")
                         model.IITMExperience = IITExperienceInWording(QryOSG.A.OldNumber);
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public Tuple<int, int, string> PostOSG(STEModel model, int logged_in_userId, string msg = null)
        {
            try
            {
                int res = 0;
                int OSGID = 0;
                string PreStatus = string.Empty; string NewStatus = string.Empty;
                bool paystructure_f = false;
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            //new draft appointment Or direct save
                            if (model.STEId == 0)
                            {
                                tblRCTOutsourcing OSG = new tblRCTOutsourcing();
                                OSG.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                if (model.isDraftbtn)
                                    OSG.Status = "Draft";
                                else
                                {
                                    OSG.bcc = model.bcc;
                                    OSG.ToMail = model.ToMail;
                                }
                                NewStatus = OSG.Status;
                                OSG.TypeofAppointment = model.TypeofappointmentId;
                                OSG.EmployeeCategory = model.EmployeeType;
                                if (model.EmployeeType.Contains("New"))
                                    OSG.NIDNumber = model.NIDNumber;
                                if (model.EmployeeType.Contains("Old"))
                                    OSG.OldNumber = model.OldEmployeeNumber;

                                if (model.PersonImage != null)
                                {
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + model.PersonImage.FileName;
                                    //model.PersonImage.UploadFile("Requirement",  docName));
                                    model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                    OSG.CandidateImage = docName;
                                }
                                else if (!string.IsNullOrEmpty(model.PersonImagePath))
                                {
                                    OSG.CandidateImage = model.PersonImagePath;
                                }

                                if (model.Resume != null)
                                {
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + model.Resume.FileName;
                                    model.Resume.UploadFile("Requirement", docName);
                                    OSG.ResumeFile = docName;
                                }
                                OSG.VendorId = model.VendorId;
                                OSG.VendorName = model.VendorName;
                                OSG.VendorCode = model.VendorCode;
                                OSG.ProfessionalType = model.ProfessionalId;
                                OSG.Name = model.Name;
                                OSG.NameoftheGuardian = model.Nameoftheguardian;
                                OSG.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                OSG.PANNo = model.PAN;
                                OSG.DateofBirth = model.DateofBirth;
                                OSG.Age = model.Age;
                                OSG.Sex = model.Sex;
                                OSG.Caste = model.Caste;
                                OSG.ContactNumber = model.ContactNumber;
                                OSG.EmergencyContact = model.EmergencyContactNo;
                                OSG.AlternativeContactNumber = model.AlternativeContactNumber;
                                OSG.Email = model.Email;
                                OSG.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                OSG.PresentAddress = model.PresentAddress;
                                OSG.PermanentAddress = model.PermanentAddress;
                                OSG.Bloodgroup = model.BloodGroup;
                                OSG.BloodgroupRH = model.BloodGroupRH;
                                OSG.StaffCategory = model.StaffCategory;
                                OSG.Nationality = model.Nationality;
                                OSG.PhysicallyChallenged = model.PhysicallyChallenged == 1 ? "Yes" : model.PhysicallyChallenged == 2 ? "No" : "";
                                OSG.RelatedIIT = model.RelatedIITMadras;
                                OSG.Relationship = model.Relationship;
                                OSG.RelationshipDetails = model.RelationshipName;
                                OSG.ApplicationEntryDate = model.ApplicationEntryDate == null ? DateTime.Now : model.ApplicationEntryDate;
                                OSG.ApplicationReceiveDate = model.ApplicationReceiveDate;
                                OSG.ConsolidatedPay = model.isConsolidatePay == "ConsolidatedPay" ? true : false;
                                OSG.Fellowship = model.isConsolidatePay == "FellowshipPay" ? true : false;
                                OSG.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                OSG.PPONo = model.PPONo;
                                OSG.CSIRStaffPayMode = model.CSIRStaff;
                                //OSG.MsPhd = model.MsPhd;
                                model.MsPhd = model.MsPhdType > 0 ? true : false;
                                OSG.MsPhd = model.MsPhdType > 0 ? true : false;
                                OSG.MsPhdType = model.MsPhdType;
                                OSG.PhdDetail = model.PhdDetail;
                                OSG.ProjectId = model.ProjectId;
                                OSG.DesignationId = model.DesignationId;
                                OSG.SalaryLevelId = model.SalaryLevelId;
                                //if (model.MsPhd || model.TypeofappointmentId == 2)
                                //{
                                //    STE.Medical = 3;
                                //    STE.MedicalAmmount = 0;
                                //    if (model.TypeofappointmentId == 2)
                                //    {
                                //        STE.HRA = 0;
                                //    }
                                //}
                                //else
                                //{
                                //    STE.Medical = model.Medical;
                                //    STE.MedicalAmmount = model.MedicalAmmount;
                                //    STE.HRA = model.HRA;
                                //}
                                OSG.Salary = model.Salary;
                                //STE.isHaveHRA = model.isHRA;
                                //STE.CommitmentAmount = model.CommitmentAmount;
                                OSG.AppointmentStartdate = model.Appointmentstartdate;
                                OSG.AppointmentEnddate = model.AppointmentEndDate;
                                var data = Common.calRCTCommitmentAmount(context, model.Appointmentstartdate ?? DateTime.Now, model.AppointmentEndDate ?? DateTime.Now, model.EmployeeCTC ?? 0, model.HRA, model.Medical ?? 0, model.DesignationId ?? 0, model.MsPhd, model.TypeofappointmentId ?? 0, "OSG", model.LWFAmount ?? 0);
                                if (data != null)
                                {
                                    int Medical = 3;
                                    decimal MedicalAmmount = 0;
                                    OSG.CommitmentAmount = data.Item1;
                                    OSG.isHaveHRA = data.Item2;
                                    OSG.HRA = data.Item3;
                                    if (data.Item4)
                                    {
                                        Medical = model.Medical ?? 0;
                                        MedicalAmmount = MedicalDeduction;
                                    }
                                    OSG.Medical = Medical;
                                    OSG.MedicalAmmount = MedicalAmmount;
                                }

                                OSG.SalaryPayHigh = model.SalaryPayHigh;
                                OSG.BankAccountNumber = model.BankAccountNo;
                                OSG.BankName = model.BankName;
                                OSG.IFSCCode = model.IFSCCode;
                                OSG.CommitteeMember = model.CommiteeMemberId1;
                                OSG.CommitteeMembers = model.CommiteeMemberId2;
                                OSG.Chairperson = model.ChairpersonNameId;
                                //OSG.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                //OSG.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                //OSG.NotetoDean = model.FlowofMail == "NDean" ? true : false;
                                //OSG.Nodeviation = model.FlowofMail == "Nd" ? true : false;

                                OSG.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                OSG.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                //STE.NotetoDean = model.FlowofMail == "NDean" ? true : false;
                                OSG.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                OSG.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                OSG.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                OSG.SendSalaryStructure = model.SendSalaryStructure == "SST" ? true : false;

                                OSG.CrtdUser = logged_in_userId;
                                OSG.CrtdTs = DateTime.Now;
                                OSG.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                OSG.GateScore = Convert.ToDecimal(model.GateScore);
                                OSG.Comments = model.Comments;
                                OSG.RefNumber = model.ApplicationRefNo;
                                OSG.RequestedBy = model.RequestedByPI;
                                context.tblRCTOutsourcing.Add(OSG);
                                context.SaveChanges();
                                OSGID = OSG.OSGID;
                                if (OSGID > 0)//Result message flag
                                {
                                    if (OSG.Status == "Open")
                                        res = 1;
                                    else if (OSG.Status.Contains("Note"))
                                        res = 2;
                                    else if (OSG.Status == "Draft")
                                        res = 1;
                                }
                                //----Update ApplicationNumber----
                                var SeqNo = (from R in context.tblRCTOutsourcing select R.SeqNo).Max() ?? 0;
                                var QryUpdateRefNo = (from R in context.tblRCTOutsourcing where R.OSGID == OSGID select R).FirstOrDefault();
                                if (QryUpdateRefNo != null)
                                {
                                    var number = SeqNo == 0 ? 1 : SeqNo + 1;
                                    string value = number.ToString("D6");
                                    QryUpdateRefNo.SeqNo = number;
                                    QryUpdateRefNo.ApplicationNumber = "AP/" + value + "/OSG";
                                    context.SaveChanges();
                                }
                                //----end----

                                if (model.WfId > 0)
                                {
                                    tblWorkFlowlog log = new tblWorkFlowlog();
                                    log.Referenceid = model.WfId;
                                    log.Referencenbr = OSG.ApplicationNumber;
                                    log.WFreferencenbr = "WF_RCT_OSG_" + model.WfId;
                                    log.WFreferencetype = "OutsourcingAppointment";
                                    log.CRTD_TS = DateTime.Now;
                                    log.CRTD_BY = logged_in_userId;
                                    context.tblWorkFlowlog.Add(log);
                                    context.SaveChanges();
                                    //using (var WFContext = new IOASWorkFlowEntities1())
                                    //{
                                    //    //var Qry = WFContext.tblProposal.Where(m => m.ProposalId == model.WFproposalid).FirstOrDefault();
                                    //    //if (Qry != null)
                                    //    //{
                                    //    //    Qry.WorkflowStatus = true;
                                    //    //    WFContext.SaveChanges();
                                    //    //}
                                    //}
                                }
                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var FileDoc in model.PIJustificationFile)
                                    {
                                        if (FileDoc != null || !string.IsNullOrEmpty(model.PIJustificationRemarks))
                                        {
                                            tblRCTOSGPIJustificationDoc Docs = new tblRCTOSGPIJustificationDoc();
                                            Docs.OSGID = OSGID;
                                            if (FileDoc != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(FileDoc.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                //item.UploadFile("Requirement", docName);
                                                FileDoc.UploadFile("Requirement", docName);
                                                Docs.DocsName = docName;
                                                Docs.FileName = actName;
                                            }
                                            Docs.Description = model.PIJustificationRemarks;
                                            Docs.Crt_Ts = DateTime.Now;
                                            Docs.CrtUser = logged_in_userId;
                                            context.tblRCTOSGPIJustificationDoc.Add(Docs);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                if (model.Comments != null)
                                {
                                    tblRCTOSGNotes Notes = new tblRCTOSGNotes();
                                    Notes.OSGId = OSGID;
                                    Notes.PICommends = model.Comments;
                                    Notes.Crt_TS = DateTime.Now;
                                    context.tblRCTOSGNotes.Add(Notes);
                                    context.SaveChanges();
                                }
                                if (model.EducationDetail.Count > 0)
                                {
                                    foreach (var item in model.EducationDetail)
                                    {
                                        tblRCTOSGEducationDetail EducationDetail = new tblRCTOSGEducationDetail();
                                        EducationDetail.OSGId = OSGID;
                                        EducationDetail.QualificationId = item.QualificationId;
                                        EducationDetail.DisciplineId = item.DisciplineId;
                                        EducationDetail.UniversityorInstitution = item.Institution;
                                        EducationDetail.YearOfPassing = item.YearofPassing;
                                        EducationDetail.MarkType = item.MarkType;
                                        EducationDetail.Marks = item.Marks;
                                        EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                        if (item.Certificate != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            //item.Certificate.UploadFile("Requirement", docName);
                                            item.Certificate.UploadFile("Requirement", docName);
                                            EducationDetail.DocumentFilePath = docName;
                                            EducationDetail.FileName = actName;
                                        }
                                        if (item.CertificateName != null && item.CertificatePath != null)
                                        {
                                            EducationDetail.DocumentFilePath = item.CertificatePath;
                                            EducationDetail.FileName = item.CertificateName;
                                        }
                                        EducationDetail.Remarks = item.Remarks;
                                        EducationDetail.CrtdTs = DateTime.Now;
                                        EducationDetail.CrtdUser = logged_in_userId;
                                        EducationDetail.isCurrentVersion = true;
                                        context.tblRCTOSGEducationDetail.Add(EducationDetail);
                                        context.SaveChanges();
                                    }
                                }
                                if (model.ExperienceDetail.Count > 0)
                                {
                                    foreach (var item in model.ExperienceDetail)
                                    {
                                        if (item.ExperienceTypeId != null)
                                        {
                                            tblRCTOSGExperienceDetail ExperienceDetail = new tblRCTOSGExperienceDetail();
                                            ExperienceDetail.OSGId = OSGID;
                                            ExperienceDetail.TypeId = item.ExperienceTypeId;
                                            ExperienceDetail.Organisation = item.Organisation;
                                            ExperienceDetail.DesignationId = item.DesignationListId;
                                            ExperienceDetail.Designation = item.DesignationautoComplete;
                                            ExperienceDetail.FromYear = item.FromDate;
                                            ExperienceDetail.ToYear = item.ToDate;
                                            ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                            if (item.ExperienceFile != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                //item.ExperienceFile.UploadFile("Requirement", docName);
                                                item.ExperienceFile.UploadFile("Requirement", docName);
                                                ExperienceDetail.DocumentFilePath = docName;
                                                ExperienceDetail.FileName = actName;
                                            }
                                            if (item.ExperienceFileName != null && item.ExperienceFilePath != null)
                                            {
                                                ExperienceDetail.DocumentFilePath = item.ExperienceFilePath;
                                                ExperienceDetail.FileName = item.ExperienceFileName;
                                            }
                                            ExperienceDetail.Remarks = item.Remarks;
                                            ExperienceDetail.CrtdUser = logged_in_userId;
                                            ExperienceDetail.CrtdTs = DateTime.Now;
                                            ExperienceDetail.isCurrentVersion = true;
                                            context.tblRCTOSGExperienceDetail.Add(ExperienceDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                if (model.CheckListDetail != null)
                                {
                                    if (model.CheckListDetail.Count > 0)
                                    {
                                        foreach (var item in model.CheckListDetail)
                                        {
                                            tblRCTOSGDeviationCheckDetail DeviationDetail = new tblRCTOSGDeviationCheckDetail();
                                            DeviationDetail.OSGID = OSGID;
                                            DeviationDetail.CrtdUser = logged_in_userId;
                                            DeviationDetail.CrtdTs = DateTime.Now;
                                            DeviationDetail.DeviationCheckListId = item.FunctionCheckListId ?? 0;
                                            DeviationDetail.isCurrentVersion = true;
                                            DeviationDetail.IsChecked = item.IsChecked;
                                            context.tblRCTOSGDeviationCheckDetail.Add(DeviationDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                if (model.OtherDetail.Count > 0)
                                {
                                    for (int i = 0; i < model.OtherDetail.Count; i++)
                                    {
                                        if (model.OtherDetail[i].OtherNames != null)
                                        {
                                            tblRCTOSGOtherDetail OtherDetail = new tblRCTOSGOtherDetail();
                                            OtherDetail.OSGId = OSGID;
                                            OtherDetail.OthersName = model.OtherDetail[i].OtherNames;
                                            OtherDetail.Description = model.OtherDetail[i].Description;
                                            if (model.OtherDetail[i].OtherDetailFile != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                //item.ExperienceFile.UploadFile("Requirement", docName);
                                                model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);

                                                model.OtherDetail[i].OtherDetailFileName = actName;
                                                model.OtherDetail[i].OtherDetailFilePath = docName;
                                                OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                            }
                                            if (model.OtherDetail[i].OtherDetailFilePath != null && model.OtherDetail[i].OtherDetailFileName != null)
                                            {
                                                OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                            }
                                            OtherDetail.Remarks = model.OtherDetail[i].Remarks;
                                            OtherDetail.CrtdUser = logged_in_userId;
                                            OtherDetail.CrtdTS = DateTime.Now;
                                            OtherDetail.Status = "Active";
                                            context.tblRCTOSGOtherDetail.Add(OtherDetail);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                salcalc.ID = OSGID;
                                salcalc.StatutoryId = model.StatutoryId;
                                salcalc.AppointType = "Outsourcing";
                                salcalc.TypeCode = "OSG";
                                salcalc.RecommendSalary = model.RecommendedSalary;
                                salcalc.Salutation = model.EmpSalutation;
                                salcalc.EmpType = model.EmpType;
                                salcalc.EmpName = model.EmpName;
                                salcalc.EmpDesignation = model.EmpDesig;
                                salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                salcalc.PFBasicWages = model.EmpPFBasicWages;
                                salcalc.EmployeePF = model.EmployeePF;
                                salcalc.EmployeeESIC = model.EmployeeESIC;
                                salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                salcalc.EmployerPF = model.EmployerPF;
                                salcalc.EmployerInsurance = model.EmployerIns;
                                salcalc.EmployerESIC = model.EmployerESIC;
                                salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                salcalc.EmployerCTC = model.EmployeeCTC;
                                salcalc.EmployerAgencyFee = model.AgencyFee;
                                salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                salcalc.EmployerGST = model.SalaryGST;
                                salcalc.FromDate = model.Appointmentstartdate;
                                salcalc.ToDate = model.AppointmentEndDate;

                                salcalc.TotalCostPerMonth = model.TotalCTC;
                                salcalc.IsCurrentVersion = true;
                                salcalc.Status = "Active";
                                salcalc.CrtdTS = DateTime.Now;
                                salcalc.CrtdUserId = logged_in_userId;
                                var datas = getGSTAgencyFee(model.VendorId ?? 0);
                                if (datas != null)
                                {
                                    salcalc.GSTPercentage = datas.Item1;
                                    salcalc.AgencyFeePercentage = datas.Item2;
                                }
                                context.tblRCTSalaryCalcDetails.Add(salcalc);
                                context.SaveChanges();
                            }
                            if (model.STEId > 0)
                            {
                                tblRCTOutsourcing STE = new tblRCTOutsourcing();
                                OSGID = model.STEId;
                                var qryOSG = (from s in context.tblRCTOutsourcing
                                              where (s.Status == "Draft" || s.Status == "Open" || s.Status == "Note to PI")
                                              && s.isCommitmentReject != true
                                              && s.OSGID == OSGID
                                              select s).FirstOrDefault();
                                if (qryOSG != null)
                                {
                                    PreStatus = qryOSG.Status;
                                    paystructure_f = qryOSG.SendSalaryStructure ?? false;
                                    qryOSG.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                    if (model.isDraftbtn)
                                    {
                                        qryOSG.Status = "Draft";
                                    }
                                    else
                                    {
                                        if (model.bcc != null)
                                        {
                                            qryOSG.bcc = model.bcc;
                                        }
                                        if (model.ToMail != null)
                                        {
                                            qryOSG.ToMail = model.ToMail;
                                        }
                                    }
                                    NewStatus = qryOSG.Status;
                                    qryOSG.TypeofAppointment = model.TypeofappointmentId;
                                    qryOSG.EmployeeCategory = model.EmployeeType;
                                    qryOSG.VendorId = model.VendorId;
                                    qryOSG.VendorName = model.VendorName;
                                    qryOSG.VendorCode = model.VendorCode;
                                    if (model.EmployeeType.Contains("New"))
                                        qryOSG.NIDNumber = model.NIDNumber;
                                    else
                                        qryOSG.OldNumber = null;
                                    if (model.EmployeeType.Contains("Old"))
                                        qryOSG.OldNumber = model.OldEmployeeNumber;
                                    else
                                        qryOSG.NIDNumber = null;
                                    if (model.PersonImage != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.PersonImage.FileName;
                                        //model.PersonImage.UploadFile("Requirement",  docName));
                                        model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                        qryOSG.CandidateImage = docName;
                                    }
                                    if (model.Resume != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.Resume.FileName;
                                        model.Resume.UploadFile("Requirement", docName);
                                        qryOSG.ResumeFile = docName;
                                    }
                                    qryOSG.ProfessionalType = model.ProfessionalId;
                                    qryOSG.Name = model.Name;
                                    qryOSG.NameoftheGuardian = model.Nameoftheguardian;
                                    qryOSG.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                    qryOSG.PANNo = model.PAN;
                                    qryOSG.DateofBirth = model.DateofBirth;
                                    qryOSG.Age = model.Age;
                                    qryOSG.Sex = model.Sex;
                                    qryOSG.Caste = model.Caste;
                                    qryOSG.ContactNumber = model.ContactNumber;
                                    qryOSG.AlternativeContactNumber = model.AlternativeContactNumber;
                                    qryOSG.EmergencyContact = model.EmergencyContactNo;
                                    qryOSG.Email = model.Email;
                                    qryOSG.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                    qryOSG.PresentAddress = model.PresentAddress;
                                    qryOSG.PermanentAddress = model.PermanentAddress;
                                    qryOSG.Bloodgroup = model.BloodGroup;
                                    qryOSG.BloodgroupRH = model.BloodGroupRH;
                                    qryOSG.StaffCategory = model.StaffCategory;
                                    qryOSG.Nationality = model.Nationality;
                                    qryOSG.PhysicallyChallenged = model.PhysicallyChallenged == 1 ? "Yes" : model.PhysicallyChallenged == 2 ? "No" : "";
                                    qryOSG.RelatedIIT = model.RelatedIITMadras;
                                    qryOSG.Relationship = model.Relationship;
                                    qryOSG.RelationshipDetails = model.RelationshipName;
                                    qryOSG.ApplicationEntryDate = model.ApplicationEntryDate == null ? DateTime.Now : model.ApplicationEntryDate;
                                    qryOSG.ApplicationReceiveDate = model.ApplicationReceiveDate;
                                    qryOSG.ConsolidatedPay = model.isConsolidatePay == "ConsolidatedPay" ? true : false;
                                    qryOSG.Fellowship = model.isConsolidatePay == "FellowshipPay" ? true : false;
                                    qryOSG.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                    qryOSG.PPONo = model.PPONo;
                                    qryOSG.CSIRStaffPayMode = model.CSIRStaff;
                                    qryOSG.MsPhd = model.MsPhdType > 0 ? true : false;
                                    model.MsPhd = model.MsPhdType > 0 ? true : false;
                                    qryOSG.MsPhdType = model.MsPhdType;
                                    qryOSG.Comments = model.Comments;
                                    qryOSG.PhdDetail = model.PhdDetail;
                                    if (model.PIJustificationFile != null)
                                    {
                                        var QryUpdatePIJustification = (from P in context.tblRCTOSGPIJustificationDoc where P.OSGID == OSGID orderby P.DocsID select P).ToList();
                                        if (QryUpdatePIJustification != null)
                                        {
                                            if (QryUpdatePIJustification.Count > 0)
                                            {
                                                foreach (var item in QryUpdatePIJustification)
                                                {
                                                    item.Crt_Ts = DateTime.Now;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                        foreach (var item in model.PIJustificationFile)
                                        {
                                            if (item != null || !string.IsNullOrEmpty(model.PIJustificationRemarks))
                                            {
                                                tblRCTOSGPIJustificationDoc Docs = new tblRCTOSGPIJustificationDoc();
                                                Docs.OSGID = OSGID;
                                                if (item != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    //item.UploadFile("Requirement", docName);
                                                    item.UploadFile("Requirement", docName);
                                                    Docs.DocsName = docName;
                                                    Docs.FileName = actName;
                                                }
                                                Docs.Description = model.PIJustificationRemarks;
                                                Docs.Crt_Ts = DateTime.Now;
                                                Docs.CrtUser = logged_in_userId;
                                                context.tblRCTOSGPIJustificationDoc.Add(Docs);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    if (model.Comments != null)
                                    {
                                        tblRCTOSGNotes Notes = new tblRCTOSGNotes();
                                        Notes.OSGId = OSGID;
                                        Notes.PICommends = model.Comments;
                                        Notes.Crt_TS = DateTime.Now;
                                        context.tblRCTOSGNotes.Add(Notes);
                                        context.SaveChanges();
                                    }
                                    qryOSG.ProjectId = model.ProjectId;
                                    qryOSG.DesignationId = model.DesignationId;
                                    //if (model.MsPhd || model.TypeofappointmentId == 2)
                                    //{
                                    //    qrySTE.Medical = 3;
                                    //    qrySTE.MedicalAmmount = 0;
                                    //    if (model.TypeofappointmentId == 2)
                                    //    {
                                    //        qrySTE.HRA = 0;
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    qrySTE.Medical = model.Medical;
                                    //    qrySTE.MedicalAmmount = model.MedicalAmmount;
                                    //    qrySTE.HRA = model.HRA;

                                    //}
                                    qryOSG.AppointmentStartdate = model.Appointmentstartdate;
                                    qryOSG.AppointmentEnddate = model.AppointmentEndDate;
                                    qryOSG.Salary = model.Salary;
                                    var data = Common.calRCTCommitmentAmount(context, model.Appointmentstartdate ?? DateTime.Now, model.AppointmentEndDate ?? DateTime.Now, model.EmployeeCTC ?? 0, model.HRA, model.Medical ?? 0, model.DesignationId ?? 0, model.MsPhd, model.TypeofappointmentId ?? 0, "OSG", model.LWFAmount ?? 0);
                                    if (data != null)
                                    {
                                        int Medical = 3;
                                        decimal MedicalAmmount = 0;
                                        qryOSG.CommitmentAmount = data.Item1;
                                        qryOSG.isHaveHRA = data.Item2;
                                        qryOSG.HRA = data.Item3;
                                        if (data.Item4)
                                        {
                                            Medical = model.Medical ?? 0;
                                            MedicalAmmount = MedicalDeduction;
                                        }
                                        qryOSG.Medical = Medical;
                                        qryOSG.MedicalAmmount = MedicalAmmount;
                                    }
                                    qryOSG.SalaryPayHigh = model.SalaryPayHigh;
                                    qryOSG.BankAccountNumber = model.BankAccountNo;
                                    qryOSG.BankName = model.BankName;
                                    qryOSG.IFSCCode = model.IFSCCode;
                                    qryOSG.CommitteeMember = model.CommiteeMemberId1;
                                    qryOSG.CommitteeMembers = model.CommiteeMemberId2;
                                    qryOSG.Chairperson = model.ChairpersonNameId;
                                    //qryOSG.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                    //qryOSG.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                    //qryOSG.NotetoDean = model.FlowofMail == "NDean" ? true : false;
                                    //qryOSG.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                    qryOSG.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                    qryOSG.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                    qryOSG.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                    qryOSG.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                    qryOSG.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    qryOSG.SendSalaryStructure = model.SendSalaryStructure == "SST" ? true : false;

                                    qryOSG.CrtdUser = logged_in_userId;
                                    qryOSG.CrtdTs = DateTime.Now;
                                    qryOSG.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                    qryOSG.GateScore = Convert.ToDecimal(model.GateScore);
                                    qryOSG.RefNumber = model.ApplicationRefNo;
                                    qryOSG.RequestedBy = model.RequestedByPI;
                                    qryOSG.SalaryLevelId = model.SalaryLevelId;
                                    context.SaveChanges();
                                    var QryDelEdurecords = (from q in context.tblRCTOSGEducationDetail
                                                            where q.OSGId == OSGID && q.isCurrentVersion == true
                                                            select q).ToList();
                                    if (QryDelEdurecords != null)
                                    {
                                        foreach (var item in QryDelEdurecords)
                                        {
                                            item.isCurrentVersion = false;
                                            item.UptdTs = DateTime.Now;
                                            item.UptdUser = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                    }
                                    if (model.EducationDetail.Count > 0)
                                    {
                                        foreach (var item in model.EducationDetail)
                                        {
                                            if (item.EducationId == null)
                                            {
                                                tblRCTOSGEducationDetail EducationDetail = new tblRCTOSGEducationDetail();
                                                EducationDetail.OSGId = OSGID;
                                                EducationDetail.QualificationId = item.QualificationId;
                                                EducationDetail.DisciplineId = item.DisciplineId;
                                                EducationDetail.UniversityorInstitution = item.Institution;
                                                EducationDetail.YearOfPassing = item.YearofPassing;
                                                EducationDetail.MarkType = item.MarkType;
                                                EducationDetail.Marks = item.Marks;
                                                EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                                if (item.Certificate != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    //item.Certificate.UploadFile("Requirement", docName);
                                                    item.Certificate.UploadFile("Requirement", docName);
                                                    EducationDetail.DocumentFilePath = docName;
                                                    EducationDetail.FileName = actName;
                                                }
                                                EducationDetail.Remarks = item.Remarks;
                                                EducationDetail.CrtdTs = DateTime.Now;
                                                EducationDetail.CrtdUser = logged_in_userId;
                                                EducationDetail.isCurrentVersion = true;
                                                context.tblRCTOSGEducationDetail.Add(EducationDetail);
                                                context.SaveChanges();
                                            }
                                            else
                                            {
                                                int EducationID = item.EducationId ?? 0;
                                                var QryEducation = (from SM in context.tblRCTOSGEducationDetail where SM.OSGId == OSGID && SM.OSGEducationDetailId == EducationID select SM).ToList();
                                                if (QryEducation.Count > 0)
                                                {
                                                    for (int j = 0; j < QryEducation.Count; j++)
                                                    {
                                                        QryEducation[j].OSGId = OSGID;
                                                        QryEducation[j].QualificationId = item.QualificationId;
                                                        QryEducation[j].DisciplineId = item.DisciplineId;
                                                        QryEducation[j].UniversityorInstitution = item.Institution;
                                                        QryEducation[j].YearOfPassing = item.YearofPassing;
                                                        QryEducation[j].MarkType = item.MarkType;
                                                        QryEducation[j].Marks = item.Marks;
                                                        QryEducation[j].DivisionClassObtained = item.DivisionClassObtained;
                                                        if (item.Certificate != null)
                                                        {
                                                            string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                            var guid = Guid.NewGuid().ToString();
                                                            var docName = guid + "_" + actName;
                                                            //item.Certificate.UploadFile("Requirement", docName);
                                                            item.Certificate.UploadFile("Requirement", docName);
                                                            QryEducation[j].DocumentFilePath = docName;
                                                            QryEducation[j].FileName = actName;
                                                        }
                                                        QryEducation[j].Remarks = item.Remarks;
                                                        QryEducation[j].CrtdTs = DateTime.Now;
                                                        QryEducation[j].CrtdUser = logged_in_userId;
                                                        QryEducation[j].isCurrentVersion = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    var QryDelExprecords = (from q in context.tblRCTOSGExperienceDetail
                                                            where q.OSGId == OSGID && q.isCurrentVersion == true
                                                            select q).ToList();
                                    if (QryDelExprecords != null)
                                    {
                                        foreach (var item in QryDelExprecords)
                                        {
                                            item.isCurrentVersion = false;
                                            item.UptdTs = DateTime.Now;
                                            item.UptdUser = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                    }
                                    if (model.ExperienceDetail.Count > 0)
                                    {
                                        foreach (var item in model.ExperienceDetail)
                                        {
                                            if (item.ExperienceTypeId != null && item.ExperienceId == null)
                                            {
                                                tblRCTOSGExperienceDetail ExperienceDetail = new tblRCTOSGExperienceDetail();
                                                ExperienceDetail.OSGId = OSGID;
                                                ExperienceDetail.TypeId = item.ExperienceTypeId;
                                                ExperienceDetail.Organisation = item.Organisation;
                                                ExperienceDetail.DesignationId = item.DesignationListId;
                                                ExperienceDetail.Designation = item.DesignationautoComplete;
                                                ExperienceDetail.FromYear = item.FromDate;
                                                ExperienceDetail.ToYear = item.ToDate;
                                                ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                                if (item.ExperienceFile != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    //item.ExperienceFile.UploadFile("Requirement", docName);
                                                    item.ExperienceFile.UploadFile("Requirement", docName);
                                                    ExperienceDetail.DocumentFilePath = docName;
                                                    ExperienceDetail.FileName = actName;
                                                }
                                                ExperienceDetail.Remarks = item.Remarks;
                                                ExperienceDetail.CrtdUser = logged_in_userId;
                                                ExperienceDetail.CrtdTs = DateTime.Now;
                                                ExperienceDetail.isCurrentVersion = true;
                                                context.tblRCTOSGExperienceDetail.Add(ExperienceDetail);
                                                context.SaveChanges();
                                            }
                                            else if (item.ExperienceTypeId != null && item.ExperienceId != null)
                                            {
                                                int expdetailid = item.ExperienceId ?? 0;
                                                var QryEducation = (from SM in context.tblRCTOSGExperienceDetail where SM.OSGId == OSGID && SM.OSGExperienceDetailId == expdetailid select SM).ToList();
                                                if (QryEducation.Count > 0)
                                                {
                                                    for (int j = 0; j < QryEducation.Count; j++)
                                                    {
                                                        QryEducation[j].TypeId = item.ExperienceTypeId;
                                                        QryEducation[j].Organisation = item.Organisation;
                                                        QryEducation[j].DesignationId = item.DesignationListId;
                                                        QryEducation[j].Designation = item.DesignationautoComplete;
                                                        QryEducation[j].FromYear = item.FromDate;
                                                        QryEducation[j].ToYear = item.ToDate;
                                                        QryEducation[j].SalaryDrawn = item.SalaryDrawn;
                                                        if (item.ExperienceFile != null)
                                                        {
                                                            string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                            var guid = Guid.NewGuid().ToString();
                                                            var docName = guid + "_" + actName;
                                                            //item.ExperienceFile.UploadFile("Requirement", docName);
                                                            item.ExperienceFile.UploadFile("Requirement", docName);
                                                            QryEducation[j].DocumentFilePath = docName;
                                                            QryEducation[j].FileName = actName;
                                                        }
                                                        QryEducation[j].Remarks = item.Remarks;
                                                        QryEducation[j].UptdUser = logged_in_userId;
                                                        QryEducation[j].UptdTs = DateTime.Now;
                                                        QryEducation[j].isCurrentVersion = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    var QryCheckList = (from SM in context.tblRCTOSGDeviationCheckDetail
                                                        where SM.OSGID == OSGID && SM.isCurrentVersion == true
                                                        select SM).ToList();
                                    if (QryCheckList.Count > 0)
                                    {
                                        foreach (var qryItem in QryCheckList)
                                        {
                                            qryItem.isCurrentVersion = false;
                                            qryItem.UptdTs = DateTime.Now;
                                            qryItem.UptdUser = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                    }
                                    if (model.CheckListDetail != null)
                                    {
                                        if (model.CheckListDetail.Count > 0)
                                        {
                                            foreach (var item in model.CheckListDetail)
                                            {
                                                tblRCTOSGDeviationCheckDetail DeviationDetail = new tblRCTOSGDeviationCheckDetail();
                                                DeviationDetail.OSGID = OSGID;
                                                DeviationDetail.CrtdUser = logged_in_userId;
                                                DeviationDetail.CrtdTs = DateTime.Now;
                                                DeviationDetail.DeviationCheckListId = item.FunctionCheckListId ?? 0;
                                                DeviationDetail.isCurrentVersion = true;
                                                DeviationDetail.IsChecked = item.IsChecked;
                                                context.tblRCTOSGDeviationCheckDetail.Add(DeviationDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                    }


                                    if (model.OtherDetail != null)
                                    {
                                        if (model.OtherDetail.Count > 0)
                                        {
                                            for (int i = 0; i < model.OtherDetail.Count; i++)
                                            {
                                                if (model.OtherDetail[i].OtherDetailId == null && model.OtherDetail[i].OtherNames != null)
                                                {
                                                    tblRCTOSGOtherDetail OtherDetail = new tblRCTOSGOtherDetail();
                                                    OtherDetail.OSGId = OSGID;
                                                    //OtherDetail.OtherDetailsId = model.OtherDetail[i].OtherDetailId;
                                                    OtherDetail.OthersName = model.OtherDetail[i].OtherNames;
                                                    OtherDetail.Description = model.OtherDetail[i].Description;
                                                    //if (model.OtherDetail[i].OtherDetailFilePath != null)
                                                    //{
                                                    // OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                    // OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                    //}

                                                    if (model.OtherDetail[i].OtherDetailFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        //item.ExperienceFile.UploadFile("Requirement", docName);
                                                        model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);
                                                        model.OtherDetail[i].OtherDetailFileName = actName;
                                                        model.OtherDetail[i].OtherDetailFilePath = docName;
                                                        OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                        OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                    }

                                                    OtherDetail.Remarks = model.OtherDetail[i].Remarks;
                                                    OtherDetail.CrtdUser = logged_in_userId;
                                                    OtherDetail.CrtdTS = DateTime.Now;
                                                    OtherDetail.Status = "Active";
                                                    context.tblRCTOSGOtherDetail.Add(OtherDetail);
                                                    context.SaveChanges();
                                                }
                                                else
                                                {
                                                    int OtherDetailID = model.OtherDetail[i].OtherDetailId ?? 0;
                                                    var Qryothr = (from SM in context.tblRCTOSGOtherDetail where SM.OSGId == OSGID && SM.OtherDetailsId == OtherDetailID && SM.Status == "Active" select SM).ToList();
                                                    if (Qryothr.Count > 0)
                                                    {
                                                        for (int j = 0; j < Qryothr.Count; j++)
                                                        {
                                                            if (model.OtherDetail[j].OtherNames != null)
                                                            {
                                                                Qryothr[j].OSGId = OSGID;
                                                                Qryothr[j].OthersName = model.OtherDetail[i].OtherNames;
                                                                Qryothr[j].Description = model.OtherDetail[i].Description;
                                                                //if (model.OtherDetail[i].OtherDetailFilePath != null)
                                                                //{
                                                                // Qryothr[j].AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                                // Qryothr[j].AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                                //}
                                                                if (model.OtherDetail[i].OtherDetailFile != null)
                                                                {
                                                                    string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                                    var guid = Guid.NewGuid().ToString();
                                                                    var docName = guid + "_" + actName;
                                                                    //item.ExperienceFile.UploadFile("Requirement", docName);
                                                                    model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);
                                                                    model.OtherDetail[i].OtherDetailFileName = actName;
                                                                    model.OtherDetail[i].OtherDetailFilePath = docName;
                                                                    Qryothr[j].AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                                    Qryothr[j].AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                                }
                                                                Qryothr[j].Remarks = model.OtherDetail[i].Remarks;
                                                                Qryothr[j].UpdtUser = logged_in_userId;
                                                                Qryothr[j].UpdtTS = DateTime.Now;
                                                                Qryothr[j].Status = "Active";
                                                                context.SaveChanges();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var salrycal = (from SM in context.tblRCTSalaryCalcDetails where SM.ID == OSGID && SM.Status == "Active" select SM).FirstOrDefault();
                                    if (salrycal != null)
                                    {
                                        salrycal.ID = OSGID;
                                        salrycal.AppointType = "Outsourcing";
                                        salrycal.TypeCode = "OSG";
                                        salrycal.StatutoryId = model.StatutoryId;
                                        salrycal.RecommendSalary = model.RecommendedSalary;
                                        salrycal.Salutation = model.EmpSalutation;
                                        salrycal.EmpType = model.EmpType;
                                        salrycal.EmpName = model.EmpName;
                                        salrycal.EmpDesignation = model.EmpDesig;
                                        salrycal.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                        salrycal.PFBasicWages = model.EmpPFBasicWages;
                                        salrycal.EmployeePF = model.EmployeePF;
                                        salrycal.EmployeeESIC = model.EmployeeESIC;
                                        salrycal.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                        salrycal.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                        salrycal.EmpNetSalary = model.EmployeeNetSalary;
                                        salrycal.EmployerPF = model.EmployerPF;
                                        salrycal.EmployerInsurance = model.EmployerIns;
                                        salrycal.EmployerESIC = model.EmployerESIC;
                                        salrycal.EmployerTotalContribution = model.EmployerTtlContribute;
                                        salrycal.EmployerCTC = model.EmployeeCTC;
                                        salrycal.EmployerAgencyFee = model.AgencyFee;
                                        salrycal.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                        salrycal.EmployerGST = model.SalaryGST;
                                        salrycal.TotalCostPerMonth = model.TotalCTC;
                                        salrycal.FromDate = model.Appointmentstartdate;
                                        salrycal.ToDate = model.AppointmentEndDate;
                                        salrycal.Status = "Active";
                                        salrycal.IsCurrentVersion = true;
                                        salrycal.UpdtTS = DateTime.Now;
                                        salrycal.UpdtUserId = logged_in_userId;
                                        var datas = getGSTAgencyFee(model.VendorId ?? 0);
                                        if (datas != null)
                                        {
                                            salrycal.GSTPercentage = datas.Item1;
                                            salrycal.AgencyFeePercentage = datas.Item2;
                                        }
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        tblRCTSalaryCalcDetails salcalc = new tblRCTSalaryCalcDetails();
                                        salcalc.ID = OSGID;
                                        salcalc.AppointType = "Outsourcing";
                                        salcalc.TypeCode = "OSG";
                                        salcalc.StatutoryId = model.StatutoryId;
                                        salcalc.RecommendSalary = model.RecommendedSalary;
                                        salcalc.Salutation = model.EmpSalutation;
                                        salcalc.EmpType = model.EmpType;
                                        salcalc.EmpName = model.EmpName;
                                        salcalc.EmpDesignation = model.EmpDesig;
                                        salcalc.PhysicallyHandicapped = model.PhysicalyHandicaped;
                                        salcalc.PFBasicWages = model.EmpPFBasicWages;
                                        salcalc.EmployeePF = model.EmployeePF;
                                        salcalc.EmployeeESIC = model.EmployeeESIC;
                                        salcalc.EmpProfessionalTax = model.EmployeeProfessionalTax;
                                        salcalc.EmpTotalDeduction = model.EmployeeTtlDeduct;
                                        salcalc.EmpNetSalary = model.EmployeeNetSalary;
                                        salcalc.EmployerPF = model.EmployerPF;
                                        salcalc.EmployerInsurance = model.EmployerIns;
                                        salcalc.EmployerESIC = model.EmployerESIC;
                                        salcalc.EmployerTotalContribution = model.EmployerTtlContribute;
                                        salcalc.EmployerCTC = model.EmployeeCTC;
                                        salcalc.EmployerAgencyFee = model.AgencyFee;
                                        salcalc.EmployerCTCWithAgencyFee = model.CTCwithAgencyFee;
                                        salcalc.EmployerGST = model.SalaryGST;
                                        salcalc.TotalCostPerMonth = model.TotalCTC;
                                        salcalc.FromDate = model.Appointmentstartdate;
                                        salcalc.ToDate = model.AppointmentEndDate;
                                        salcalc.Status = "Active";
                                        salcalc.CrtdTS = DateTime.Now;
                                        salcalc.CrtdUserId = logged_in_userId;
                                        salcalc.IsCurrentVersion = true;
                                        var datas = getGSTAgencyFee(model.VendorId ?? 0);
                                        if (datas != null)
                                        {
                                            salcalc.GSTPercentage = datas.Item1;
                                            salcalc.AgencyFeePercentage = datas.Item2;
                                        }
                                        context.tblRCTSalaryCalcDetails.Add(salcalc);
                                        context.SaveChanges();
                                    }
                                    if (OSGID > 0)//Result message flag
                                    {
                                        if (qryOSG.Status == "Open")
                                            res = 1;
                                        else if (qryOSG.Status.Contains("Note"))
                                            res = 2;
                                        else if (qryOSG.Status == "Draft")
                                            res = 2;
                                    }
                                }
                                else
                                {
                                    return Tuple.Create(-1, 0, msg);
                                }
                            }
                            transaction.Commit();
                            PostOSGStatusLog(OSGID, PreStatus, NewStatus, logged_in_userId);

                            if (!model.isDraftbtn)
                            {

                                //---Deviations and Acknowleadgement mails---
                                var sendsalrystruct = model.SendSalaryStructure;
                                if (model.FlowofMail == "Nd" && sendsalrystruct == "SST")
                                    RCTEmailContentService.SendMailForOSG(OSGID, logged_in_userId, sendsalrystruct, false);

                                if (OSGID > 0 && (model.FlowofMail == "NP" || model.FlowofMail == "NC" || model.FlowofMail == "NDean"))
                                    RCTEmailContentService.SendMailForOSG(OSGID, logged_in_userId, sendsalrystruct, true, model.Comments);

                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, 0, msg);
                        }
                    }
                }
                return Tuple.Create(res, OSGID, msg);
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, 0, msg);
            }
        }

        public static STESearchModel GetOSGList(STESearchModel model, int page, int pageSize, int userid, int roleid)
        {
            STESearchModel osgmodel = new STESearchModel();
            List<STEListModel> list = new List<STEListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    join prj in context.tblProject on vw.ProjectId equals prj.ProjectId into g
                                    from prj in g.DefaultIfEmpty()
                                    orderby vw.ApplicationId descending
                                    where vw.Category == "OSG" && vw.ApplicationType == "New" && vw.isEmployee != true
                                    && vw.Status != "Cancel"
                                    orderby vw.ApplicationId descending
                                    select new STEListModel()
                                    {
                                        STEId = vw.ApplicationId ?? 0,
                                        STEAppNo = vw.ApplicationNo,
                                        Category = vw.Category,
                                        CandidateName = vw.CandidateName,
                                        PIName = vw.PIName,
                                        Email = vw.PIEmail,
                                        Status = vw.Status,
                                        ProjectNumber = prj.ProjectNumber,
                                        isGovAgencyFund = vw.isGovAgencyFund ?? false,
                                        isCommitmentRejection = vw.isCommitmentReject ?? false,
                                        AppType = vw.TypeofAppointment,
                                        UserID = vw.crtdUserId,
                                        RoleId = vw.UserRoleId,
                                        EmailRemaindarCount = context.tblRCTOSGEmailLog.Where(x => x.IsSend == true && x.TypeofMail == 3 && x.OSGID == vw.ApplicationId).Count(),
                                        SendOffer_f = context.tblRCTOfferDetails.
                                               Where(x => x.ApplicationId == vw.ApplicationId && x.Category == "OSG" &&
                                               x.OfferCategory == "OfferLetter" && x.isSend != true).FirstOrDefault() != null ? true : false,
                                        AppointmentStartDate = vw.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<STEListModel>();
                    if (!string.IsNullOrEmpty(model.STEAppNo))
                        predicate = predicate.And(d => d.STEAppNo.Contains(model.STEAppNo));
                    if (!string.IsNullOrEmpty(model.Category))
                        predicate = predicate.And(d => d.Category.Contains(model.Category));
                    if (!string.IsNullOrEmpty(model.CandidateName))
                        predicate = predicate.And(d => d.CandidateName.Contains(model.CandidateName));
                    if (!string.IsNullOrEmpty(model.PIName))
                        predicate = predicate.And(d => d.PIName.Contains(model.PIName) || d.Email.Contains(model.PIName));
                    if (!string.IsNullOrEmpty(model.ProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.ProjectNumber));
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status.Contains(model.Status));
                    //if ((roleid == 107 || roleid == 108 || roleid == 109) && userid > 0)
                    //    predicate = predicate.And(d => d.UserID == userid);
                    if (!string.IsNullOrEmpty(model.TypeofAppointment))
                        predicate = predicate.And(d => d.AppType.Contains(model.TypeofAppointment));
                    var query = prequery.Where(predicate).OrderByDescending(m => m.STEId).Skip(skiprec).Take(pageSize).ToList();
                    osgmodel.TotalRecords = prequery.Where(predicate).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            int appid = query[i].STEId;
                            int emailcount = context.tblRCTOSGEmailLog.
                                            Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                            x.OSGID == appid).Count();
                            bool SendOffer_f = context.tblRCTOfferDetails.
                                               Where(x => x.ApplicationId == appid && x.Category == "OSG" &&
                                               x.OfferCategory == "OfferLetter" && x.isSend != true).FirstOrDefault() != null ? true : false;
                            list.Add(new STEListModel()
                            {
                                SNo = sno + i,
                                STEId = query[i].STEId,
                                STEAppNo = query[i].STEAppNo,
                                Category = query[i].Category,
                                CandidateName = query[i].CandidateName,
                                PIName = query[i].PIName,
                                Email = query[i].Email,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount,
                                ProjectNumber = query[i].ProjectNumber,
                                isGovAgencyFund = query[i].isGovAgencyFund,
                                isCommitmentRejection = query[i].isCommitmentRejection,
                                AppType = query[i].AppType,
                                SendOffer_f = SendOffer_f,
                                Cancel_f = IsCancelAppointment(query[i].AppointmentStartDate, query[i].Status)
                            });
                        }
                    }
                }
                osgmodel.conList = list;
                return osgmodel;
            }
            catch (Exception ex)
            {
                return osgmodel;
            }
        }

        #region OSG WorkFlow

        public static bool ValidateOSGStatus(int id)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = (from osg in context.tblRCTOutsourcing
                                 where osg.OSGID == id && osg.Status == "Open"
                                 select osg).FirstOrDefault();
                    if (query != null)
                        isValid = true;
                    else
                        isValid = false;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public Tuple<bool, string> OSGWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    if (ValidateOSGStatus(id))
                    {
                        var query = IOAScontext.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == id);
                        if (query != null)
                        {
                            //string Type = "Outsourcing Flow";
                            string Type = "";
                            if (query.NotetoCMAdmin == true)
                                Type = "OSGAdminFlow";
                            else if (query.NotetoDean == true)
                                Type = "OSGFlowDean";
                            else
                                Type = "Outsourcing Flow";
                            var status = CoreAccount.ProcessTrigger(194, Type, 0, id, logged_in_user, "OSGID", query.ApplicationNumber);
                            var msg = status.errorMsg;
                            if (String.IsNullOrEmpty(msg))
                            {
                                query.Status = "Sent for approval";
                                query.UptdUser = logged_in_user;
                                query.UptdTs = DateTime.Now;
                                IOAScontext.SaveChanges();
                                PostOSGStatusLog(id, "Open", "Sent for approval", logged_in_user);
                                return Tuple.Create(true, "");
                            }
                            else
                                return Tuple.Create(false, msg);
                        }
                        return Tuple.Create(false, "Something went wrong please contact administrator");
                    }
                    else
                        return Tuple.Create(false, "This Outsourcing is already approved");


                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public Tuple<bool, string> OSGVERWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    if (ValidateOSGStatus(id))
                    {
                        var query = IOAScontext.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == id);
                        if (query != null)
                        {
                            
                            string Type = "OSGVER Flow";
                            if (query.NotetoCMAdmin == true)
                                Type = "OSGVERAdminFlow";
                            else if (query.NotetoDean == true)
                                Type = "OSGVERFlowDean";
                            var status = CoreAccount.ProcessTrigger(206, Type, 0, id, logged_in_user, "OSGVERID", query.ApplicationNumber);
                            var msg = status.errorMsg;
                            if (String.IsNullOrEmpty(msg))
                            {
                                query.Status = "Sent for approval-Verify";
                                query.UptdUser = logged_in_user;
                                query.UptdTs = DateTime.Now;
                                IOAScontext.SaveChanges();
                                PostOSGStatusLog(id, "Awaiting Verification", "Sent for approval-Verify", logged_in_user);
                                return Tuple.Create(true, "");
                            }
                            else
                                return Tuple.Create(false, msg);
                        }
                        return Tuple.Create(false, "Something went wrong please contact administrator");
                    }
                    else
                        return Tuple.Create(false, "This Outsourcing is already approved");


                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        #endregion

        public STEViewModel getOSGSalaryStructureDetails(int OSGID, int OdrId)
        {
            STEViewModel model = new STEViewModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OdrId > 0)
                    {
                        var mastQuery = (from m in context.vw_RCTOverAllApplicationEntry where m.OrderId == OdrId select m).FirstOrDefault();
                        var detQuery = (from d in context.tblRCTSalaryCalcDetails where d.ID == OSGID && (d.OrderId == OdrId || OdrId == 0) && d.TypeCode == "OSG"/* && d.IsCurrentVersion == true*/select d).FirstOrDefault();
                        if (mastQuery != null && detQuery != null)
                        {
                            var statutoryQuery = (from S in context.tblRCTStatutory
                                                  where S.StatutoryId == detQuery.StatutoryId
                                                  select S).FirstOrDefault();
                            model.Name = mastQuery.ProfessionalType + " " + mastQuery.CandidateName;
                            model.Typeofappointment = mastQuery.TypeofAppointment;
                            model.ProjectNumber = Common.GetProjectNameandNumber(mastQuery.ProjectId ?? 0);
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", mastQuery.AppointmentStartdate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", mastQuery.AppointmentEnddate);
                            model.Designation = mastQuery.PostRecommended;
                            model.BasicPay = mastQuery.BasicPay ?? 0;
                            model.PayeeType = mastQuery.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                            model.CommitmentAmount = mastQuery.CommitmentAmount ?? 0;
                            model.Experience = Common.getExperienceInWordings(OSGID, "OSG");
                            model.Qualification = Common.getQualificationWordings(OSGID, "OSG");

                            model.RecommendedSalary = detQuery.RecommendSalary;
                            model.EmpPFBasicWages = detQuery.PFBasicWages;
                            model.EmployeePF = detQuery.EmployeePF;
                            model.EmployeeESIC = detQuery.EmployeeESIC;
                            model.EmployeeProfessionalTax = detQuery.EmpProfessionalTax;
                            model.EmployeeTtlDeduct = detQuery.EmpTotalDeduction;
                            model.EmployeeNetSalary = detQuery.EmpNetSalary;
                            model.EmployerPF = detQuery.EmployerPF;
                            model.EmployerESIC = detQuery.EmployerESIC;
                            model.EmployerIns = detQuery.EmployerInsurance;
                            model.EmployerTtlContribute = detQuery.EmployerTotalContribution;
                            model.EmployeeCTC = detQuery.EmployerCTC;
                            model.AgencyFee = detQuery.EmployerAgencyFee;
                            model.CTCwithAgencyFee = detQuery.EmployerCTCWithAgencyFee;
                            model.SalaryGST = detQuery.EmployerGST;
                            model.TotalCTC = detQuery.TotalCostPerMonth;
                            model.GSTPrecentage = detQuery.GSTPercentage;
                            model.AgencyFeePrecentage = detQuery.AgencyFeePercentage;
                            model.EmployeeESICPrecentage = statutoryQuery != null ? statutoryQuery.ESICEmployeePercentage : null;
                            model.EmployerESICPrecentage = statutoryQuery != null ? statutoryQuery.ESICEmployerPercentage : null;
                            model.LWFEmployerContribution = statutoryQuery != null ? statutoryQuery.LWFEmployerContribution : null;
                            var comQuery = (from c in context.tblRCTCommitmentRequest
                                            where c.ReferenceNumber == mastQuery.ApplicationNo
                                            && c.OrderId == OdrId && !string.IsNullOrEmpty(c.CommitmentNumber)
                                            orderby c.RecruitmentRequestId descending
                                            select c.CommitmentNumber).FirstOrDefault();
                            model.CommitmentAvailableBalance = Common.GetCommitmentBalance(comQuery);
                        }
                    }
                    else
                    {
                        var mastQuery = (from M in context.tblRCTOutsourcing
                                         join D in context.tblRCTDesignation on M.DesignationId equals D.DesignationId
                                         where M.OSGID == OSGID
                                         select new { M, D }).FirstOrDefault();
                        var detQuery = (from S in context.tblRCTSalaryCalcDetails where S.ID == OSGID && (S.OrderId == OdrId || OdrId == 0) && S.TypeCode == "OSG"/* && S.IsCurrentVersion == true*/ select S).FirstOrDefault();
                        if (mastQuery != null && detQuery != null)
                        {
                            var statutoryQuery = (from S in context.tblRCTStatutory
                                                  where S.StatutoryId == detQuery.StatutoryId
                                                  select S).FirstOrDefault();
                            model.Name = Common.GetCodeControlName(mastQuery.M.ProfessionalType ?? 0, "RCTProfessional") + mastQuery.M.Name;
                            model.Typeofappointment = Common.GetCodeControlName(mastQuery.M.TypeofAppointment ?? 0, "OSGAppointmenttype");
                            model.ProjectNumber = Common.GetProjectNameandNumber(mastQuery.M.ProjectId ?? 0);
                            model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", mastQuery.M.AppointmentStartdate);
                            model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", mastQuery.M.AppointmentEnddate);
                            model.Designation = mastQuery.D.Designation;
                            model.BasicPay = mastQuery.M.Salary ?? 0;
                            model.PayeeType = mastQuery.M.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                            model.CommitmentAmount = mastQuery.M.CommitmentAmount ?? 0;
                            model.Experience = Common.getExperienceInWordings(OSGID, "OSG");
                            model.Qualification = Common.getQualificationWordings(OSGID, "OSG");

                            model.RecommendedSalary = detQuery.RecommendSalary;
                            model.EmpPFBasicWages = detQuery.PFBasicWages;
                            model.EmployeePF = detQuery.EmployeePF;
                            model.EmployeeESIC = detQuery.EmployeeESIC;
                            model.EmployeeProfessionalTax = detQuery.EmpProfessionalTax;
                            model.EmployeeTtlDeduct = detQuery.EmpTotalDeduction;
                            model.EmployeeNetSalary = detQuery.EmpNetSalary;
                            model.EmployerPF = detQuery.EmployerPF;
                            model.EmployerESIC = detQuery.EmployerESIC;
                            model.EmployerIns = detQuery.EmployerInsurance;
                            model.EmployerTtlContribute = detQuery.EmployerTotalContribution;
                            model.EmployeeCTC = detQuery.EmployerCTC;
                            model.AgencyFee = detQuery.EmployerAgencyFee;
                            model.CTCwithAgencyFee = detQuery.EmployerCTCWithAgencyFee;
                            model.SalaryGST = detQuery.EmployerGST;
                            model.TotalCTC = detQuery.TotalCostPerMonth;
                            model.GSTPrecentage = detQuery.GSTPercentage;
                            model.AgencyFeePrecentage = detQuery.AgencyFeePercentage;
                            model.EmployeeESICPrecentage = statutoryQuery != null ? statutoryQuery.ESICEmployeePercentage : null;
                            model.EmployerESICPrecentage = statutoryQuery != null ? statutoryQuery.ESICEmployerPercentage : null;
                            model.LWFEmployerContribution = statutoryQuery != null ? statutoryQuery.LWFEmployerContribution : null;
                            var comQuery = (from c in context.tblRCTCommitmentRequest
                                            where c.ReferenceNumber == mastQuery.M.ApplicationNumber && c.RequestType == "New Appointment"
                                            && !string.IsNullOrEmpty(c.CommitmentNumber)
                                            orderby c.RecruitmentRequestId descending
                                            select c.CommitmentNumber).FirstOrDefault();
                            model.CommitmentAvailableBalance = Common.GetCommitmentBalance(comQuery);
                        }
                    }

                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public STEViewModel getOSGOfferletterDetails(int OSGID)
        {
            STEViewModel model = new STEViewModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OSGID > 0)
                    {
                        var QrySTE = (from S in context.tblRCTOutsourcing
                                      join D in context.tblRCTDesignation on S.DesignationId equals D.DesignationId
                                      where S.OSGID == OSGID
                                      select new { S, D }).FirstOrDefault();
                        //Appointment Type\\
                        int Typeofappointment = QrySTE.S.TypeofAppointment ?? 0;
                        model.Typeofappointment = Common.GetCodeControlName(Typeofappointment, "OSGAppointmenttype");
                        model.STEId = QrySTE.S.OSGID;
                        model.ApplicationNo = QrySTE.S.ApplicationNumber;
                        model.PresentAddress = QrySTE.S.PresentAddress;
                        model.Name = Common.GetCodeControlName(QrySTE.S.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.S.Name;
                        model.StaffCategory = QrySTE.S.StaffCategory;
                        model.ConsolidatedPay = QrySTE.S.ConsolidatedPay ?? false;
                        model.MsPhd = QrySTE.S.MsPhd ?? false;
                        model.ProjectId = QrySTE.S.ProjectId;
                        model.DesignationId = QrySTE.D.DesignationId;
                        model.Designation = QrySTE.D.Designation;
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.S.AppointmentStartdate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.S.AppointmentEnddate);
                        model.BasicPay = QrySTE.S.Salary ?? 0;
                        model.CommitmentAmount = QrySTE.S.CommitmentAmount ?? 0;
                        model.ConsolidatedPayPerMonth = QrySTE.S.Salary ?? 0;
                        model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.S.ProjectId ?? 0);
                        int ProjectID = QrySTE.S.ProjectId ?? 0;
                        model.offerDate = QrySTE.S.OfferDate ?? DateTime.Now;
                        model.EmployeeID = QrySTE.S.EmployeersID;
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.S.AppointmentStartdate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.S.AppointmentEnddate);
                        //Project details
                        model.ProjectDetailsModel = getProjectSummary(ProjectID);
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }

        #region OSG Modify
        public int OSGModifyProfile(STEModel model, int logged_in_userId)
        {
            try
            {
                int res = 0;
                int OSGID = model.STEId;
                string oldemail = "";
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (OSGID > 0)
                            {
                                var editQuery = (from SM in context.tblRCTOutsourcing where SM.OSGID == OSGID && SM.isEmployee == true select SM).FirstOrDefault();
                                if (editQuery != null)
                                {
                                    if (model.PersonImage != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.PersonImage.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.PersonImage.UploadFile("Requirement",  docName));
                                        model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                        editQuery.CandidateImage = docName;
                                    }
                                    if (model.CantidateSignature != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                        model.CantidateSignature.UploadFile("Requirement", docName);
                                        editQuery.CandidateSignature = docName;
                                    }
                                    editQuery.EmergencyContact = model.EmergencyContactNo;
                                    editQuery.ProfessionalType = model.ProfessionalId;
                                    editQuery.Name = model.Name;
                                    editQuery.NameoftheGuardian = model.Nameoftheguardian;
                                    editQuery.ContactNumber = model.ContactNumber;
                                    editQuery.AlternativeContactNumber = model.AlternativeContactNumber;
                                    oldemail = editQuery.Email;
                                    editQuery.Email = model.Email;
                                    editQuery.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                    editQuery.PresentAddress = model.PresentAddress;
                                    editQuery.PermanentAddress = model.PermanentAddress;
                                    editQuery.PhysicallyChallenged = model.PhysicallyChallenged == 1 ? "Yes" : model.PhysicallyChallenged == 2 ? "No" : "";
                                    editQuery.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                    editQuery.PPONo = model.PPONo;
                                    editQuery.ToMail = model.ToMail;
                                    editQuery.bcc = model.bcc;
                                    editQuery.CSIRStaffPayMode = model.CSIRStaff;
                                    editQuery.StaffCategory = model.StaffCategory;
                                    editQuery.BankAccountNumber = model.BankAccountNo;
                                    editQuery.BankName = model.BankName;
                                    editQuery.BankId = model.BankId;
                                    editQuery.IFSCCode = model.IFSCCode;
                                    editQuery.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                    editQuery.GateScore = Convert.ToDecimal(model.GateScore);
                                    editQuery.MsPhdType = model.MsPhdType;
                                    editQuery.MsPhd = model.MsPhdType > 0 ? true : false;
                                    editQuery.PhdDetail = model.MsPhd == false ? null : model.PhdDetail;
                                    editQuery.RequestedBy = model.RequestedByPI;
                                    editQuery.EmployeeWorkplace = model.EmployeeWorkplace;
                                    context.SaveChanges();
                                    foreach (var item in model.EducationDetail)
                                    {
                                        if (item.EducationId == null)
                                        {
                                            tblRCTOSGEducationDetail EducationDetail = new tblRCTOSGEducationDetail();
                                            EducationDetail.OSGId = OSGID;
                                            EducationDetail.QualificationId = item.QualificationId;
                                            EducationDetail.DisciplineId = item.DisciplineId;
                                            EducationDetail.UniversityorInstitution = item.Institution;
                                            EducationDetail.YearOfPassing = item.YearofPassing;
                                            EducationDetail.MarkType = item.MarkType;
                                            EducationDetail.Marks = item.Marks;
                                            EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                            if (item.Certificate != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                //model.CantidateSignature.UploadFile("Requirement", docName);
                                                item.Certificate.UploadFile("Requirement", docName);
                                                EducationDetail.DocumentFilePath = docName;
                                                EducationDetail.FileName = actName;
                                            }
                                            EducationDetail.Remarks = item.Remarks;
                                            EducationDetail.CrtdTs = DateTime.Now;
                                            EducationDetail.CrtdUser = logged_in_userId;
                                            EducationDetail.isCurrentVersion = true;
                                            context.tblRCTOSGEducationDetail.Add(EducationDetail);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            int OSGEducationDetailID = item.EducationId ?? 0;
                                            var QryEducation = (from SM in context.tblRCTOSGEducationDetail where SM.OSGId == OSGID && SM.OSGEducationDetailId == OSGEducationDetailID && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                            if (QryEducation != null)
                                            {

                                                QryEducation.QualificationId = item.QualificationId;
                                                QryEducation.DisciplineId = item.DisciplineId;
                                                QryEducation.UniversityorInstitution = item.Institution;
                                                QryEducation.YearOfPassing = item.YearofPassing;
                                                QryEducation.MarkType = item.MarkType;
                                                QryEducation.Marks = item.Marks;
                                                QryEducation.DivisionClassObtained = item.DivisionClassObtained;
                                                if (item.Certificate != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    //model.CantidateSignature.UploadFile("Requirement", docName);
                                                    item.Certificate.UploadFile("Requirement", docName);
                                                    QryEducation.DocumentFilePath = docName;
                                                    QryEducation.FileName = actName;
                                                }
                                                QryEducation.Remarks = item.Remarks;
                                                QryEducation.UptdTs = DateTime.Now;
                                                QryEducation.UptdUser = logged_in_userId;
                                                context.SaveChanges();
                                            }
                                        }
                                    }

                                    foreach (var item in model.ExperienceDetail)
                                    {
                                        if (item.ExperienceId == null)
                                        {
                                            if (item.ExperienceTypeId != null)
                                            {
                                                tblRCTOSGExperienceDetail ExperienceDetail = new tblRCTOSGExperienceDetail();
                                                ExperienceDetail.OSGId = OSGID;
                                                ExperienceDetail.TypeId = item.ExperienceTypeId;
                                                ExperienceDetail.Organisation = item.Organisation;
                                                ExperienceDetail.DesignationId = item.DesignationListId;
                                                ExperienceDetail.Designation = item.DesignationautoComplete;
                                                ExperienceDetail.FromYear = item.FromDate;
                                                ExperienceDetail.ToYear = item.ToDate;
                                                ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                                if (item.ExperienceFile != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    //model.CantidateSignature.UploadFile("Requirement", docName);
                                                    item.ExperienceFile.UploadFile("Requirement", docName);
                                                    ExperienceDetail.DocumentFilePath = docName;
                                                    ExperienceDetail.FileName = actName;
                                                }
                                                ExperienceDetail.Remarks = item.Remarks;
                                                ExperienceDetail.CrtdUser = logged_in_userId;
                                                ExperienceDetail.CrtdTs = DateTime.Now;
                                                ExperienceDetail.isCurrentVersion = true;
                                                context.tblRCTOSGExperienceDetail.Add(ExperienceDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            int ExperienceId = item.ExperienceId ?? 0;
                                            var QryExp = (from SM in context.tblRCTOSGExperienceDetail where SM.OSGId == OSGID && SM.OSGExperienceDetailId == ExperienceId && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                            if (QryExp != null)
                                            {
                                                if (item.ExperienceTypeId != null)
                                                {
                                                    if (item.ExperienceFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                                        item.ExperienceFile.UploadFile("Requirement", docName);
                                                        QryExp.DocumentFilePath = docName;
                                                        QryExp.FileName = actName;
                                                        QryExp.UptdUser = logged_in_userId;
                                                        QryExp.UptdTs = DateTime.Now;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (model.OtherDetail != null)
                                    {
                                        if (model.OtherDetail.Count > 0)
                                        {
                                            for (int i = 0; i < model.OtherDetail.Count; i++)
                                            {
                                                if (model.OtherDetail[i].OtherDetailId == null && model.OtherDetail[i].OtherNames != null)
                                                {
                                                    tblRCTOSGOtherDetail OtherDetail = new tblRCTOSGOtherDetail();
                                                    OtherDetail.OSGId = OSGID;
                                                    //OtherDetail.OtherDetailsId = model.OtherDetail[i].OtherDetailId;	
                                                    OtherDetail.OthersName = model.OtherDetail[i].OtherNames;
                                                    OtherDetail.Description = model.OtherDetail[i].Description;
                                                    //if (model.OtherDetail[i].OtherDetailFilePath != null)
                                                    //{
                                                    //    OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                    //    OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                    //}
                                                    if (model.OtherDetail[i].OtherDetailFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        //item.ExperienceFile.UploadFile("Requirement", docName);
                                                        model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);

                                                        model.OtherDetail[i].OtherDetailFileName = actName;
                                                        model.OtherDetail[i].OtherDetailFilePath = docName;
                                                        OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                        OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                    }

                                                    OtherDetail.Remarks = model.OtherDetail[i].Remarks;
                                                    OtherDetail.CrtdUser = logged_in_userId;
                                                    OtherDetail.CrtdTS = DateTime.Now;
                                                    OtherDetail.Status = "Active";
                                                    context.tblRCTOSGOtherDetail.Add(OtherDetail);
                                                    context.SaveChanges();
                                                }
                                                else
                                                {
                                                    int OtherDetailID = model.OtherDetail[i].OtherDetailId ?? 0;
                                                    var Qryothr = (from SM in context.tblRCTOSGOtherDetail where SM.OSGId == OSGID && SM.OtherDetailsId == OtherDetailID && SM.Status == "Active" select SM).ToList();
                                                    if (Qryothr.Count > 0)
                                                    {
                                                        for (int j = 0; j < Qryothr.Count; j++)
                                                        {
                                                            if (model.OtherDetail[j].OtherNames != null)
                                                            {
                                                                Qryothr[j].OSGId = OSGID;
                                                                Qryothr[j].OthersName = model.OtherDetail[i].OtherNames;
                                                                Qryothr[j].Description = model.OtherDetail[i].Description;
                                                                //if (model.OtherDetail[i].OtherDetailFilePath != null)
                                                                //{
                                                                //    Qryothr[j].AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                                //    Qryothr[j].AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                                //}
                                                                if (model.OtherDetail[i].OtherDetailFile != null)
                                                                {
                                                                    string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                                    var guid = Guid.NewGuid().ToString();
                                                                    var docName = guid + "_" + actName;
                                                                    //item.ExperienceFile.UploadFile("Requirement", docName);
                                                                    model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);
                                                                    model.OtherDetail[i].OtherDetailFileName = actName;
                                                                    model.OtherDetail[i].OtherDetailFilePath = docName;
                                                                    Qryothr[j].AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                                    Qryothr[j].AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                                }

                                                                Qryothr[j].Remarks = model.OtherDetail[i].Remarks;
                                                                Qryothr[j].UpdtUser = logged_in_userId;
                                                                Qryothr[j].UpdtTS = DateTime.Now;
                                                                Qryothr[j].Status = "Active";
                                                                context.SaveChanges();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    tblRCTOSGStatusLog status = new tblRCTOSGStatusLog();
                                    status.OSGID = OSGID;
                                    status.PresentStatus = editQuery.Status;
                                    status.NewStatus = editQuery.Status;
                                    status.preBy = Common.GetPIName(logged_in_userId);
                                    status.Crt_By = logged_in_userId;
                                    status.Crt_TS = DateTime.Now;
                                    status.Message = "Application modified";
                                    context.tblRCTOSGStatusLog.Add(status);
                                    context.SaveChanges();
                                    transaction.Commit();
                                    res = 1;
                                    if (oldemail != model.Email)
                                        UpdateModifiyProfileBaseEmployeePortal(editQuery.EmployeersID, model.Email, logged_in_userId);
                                }
                                else
                                    res = -1;
                            }
                            else
                                res = -1;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return 0;
                        }
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return 0;
            }
        }
        #endregion

        #region OSG Verification

        public STEVerificationModel GetOSGVerification(int OSGID)
        {
            STEVerificationModel model = new STEVerificationModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OSGID > 0)
                    {
                        var QryOSG = (from A in context.tblRCTOutsourcing
                                      from D in context.tblRCTDesignation
                                      from C in context.tblCodeControl
                                      where A.DesignationId == D.DesignationId && C.CodeValAbbr == A.ProfessionalType && C.CodeName == "RCTProfessional"
                                      where A.OSGID == OSGID
                                      select new { A, C, D.Designation }).FirstOrDefault();
                        var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                          where A.ID == OSGID && A.IsCurrentVersion == true && A.Status == "Active"
                                          select A).FirstOrDefault();
                        model.Status = QryOSG.A.Status;
                        model.STEId = QryOSG.A.OSGID;
                        model.ApplicationNo = QryOSG.A.ApplicationNumber;
                        model.TypeofappointmentId = QryOSG.A.TypeofAppointment;
                        model.Typeofappointment = Common.GetCodeControlName(QryOSG.A.TypeofAppointment ?? 0, "OSGAppointmenttype");
                        model.PersonImagePath = QryOSG.A.CandidateImage;
                        if (QryOSG.A.ResumeFile != null)
                            model.ResumeFileName = QryOSG.A.ResumeFile.Substring((QryOSG.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = QryOSG.A.ResumeFile;
                        model.CantidateSignatureFilePath = QryOSG.A.CandidateSignature;
                        model.Name = QryOSG.C.CodeValDetail + " " + QryOSG.A.Name;
                        if (!string.IsNullOrEmpty(QryOSG.A.AadhaarNumber))
                            model.aadharnumber = long.Parse(QryOSG.A.AadhaarNumber == "" ? "0" : QryOSG.A.AadhaarNumber);
                        else
                            model.aadharnumber = null;
                        model.PAN = QryOSG.A.PANNo;
                        model.ContactNumber = QryOSG.A.ContactNumber;
                        model.EmergencyContactNo = QryOSG.A.EmergencyContact;
                        model.EmployeeTypeCatecory = QryOSG.A.EmployeeType ?? 0;
                        model.OldEmployeeNumber = QryOSG.A.EmployeeCategory == "Old Employee" ? QryOSG.A.OldNumber : null;
                        model.AlternativeContactNumber = QryOSG.A.AlternativeContactNumber;
                        model.Email = QryOSG.A.Email;
                        model.PresentAddress = QryOSG.A.PresentAddress;
                        model.isSameasPermanentAddress = QryOSG.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = QryOSG.A.PermanentAddress;
                        model.StaffCategory = QryOSG.A.StaffCategory;
                        model.PPONo = QryOSG.A.PPONo;
                        model.CSIRStaff = QryOSG.A.CSIRStaffPayMode ?? 0;
                        model.MedicalAmmount = QryOSG.A.MedicalAmmount ?? 0;
                        model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                        decimal MedicalAmount = QryOSG.A.MedicalAmmount ?? 0;
                        model.Salary = QryOSG.A.Salary ?? 0; ;
                        model.HRA = QryOSG.A.HRA ?? 0;
                        model.MsPhd = QryOSG.A.MsPhd ?? false;
                        model.PhdDetail = QryOSG.A.PhdDetail;
                        model.ProjectId = QryOSG.A.ProjectId;
                        model.ProjectNumber = Common.GetProjectNumber(QryOSG.A.ProjectId ?? 0);
                        model.DesignationId = QryOSG.A.DesignationId;
                        model.BankAccountNo = QryOSG.A.BankAccountNumber;
                        model.BankName = QryOSG.A.BankName;
                        model.IFSCCode = QryOSG.A.IFSCCode;
                        model.GovProof = QryOSG.A.GovernmentProofVerifyDoc ?? 0;
                        model.isVerifiedGovProof = QryOSG.A.GovernmentProofVerify ?? false;
                        model.JoiningReportPath = QryOSG.A.JoiningReport;
                        model.OfferDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.OfferDate);
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentStartdate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentEnddate);
                        model.EmployeeWorkplace = QryOSG.A.EmployeeWorkplace;

                        model.Designation = QryOSG.Designation;
                        model.PayType = QryOSG.A.ConsolidatedPay == true ? "Consolidated Pay" : "Fellowship Pay";
                        model.VerificationRemarks = QryOSG.A.VerificationRemarks;
                        if (QryOSG.A.NotetoCMAdmin == true)
                            model.FlowApprover = "CMAdmin";
                        if (QryOSG.A.NotetoDean == true)
                            model.FlowApprover = "NDean";
                        if (QryOSG.A.JoiningReport != null)
                        {
                            model.JoiningReportFileName = QryOSG.A.JoiningReport.Substring(QryOSG.A.JoiningReport.IndexOf("_") + 1);
                        }

                        model.RecommendedSalary = Qrysalcalc.RecommendSalary;
                        model.EmpSalutation = Qrysalcalc.Salutation;
                        model.EmpName = QryOSG.A.Name;
                        model.EmpDesig = Qrysalcalc.EmpDesignation;
                        model.EmpType = Qrysalcalc.EmpType;
                        model.PhysicalyHandicaped = Qrysalcalc.PhysicallyHandicapped;
                        model.EmpPFBasicWages = Qrysalcalc.PFBasicWages;
                        model.EmployeePF = Qrysalcalc.EmployeePF;
                        model.EmployeeESIC = Qrysalcalc.EmployeeESIC;
                        model.EmployeeProfessionalTax = Qrysalcalc.EmpProfessionalTax;
                        model.EmployeeTtlDeduct = Qrysalcalc.EmpTotalDeduction;
                        model.EmployeeNetSalary = Qrysalcalc.EmpNetSalary;
                        model.EmployerPF = Qrysalcalc.EmployerPF;
                        model.EmployerIns = Qrysalcalc.EmployerInsurance;
                        model.EmployerESIC = Qrysalcalc.EmployerESIC;
                        model.EmployerTtlContribute = Qrysalcalc.EmployerTotalContribution;
                        model.EmployeeCTC = Qrysalcalc.EmployerCTC;
                        model.AgencyFee = Qrysalcalc.EmployerAgencyFee;
                        model.SalaryGST = Qrysalcalc.EmployerGST;
                        model.CTCwithAgencyFee = Qrysalcalc.EmployerCTCWithAgencyFee;
                        model.TotalCTC = Qrysalcalc.TotalCostPerMonth;

                        model.Notes = (from c in context.tblRCTOSGNotes
                                       where c.OSGId == OSGID
                                       orderby c.OSGNotesID ascending
                                       select new STENotes()
                                       {
                                           PICommends = c.PICommends,
                                           HRNote = c.HRNote,
                                       }).ToList();
                        model.ProjectNumber = Common.GetProjectNameandNumber(QryOSG.A.ProjectId ?? 0);
                        var QryEducation = (from c in context.tblRCTOSGEducationDetail
                                            from q in context.tblRCTQualificationList
                                            join d in context.tblCodeControl on c.MarkType equals d.CodeValAbbr into lft
                                            from j in lft.DefaultIfEmpty()
                                            where c.OSGId == OSGID && c.isCurrentVersion == true && c.QualificationId == q.QualificationId
                                             && (j == null ? true : j.CodeName == "RCTMarkType")
                                            orderby c.OSGEducationDetailId
                                            select new { c, q, j }).ToList();
                        if (QryEducation != null)
                        {
                            for (int i = 0; i < QryEducation.Count; i++)
                            {
                                int EducationID = QryEducation[i].c.QualificationId ?? 0;
                                int DisciplineID = QryEducation[i].c.DisciplineId ?? 0;
                                var list = Common.GetCourseList(EducationID);
                                var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();
                                EducationList.Add(new STEEducationModel()
                                {
                                    Education = QryEducation[i].q.Qualification,
                                    EducationId = QryEducation[i].c.OSGEducationDetailId,
                                    QualificationId = QryEducation[i].c.QualificationId,
                                    DisciplineId = QryEducation[i].c.DisciplineId,
                                    Discipline = Discipline,
                                    Institution = QryEducation[i].c.UniversityorInstitution,
                                    YearofPassing = QryEducation[i].c.YearOfPassing,
                                    MarkType = QryEducation[i].c.MarkType,
                                    strMarkType = QryEducation[i].j == null ? "" : QryEducation[i].j.CodeValDetail,
                                    Marks = QryEducation[i].c.Marks,
                                    DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                    CertificatePath = QryEducation[i].c.DocumentFilePath,
                                    CertificateName = QryEducation[i].c.FileName,
                                    Remarks = QryEducation[i].c.Remarks,
                                    DisiplineList = list
                                });
                            }
                        }

                        model.EducationDetail = EducationList.Count > 0 ? EducationList : null;
                        model.OtherDetail = (from c in context.tblRCTOSGOtherDetail
                                             where c.OSGId == OSGID && c.Status == "Active"
                                             orderby c.OtherDetailsId
                                             select new OtherDetailModel()
                                             {
                                                 OtherNames = c.OthersName,
                                                 OtherDetailId = c.OtherDetailsId,
                                                 Description = c.Description,
                                                 OtherDetailFileName = c.AttachmentName,
                                                 OtherDetailFilePath = c.AttachmentPath,
                                                 Remarks = c.Remarks,
                                             }).ToList();
                        model.OtherDetail = model.OtherDetail.Count > 0 ? model.OtherDetail : null;
                        var QryExperience = (from c in context.tblRCTOSGExperienceDetail
                                             join d in context.tblCodeControl on c.TypeId equals d.CodeValAbbr into lft
                                             from j in lft.DefaultIfEmpty()
                                             where c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTExperienceType")
                                             && c.OSGId == OSGID
                                             orderby c.OSGExperienceDetailId
                                             select new { c, j }).ToList();
                        if (QryExperience != null)
                        {
                            for (int i = 0; i < QryExperience.Count(); i++)
                            {
                                ExperienceList.Add(new STEExperienceModel()
                                {
                                    ExperienceId = QryExperience[i].c.OSGExperienceDetailId,
                                    ExperienceTypeId = QryExperience[i].c.TypeId,
                                    ExperienceType = QryExperience[i].j == null ? "" : QryExperience[i].j.CodeValDetail,
                                    Organisation = QryExperience[i].c.Organisation,
                                    DesignationListId = QryExperience[i].c.DesignationId,
                                    DesignationautoComplete = QryExperience[i].c.Designation,
                                    FromDate = QryExperience[i].c.FromYear,
                                    ToDate = QryExperience[i].c.ToYear,
                                    SalaryDrawn = QryExperience[i].c.SalaryDrawn,
                                    ExperienceFilePath = QryExperience[i].c.DocumentFilePath,
                                    ExperienceFileName = QryExperience[i].c.FileName,
                                    Remarks = QryExperience[i].c.Remarks,
                                    strFromDate = string.Format("{0:dd-MMMM-yyyy}", QryExperience[i].c.FromYear),
                                    strToDate = string.Format("{0:dd-MMMM-yyyy}", QryExperience[i].c.ToYear)
                                });
                            }
                        }
                        model.ExperienceDetail = ExperienceList.Count > 0 ? ExperienceList : null;
                        model.Expericence = Common.getExperienceInWordings(OSGID, "OSG");
                        model.Qualification = Common.getQualificationWordings(OSGID, "OSG");
                        List<string> PICommands = new List<string>();
                        var QryNote = (from c in context.tblRCTOSGPIJustificationDoc
                                       where c.OSGID == OSGID && !string.IsNullOrEmpty(c.Description) && c.Deleted_f != true
                                       group c by c.Description into grp
                                       select new { grp.Key }).ToArray();
                        if (QryNote != null)
                        {
                            for (int i = 0; i < QryNote.Count(); i++)
                            {
                                if (!string.IsNullOrEmpty(QryNote[i].Key))
                                {
                                    PICommands.Add(QryNote[i].Key);
                                }
                            }
                        }
                        model.PIJustificationCommands = PICommands;
                        model.BloodGroup = QryOSG.A.Bloodgroup;
                        model.BloodGroupRH = QryOSG.A.BloodgroupRH;
                        model.isHaveGateScore = QryOSG.A.isHaveGateScore == true ? "Yes" : "No";
                        model.GateScore = QryOSG.A.GateScore;
                        model.PIJustificationCommands = PICommands;
                        model.CommitmentAmount = QryOSG.A.CommitmentAmount;
                        var CommitmentNumber = (from c in context.tblRCTCommitmentRequest
                                                where c.ReferenceNumber == QryOSG.A.ApplicationNumber
                                                select c.CommitmentNumber).FirstOrDefault();
                        if (!string.IsNullOrEmpty(CommitmentNumber))
                            model.CommitmentNo = CommitmentNumber;
                        //Common.getIITMExperience(OSGID, "OSG");
                        model.StatutoryId = Qrysalcalc.StatutoryId;
                        model.RequestedfromPI = Common.GetPIName(QryOSG.A.RequestedBy ?? 0);
                        if (QryOSG.A.SalaryLevelId > 0)
                        {
                            var data = getSalaryLevelName_Description(QryOSG.A.SalaryLevelId ?? 0);
                            model.SalaryLevel = data.Item1;
                            model.SalaryLevelDescription = data.Item2;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public Tuple<int,int, string> VerifyOSG(STEVerificationModel model, int logged_in_userId, string button)
        {
            try
            {
                int res = 0;
                int OSGID = model.STEId ?? 0;
                string EmployeersID = "", errMsg = string.Empty;
                
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (button == "Save as drafts")
                            {
                                var _qryOSG = (from s in context.tblRCTOutsourcing
                                               from d in context.tblRCTDesignation
                                               where s.DesignationId == d.DesignationId//&& s.Status == "Awaiting Verification" || s.Status == "Awaiting Verification-Draft"
                                                && s.OSGID == OSGID
                                               select new { s, d }).FirstOrDefault();
                                if (_qryOSG != null)
                                {
                                    _qryOSG.s.Status = "Awaiting Verification-Draft";
                                    if (model.PersonImage != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.PersonImage.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.PersonImage.UploadFile("Requirement",  docName));
                                        model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                        _qryOSG.s.CandidateImage = docName;
                                    }
                                    if (model.Resume != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.Resume.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.PersonImagePath.UploadFile("Requirement", docName);
                                        model.Resume.UploadFile("Requirement", docName);
                                        _qryOSG.s.ResumeFile = docName;
                                    }
                                    if (model.CantidateSignature != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                        model.CantidateSignature.UploadFile("Requirement", docName);
                                        _qryOSG.s.CandidateSignature = docName;
                                    }
                                    _qryOSG.s.PANNo = model.PAN;
                                    _qryOSG.s.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                    _qryOSG.s.ContactNumber = model.ContactNumber;
                                    _qryOSG.s.AlternativeContactNumber = model.AlternativeContactNumber;
                                    _qryOSG.s.EmergencyContact = model.EmergencyContactNo;
                                    _qryOSG.s.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                    _qryOSG.s.PresentAddress = model.PresentAddress;
                                    _qryOSG.s.PermanentAddress = model.PermanentAddress;
                                    _qryOSG.s.GovernmentProofVerifyDoc = model.GovProof;
                                    _qryOSG.s.GovernmentProofVerify = model.isVerifiedGovProof;
                                    //_qrySTE.s.EmployeeType = model.EmployeeTypeCatecory;
                                    //if (model.StaffCategory != null)
                                    //    _qryOSG.s.StaffCategory = model.StaffCategory;
                                    //_qrySTE.s.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                    _qryOSG.s.MsPhdType = model.MsPhdType;
                                    _qryOSG.s.MsPhd = model.MsPhdType > 0 ? true : false;
                                    _qryOSG.s.MsPhd = model.MsPhd;
                                    _qryOSG.s.PhdDetail = model.PhdDetail;
                                    _qryOSG.s.ActualDate = model.ActualDate;
                                    _qryOSG.s.VerificationRemarks = model.VerificationRemarks;
                                    if (model.JoiningReport != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.JoiningReport.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.JoinungReport.UploadFile("Requirement", docName);
                                        model.JoiningReport.UploadFile("Requirement", docName);
                                        _qryOSG.s.JoiningReport = docName;
                                    }
                                    _qryOSG.s.BankAccountNumber = model.BankAccountNo;
                                    _qryOSG.s.BankName = model.BankName;
                                    _qryOSG.s.IFSCCode = model.IFSCCode;
                                    _qryOSG.s.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                    _qryOSG.s.GateScore = model.GateScore;
                                    _qryOSG.s.Bloodgroup = model.BloodGroup;
                                    _qryOSG.s.BloodgroupRH = model.BloodGroupRH;
                                    if (model.EducationDetail != null)
                                    {
                                        foreach (var item in model.EducationDetail)
                                        {
                                            if (item.EducationId == null)
                                            {
                                                tblRCTOSGEducationDetail _EducationDetail = new tblRCTOSGEducationDetail();
                                                _EducationDetail.OSGId = OSGID;
                                                _EducationDetail.QualificationId = item.QualificationId;
                                                _EducationDetail.DisciplineId = item.DisciplineId;
                                                _EducationDetail.UniversityorInstitution = item.Institution;
                                                _EducationDetail.YearOfPassing = item.YearofPassing;
                                                _EducationDetail.MarkType = item.MarkType;
                                                _EducationDetail.Marks = item.Marks;
                                                _EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                                if (item.Certificate != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    //model.CantidateSignature.UploadFile("Requirement", docName);
                                                    item.Certificate.UploadFile("Requirement", docName);
                                                    _EducationDetail.DocumentFilePath = docName;
                                                    _EducationDetail.FileName = actName;
                                                }
                                                _EducationDetail.Remarks = item.Remarks;
                                                _EducationDetail.CrtdTs = DateTime.Now;
                                                _EducationDetail.CrtdUser = logged_in_userId;
                                                _EducationDetail.isCurrentVersion = true;
                                                context.tblRCTOSGEducationDetail.Add(_EducationDetail);
                                                context.SaveChanges();
                                            }
                                            else
                                            {
                                                int OSGEducationDetailID = item.EducationId ?? 0;
                                                var QryEducation = (from SM in context.tblRCTOSGEducationDetail where SM.OSGId == OSGID && SM.OSGEducationDetailId == OSGEducationDetailID && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                                if (QryEducation != null)
                                                {
                                                    if (item.Certificate != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                                        item.Certificate.UploadFile("Requirement", docName);
                                                        QryEducation.DocumentFilePath = docName;
                                                        QryEducation.FileName = actName;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (model.ExperienceDetail != null)
                                    {
                                        foreach (var item in model.ExperienceDetail)
                                        {
                                            if (item.ExperienceId == null)
                                            {
                                                if (item.ExperienceTypeId != null)
                                                {
                                                    tblRCTOSGExperienceDetail _ExperienceDetail = new tblRCTOSGExperienceDetail();
                                                    _ExperienceDetail.OSGId = OSGID;
                                                    _ExperienceDetail.TypeId = item.ExperienceTypeId;
                                                    _ExperienceDetail.Organisation = item.Organisation;
                                                    _ExperienceDetail.DesignationId = item.DesignationListId;
                                                    _ExperienceDetail.Designation = item.DesignationautoComplete;
                                                    _ExperienceDetail.FromYear = item.FromDate;
                                                    _ExperienceDetail.ToYear = item.ToDate;
                                                    _ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                                    if (item.ExperienceFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                                        item.ExperienceFile.UploadFile("Requirement", docName);
                                                        _ExperienceDetail.DocumentFilePath = docName;
                                                        _ExperienceDetail.FileName = actName;
                                                    }
                                                    _ExperienceDetail.Remarks = item.Remarks;
                                                    _ExperienceDetail.CrtdUser = logged_in_userId;
                                                    _ExperienceDetail.CrtdTs = DateTime.Now;
                                                    _ExperienceDetail.isCurrentVersion = true;
                                                    context.tblRCTOSGExperienceDetail.Add(_ExperienceDetail);
                                                    context.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                int ExperienceId = item.ExperienceId ?? 0;
                                                var QryExp = (from SM in context.tblRCTOSGExperienceDetail where SM.OSGId == OSGID && SM.OSGExperienceDetailId == ExperienceId && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                                if (QryExp != null)
                                                {
                                                    if (item.ExperienceTypeId != null)
                                                    {
                                                        if (item.ExperienceFile != null)
                                                        {
                                                            string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                            var guid = Guid.NewGuid().ToString();
                                                            var docName = guid + "_" + actName;
                                                            //model.CantidateSignature.UploadFile("Requirement", docName);
                                                            item.ExperienceFile.UploadFile("Requirement", docName);
                                                            QryExp.DocumentFilePath = docName;
                                                            QryExp.FileName = actName;
                                                        }
                                                        QryExp.UptdUser = logged_in_userId;
                                                        QryExp.UptdTs = DateTime.Now;
                                                        QryExp.isCurrentVersion = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (model.OtherDetail != null)
                                    {
                                        if (model.OtherDetail.Count > 0)
                                        {
                                            for (int i = 0; i < model.OtherDetail.Count; i++)
                                            {
                                                if (model.OtherDetail[i].OtherDetailId == null && model.OtherDetail[i].OtherNames != null)
                                                {
                                                    tblRCTOSGOtherDetail OtherDetail = new tblRCTOSGOtherDetail();
                                                    OtherDetail.OSGId = OSGID;
                                                    OtherDetail.OthersName = model.OtherDetail[i].OtherNames;
                                                    OtherDetail.Description = model.OtherDetail[i].Description;
                                                    if (model.OtherDetail[i].OtherDetailFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);
                                                        model.OtherDetail[i].OtherDetailFileName = actName;
                                                        model.OtherDetail[i].OtherDetailFilePath = docName;
                                                        OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                        OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                    }

                                                    OtherDetail.Remarks = model.OtherDetail[i].Remarks;
                                                    OtherDetail.CrtdUser = logged_in_userId;
                                                    OtherDetail.CrtdTS = DateTime.Now;
                                                    OtherDetail.Status = "Active";
                                                    context.tblRCTOSGOtherDetail.Add(OtherDetail);
                                                    context.SaveChanges();
                                                }
                                                else
                                                {
                                                    int OtherDetailID = model.OtherDetail[i].OtherDetailId ?? 0;
                                                    var Qryothr = (from SM in context.tblRCTOSGOtherDetail where SM.OSGId == OSGID && SM.OtherDetailsId == OtherDetailID && SM.Status == "Active" select SM).ToList();
                                                    if (Qryothr.Count > 0)
                                                    {
                                                        for (int j = 0; j < Qryothr.Count; j++)
                                                        {
                                                            if (model.OtherDetail[j].OtherNames != null)
                                                            {
                                                                Qryothr[j].OSGId = OSGID;
                                                                Qryothr[j].OthersName = model.OtherDetail[i].OtherNames;
                                                                Qryothr[j].Description = model.OtherDetail[i].Description;
                                                                if (model.OtherDetail[i].OtherDetailFile != null)
                                                                {
                                                                    string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                                    var guid = Guid.NewGuid().ToString();
                                                                    var docName = guid + "_" + actName;
                                                                    model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);
                                                                    model.OtherDetail[i].OtherDetailFileName = actName;
                                                                    model.OtherDetail[i].OtherDetailFilePath = docName;
                                                                    Qryothr[j].AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                                    Qryothr[j].AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                                }

                                                                Qryothr[j].Remarks = model.OtherDetail[i].Remarks;
                                                                Qryothr[j].UpdtUser = logged_in_userId;
                                                                Qryothr[j].UpdtTS = DateTime.Now;
                                                                Qryothr[j].Status = "Active";
                                                                context.SaveChanges();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    //_qryOSG.s.isEmployee = true;
                                    //Update Commitment table                                   
                                    _qryOSG.s.EmployeeWorkplace = model.EmployeeWorkplace;
                                   
                                    _qryOSG.s.NotetoDean = model.FlowApprover == "NDean" ? true : false;                                  
                                    _qryOSG.s.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    context.SaveChanges();
                                    transaction.Commit();
                                    res = 1;
                                    decimal WithdrawAmmount = 0;
                                    

                                    var Updateqry = (from a in context.tblRCTOutsourcing
                                                     where a.OSGID == OSGID
                                                     select a).FirstOrDefault();
                                    if (Updateqry != null)
                                    {
                                        var Actualstartdate = Updateqry.AppointmentStartdate;
                                        Updateqry.ActualAppointmentStartDate = Actualstartdate;
                                        Updateqry.ActualAppointmentEndDate = Updateqry.AppointmentEnddate;
                                        decimal CommitmentAmount = 0;
                                        CommitmentAmount = Updateqry.CommitmentAmount ?? 0;
                                        Updateqry.AppointmentStartdate = model.ActualDate;
                                        if (WithdrawAmmount > 0)
                                            Updateqry.CommitmentAmount = CommitmentAmount - WithdrawAmmount;
                                        context.SaveChanges();
                                    }
                                   

                                    PostOSGStatusLog(OSGID, "Awaiting Verification", "Awaiting Verification-Draft", logged_in_userId);
                                    //PostOfferDetails(OSGID, "OSG", "OfficeOrder", logged_in_userId);

                                    
                                }
                            }
                            else 
                            {
                                var _qryOSG = (from s in context.tblRCTOutsourcing
                                               from d in context.tblRCTDesignation
                                               where s.DesignationId == d.DesignationId//&& s.Status == "Awaiting Verification"
                                                && s.OSGID == OSGID
                                               select new { s, d }).FirstOrDefault();
                                if (_qryOSG != null)
                                {
                                    //_qryOSG.s.Status = "Sent for approval";
                                    if (model.PersonImage != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.PersonImage.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.PersonImage.UploadFile("Requirement",  docName));
                                        model.PersonImage.UploadFile("RCTEmployeeImages", docName);
                                        _qryOSG.s.CandidateImage = docName;
                                    }
                                    if (model.Resume != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.Resume.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.PersonImagePath.UploadFile("Requirement", docName);
                                        model.Resume.UploadFile("Requirement", docName);
                                        _qryOSG.s.ResumeFile = docName;
                                    }
                                    if (model.CantidateSignature != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                        model.CantidateSignature.UploadFile("Requirement", docName);
                                        _qryOSG.s.CandidateSignature = docName;
                                    }
                                    _qryOSG.s.PANNo = model.PAN;
                                    _qryOSG.s.AadhaarNumber = Convert.ToString(model.aadharnumber);
                                    _qryOSG.s.ContactNumber = model.ContactNumber;
                                    _qryOSG.s.AlternativeContactNumber = model.AlternativeContactNumber;
                                    _qryOSG.s.EmergencyContact = model.EmergencyContactNo;
                                    _qryOSG.s.isSameAsPresentAddress = model.isSameasPermanentAddress;
                                    _qryOSG.s.PresentAddress = model.PresentAddress;
                                    _qryOSG.s.PermanentAddress = model.PermanentAddress;
                                    _qryOSG.s.GovernmentProofVerifyDoc = model.GovProof;
                                    _qryOSG.s.GovernmentProofVerify = model.isVerifiedGovProof;
                                    //_qrySTE.s.EmployeeType = model.EmployeeTypeCatecory;
                                    //if (model.StaffCategory != null)
                                    //    _qryOSG.s.StaffCategory = model.StaffCategory;
                                    //_qrySTE.s.IITMPensionerOrCSIRStaff = model.IITMPensionerCSIRStaff;
                                    _qryOSG.s.MsPhdType = model.MsPhdType;
                                    _qryOSG.s.MsPhd = model.MsPhdType > 0 ? true : false;
                                    _qryOSG.s.MsPhd = model.MsPhd;
                                    _qryOSG.s.PhdDetail = model.PhdDetail;
                                    _qryOSG.s.ActualDate = model.ActualDate;
                                    _qryOSG.s.VerificationRemarks = model.VerificationRemarks;
                                    if (model.JoiningReport != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(model.JoiningReport.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        //model.JoinungReport.UploadFile("Requirement", docName);
                                        model.JoiningReport.UploadFile("Requirement", docName);
                                        _qryOSG.s.JoiningReport = docName;
                                    }
                                    _qryOSG.s.BankAccountNumber = model.BankAccountNo;
                                    _qryOSG.s.BankName = model.BankName;
                                    _qryOSG.s.IFSCCode = model.IFSCCode;
                                    _qryOSG.s.isHaveGateScore = model.isHaveGateScore == "Yes" ? true : false;
                                    _qryOSG.s.GateScore = model.GateScore;
                                    _qryOSG.s.Bloodgroup = model.BloodGroup;
                                    _qryOSG.s.BloodgroupRH = model.BloodGroupRH;
                                    if (model.EducationDetail != null)
                                    {
                                        foreach (var item in model.EducationDetail)
                                        {
                                            if (item.EducationId == null)
                                            {
                                                tblRCTOSGEducationDetail _EducationDetail = new tblRCTOSGEducationDetail();
                                                _EducationDetail.OSGId = OSGID;
                                                _EducationDetail.QualificationId = item.QualificationId;
                                                _EducationDetail.DisciplineId = item.DisciplineId;
                                                _EducationDetail.UniversityorInstitution = item.Institution;
                                                _EducationDetail.YearOfPassing = item.YearofPassing;
                                                _EducationDetail.MarkType = item.MarkType;
                                                _EducationDetail.Marks = item.Marks;
                                                _EducationDetail.DivisionClassObtained = item.DivisionClassObtained;
                                                if (item.Certificate != null)
                                                {
                                                    string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var guid = Guid.NewGuid().ToString();
                                                    var docName = guid + "_" + actName;
                                                    //model.CantidateSignature.UploadFile("Requirement", docName);
                                                    item.Certificate.UploadFile("Requirement", docName);
                                                    _EducationDetail.DocumentFilePath = docName;
                                                    _EducationDetail.FileName = actName;
                                                }
                                                _EducationDetail.Remarks = item.Remarks;
                                                _EducationDetail.CrtdTs = DateTime.Now;
                                                _EducationDetail.CrtdUser = logged_in_userId;
                                                _EducationDetail.isCurrentVersion = true;
                                                context.tblRCTOSGEducationDetail.Add(_EducationDetail);
                                                context.SaveChanges();
                                            }
                                            else
                                            {
                                                int OSGEducationDetailID = item.EducationId ?? 0;
                                                var QryEducation = (from SM in context.tblRCTOSGEducationDetail where SM.OSGId == OSGID && SM.OSGEducationDetailId == OSGEducationDetailID && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                                if (QryEducation != null)
                                                {
                                                    if (item.Certificate != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                                        item.Certificate.UploadFile("Requirement", docName);
                                                        QryEducation.DocumentFilePath = docName;
                                                        QryEducation.FileName = actName;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (model.ExperienceDetail != null)
                                    {
                                        foreach (var item in model.ExperienceDetail)
                                        {
                                            if (item.ExperienceId == null)
                                            {
                                                if (item.ExperienceTypeId != null)
                                                {
                                                    tblRCTOSGExperienceDetail _ExperienceDetail = new tblRCTOSGExperienceDetail();
                                                    _ExperienceDetail.OSGId = OSGID;
                                                    _ExperienceDetail.TypeId = item.ExperienceTypeId;
                                                    _ExperienceDetail.Organisation = item.Organisation;
                                                    _ExperienceDetail.DesignationId = item.DesignationListId;
                                                    _ExperienceDetail.Designation = item.DesignationautoComplete;
                                                    _ExperienceDetail.FromYear = item.FromDate;
                                                    _ExperienceDetail.ToYear = item.ToDate;
                                                    _ExperienceDetail.SalaryDrawn = item.SalaryDrawn;
                                                    if (item.ExperienceFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        //model.CantidateSignature.UploadFile("Requirement", docName);
                                                        item.ExperienceFile.UploadFile("Requirement", docName);
                                                        _ExperienceDetail.DocumentFilePath = docName;
                                                        _ExperienceDetail.FileName = actName;
                                                    }
                                                    _ExperienceDetail.Remarks = item.Remarks;
                                                    _ExperienceDetail.CrtdUser = logged_in_userId;
                                                    _ExperienceDetail.CrtdTs = DateTime.Now;
                                                    _ExperienceDetail.isCurrentVersion = true;
                                                    context.tblRCTOSGExperienceDetail.Add(_ExperienceDetail);
                                                    context.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                int ExperienceId = item.ExperienceId ?? 0;
                                                var QryExp = (from SM in context.tblRCTOSGExperienceDetail where SM.OSGId == OSGID && SM.OSGExperienceDetailId == ExperienceId && SM.isCurrentVersion == true select SM).FirstOrDefault();
                                                if (QryExp != null)
                                                {
                                                    if (item.ExperienceTypeId != null)
                                                    {
                                                        if (item.ExperienceFile != null)
                                                        {
                                                            string actName = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                            var guid = Guid.NewGuid().ToString();
                                                            var docName = guid + "_" + actName;
                                                            //model.CantidateSignature.UploadFile("Requirement", docName);
                                                            item.ExperienceFile.UploadFile("Requirement", docName);
                                                            QryExp.DocumentFilePath = docName;
                                                            QryExp.FileName = actName;
                                                        }
                                                        QryExp.UptdUser = logged_in_userId;
                                                        QryExp.UptdTs = DateTime.Now;
                                                        QryExp.isCurrentVersion = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (model.OtherDetail != null)
                                    {
                                        if (model.OtherDetail.Count > 0)
                                        {
                                            for (int i = 0; i < model.OtherDetail.Count; i++)
                                            {
                                                if (model.OtherDetail[i].OtherDetailId == null && model.OtherDetail[i].OtherNames != null)
                                                {
                                                    tblRCTOSGOtherDetail OtherDetail = new tblRCTOSGOtherDetail();
                                                    OtherDetail.OSGId = OSGID;
                                                    OtherDetail.OthersName = model.OtherDetail[i].OtherNames;
                                                    OtherDetail.Description = model.OtherDetail[i].Description;
                                                    if (model.OtherDetail[i].OtherDetailFile != null)
                                                    {
                                                        string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                        var guid = Guid.NewGuid().ToString();
                                                        var docName = guid + "_" + actName;
                                                        model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);
                                                        model.OtherDetail[i].OtherDetailFileName = actName;
                                                        model.OtherDetail[i].OtherDetailFilePath = docName;
                                                        OtherDetail.AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                        OtherDetail.AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                    }

                                                    OtherDetail.Remarks = model.OtherDetail[i].Remarks;
                                                    OtherDetail.CrtdUser = logged_in_userId;
                                                    OtherDetail.CrtdTS = DateTime.Now;
                                                    OtherDetail.Status = "Active";
                                                    context.tblRCTOSGOtherDetail.Add(OtherDetail);
                                                    context.SaveChanges();
                                                }
                                                else
                                                {
                                                    int OtherDetailID = model.OtherDetail[i].OtherDetailId ?? 0;
                                                    var Qryothr = (from SM in context.tblRCTOSGOtherDetail where SM.OSGId == OSGID && SM.OtherDetailsId == OtherDetailID && SM.Status == "Active" select SM).ToList();
                                                    if (Qryothr.Count > 0)
                                                    {
                                                        for (int j = 0; j < Qryothr.Count; j++)
                                                        {
                                                            if (model.OtherDetail[j].OtherNames != null)
                                                            {
                                                                Qryothr[j].OSGId = OSGID;
                                                                Qryothr[j].OthersName = model.OtherDetail[i].OtherNames;
                                                                Qryothr[j].Description = model.OtherDetail[i].Description;
                                                                if (model.OtherDetail[i].OtherDetailFile != null)
                                                                {
                                                                    string actName = System.IO.Path.GetFileName(model.OtherDetail[i].OtherDetailFile.FileName);
                                                                    var guid = Guid.NewGuid().ToString();
                                                                    var docName = guid + "_" + actName;
                                                                    model.OtherDetail[i].OtherDetailFile.UploadFile("Requirement", docName);
                                                                    model.OtherDetail[i].OtherDetailFileName = actName;
                                                                    model.OtherDetail[i].OtherDetailFilePath = docName;
                                                                    Qryothr[j].AttachmentPath = model.OtherDetail[i].OtherDetailFilePath;
                                                                    Qryothr[j].AttachmentName = model.OtherDetail[i].OtherDetailFileName;
                                                                }

                                                                Qryothr[j].Remarks = model.OtherDetail[i].Remarks;
                                                                Qryothr[j].UpdtUser = logged_in_userId;
                                                                Qryothr[j].UpdtTS = DateTime.Now;
                                                                Qryothr[j].Status = "Active";
                                                                context.SaveChanges();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }



                                    _qryOSG.s.EmployeeWorkplace = model.EmployeeWorkplace;
                                    //_qryOSG.s.CommitmentNo = CommitmentNo(ApplicationRefNo);
                                    _qryOSG.s.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                    _qryOSG.s.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    context.SaveChanges();
                                    transaction.Commit();
                                    res = 1;
                                    decimal WithdrawAmmount = 0;
                                    //Check Joining date if candtidate join deloy for the appointment tenure should Widthdraw commitment ammount
                                    if (_qryOSG.s.AppointmentStartdate < model.ActualDate && _qryOSG.s.CSIRStaffPayMode != 2)
                                    {
                                        DateTime FromDate = _qryOSG.s.AppointmentStartdate ?? DateTime.Now;
                                        DateTime ToDate = model.ActualDate ?? DateTime.Now;
                                        WithdrawAmmount = Common.calculateWithdrawalAmount(OSGID, "OSG", FromDate, ToDate, true, 0, true);
                                        if (WithdrawAmmount > 0)
                                        {
                                            tblRCTCommitmentRequest WidthdrawCommitment = new tblRCTCommitmentRequest();
                                            WidthdrawCommitment.ReferenceNumber = _qryOSG.s.ApplicationNumber;
                                            WidthdrawCommitment.AppointmentType = "Verfication";
                                            WidthdrawCommitment.TypeCode = "OSG";
                                            WidthdrawCommitment.CandidateName = _qryOSG.s.Name;
                                            WidthdrawCommitment.CandidateDesignation = _qryOSG.d.Designation;
                                            WidthdrawCommitment.ProjectId = _qryOSG.s.ProjectId;
                                            WidthdrawCommitment.ProjectNumber = RequirementService.getProjectSummary(_qryOSG.s.ProjectId ?? 0).ProjectNumber;
                                            WidthdrawCommitment.TotalSalary = _qryOSG.s.Salary;
                                            WidthdrawCommitment.RequestedCommitmentAmount = WithdrawAmmount;
                                            WidthdrawCommitment.Status = "Awaiting Commitment Booking";
                                            WidthdrawCommitment.RequestType = "Withdraw Commitment";
                                            WidthdrawCommitment.EmpNumber = _qryOSG.s.EmployeersID;
                                            WidthdrawCommitment.EmpId = logged_in_userId;
                                            WidthdrawCommitment.Crtd_TS = DateTime.Now;
                                            WidthdrawCommitment.Crtd_UserId = logged_in_userId;
                                            context.tblRCTCommitmentRequest.Add(WidthdrawCommitment);
                                            context.SaveChanges();
                                        }
                                    }

                                    var Updateqry = (from a in context.tblRCTOutsourcing
                                                     where a.OSGID == OSGID
                                                     select a).FirstOrDefault();
                                    if (Updateqry != null)
                                    {
                                        var Actualstartdate = Updateqry.AppointmentStartdate;
                                        Updateqry.ActualAppointmentStartDate = Actualstartdate;
                                        Updateqry.ActualAppointmentEndDate = Updateqry.AppointmentEnddate;
                                        decimal CommitmentAmount = 0;
                                        CommitmentAmount = Updateqry.CommitmentAmount ?? 0;
                                        Updateqry.AppointmentStartdate = model.ActualDate;
                                        if (WithdrawAmmount > 0)
                                            Updateqry.CommitmentAmount = CommitmentAmount - WithdrawAmmount;
                                        context.SaveChanges();
                                    }

                                    
                                    //PostOSGStatusLog(OSGID, "Awaiting Verification", "Verification Completed", logged_in_userId);
                                    PostOfferDetails(OSGID, "OSG", "OfficeOrder", logged_in_userId);

                                    

                                    var Data = OSGVERWFInit(OSGID, logged_in_userId);
                                    if (Data.Item1 == false)
                                    {
                                        return Tuple.Create(-1, OSGID, Data.Item2);

                                    }
                                }
                            }
                            //else
                            //{
                            //    //Check is verified
                            //    int PreVerified = (from P in context.tblRCTOSGStatusLog
                            //                       where P.OSGID == OSGID && P.NewStatus == "Verification Completed"
                            //                       select P).ToList().Count;
                            //    if (PreVerified > 0)
                            //        res = 2;
                            //    else
                            //        res = -1;
                            //}
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(-1, 0, ex.Message.ToString());
                            //return Tuple.Create(0, "");
                        }
                    }
                }
                //return Tuple.Create(res, EmployeeID1, errMsg);
                return Tuple.Create(res, OSGID, errMsg);
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(-1, 0, ex.Message.ToString());
            }
        }

        public SearchSTEVerificationModel GetOSGVerificationList(int page, int pageSize, SearchSTEVerificationModel model, DateFilterModel OfferDate, DateFilterModel ClosureDate, DateFilterModel DateOfJoining)
        {
            try
            {
                SearchSTEVerificationModel list = new SearchSTEVerificationModel();
                List<STEVerificationModel> OSGList = new List<STEVerificationModel>();
                var userName = System.Web.HttpContext.Current.User.Identity.Name;
                int userId = Common.GetUserid(userName);
                int[] cancelInitiator = { 0, userId };
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var prequery = (from b in context.vw_RCTVerificationList.AsNoTracking()
                                    from p in context.tblProject
                                    from vw in context.vwFacultyStaffDetails
                                    orderby b.ApplicationId descending
                                    where b.ProjectId == p.ProjectId && p.PIName == vw.UserId &&
                                    b.Category == "OSG"
                                    && cancelInitiator.Contains(b.CancelInitiator ?? 0)
                                    select new STEVerificationModel()
                                    {
                                        STEId = b.ApplicationId,
                                        OrderId = b.OrderId,
                                        ApplicationType = b.ApplicationType,
                                        ApplicationNo = b.ApplicationNo,
                                        Name = b.CandidateName,
                                        Designation = b.PostRecommended,
                                        DepartmentName = vw.DepartmentName,
                                        Status = b.Status,
                                        OfferActualDate = b.UptdTs,
                                        PAN = b.PANNo,
                                        EmployeeNo = b.EmployeeNo,
                                        JoiningDate = b.AppointmentStartdate,
                                    });
                    var predicate = PredicateBuilder.BaseAnd<STEVerificationModel>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInApplicationNo))
                        predicate = predicate.And(d => d.ApplicationNo.Contains(model.SearchInApplicationNo) || d.EmployeeNo.Contains(model.SearchInApplicationNo));
                    if (!string.IsNullOrEmpty(model.DepartmentName))
                        predicate = predicate.And(d => d.DepartmentName.Contains(model.DepartmentName));
                    if (OfferDate.@from != null && OfferDate.to != null)
                    {
                        OfferDate.@from = OfferDate.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.OfferActualDate >= OfferDate.@from && d.OfferActualDate <= OfferDate.to);
                    }
                    if (DateOfJoining.@from != null && DateOfJoining.to != null)
                    {
                        DateOfJoining.@from = DateOfJoining.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.JoiningDate >= DateOfJoining.@from && d.JoiningDate <= DateOfJoining.to);
                    }
                    if (!string.IsNullOrEmpty(model.Applicationtype))
                        predicate = predicate.And(d => d.ApplicationType.Contains(model.Applicationtype));
                    if (!string.IsNullOrEmpty(model.SearchINStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchINStatus));
                    var qryList = prequery.Where(predicate).OrderByDescending(m => m.STEId).Skip(skiprec).Take(pageSize).ToList();
                    list.TotalRecords = prequery.Where(predicate).Count();
                    if (qryList != null)
                    {

                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < qryList.Count; i++)
                        {
                            bool SendOffer_f = false;
                            int appid = qryList[i].STEId ?? 0;
                            int? OrderId = qryList[i].OrderId;
                            int emailcount = context.tblRCTSTEEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 9 &&
                                                x.STEID == appid).Count();
                            SendOffer_f = context.tblRCTOfferDetails.
                                          Where(x => x.ApplicationId == appid && x.Category == "OSG" &&
                                          x.OfferCategory == "OfferLetter" && x.isSend != true && (x.OrderId == OrderId || OrderId == null)).Any();

                            OSGList.Add(new STEVerificationModel()
                            {
                                SNo = sno + i,
                                STEId = qryList[i].STEId,
                                OrderId = qryList[i].OrderId,
                                ApplicationType = qryList[i].ApplicationType,
                                ApplicationNo = qryList[i].EmployeeNo == null ? qryList[i].ApplicationNo : qryList[i].EmployeeNo,
                                Name = qryList[i].Name,
                                Designation = qryList[i].Designation,
                                DepartmentName = qryList[i].DepartmentName,
                                Status = qryList[i].Status,
                                OfferDate = String.Format("{0: dd-MMMM-yyyy}", qryList[i].OfferActualDate),
                                PAN = qryList[i].PAN,
                                EmailRemaindarCount = emailcount,
                                DateofJoining = String.Format("{0: dd-MMMM-yyyy}", qryList[i].JoiningDate),
                                SendOffer_f = SendOffer_f,
                                Cancel_f = IsCancelAppointment(qryList[i].JoiningDate, qryList[i].Status)
                            });
                        }
                    }
                    list.VerificationList = OSGList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchSTEVerificationModel list = new SearchSTEVerificationModel();
                return list;
            }
        }

        public STEViewModel getOSGOfferletterDetails(int OSGID, int? orderId)
        {
            STEViewModel model = new STEViewModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderId > 0)
                    {
                        var QryOSG = (from o in context.tblOrder
                                      join od in context.tblOrderDetail on o.OrderId equals od.OrderId
                                      join S in context.tblRCTOutsourcing on o.AppointmentId equals S.OSGID
                                      where o.OrderId == orderId
                                      select new { o, od, S }).FirstOrDefault();
                        //Appointment Type\\
                        int Typeofappointment = QryOSG.S.TypeofAppointment ?? 0;
                        model.Typeofappointment = Common.GetCodeControlName(Typeofappointment, "OSGAppointmenttype");
                        model.TypeofappointmentID = Typeofappointment;
                        model.STEId = QryOSG.S.OSGID;
                        model.ApplicationNo = QryOSG.o.OrderNo;
                        model.PresentAddress = QryOSG.S.PresentAddress;
                        model.Name = Common.GetCodeControlName(QryOSG.S.ProfessionalType ?? 0, "RCTProfessional") + QryOSG.S.Name;
                        model.StaffCategory = QryOSG.S.StaffCategory;
                        model.ConsolidatedPay = QryOSG.S.ConsolidatedPay ?? false;
                        model.MsPhd = QryOSG.S.MsPhd ?? false;
                        int projectId = QryOSG.o.NewProjectId == null ? QryOSG.S.ProjectId ?? 0 : QryOSG.o.NewProjectId ?? 0;
                        int DesignationId = QryOSG.o.NewDesignation == null ? QryOSG.S.DesignationId ?? 0 : QryOSG.o.NewDesignation ?? 0;
                        string Designation = (from d in context.tblRCTDesignation
                                              where d.DesignationId == DesignationId
                                              && d.RecordStatus == "Active"
                                              select d.Designation).FirstOrDefault();
                        model.ProjectId = projectId;
                        model.DesignationId = DesignationId;
                        model.Designation = Designation;
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.o.FromDate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.o.ToDate);
                        model.BasicPay = QryOSG.o.Basic ?? 0;
                        model.CommitmentAmount = QryOSG.o.CommitmentAmmount ?? 0;
                        model.ConsolidatedPayPerMonth = QryOSG.o.Basic ?? 0;
                        model.ProjectNumber = Common.GetProjectNameandNumber(projectId);
                        model.offerDate = QryOSG.od.OfferDate ?? DateTime.Now;
                        model.EmployeeID = QryOSG.S.EmployeersID;
                        //Project details
                        model.ProjectDetailsModel = getProjectSummary(projectId);
                    }
                    else if (OSGID > 0)
                    {
                        var QryOSG = (from S in context.tblRCTOutsourcing
                                      join D in context.tblRCTDesignation on S.DesignationId equals D.DesignationId
                                      where S.OSGID == OSGID
                                      select new { S, D }).FirstOrDefault();
                        //Appointment Type\\
                        int Typeofappointment = QryOSG.S.TypeofAppointment ?? 0;
                        model.Typeofappointment = Common.GetCodeControlName(Typeofappointment, "OSGAppointmenttype");
                        model.STEId = QryOSG.S.OSGID;
                        model.ApplicationNo = QryOSG.S.ApplicationNumber;
                        model.PresentAddress = QryOSG.S.PresentAddress;
                        model.Name = Common.GetCodeControlName(QryOSG.S.ProfessionalType ?? 0, "RCTProfessional") + QryOSG.S.Name;
                        model.StaffCategory = QryOSG.S.StaffCategory;
                        model.ConsolidatedPay = QryOSG.S.ConsolidatedPay ?? false;
                        model.MsPhd = QryOSG.S.MsPhd ?? false;
                        model.ProjectId = QryOSG.S.ProjectId;
                        model.DesignationId = QryOSG.D.DesignationId;
                        model.Designation = QryOSG.D.Designation;
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.S.AppointmentStartdate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.S.AppointmentEnddate);
                        model.BasicPay = QryOSG.S.Salary ?? 0;
                        model.CommitmentAmount = QryOSG.S.CommitmentAmount ?? 0; ;
                        model.ConsolidatedPayPerMonth = QryOSG.S.Salary ?? 0; ;
                        model.ProjectNumber = Common.GetProjectNameandNumber(QryOSG.S.ProjectId ?? 0);
                        int ProjectID = QryOSG.S.ProjectId ?? 0;
                        model.offerDate = QryOSG.S.OfferDate ?? DateTime.Now;
                        model.EmployeeID = QryOSG.S.EmployeersID;
                        //Project details
                        model.ProjectDetailsModel = getProjectSummary(ProjectID);
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }
        #endregion

        public Tuple<bool, string> OSGApprove(STEViewModel model, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int OSGID = model.STEId;
                    if (!context.tblRCTOSGEmailLog.Any(m => m.OSGID == OSGID && m.TypeofMail == 1 && !m.Subject.Contains("structure approval for")))
                        RCTEmailContentService.SendMailForOSG(OSGID, logged_in_user, null, false);
                    if (model.PIJustificationFile != null)
                    {
                        foreach (var FileDoc in model.PIJustificationFile)
                        {
                            if (FileDoc != null)
                            {
                                tblRCTOSGPIJustificationDoc Docs = new tblRCTOSGPIJustificationDoc();
                                string actName = System.IO.Path.GetFileName(FileDoc.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                //item.UploadFile("Requirement", docName);
                                FileDoc.UploadFile("Requirement", docName);
                                Docs.OSGID = OSGID;
                                Docs.DocsName = docName;
                                Docs.FileName = actName;
                                Docs.Description = model.PIJustificationRemarks;
                                Docs.Crt_Ts = DateTime.Now;
                                Docs.CrtUser = logged_in_user;
                                context.tblRCTOSGPIJustificationDoc.Add(Docs);
                                context.SaveChanges();
                            }

                        }
                    }
                    var sts = OSGWFInit(OSGID, logged_in_user);
                    if (sts.Item1 == false && sts.Item2 != null)
                    {
                        return Tuple.Create(false, sts.Item2);
                    }
                    else if (sts.Item1 == true && (sts.Item2 == null || sts.Item2 == ""))
                    {
                        return Tuple.Create(true, "");
                    }
                    else if (sts.Item1 == true && (sts.Item2 != null || sts.Item2 != ""))
                    {
                        return Tuple.Create(true, sts.Item2);
                    }
                    else
                    {
                        return Tuple.Create(false, sts.Item2);
                    }

                }

            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public STEViewModel GetOSGView(int OSGID)
        {
            STEViewModel model = new STEViewModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();
            List<STEJustificationDoc> AttachmentList = new List<STEJustificationDoc>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OSGID > 0)
                    {
                        var QryOSG = (from A in context.tblRCTOutsourcing
                                      where A.OSGID == OSGID
                                      select new { A }).FirstOrDefault();
                        var Qrysalcalc = (from A in context.tblRCTSalaryCalcDetails
                                          where A.ID == OSGID && A.IsCurrentVersion == true && A.Status == "Active"
                                          select A).FirstOrDefault();
                        model.Status = QryOSG.A.Status;
                        int Typeofappointment = QryOSG.A.TypeofAppointment ?? 0;
                        model.Typeofappointment = Common.GetCodeControlName(Typeofappointment, "OSGAppointmenttype");
                        model.ProfessionalId = Common.GetCodeControlName(QryOSG.A.ProfessionalType ?? 0, "RCTProfessional");
                        model.STEId = QryOSG.A.OSGID;
                        model.ApplicationNo = QryOSG.A.ApplicationNumber;
                        model.PresentAddress = QryOSG.A.PresentAddress;
                        model.EmployeeType = QryOSG.A.EmployeeCategory;
                        model.Name = Common.GetCodeControlName(QryOSG.A.ProfessionalType ?? 0, "RCTProfessional") + QryOSG.A.Name;
                        model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                        model.AadhaarNumber = QryOSG.A.AadhaarNumber;
                        model.PANNo = QryOSG.A.PANNo;
                        model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                        model.Age = Common.RCTCalculateAge(DateTime.Now, QryOSG.A.DateofBirth ?? DateTime.Now);
                        model.Sex = Common.GetCodeControlName(QryOSG.A.Sex ?? 0, "RCTGender");
                        model.Caste = Common.GetCodeControlName(QryOSG.A.Caste ?? 0, "STECaste");
                        model.ContactNo = QryOSG.A.ContactNumber;
                        model.AlternativeContactNo = QryOSG.A.AlternativeContactNumber;
                        model.Email = QryOSG.A.Email;
                        model.PresentAddress = QryOSG.A.PresentAddress;
                        model.PermanentAddress = QryOSG.A.PermanentAddress;
                        model.BloodGroup = Common.GetCodeControlName(QryOSG.A.Bloodgroup ?? 0, "SETBloodGroup");
                        model.BloodGroupRH = Common.GetCodeControlName(QryOSG.A.BloodgroupRH ?? 0, "SETBloodGroupRH");
                        model.StaffCategory = QryOSG.A.StaffCategory;
                        model.Nationality = Common.GetCodeControlName(QryOSG.A.Nationality ?? 0, "Nationality");
                        model.PhysicallyChanged = QryOSG.A.PhysicallyChallenged;
                        model.RelasionIIT = QryOSG.A.RelatedIIT == "1" ? "Yes" : QryOSG.A.RelatedIIT == "2" ? "No" : "";
                        model.Relationship = QryOSG.A.Relationship;
                        model.RelationName = QryOSG.A.RelationshipDetails;
                        model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.ApplicationEntryDate);
                        model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.ApplicationReceiveDate);
                        model.ConsolidatedPay = QryOSG.A.ConsolidatedPay ?? false;
                        model.Fellowship = QryOSG.A.Fellowship ?? false;
                        model.IITMPensionerOrCSIRStaff = Common.GetCodeControlName(QryOSG.A.IITMPensionerOrCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                        model.PPONo = QryOSG.A.PPONo;
                        model.CSIRStaff = Common.GetCodeControlName(QryOSG.A.CSIRStaffPayMode ?? 0, "STECSIRStaffPayMode");
                        model.IITMPensionerCSIRStaff = QryOSG.A.IITMPensionerOrCSIRStaff ?? 0;
                        model.MsPhd = QryOSG.A.MsPhd ?? false;
                        model.PhdDetail = QryOSG.A.PhdDetail;
                        model.ProjectId = QryOSG.A.ProjectId;
                        model.DesignationId = QryOSG.A.DesignationId;
                        int designationID = QryOSG.A.DesignationId ?? 0;
                        var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                        model.Designation = designation;
                        model.Medical = QryOSG.A.Medical ?? 0;
                        model.MedicalINWordings = Common.GetCodeControlName(QryOSG.A.Medical ?? 0, "SETMedical");
                        model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentStartdate);
                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.AppointmentEnddate);
                        model.MedicalAmmount = QryOSG.A.MedicalAmmount ?? 0;
                        decimal BasicPay = QryOSG.A.Salary ?? 0;
                        BasicPay += QryOSG.A.HRA ?? 0;
                        if (QryOSG.A.Medical == 1)
                        {
                            BasicPay += QryOSG.A.MedicalAmmount ?? 0;
                        }
                        model.BasicPay = BasicPay;
                        model.CommitmentAmount = QryOSG.A.CommitmentAmount ?? 0; ;
                        model.ConsolidatedPayPerMonth = BasicPay;
                        model.BankAC = QryOSG.A.BankAccountNumber;
                        model.BankName = QryOSG.A.BankName;
                        model.IFSC = QryOSG.A.IFSCCode;
                        model.isHaveGateScore = QryOSG.A.isHaveGateScore == true ? "Yes" : QryOSG.A.isHaveGateScore == false ? "No" : "";
                        model.GateScore = Convert.ToString(QryOSG.A.GateScore);
                        model.ProjectNumber = Common.GetProjectNameandNumber(QryOSG.A.ProjectId ?? 0);
                        model.PersonImagePath = QryOSG.A.CandidateImage;
                        model.SingnaturePath = QryOSG.A.CandidateSignature;
                        model.ToMail = QryOSG.A.ToMail;
                        model.CCMail = QryOSG.A.bcc;
                        model.RecommendedSalary = Qrysalcalc.RecommendSalary;
                        model.StatutoryId = Qrysalcalc.StatutoryId;
                        model.EmpSalutation = Qrysalcalc.Salutation;
                        model.EmpName = QryOSG.A.Name;
                        model.EmpDesig = designation;
                        model.EmpType = QryOSG.A.EmployeeCategory;
                        model.PhysicalyHandicaped = QryOSG.A.PhysicallyChallenged;
                        model.EmpPFBasicWages = Qrysalcalc.PFBasicWages;
                        model.EmployeePF = Qrysalcalc.EmployeePF;
                        model.EmployeeESIC = Qrysalcalc.EmployeeESIC;
                        model.EmployeeProfessionalTax = Qrysalcalc.EmpProfessionalTax;
                        model.EmployeeTtlDeduct = Qrysalcalc.EmpTotalDeduction;
                        model.EmployeeNetSalary = Qrysalcalc.EmpNetSalary;
                        model.EmployerPF = Qrysalcalc.EmployerPF;
                        model.EmployerIns = Qrysalcalc.EmployerInsurance;
                        model.EmployerESIC = Qrysalcalc.EmployerESIC;
                        model.EmployerTtlContribute = Qrysalcalc.EmployerTotalContribution;
                        model.EmployeeCTC = Qrysalcalc.EmployerCTC;
                        model.AgencyFee = Qrysalcalc.EmployerAgencyFee;
                        model.SalaryGST = Qrysalcalc.EmployerGST;
                        model.CTCwithAgencyFee = Qrysalcalc.EmployerCTCWithAgencyFee;
                        model.TotalCTC = Qrysalcalc.TotalCostPerMonth;
                        //var statutoryQuery = (from S in context.tblRCTStatutory where S.StatutoryId == Qrysalcalc.StatutoryId select S).FirstOrDefault();
                        //model.GSTPrecentage = Qrysalcalc.GSTPercentage;
                        //model.AgencyFeePrecentage = Qrysalcalc.AgencyFeePercentage;
                        //model.EmployeeESICPrecentage = statutoryQuery != null ? statutoryQuery.ESICEmployeePercentage : null;
                        //model.EmployerESICPrecentage = statutoryQuery != null ? statutoryQuery.ESICEmployerPercentage : null;
                        //model.LWFEmployerContribution = statutoryQuery != null ? statutoryQuery.LWFEmployerContribution : null;
                        model.CommitmentNo = string.IsNullOrEmpty(QryOSG.A.CommitmentNo) ? "-" : QryOSG.A.CommitmentNo;
                        model.CommitmentBalance = Common.GetCommitmentBalance(model.CommitmentNo);
                        model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                          where c.OSGID == OSGID && !string.IsNullOrEmpty(c.DocsName) && c.Deleted_f != true
                                                          orderby c.DocsID
                                                          select new STEJustificationDoc()
                                                          {
                                                              FileName = c.FileName,
                                                              FilePath = c.DocsName
                                                          }).ToList();
                        List<string> PICommands = new List<string>();
                        //var QryNote = (from c in context.tblRCTOSGNotes
                        //               where c.OSGId == OSGID
                        //               orderby c.OSGNotesID descending
                        //               select new { c.PICommends, }
                        //               ).ToArray();
                        //if (QryNote != null)
                        //{
                        //    for (int i = 0; i < QryNote.Count(); i++)
                        //    {
                        //        if (!string.IsNullOrEmpty(QryNote[i].PICommends))
                        //        {
                        //            PICommands.Add(QryNote[i].PICommends);
                        //        }
                        //    }
                        //}
                        model.PIJustificationCommands = (from c in context.tblRCTOSGPIJustificationDoc
                                                         where c.OSGID == OSGID && !string.IsNullOrEmpty(c.Description) && c.Deleted_f != true
                                                         group c by c.Description into grp
                                                         select grp.Key).ToList();
                        var justificdocs = (from c in context.tblRCTOSGPIJustificationDoc
                                            where c.OSGID == OSGID && c.Deleted_f != true
                                            select c).ToList();
                        for (int i = 0; i < justificdocs.Count(); i++)
                        {
                            model.PIJustificationRemarks = justificdocs[i].Description;
                        }
                        model.Notes = (from c in context.tblRCTOSGNotes
                                       where c.OSGId == OSGID
                                       orderby c.OSGNotesID descending
                                       select new STENotes()
                                       {
                                           PICommends = c.PICommends,
                                           HRNote = c.HRNote,
                                       }).ToList();
                        model.Comments = QryOSG.A.Comments;
                        model.CommiteeMemberId1 = QryOSG.A.CommitteeMember ?? 0;
                        model.CommiteeMemberId2 = QryOSG.A.CommitteeMembers ?? 0;
                        model.ChairpersonNameId = QryOSG.A.Chairperson ?? 0;
                        model.CommiteeMember1 = Common.GetPIName(QryOSG.A.CommitteeMember ?? 0);
                        model.CommiteeMember2 = Common.GetPIName(QryOSG.A.CommitteeMembers ?? 0);
                        model.ChairpersonName = Common.GetPIName(QryOSG.A.Chairperson ?? 0);

                        int ProjectID = QryOSG.A.ProjectId ?? 0;
                        model.ProjectDetailsModel = getProjectSummary(ProjectID);

                        //var QryEducation = (from c in context.tblRCTSTEEducationDetail
                        //                    from q in context.tblRCTQualificationList
                        //                    join d in context.tblCodeControl on c.MarkType equals d.CodeValAbbr into lft
                        //                    from j in lft.DefaultIfEmpty()
                        //                    where c.STEID == STEID && c.isCurrentVersion == true && c.QualifiCationID == q.QualificationId
                        //                     && (j == null ? true : j.CodeName == "RCTMarkType")
                        //                    orderby c.STEEducationDetailID
                        //                    select new { c, q, j }).ToList();

                        var QryEducation = (from c in context.tblRCTOSGEducationDetail
                                            from q in context.tblRCTQualificationList
                                            join d in context.tblCodeControl on c.MarkType equals d.CodeValAbbr into lft
                                            from j in lft.DefaultIfEmpty()
                                            where c.OSGId == OSGID && c.isCurrentVersion == true && c.QualificationId == q.QualificationId
                                            && (j == null ? true : j.CodeName == "RCTMarkType")
                                            orderby c.OSGEducationDetailId
                                            select new { c, q, j }).ToList();
                        if (QryEducation != null)
                        {
                            for (int i = 0; i < QryEducation.Count; i++)
                            {
                                int EducationID = QryEducation[i].c.QualificationId ?? 0;
                                int DisciplineID = QryEducation[i].c.DisciplineId ?? 0;
                                var list = Common.GetCourseList(EducationID);
                                var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();
                                EducationList.Add(new STEEducationModel()
                                {
                                    Education = QryEducation[i].q.Qualification,
                                    EducationId = QryEducation[i].c.OSGEducationDetailId,
                                    QualificationId = QryEducation[i].c.QualificationId,
                                    DisciplineId = QryEducation[i].c.DisciplineId,
                                    Discipline = Discipline,
                                    Institution = QryEducation[i].c.UniversityorInstitution,
                                    YearofPassing = QryEducation[i].c.YearOfPassing,
                                    strMarkType = QryEducation[i].j == null ? "" : QryEducation[i].j.CodeValDetail,
                                    MarkType = QryEducation[i].c.MarkType,
                                    Marks = QryEducation[i].c.Marks,
                                    DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                    CertificatePath = QryEducation[i].c.DocumentFilePath,
                                    CertificateName = QryEducation[i].c.FileName,
                                    Remarks = QryEducation[i].c.Remarks,
                                    DisiplineList = list
                                });
                            }
                        }
                        model.EducationDetail = EducationList;

                        model.ExperienceDetail = (from c in context.tblRCTOSGExperienceDetail
                                                  from d in context.tblCodeControl
                                                  where c.OSGId == OSGID && c.isCurrentVersion == true && c.TypeId == d.CodeValAbbr && d.CodeName == "RCTExperienceType"
                                                  orderby c.OSGExperienceDetailId
                                                  select new
                                                  {
                                                      c.OSGExperienceDetailId,
                                                      c.TypeId,
                                                      d.CodeValDetail,
                                                      c.Organisation,
                                                      c.DesignationId,
                                                      c.Designation,
                                                      c.FromYear,
                                                      c.ToYear,
                                                      c.SalaryDrawn,
                                                      c.DocumentFilePath,
                                                      c.FileName,
                                                      c.Remarks,
                                                      strFromYear = c.FromYear,
                                                      strToYear = c.ToYear
                                                  }).AsEnumerable().Select((x) => new STEExperienceModel()
                                                  {
                                                      ExperienceId = x.OSGExperienceDetailId,
                                                      ExperienceTypeId = x.TypeId,
                                                      ExperienceType = x.CodeValDetail,
                                                      Organisation = x.Organisation,
                                                      DesignationListId = x.DesignationId,
                                                      DesignationautoComplete = x.Designation,
                                                      FromDate = x.FromYear,
                                                      ToDate = x.ToYear,
                                                      SalaryDrawn = x.SalaryDrawn,
                                                      ExperienceFilePath = x.DocumentFilePath,
                                                      ExperienceFileName = x.FileName,
                                                      Remarks = x.Remarks,
                                                      strFromDate = string.Format("{0:dd-MMMM-yyyy}", x.strFromYear),
                                                      strToDate = string.Format("{0:dd-MMMM-yyyy}", x.strToYear)
                                                  }).ToList();


                        //string Qualification = "";
                        //if (model.EducationDetail.Count > 0)
                        //{
                        //    for (int i = 0; i < model.EducationDetail.Count; i++)
                        //    {
                        //        int ID = model.EducationDetail[i].QualificationId ?? 0;
                        //        string Qualify = (from Q in context.tblRCTQualificationList where Q.QualificationId == ID select Q.Qualification).FirstOrDefault();
                        //        Qualification += Qualify + "." + model.EducationDetail[i].Discipline + "<br/>";
                        //    }
                        //}
                        model.Qualification = Common.getQualificationWordings(OSGID, "OSG");
                        //double Years = 0;
                        //if (model.ExperienceDetail.Count > 0)
                        //{
                        //    for (int i = 0; i < model.ExperienceDetail.Count; i++)
                        //    {
                        //        DateTime From = model.ExperienceDetail[i].FromDate ?? DateTime.Now;
                        //        DateTime To = model.ExperienceDetail[i].ToDate ?? DateTime.Now;
                        //        var diff = To.Subtract(From).Days / 365.25;
                        //        Years += diff;
                        //    }
                        //}
                        model.Experience = Common.getExperienceInWordings(OSGID, "OSG");
                        model.offerDate = QryOSG.A.OfferDate ?? DateTime.Now;
                        model.EmployeeID = QryOSG.A.EmployeersID;
                        //
                        model.CommitteeRemark = QryOSG.A.CommitteeRemarks;
                        int CommitteApprovalID = QryOSG.A.CommitteeApprovedBy ?? 0;
                        model.CommitteeApprovedBy = Common.GetPIName(CommitteApprovalID);
                        model.OtherDetail = (from c in context.tblRCTOSGOtherDetail
                                             where c.OSGId == OSGID && c.Status == "Active"
                                             orderby c.OtherDetailsId
                                             select new OtherDetailModel()
                                             {
                                                 OtherNames = c.OthersName,
                                                 OtherDetailId = c.OtherDetailsId,
                                                 Description = c.Description,
                                                 OtherDetailFileName = c.AttachmentName,
                                                 OtherDetailFilePath = c.AttachmentPath,
                                                 Remarks = c.Remarks,
                                             }).ToList();
                        model.OtherDetail = model.OtherDetail.Count > 0 ? model.OtherDetail : null;
                        if (QryOSG.A.NotetoCMAdmin == true)
                        {
                            model.FlowApprover = "CMAdmin";
                        }
                        if (QryOSG.A.NotetoDean == true)
                        {
                            model.FlowApprover = "NDean";
                        }
                        model.ApplicationRefNo = QryOSG.A.RefNumber;
                        model.AutoFillRequstedbyPI = Common.GetPIName(QryOSG.A.RequestedBy ?? 0);
                        if (QryOSG.A.ActualAppointmentStartDate != null)
                            model.ActualAppointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.ActualAppointmentStartDate);
                        model.EmployeeWorkplace = QryOSG.A.EmployeeWorkplace;
                        model.MailSent_f = context.tblRCTOSGEmailLog.Any(m => m.OSGID == OSGID && m.TypeofMail == 1 && !m.Subject.Contains("structure approval for"));
                        if (QryOSG.A.SalaryLevelId > 0)
                        {
                            var data = getSalaryLevelName_Description(QryOSG.A.SalaryLevelId ?? 0);
                            model.SalaryLevel = data.Item1;
                            model.SalaryLevelId = QryOSG.A.SalaryLevelId;
                            model.SalaryLevelDescription = data.Item2;
                        }
                        if (QryOSG.A.EmployeeCategory == "Old Employee")
                        { 
                            model.IITMExperience = IITExperienceInWording(QryOSG.A.OldNumber);
                            /*Changes done by Madhu for Bug id - 7689 old Employee number not shown*/
                            model.OldNumber = QryOSG.A.OldNumber;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }

        #endregion

        #region OtherPaymentDeduction

        public static SearchOtherPaymentModel GetOtherPaymentList(SearchOtherPaymentModel model, int page, int pageSize, DateFilterModel crtd_ts)
        {
            SearchOtherPaymentModel searchdata = new SearchOtherPaymentModel();
            List<OtherPaymentDeductionModel> list = new List<OtherPaymentDeductionModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                if (crtd_ts.from == null && crtd_ts.to == null)
                {
                    crtd_ts.from = DateTime.Now.AddDays(-30).AddTicks(-2);
                    crtd_ts.to = DateTime.Now.AddDays(1).AddTicks(-2);
                }
                if (crtd_ts.to != null)
                    crtd_ts.to = crtd_ts.to.Value.Date.AddDays(1).AddTicks(-2);
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from oth in context.tblRCTOTHPaymentDeduction.AsNoTracking()
                                    join prj in context.tblProject on oth.ProjectId equals prj.ProjectId
                                    join vw in context.vw_RCTOverAllApplicationEntry on oth.AppointmentId equals vw.ApplicationId
                                    where (vw.AppointmentType == oth.AppointmentType && vw.ApplicationType == "New" && oth.Isbackend_f == false && oth.IsBulkBooking_f != true)
                                    && oth.CrtdTS >= crtd_ts.@from && oth.CrtdTS <= crtd_ts.to
                                    select new OtherPaymentDeductionModel()
                                    {
                                        OTHPayDeductionId = oth.OTHPayDeductionId,
                                        EmployeeNo = oth.EmployeeNo,
                                        Name = vw.CandidateName,
                                        AppointmentType = oth.AppointmentType,
                                        AppointmentTypeName = vw.Category,
                                        ProjectNumber = prj.ProjectNumber,
                                        Status = oth.Status,
                                        OrderId = oth.OrderId,
                                        OtherPaymentNo = oth.OTHPayDeductionNo,
                                        CRTD_TS = oth.CrtdTS
                                    });
                    var predicate = PredicateBuilder.BaseAnd<OtherPaymentDeductionModel>();
                    if (!string.IsNullOrEmpty(model.SearchEMPNo))
                        predicate = predicate.And(d => d.EmployeeNo.Contains(model.SearchEMPNo));
                    //if (model.SearchOtherType != null)
                    //    // predicate = predicate.And(d => d.OtherType == model.SearchOtherType);
                    if (!string.IsNullOrEmpty(model.Appointmenttype))
                        predicate = predicate.And(d => d.AppointmentTypeName == model.Appointmenttype);
                    if (model.ProjectNo != null)
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.ProjectNo));
                    if (!string.IsNullOrEmpty(model.SearchStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchStatus));
                    if (!string.IsNullOrEmpty(model.EmployeeName))
                        predicate = predicate.And(d => d.Name.Contains(model.EmployeeName));
                    if (!string.IsNullOrEmpty(model.SearchPaymentNo))
                        predicate = predicate.And(d => d.OtherPaymentNo.Contains(model.SearchPaymentNo));
                    var query = prequery.Where(predicate).OrderByDescending(m => m.OTHPayDeductionId).Skip(skiprec).Take(pageSize).ToList();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new OtherPaymentDeductionModel()
                            {
                                SNo = sno + i,
                                OTHPayDeductionId = query[i].OTHPayDeductionId,
                                EmployeeNo = query[i].EmployeeNo,
                                AppointmentType = query[i].AppointmentType,
                                AppointmentTypeName = query[i].AppointmentTypeName,
                                ProjectNumber = query[i].ProjectNumber,
                                Status = query[i].Status,
                                OrderId = query[i].OrderId,
                                Name = query[i].Name,
                                OtherPaymentNo = query[i].OtherPaymentNo,
                                CreatedDate = string.Format("{0:s}", query[i].CRTD_TS)
                            });
                        }
                    }
                    searchdata.TotalRecords = prequery.Where(predicate).Count();
                    searchdata.Detail = list;
                    return searchdata;
                }

            }
            catch (Exception ex)
            {
                return searchdata;
            }
        }

        public static OtherPaymentDeductionModel GetEmployeeDetails(string EmployeeNo)
        {
            OtherPaymentDeductionModel empdata = new OtherPaymentDeductionModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from vw in context.vw_RCTOverAllApplicationEntry
                                 where vw.Status != "Cancel" && vw.ApplicationType == "New" && vw.IsActiveNow == true
                                 && vw.EmployeeNo == EmployeeNo
                                 select vw).FirstOrDefault();
                    if (query != null)
                    {
                        var projdetails = RequirementService.getProjectSummary(query.ProjectId ?? 0);
                        empdata.Name = query.CandidateName;
                        empdata.AppointmentType = query.AppointmentType;
                        empdata.AppointmentTypeName = query.AppointmentType == 1 ? "Consultant Appointment" : query.AppointmentType == 2 ? "STE" : query.AppointmentType == 3 ? "OSG" : "";
                        empdata.EmailId = query.Email;
                        empdata.ContactNo = query.ContactNumber;
                        empdata.DateOfBirth = string.Format("{0:dd-MMMM-yyyy}", query.DateofBirth);
                        empdata.Gender = Common.GetCodeControlnameCommon(query.Sex ?? 0, "RCTGender");
                        empdata.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentStartdate);
                        empdata.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentEnddate);
                        empdata.ProjectNumber = projdetails.ProjectNumber;
                        empdata.ProjectId = query.ProjectId;
                        empdata.ProjectTitle = projdetails.ProjectTitle;
                        empdata.Agency = projdetails.SponsoringAgency;
                        empdata.Projecttype = projdetails.ProjectType;
                        empdata.PIName = projdetails.PIName;
                        empdata.ProjectStartDate = projdetails.ProjectStartDate;
                        empdata.ProjectCloseDate = projdetails.ProjectClosureDate;
                        empdata.PICode = projdetails.PICode;
                        empdata.PIEmail = projdetails.Email;
                        empdata.PIContactNo = projdetails.Phone;
                        empdata.PIDepartmentCode = projdetails.PIDepartmentCode;
                        empdata.PIDepartment = projdetails.PIDepartmentName;
                        empdata.OrderId = query.OrderId;
                        empdata.DesignationName = query.PostRecommended;
                        empdata.DesignationId = query.DesignationId;
                    }
                }
                return empdata;
            }
            catch (Exception ex)
            {
                ErrorHandler WLog = new ErrorHandler();
                WLog.SendErrorToText(ex);
                return empdata;
            }
        }

        public Tuple<int, int, string> CreatePaymentdeduction(OtherPaymentDeductionModel model)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {

                    try
                    {
                        int retu = 0;
                        int othid = 0;
                        string errMsg = "";
                        if (model.OTHPayDeductionId == null)
                        {
                            var checkemp = (from oth in context.tblRCTOTHPaymentDeduction
                                            orderby oth.OTHPayDeductionId descending
                                            where oth.EmployeeNo == model.EmployeeNo
                                            select oth).FirstOrDefault();
                            if (checkemp != null)
                            {
                                if (checkemp.Status != "Completed" && checkemp.Status != "Rejected" && checkemp.Status != "InActive")
                                {
                                    errMsg = "Previous request is still pending";
                                    return Tuple.Create(4, 0, errMsg);
                                }
                            }
                            var employeedetails = (from vwoth in context.vw_RCTOverAllApplicationEntry
                                                   orderby vwoth.EmployeersID descending
                                                   where vwoth.EmployeersID == model.EmployeeNo && vwoth.ApplicationType == "New" && vwoth.IsActiveNow == true && vwoth.Status != "Cancel"
                                                   select vwoth).FirstOrDefault();
                            tblRCTOTHPaymentDeduction addpaydeuction = new tblRCTOTHPaymentDeduction();
                            addpaydeuction.EmployeeNo = model.EmployeeNo;
                            addpaydeuction.AppointmentId = model.AppointmentId;
                            addpaydeuction.AppointmentType = model.AppointmentType;
                            addpaydeuction.ProjectId = model.ProjectId;
                            addpaydeuction.MonthandYear = model.Month;
                            addpaydeuction.CrtdTS = DateTime.Now;
                            addpaydeuction.CrtdUser = model.UserId;
                            addpaydeuction.Status = "Open";
                            //addpaydeuction.OTHPayDeductionNo = "OTPD/" + Common.GetOtherPaymentDecId();
                            addpaydeuction.OrderId = model.OrderId;
                            addpaydeuction.FromDate = model.FromDate;
                            addpaydeuction.ToDate = model.ToDate;
                            addpaydeuction.DesignationId = model.DesignationId;
                            addpaydeuction.IsNoCommitment_f = model.IsNoCommitment;
                            if (employeedetails != null)
                            {
                                addpaydeuction.Basic = employeedetails.BasicPay;
                                addpaydeuction.HRA = employeedetails.HRA;
                                addpaydeuction.Medical = employeedetails.MedicalAmmount;
                                addpaydeuction.IITMPensioner_f = employeedetails.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                            }
                            addpaydeuction.Isbackend_f = false;
                            if (model.OTHAttachement != null)
                            {
                                string CertificateDocumentPath = "";
                                CertificateDocumentPath = System.IO.Path.GetFileName(model.OTHAttachement.FileName);
                                var Certificatedocfileid = Guid.NewGuid().ToString();
                                var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                /*Saving the file in server folder*/
                                //model.OTHAttachement.SaveAs(HttpContext.Current.Server.MapPath("~/Content/Requirement/" + Certificatedocname));
                                //model.PersonDocImage.UploadFile("SupportDocuments", Certificatedocname);
                                model.OTHAttachement.UploadFile("Requirement", Certificatedocname);
                                addpaydeuction.OTHPaymentDeductionFile = Certificatedocname;
                            }
                            context.tblRCTOTHPaymentDeduction.Add(addpaydeuction);
                            context.SaveChanges();
                            othid = addpaydeuction.OTHPayDeductionId;
                            if (model.OTHDetail.Count > 0)
                            {
                                foreach (var item in model.OTHDetail)
                                {
                                    tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                    addothdetail.OTHPayDeductionId = othid;
                                    addothdetail.OtherType = item.OtherType;
                                    if (item.OtherType == 1)
                                        addothdetail.PaymentType = item.PaymentDeductionType;
                                    else
                                        addothdetail.DeductionType = item.PaymentDeductionType;
                                    addothdetail.HeadId = item.PaymentDeductionType;
                                    addothdetail.Amount = item.Amount;
                                    addothdetail.Remarks = item.Remarks;
                                    addothdetail.Status = "Active";
                                    context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                    context.SaveChanges();
                                }
                            }
                            transaction.Commit();
                            retu = 1;
                        }
                        else
                        {
                            var queryupdate = context.tblRCTOTHPaymentDeduction.Where(x => x.OTHPayDeductionId == model.OTHPayDeductionId && x.Status == "Open").FirstOrDefault();
                            if (queryupdate != null)
                            {
                                var employeedetails = (from vwoth in context.vw_RCTOverAllApplicationEntry
                                                       orderby vwoth.EmployeersID descending
                                                       where vwoth.EmployeersID == model.EmployeeNo && vwoth.ApplicationType == "New" && vwoth.IsActiveNow == true && vwoth.Status != "Cancel"
                                                       select vwoth).FirstOrDefault();
                                othid = model.OTHPayDeductionId ?? 0;
                                #region AddlogOtherPayment
                                tblRCTOTHPaymentDeductionLog addlog = new tblRCTOTHPaymentDeductionLog();
                                addlog.OTHPayDeductionId = queryupdate.OTHPayDeductionId;
                                addlog.EmployeeNo = queryupdate.EmployeeNo;
                                addlog.AppointmentId = queryupdate.AppointmentId;
                                addlog.AppointmentType = queryupdate.AppointmentType;
                                addlog.ProjectId = queryupdate.ProjectId;
                                addlog.CrtdTS = DateTime.Now;
                                addlog.CrtdUser = model.UserId;
                                addlog.OrderId = queryupdate.OrderId;
                                addlog.DesignationId = queryupdate.DesignationId;
                                context.tblRCTOTHPaymentDeductionLog.Add(addlog);
                                context.SaveChanges();
                                #endregion
                                queryupdate.EmployeeNo = model.EmployeeNo;
                                queryupdate.AppointmentId = model.AppointmentId;
                                queryupdate.AppointmentType = model.AppointmentType;
                                queryupdate.ProjectId = model.ProjectId;
                                queryupdate.MonthandYear = model.Month;
                                queryupdate.UpdtTs = DateTime.Now;
                                queryupdate.UpdtUser = model.UserId;
                                queryupdate.OrderId = model.OrderId;
                                queryupdate.FromDate = model.FromDate;
                                queryupdate.ToDate = model.ToDate;
                                queryupdate.DesignationId = model.DesignationId;
                                if (employeedetails != null)
                                {
                                    queryupdate.Basic = employeedetails.BasicPay;
                                    queryupdate.HRA = employeedetails.HRA;
                                    queryupdate.Medical = employeedetails.MedicalAmmount;
                                    queryupdate.IITMPensioner_f = employeedetails.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                }
                                queryupdate.IsNoCommitment_f = model.IsNoCommitment;
                                if (model.OTHAttachement != null)
                                {
                                    string CertificateDocumentPath = "";
                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.OTHAttachement.FileName);
                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                    /*Saving the file in server folder*/
                                    //model.OTHAttachement.SaveAs(HttpContext.Current.Server.MapPath("~/Content/Requirement/" + Certificatedocname));
                                    //model.PersonDocImage.UploadFile("SupportDocuments", Certificatedocname);
                                    model.OTHAttachement.UploadFile("Requirement", Certificatedocname);
                                    queryupdate.OTHPaymentDeductionFile = Certificatedocname;
                                }
                                context.SaveChanges();
                                var arrlist = model.OTHDetail.Select(x => x.OTHPayDeductionDetailId ?? 0).ToArray();
                                context.tblRCTOTHPaymentDeductionDetail.Where(x => x.OTHPayDeductionId == othid && x.Status == "Active" && !arrlist.Contains(x.OTHPayDeductionDetailId))
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.Status = "InActive";
                                    });
                                if (model.OTHDetail.Count > 0)
                                {
                                    foreach (var item in model.OTHDetail)
                                    {
                                        var othdetail = context.tblRCTOTHPaymentDeductionDetail.Where(x => x.OTHPayDeductionDetailId == item.OTHPayDeductionDetailId).FirstOrDefault();
                                        if (othdetail == null)
                                        {
                                            tblRCTOTHPaymentDeductionDetail addothdetail = new tblRCTOTHPaymentDeductionDetail();
                                            addothdetail.OTHPayDeductionId = othid;
                                            addothdetail.OtherType = item.OtherType;
                                            if (item.OtherType == 1)
                                                addothdetail.PaymentType = item.PaymentDeductionType;
                                            else
                                                addothdetail.DeductionType = item.PaymentDeductionType;
                                            addothdetail.HeadId = item.PaymentDeductionType;
                                            addothdetail.Amount = item.Amount;
                                            addothdetail.Status = "Active";
                                            addothdetail.Remarks = item.Remarks;
                                            context.tblRCTOTHPaymentDeductionDetail.Add(addothdetail);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            if (item.OTHPayDeductionDetailId != null)
                                            {
                                                othdetail.OtherType = item.OtherType;
                                                othdetail.HeadId = item.PaymentDeductionType;
                                                if (item.OtherType == 1)
                                                    othdetail.PaymentType = item.PaymentDeductionType;
                                                else
                                                    othdetail.DeductionType = item.PaymentDeductionType;
                                                othdetail.Amount = item.Amount;
                                                othdetail.Remarks = item.Remarks;
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                }
                            }

                            transaction.Commit();

                            retu = 2;
                        }
                        var othstas = context.tblRCTOTHPaymentDeduction.Where(x => x.OTHPayDeductionId == othid && x.Status == "Open").FirstOrDefault();
                        if (othstas.Status == "Open")
                        {

                            var flowstatus = OTHPDWFInit(othid, model.UserId ?? 0);
                            if (flowstatus.Item1 == false)
                            {
                                retu = 3;
                                errMsg = flowstatus.Item2;
                            }
                        }
                        return Tuple.Create(retu, othid, errMsg);
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return Tuple.Create(0, 0, "");
                    }
                }
            }
        }

        public static OtherPaymentDeductionModel EditPaymentdeduction(int othId)
        {
            OtherPaymentDeductionModel editmodel = new OtherPaymentDeductionModel();
            List<OtherPaymentDeductionDetailModel> list = new List<OtherPaymentDeductionDetailModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblRCTOTHPaymentDeduction.Where(x => x.OTHPayDeductionId == othId).FirstOrDefault();
                    if (query != null)
                    {
                        editmodel.OTHPayDeductionId = query.OTHPayDeductionId;
                        editmodel.OrderId = query.OrderId;
                        editmodel.EmployeeNo = query.EmployeeNo;
                        editmodel.AppointmentId = query.AppointmentId;
                        editmodel.Month = query.MonthandYear;
                        editmodel.FromDate = query.FromDate;
                        editmodel.ToDate = query.ToDate;
                        editmodel.IsNoCommitment = query.IsNoCommitment_f ?? false;
                        if (query.OTHPaymentDeductionFile != null)
                        {
                            editmodel.AttachmentPath = query.OTHPaymentDeductionFile;
                        }
                        var othdetail = context.tblRCTOTHPaymentDeductionDetail.Where(x => x.OTHPayDeductionId == othId && x.Status == "Active").ToList();
                        if (othdetail.Count > 0)
                        {
                            for (int i = 0; i < othdetail.Count; i++)
                            {
                                int paydec = 0;
                                if (othdetail[i].OtherType == 1)
                                    paydec = othdetail[i].PaymentType ?? 0;
                                else if (othdetail[i].OtherType == 2)
                                    paydec = othdetail[i].DeductionType ?? 0;
                                list.Add(new OtherPaymentDeductionDetailModel()
                                {
                                    OTHPayDeductionDetailId = othdetail[i].OTHPayDeductionDetailId,
                                    OtherType = othdetail[i].OtherType,
                                    //PaydecList = RequirementService.GetOthPaydeectionList(othdetail[i].OtherType ?? 0),
                                    PaydecList = Common.GetCommonHeadList(1, othdetail[i].OtherType ?? 0),
                                    PaymentDeductionType = paydec,
                                    Amount = othdetail[i].Amount,
                                    Remarks = othdetail[i].Remarks
                                });
                            }
                        }
                    }
                }
                editmodel.OTHDetail = list;
                return editmodel;
            }
            catch (Exception ex)
            {
                return editmodel;
            }
        }

        public static OtherPaymentDeductionModel ViewOtherPaymentDeduction(int othId)
        {
            OtherPaymentDeductionModel ViewModel = new OtherPaymentDeductionModel();
            List<OtherPaymentDeductionDetailModel> viewdetail = new List<OtherPaymentDeductionDetailModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var DataView = context.tblRCTOTHPaymentDeduction.Where(x => x.OTHPayDeductionId == othId).FirstOrDefault();
                    if (DataView != null)
                    {
                        var projdetails = RequirementService.getProjectSummary(DataView.ProjectId ?? 0);
                        string empno = DataView.EmployeeNo;
                        var query = (from vw in context.vw_RCTOverAllApplicationEntry
                                     orderby vw.EmployeeNo descending
                                     where vw.EmployeeNo == empno && vw.ApplicationType == "New" && vw.IsActiveNow == true && vw.Status != "Cancel"
                                     select new
                                     {
                                         vw.CandidateName,
                                         vw.AppointmentType,
                                         vw.Email,
                                         vw.ContactNumber,
                                         vw.DateofBirth,
                                         vw.PostRecommended,
                                         vw.Sex,
                                         vw.AppointmentStartdate,
                                         vw.AppointmentEnddate,
                                         vw.ProjectId,
                                         vw.OrderId
                                     }).FirstOrDefault();
                        ViewModel.EmployeeNo = DataView.EmployeeNo;
                        ViewModel.OTHPayDeductionId = DataView.OTHPayDeductionId;
                        ViewModel.Name = query.CandidateName;
                        ViewModel.AppointmentType = query.AppointmentType;
                        ViewModel.AppointmentTypeName = query.AppointmentType == 1 ? "Consultant Appointment" : query.AppointmentType == 2 ? "STE" : query.AppointmentType == 3 ? "OSG" : "";
                        ViewModel.EmailId = query.Email;
                        ViewModel.ContactNo = query.ContactNumber;
                        ViewModel.DateOfBirth = string.Format("{0:dd-MMMM-yyyy}", query.DateofBirth);
                        ViewModel.FrmDate = string.Format("{0:dd-MMMM-yyyy}", DataView.FromDate);
                        ViewModel.Todates = string.Format("{0:dd-MMMM-yyyy}", DataView.ToDate);
                        ViewModel.DesignationName = query.PostRecommended;
                        if (DataView.OTHPaymentDeductionFile != null)
                        {
                            ViewModel.AttachmentPath = DataView.OTHPaymentDeductionFile;
                        }
                        ViewModel.Gender = Common.GetCodeControlnameCommon(query.Sex ?? 0, "RCTGender");
                        ViewModel.AppointmentStartDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentStartdate);
                        ViewModel.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentEnddate);
                        ViewModel.ProjectNumber = projdetails.ProjectNumber;
                        ViewModel.ProjectId = query.ProjectId;
                        ViewModel.ProjectTitle = projdetails.ProjectTitle;
                        ViewModel.Agency = projdetails.SponsoringAgency;
                        ViewModel.Projecttype = projdetails.ProjectType;
                        ViewModel.PIName = projdetails.PIName;
                        ViewModel.ProjectStartDate = projdetails.ProjectStartDate;
                        ViewModel.ProjectCloseDate = projdetails.ProjectClosureDate;
                        ViewModel.PICode = projdetails.PICode;
                        ViewModel.PIEmail = projdetails.Email;
                        ViewModel.PIContactNo = projdetails.Phone;
                        ViewModel.PIDepartmentCode = projdetails.PIDepartmentCode;
                        ViewModel.PIDepartment = projdetails.PIDepartmentName;
                        ViewModel.OrderId = query.OrderId;
                        ViewModel.Month = DataView.MonthandYear;
                        if (DataView.IsNoCommitment_f != true)
                            ViewModel.DonotCommitment = "No";
                        else
                            ViewModel.DonotCommitment = "Yes";

                        var list = context.tblRCTOTHPaymentDeductionDetail.Where(x => x.OTHPayDeductionId == othId && x.Status == "Active").ToList();
                        if (list.Count > 0)
                        {
                            for (int i = 0; i < list.Count; i++)
                            {
                                string paydec = string.Empty;
                                if (list[i].OtherType == 1)
                                    paydec = Common.GetCommonHeadName(list[i].PaymentType ?? 0);
                                else if (list[i].OtherType == 2)
                                    paydec = Common.GetCommonHeadName(list[i].DeductionType ?? 0);
                                viewdetail.Add(new OtherPaymentDeductionDetailModel()
                                {
                                    OtherTypeName = list[i].OtherType == 1 ? "Payment" : "Deduction",
                                    PaymentdecTypename = paydec,
                                    Amount = list[i].Amount,
                                    Remarks = list[i].Remarks
                                });
                            }
                        }
                    }
                }
                ViewModel.OTHDetail = viewdetail;
                return ViewModel;
            }
            catch (Exception ex)
            {
                return ViewModel;
            }
        }

        public Tuple<bool, string> OTHPDWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblRCTOTHPaymentDeduction.Where(x => x.OTHPayDeductionId == id).FirstOrDefault();
                    if (query != null)
                    {
                        string Type = "OTHPaydeu";
                        var fw = CoreAccount.ProcessTrigger(212, Type, 0, id, logged_in_user, "OthId", query.OTHPayDeductionNo);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Sent for approval";
                            query.UpdtUser = logged_in_user;
                            query.UpdtTs = DateTime.Now;
                            context.SaveChanges();
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public static List<MasterlistviewModel> GetOthPaydeectionList(int othtypeId)
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            string type = "";
            if (othtypeId == 1)
                type = "RCTPayment";
            else if (othtypeId == 2)
                type = "RCTDeduction";
            else
                type = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == type
                                 orderby C.CodeValAbbr
                                 select C).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        #endregion

        #region ConsultantAppointment
        public Tuple<int, int> CreateConsultantAppointment(ConsultantAppointmentModel model)
        {
            int res = 0;
            int ConAppId = 0;
            string PreStatus = string.Empty;
            string NewStatus = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (model.ConsultantAppointmentId == null)
                            {
                                int sqnbr = (from S in context.tblRCTConsultantAppointment
                                             select S.SqNbr
                                           ).Max() ?? 0;
                                tblRCTConsultantAppointment addConsultant = new tblRCTConsultantAppointment();
                                addConsultant.TypeofAppointment = 1;
                                addConsultant.ProfessionalType = model.ProfessionalId;
                                addConsultant.Name = model.Name;
                                if (model.EmployeeType == "Old Employee")
                                {
                                    addConsultant.EmployeeCategory = "Old Employee";
                                    addConsultant.OldNumber = model.OldEmployeeNumber;
                                }
                                else
                                {
                                    addConsultant.EmployeeCategory = "New Employee";
                                    addConsultant.NIDNumber = model.NIDNumber;
                                }
                                if (model.PersonDocImage != null)
                                {
                                    string CertificateDocumentPath = "";
                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.PersonDocImage.FileName);
                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                    model.PersonDocImage.UploadFile("RCTEmployeeImages", Certificatedocname);
                                    addConsultant.CandidateImage = Certificatedocname;
                                }
                                else if (!string.IsNullOrEmpty(model.PersonDocPath))
                                {
                                    addConsultant.CandidateImage = model.PersonDocPath;
                                }
                                if (model.Resume != null)
                                {
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + model.Resume.FileName;
                                    model.Resume.UploadFile("Requirement", docName);
                                    addConsultant.ResumeFile = docName;
                                }
                                if (model.FormDocument != null)
                                {
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + model.FormDocument.FileName;
                                    model.FormDocument.UploadFile("Requirement", docName);
                                    addConsultant.FormFile = docName;
                                }
                                addConsultant.NameoftheGuardian = model.Nameoftheguardian;
                                addConsultant.Email = model.Email;
                                addConsultant.ContactNumber = model.ContactNumber;
                                addConsultant.EmergencyContact = model.EmergencyContactNo;
                                addConsultant.IsSameAsPresentAddress = model.isSameasPermanentAddress;
                                addConsultant.PermanentAddress = model.PermanentAddress;
                                addConsultant.TemporaryAddress = model.TemporaryAddress;
                                addConsultant.DateofBirth = model.DateofBirth;
                                addConsultant.Age = model.Age;
                                addConsultant.Sex = model.Sex;
                                addConsultant.AadhaarNumber = model.AadharNumber;
                                addConsultant.ApplicationReceiveDate = model.ApplicationReceiveDate;
                                addConsultant.ApplicationEntryDate = model.ApplicatonEntryDate;
                                addConsultant.Remarks = model.Remarks;
                                addConsultant.IsICSRStafforProjectStaff = model.IsICSRStaff == "ICSR" ? true : false;
                                addConsultant.ProjectId = model.ProjectId;
                                addConsultant.DesignationId = model.DesignationId;
                                addConsultant.AppointmentStartdate = model.Appointmentstartdate;
                                addConsultant.AppointmentEnddate = model.AppointmentEndDate;
                                if (model.GSTapplicable != 3)
                                {
                                    addConsultant.GSTApplicable = model.GSTapplicable;
                                    addConsultant.GSTPercentage = model.GST;
                                }
                                else
                                {
                                    addConsultant.GSTPercentage = 0;
                                }
                                addConsultant.Salary = model.Salary;
                                addConsultant.TotalAmount = model.Total;
                                addConsultant.CommitmentAmount = model.CommitmentAmount;
                                addConsultant.FormType = model.FormId;
                                addConsultant.BankAccountNumber = model.BankAccountNo;
                                addConsultant.BankName = model.BankName;
                                addConsultant.BankId = model.BankId;
                                addConsultant.IFSCCode = model.IFSCCode;
                                addConsultant.PanNo = model.PANNo;
                                addConsultant.ApplicationNumber = "AP" + "/" + (Convert.ToInt32(sqnbr) + 1).ToString("00000") + "/" + "CON";
                                addConsultant.SqNbr = (Convert.ToInt32(sqnbr) + 1);
                                addConsultant.Comments = model.Comments;
                                addConsultant.Note = model.Note;
                                addConsultant.IITMPensionerorCSIRStaff = model.IITMPensionerorCSIRStaff;
                                if (model.IITMPensionerorCSIRStaff == 1)
                                    addConsultant.PPONo = model.PPONo;
                                if (model.IITMPensionerorCSIRStaff == 2)
                                    addConsultant.CSIRStaffPayMode = model.CSIRStaff;
                                addConsultant.CommitteeMember = model.CommiteeMemberId;
                                addConsultant.CommitteeMembers = model.CommiteeMembersId;
                                addConsultant.Chairperson = model.ChairpersonNameId;
                                addConsultant.CrtdTs = DateTime.Now;
                                addConsultant.CrtdUser = model.UserId;
                                if (!model.isDraftbtn)
                                {
                                    addConsultant.ToMail = model.ToMail;
                                    addConsultant.Bcc = model.bcc;
                                }
                                addConsultant.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";
                                if (model.isDraftbtn == true)
                                    addConsultant.Status = "Draft";
                                addConsultant.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                addConsultant.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                addConsultant.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                addConsultant.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                addConsultant.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;

                                NewStatus = addConsultant.Status;
                                addConsultant.RefNumber = model.ApplicationRefNo;
                                addConsultant.RequestedBy = model.RequestedByPI;
                                addConsultant.SalaryLevelId = model.SalaryLevelId;
                                context.tblRCTConsultantAppointment.Add(addConsultant);
                                context.SaveChanges();
                                ConAppId = addConsultant.ConsultantAppointmentId;
                                if (ConAppId > 0)
                                {
                                    if (addConsultant.Status == "Open")
                                        res = 1;
                                    else if (addConsultant.Status.Contains("Note"))
                                        res = 2;
                                    else if (addConsultant.Status == "Draft")
                                        res = 1;
                                }


                                if (model.PIJustificationFile != null)
                                {
                                    foreach (var pifile in model.PIJustificationFile)
                                    {
                                        if (pifile != null)
                                        {
                                            tblRCTCONPIJustificationDocument pidocs = new tblRCTCONPIJustificationDocument();
                                            string actName = System.IO.Path.GetFileName(pifile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            pifile.UploadFile("Requirement", docName);
                                            pidocs.ConsultantAppointmentId = ConAppId;
                                            pidocs.PIJustificationDescription = model.PIJustificationRemarks;
                                            pidocs.PIJustificationDocumentFile = docName;
                                            pidocs.PIJustificationDocumentName = actName;
                                            pidocs.CrtdUser = model.UserId;
                                            pidocs.CrtdTs = DateTime.Now;
                                            pidocs.Status = "Active";
                                            context.tblRCTCONPIJustificationDocument.Add(pidocs);
                                            context.SaveChanges();
                                        }
                                    }
                                }


                                if (model.EducationDetail.Count > 0)
                                {
                                    for (int i = 0; i < model.EducationDetail.Count; i++)
                                    {
                                        tblRCTConsultantEducationDetail addeducation = new tblRCTConsultantEducationDetail();
                                        addeducation.ConsultantAppointmentId = ConAppId;
                                        addeducation.QualifiCationId = model.EducationDetail[i].QualificationId;
                                        addeducation.DisciplineId = model.EducationDetail[i].DisciplineId;
                                        addeducation.UniversityorInstitution = model.EducationDetail[i].Institution;
                                        addeducation.YearOfPassing = model.EducationDetail[i].YearofPassing;
                                        addeducation.Marks = model.EducationDetail[i].Marks;
                                        addeducation.MarkType = model.EducationDetail[i].MarkType;
                                        addeducation.DivisionClassObtained = model.EducationDetail[i].DivisionClassObtained;
                                        if (model.EducationDetail[i].Certificate != null)
                                        {
                                            string CertificateDocumentPath = "";
                                            CertificateDocumentPath = System.IO.Path.GetFileName(model.EducationDetail[i].Certificate.FileName);
                                            var Certificatedocfileid = Guid.NewGuid().ToString();
                                            var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                            model.EducationDetail[i].Certificate.UploadFile("Requirement", Certificatedocname);
                                            addeducation.DocumentFile = Certificatedocname;
                                            addeducation.DocumentName = CertificateDocumentPath;
                                        }
                                        if (model.EducationDetail[i].DocumentPath != null && model.EducationDetail[i].DocumentActualName != null)
                                        {
                                            addeducation.DocumentName = model.EducationDetail[i].DocumentPath;
                                            addeducation.DocumentFile = model.EducationDetail[i].DocumentActualName;
                                        }
                                        addeducation.Remarks = model.EducationDetail[i].Remarks;
                                        addeducation.CrtdUser = model.UserId;
                                        addeducation.CrtdTs = DateTime.Now;
                                        addeducation.Status = "Active";
                                        context.tblRCTConsultantEducationDetail.Add(addeducation);
                                        context.SaveChanges();
                                    }
                                }
                                if (model.ExperienceDetail.Count > 0)
                                {
                                    for (int i = 0; i < model.ExperienceDetail.Count; i++)
                                    {
                                        tblRCTConsultantExperienceDetail addexpdetail = new tblRCTConsultantExperienceDetail();
                                        addexpdetail.ConsultantAppointmentId = ConAppId;
                                        addexpdetail.TypeId = model.ExperienceDetail[i].ExperienceTypeId;
                                        addexpdetail.Organisation = model.ExperienceDetail[i].Organisation;
                                        addexpdetail.Designation = model.ExperienceDetail[i].DesignationautoComplete;
                                        addexpdetail.DesignationId = model.ExperienceDetail[i].DesignationListId;
                                        addexpdetail.FromYear = model.ExperienceDetail[i].FromDate;
                                        addexpdetail.ToYear = model.ExperienceDetail[i].ToDate;
                                        addexpdetail.SalaryDrawn = model.ExperienceDetail[i].SalaryDrawn;
                                        if (model.ExperienceDetail[i].ExperienceFile != null)
                                        {
                                            string CertificateDocumentPath = "";
                                            CertificateDocumentPath = System.IO.Path.GetFileName(model.ExperienceDetail[i].ExperienceFile.FileName);
                                            var Certificatedocfileid = Guid.NewGuid().ToString();
                                            var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;

                                            model.ExperienceDetail[i].ExperienceFile.UploadFile("Requirement", Certificatedocname);
                                            addexpdetail.DocumentFile = Certificatedocname;
                                            addexpdetail.DocumentName = CertificateDocumentPath;
                                        }
                                        if (model.ExperienceDetail[i].DocumentName != null && model.ExperienceDetail[i].DocumentActualName != null)
                                        {
                                            addexpdetail.DocumentFile = model.ExperienceDetail[i].DocumentActualName;
                                            addexpdetail.DocumentName = model.ExperienceDetail[i].DocumentName;
                                        }
                                        addexpdetail.Remarks = model.ExperienceDetail[i].Remarks;
                                        addexpdetail.CrtdUser = model.UserId;
                                        addexpdetail.CrtdTs = DateTime.Now;
                                        addexpdetail.Status = "Active";
                                        context.tblRCTConsultantExperienceDetail.Add(addexpdetail);
                                        context.SaveChanges();
                                    }
                                }
                                if (model.Comments != "" || model.Comments != null)
                                {
                                    tblRCTCONNotes Notes = new tblRCTCONNotes();
                                    Notes.ConsultantAppointmentId = ConAppId;
                                    Notes.PICommends = model.Comments;
                                    Notes.Crt_TS = DateTime.Now;
                                    context.tblRCTCONNotes.Add(Notes);
                                    context.SaveChanges();
                                }

                                if (model.CheckListDetail != null)
                                {
                                    if (model.CheckListDetail.Count > 0)
                                    {
                                        for (int i = 0; i < model.CheckListDetail.Count; i++)
                                        {
                                            tblRCTConsultantDevCheckDetail adddev = new tblRCTConsultantDevCheckDetail();
                                            adddev.ConsultantAppointmentId = ConAppId;
                                            adddev.IsChecked = model.CheckListDetail[i].IsChecked;
                                            adddev.CrtdUser = model.UserId;
                                            adddev.CrtdTs = DateTime.Now;
                                            adddev.Status = "Active";
                                            adddev.DeviationCheckListId = model.CheckListDetail[i].FunctionCheckListId;
                                            context.tblRCTConsultantDevCheckDetail.Add(adddev);
                                            context.SaveChanges();
                                        }

                                    }
                                }

                                //transaction.Commit();
                                //if (!model.isDraftbtn)
                                //{
                                //    if (model.FlowofMail == "Nd")
                                //        CONAPWFInit(ConsultantId, model.UserId ?? 0);
                                //}
                                //return ConsultantId;
                            }
                            else
                            {
                                var updateconsultant = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == model.ConsultantAppointmentId).FirstOrDefault();
                                if (updateconsultant != null)
                                {
                                    PreStatus = updateconsultant.Status;
                                    ConAppId = model.ConsultantAppointmentId ?? 0;
                                    updateconsultant.TypeofAppointment = 1;
                                    updateconsultant.ProfessionalType = model.ProfessionalId;
                                    if (model.PersonDocImage != null)
                                    {
                                        string CertificateDocumentPath = "";
                                        CertificateDocumentPath = System.IO.Path.GetFileName(model.PersonDocImage.FileName);
                                        var Certificatedocfileid = Guid.NewGuid().ToString();
                                        var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                        /*Saving the file in server folder*/
                                        model.PersonDocImage.UploadFile("RCTEmployeeImages", Certificatedocname);
                                        updateconsultant.CandidateImage = Certificatedocname;
                                    }
                                    if (model.Resume != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.Resume.FileName;
                                        model.Resume.UploadFile("Requirement", docName);
                                        updateconsultant.ResumeFile = docName;
                                    }
                                    if (model.FormDocument != null)
                                    {
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + model.FormDocument.FileName;
                                        model.FormDocument.UploadFile("Requirement", docName);
                                        updateconsultant.FormFile = docName;
                                    }
                                    updateconsultant.Name = model.Name;
                                    updateconsultant.NameoftheGuardian = model.Nameoftheguardian;
                                    updateconsultant.Email = model.Email;
                                    updateconsultant.ContactNumber = model.ContactNumber;
                                    updateconsultant.EmergencyContact = model.EmergencyContactNo;
                                    updateconsultant.IsSameAsPresentAddress = model.isSameasPermanentAddress;
                                    updateconsultant.TemporaryAddress = model.TemporaryAddress;
                                    updateconsultant.PermanentAddress = model.PermanentAddress;
                                    updateconsultant.DateofBirth = model.DateofBirth;
                                    updateconsultant.Age = model.Age;
                                    updateconsultant.Sex = model.Sex;
                                    updateconsultant.AadhaarNumber = model.AadharNumber;
                                    updateconsultant.ApplicationReceiveDate = model.ApplicationReceiveDate;
                                    updateconsultant.Remarks = model.Remarks;
                                    if (model.EmployeeType == "Old Employee")
                                    {
                                        updateconsultant.EmployeeCategory = "Old Employee";
                                        updateconsultant.OldNumber = model.OldEmployeeNumber;
                                        updateconsultant.NIDNumber = null;
                                    }
                                    else
                                    {
                                        updateconsultant.EmployeeCategory = "New Employee";
                                        updateconsultant.NIDNumber = model.NIDNumber;
                                        updateconsultant.OldNumber = null;
                                    }
                                    updateconsultant.ProjectId = model.ProjectId;
                                    updateconsultant.DesignationId = model.DesignationId;
                                    updateconsultant.AppointmentStartdate = model.Appointmentstartdate;
                                    updateconsultant.AppointmentEnddate = model.AppointmentEndDate;
                                    if (model.GSTapplicable != 3)
                                    {
                                        updateconsultant.GSTApplicable = model.GSTapplicable;
                                        updateconsultant.GSTPercentage = model.GST;
                                    }
                                    else
                                    {
                                        updateconsultant.GSTPercentage = 0;
                                    }
                                    updateconsultant.Salary = model.Salary;
                                    updateconsultant.TotalAmount = model.Total;
                                    updateconsultant.CommitmentAmount = model.CommitmentAmount;
                                    updateconsultant.FormType = model.FormId;
                                    updateconsultant.BankAccountNumber = model.BankAccountNo;
                                    updateconsultant.BankName = model.BankName;
                                    updateconsultant.BankId = model.BankId;
                                    updateconsultant.IFSCCode = model.IFSCCode;
                                    updateconsultant.PanNo = model.PANNo;
                                    updateconsultant.Comments = model.Comments;
                                    updateconsultant.Note = model.Note;
                                    updateconsultant.IITMPensionerorCSIRStaff = model.IITMPensionerorCSIRStaff;
                                    if (model.IITMPensionerorCSIRStaff == 1)
                                        updateconsultant.PPONo = model.PPONo;
                                    if (model.IITMPensionerorCSIRStaff == 2)
                                        updateconsultant.CSIRStaffPayMode = model.CSIRStaff;
                                    updateconsultant.CommitteeMember = model.CommiteeMemberId;
                                    updateconsultant.CommitteeMembers = model.CommiteeMembersId;
                                    updateconsultant.Chairperson = model.ChairpersonNameId;
                                    updateconsultant.UptdTs = DateTime.Now;
                                    updateconsultant.UptdUser = model.UserId;
                                    if (model.bcc != "" && model.ToMail != "")
                                    {
                                        updateconsultant.Bcc = model.bcc;
                                        updateconsultant.ToMail = model.ToMail;
                                    }
                                    updateconsultant.IsICSRStafforProjectStaff = model.IsICSRStaff == "ICSR" ? true : false;
                                    updateconsultant.Status = model.FlowofMail == "Nd" ? "Open" : model.FlowofMail == "NP" ? "Note to PI" : model.FlowofMail == "NC" ? "Note to Committee" : model.FlowofMail == "NDean" ? "Note to Dean" : "";

                                    if (model.isDraftbtn == true)
                                        updateconsultant.Status = "Draft";
                                    NewStatus = updateconsultant.Status;
                                    updateconsultant.NotetoPI = model.FlowofMail == "NP" ? true : false;
                                    updateconsultant.NotetoCommittee = model.FlowofMail == "NC" ? true : false;
                                    updateconsultant.NotetoDean = model.FlowApprover == "NDean" ? true : false;
                                    updateconsultant.Nodeviation = model.FlowofMail == "Nd" ? true : false;
                                    updateconsultant.NotetoCMAdmin = model.FlowApprover == "CMAdmin" ? true : false;
                                    updateconsultant.RefNumber = model.ApplicationRefNo;
                                    updateconsultant.RequestedBy = model.RequestedByPI;
                                    updateconsultant.SalaryLevelId = model.SalaryLevelId;
                                    context.SaveChanges();
                                    if (model.PIJustificationFile != null)
                                    {
                                        foreach (var item in model.PIJustificationFile)
                                        {
                                            if (item != null)
                                            {
                                                tblRCTCONPIJustificationDocument addPIDoc = new tblRCTCONPIJustificationDocument();


                                                addPIDoc.ConsultantAppointmentId = model.ConsultantAppointmentId;
                                                addPIDoc.PIJustificationDescription = model.PIJustificationRemarks;
                                                string CertificateDocumentPath = "";
                                                CertificateDocumentPath = System.IO.Path.GetFileName(item.FileName);
                                                var Certificatedocfileid = Guid.NewGuid().ToString();
                                                var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                /*Saving the file in server folder*/
                                                item.UploadFile("Requirement", Certificatedocname);
                                                addPIDoc.PIJustificationDocumentFile = Certificatedocname;
                                                addPIDoc.PIJustificationDocumentName = CertificateDocumentPath;
                                                addPIDoc.CrtdUser = model.UserId;
                                                addPIDoc.CrtdTs = DateTime.Now;
                                                addPIDoc.Status = "Active";
                                                context.tblRCTCONPIJustificationDocument.Add(addPIDoc);
                                                context.SaveChanges();
                                            }
                                        }
                                    }

                                    var edulist = model.EducationDetail.Select(x => x.EducationId ?? 0).ToArray();
                                    context.tblRCTConsultantEducationDetail.Where(x => x.ConsultantAppointmentId == model.ConsultantAppointmentId && !edulist.Contains(x.ConsultantEducationDetailId) && x.Status != "InActive")
                                        .ToList()
                                        .ForEach(m =>
                                        {
                                            m.Status = "InActive";
                                            m.UptdTs = DateTime.Now;
                                            m.UptdUser = model.UserId;
                                        });
                                    foreach (var item in model.EducationDetail)
                                    {
                                        var deseduquery = context.tblRCTConsultantEducationDetail.FirstOrDefault(m => m.ConsultantEducationDetailId == item.EducationId);
                                        if (deseduquery == null)
                                        {
                                            tblRCTConsultantEducationDetail addeducation = new tblRCTConsultantEducationDetail();
                                            addeducation.ConsultantAppointmentId = model.ConsultantAppointmentId;
                                            addeducation.QualifiCationId = item.QualificationId;
                                            addeducation.DisciplineId = item.DisciplineId;
                                            addeducation.UniversityorInstitution = item.Institution;
                                            addeducation.YearOfPassing = item.YearofPassing;
                                            addeducation.Marks = item.Marks;
                                            addeducation.DivisionClassObtained = item.DivisionClassObtained;
                                            if (item.Certificate != null)
                                            {
                                                string CertificateDocumentPath = "";
                                                CertificateDocumentPath = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                var Certificatedocfileid = Guid.NewGuid().ToString();
                                                var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                item.Certificate.UploadFile("Requirement", Certificatedocname);
                                                addeducation.DocumentFile = Certificatedocname;
                                                addeducation.DocumentName = CertificateDocumentPath;
                                            }
                                            addeducation.Remarks = item.Remarks;
                                            addeducation.CrtdUser = model.UserId;
                                            addeducation.CrtdTs = DateTime.Now;
                                            addeducation.Status = "Active";
                                            context.tblRCTConsultantEducationDetail.Add(addeducation);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            if (item.EducationId != null)
                                            {
                                                deseduquery.ConsultantAppointmentId = model.ConsultantAppointmentId;
                                                deseduquery.QualifiCationId = item.QualificationId;
                                                deseduquery.DisciplineId = item.DisciplineId;
                                                deseduquery.UniversityorInstitution = item.Institution;
                                                deseduquery.YearOfPassing = item.YearofPassing;
                                                deseduquery.Marks = item.Marks;
                                                deseduquery.DivisionClassObtained = item.DivisionClassObtained;
                                                if (item.Certificate != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(item.Certificate.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    item.Certificate.UploadFile("Requirement", Certificatedocname);
                                                    deseduquery.DocumentFile = Certificatedocname;
                                                    deseduquery.DocumentName = CertificateDocumentPath;
                                                }
                                                deseduquery.Remarks = item.Remarks;
                                                deseduquery.UptdUser = model.UserId;
                                                deseduquery.UptdTs = DateTime.Now;
                                                deseduquery.Status = "Active";
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    var explist = model.ExperienceDetail.Select(x => x.ExperienceId ?? 0).ToArray();
                                    context.tblRCTConsultantExperienceDetail.Where(x => x.ConsultantAppointmentId == model.ConsultantAppointmentId && !edulist.Contains(x.ConsultantExperienceDetailId) && x.Status != "InActive")
                                        .ToList()
                                        .ForEach(m =>
                                        {
                                            m.Status = "InActive";
                                            m.UptdTs = DateTime.Now;
                                            m.UptdUser = model.UserId;
                                        });
                                    foreach (var item in model.ExperienceDetail)
                                    {
                                        var desexpquery = context.tblRCTConsultantExperienceDetail.FirstOrDefault(m => m.ConsultantExperienceDetailId == item.ExperienceId);
                                        if (desexpquery == null)
                                        {
                                            tblRCTConsultantExperienceDetail addexpdetail = new tblRCTConsultantExperienceDetail();
                                            addexpdetail.ConsultantAppointmentId = model.ConsultantAppointmentId;
                                            addexpdetail.TypeId = item.ExperienceTypeId;
                                            addexpdetail.Organisation = item.Organisation;
                                            addexpdetail.Designation = item.DesignationNames;
                                            addexpdetail.FromYear = item.FromDate;
                                            addexpdetail.ToYear = item.ToDate;
                                            addexpdetail.SalaryDrawn = item.SalaryDrawn;
                                            if (item.ExperienceFile != null)
                                            {
                                                string CertificateDocumentPath = "";
                                                CertificateDocumentPath = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                var Certificatedocfileid = Guid.NewGuid().ToString();
                                                var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                item.ExperienceFile.UploadFile("Requirement", Certificatedocname);
                                                addexpdetail.DocumentFile = Certificatedocname;
                                                addexpdetail.DocumentName = CertificateDocumentPath;
                                            }
                                            addexpdetail.Remarks = item.Remarks;
                                            addexpdetail.CrtdUser = model.UserId;
                                            addexpdetail.CrtdTs = DateTime.Now;
                                            addexpdetail.Status = "Active";
                                            context.tblRCTConsultantExperienceDetail.Add(addexpdetail);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            if (item.ExperienceId != null)
                                            {
                                                desexpquery.ConsultantAppointmentId = model.ConsultantAppointmentId;
                                                desexpquery.TypeId = item.ExperienceTypeId;
                                                desexpquery.Organisation = item.Organisation;
                                                desexpquery.Designation = item.DesignationautoComplete;
                                                desexpquery.DesignationId = item.DesignationListId;
                                                desexpquery.FromYear = item.FromDate;
                                                desexpquery.ToYear = item.ToDate;
                                                desexpquery.SalaryDrawn = item.SalaryDrawn;
                                                if (item.ExperienceFile != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(item.ExperienceFile.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    item.ExperienceFile.UploadFile("Requirement", Certificatedocname);
                                                    desexpquery.DocumentFile = Certificatedocname;
                                                    desexpquery.DocumentName = CertificateDocumentPath;
                                                }
                                                desexpquery.Remarks = item.Remarks;
                                                desexpquery.UptdUser = model.UserId;
                                                desexpquery.UptdTs = DateTime.Now;
                                                desexpquery.Status = "Active";
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    if (model.Comments != "")
                                    {
                                        tblRCTCONNotes Notes = new tblRCTCONNotes();
                                        Notes.ConsultantAppointmentId = model.ConsultantAppointmentId;
                                        Notes.PICommends = model.Comments;
                                        Notes.Crt_TS = DateTime.Now;
                                        context.tblRCTCONNotes.Add(Notes);
                                        context.SaveChanges();
                                    }
                                    context.tblRCTConsultantDevCheckDetail.Where(x => x.ConsultantAppointmentId == model.ConsultantAppointmentId && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UptdTs = DateTime.Now;
                                    m.UptdUser = model.UserId;
                                });

                                    if (model.CheckListDetail != null)
                                    {
                                        if (model.CheckListDetail.Count > 0)
                                        {
                                            for (int i = 0; i < model.CheckListDetail.Count; i++)
                                            {
                                                tblRCTConsultantDevCheckDetail adddev = new tblRCTConsultantDevCheckDetail();
                                                adddev.ConsultantAppointmentId = model.ConsultantAppointmentId;
                                                adddev.IsChecked = model.CheckListDetail[i].IsChecked;
                                                adddev.CrtdUser = model.UserId;
                                                adddev.CrtdTs = DateTime.Now;
                                                adddev.Status = "Active";
                                                adddev.DeviationCheckListId = model.CheckListDetail[i].FunctionCheckListId;
                                                context.tblRCTConsultantDevCheckDetail.Add(adddev);
                                                context.SaveChanges();
                                            }
                                        }
                                    }

                                    if (ConAppId > 0)
                                    {
                                        if (updateconsultant.Status == "Open")
                                            res = 1;
                                        else if (updateconsultant.Status.Contains("Note"))
                                            res = 2;
                                        else if (updateconsultant.Status == "Draft")
                                            res = 2;
                                    }
                                }
                            }
                            transaction.Commit();
                            RequirementService.PostCONStatusLog(ConAppId, PreStatus, NewStatus, model.UserId ?? 0);

                            int processcount = (from ec in context.tblRCTConsutantAppEmailLog
                                                where ec.ConsultantAppointmentId == ConAppId && ec.TypeofMail == 1 && ec.IsSend == true
                                                select ec).Count();
                            if (ConAppId > 0 && processcount == 0 && !model.isDraftbtn)
                                RCTEmailContentService.AcknowledgementMailForCON(ConAppId, model.UserId ?? 0);
                            if (!model.isDraftbtn)
                            {
                                var chkflow = CONAPWFInit(ConAppId, model.UserId ?? 0);
                                if (chkflow.Item1 != true)
                                    res = 3;
                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            return Tuple.Create(0, 0);
                        }
                    }
                }
                return Tuple.Create(res, ConAppId);
            }
            catch (Exception ex)
            {
                return Tuple.Create(0, 0);
            }
        }

        public static ConsultantAppointmentModel EditConsultantAppointment(int consultantAppId)
        {
            ConsultantAppointmentModel editmodel = new ConsultantAppointmentModel();

            List<EducationModel> editedu = new List<EducationModel>();
            List<ExperienceModel> explist = new List<ExperienceModel>();
            List<PIJustificationModel> doclist = new List<PIJustificationModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == consultantAppId).FirstOrDefault();
                    if (query != null)
                    {
                        editmodel.ConsultantAppointmentId = query.ConsultantAppointmentId;
                        editmodel.TypeofappointmentId = query.TypeofAppointment;
                        //editmodel.PaytypeId = query.PayType;
                        if (query.CandidateImage != null)
                        {
                            editmodel.PersonDocPath = query.CandidateImage;
                        }
                        if (query.ResumeFile != null)
                            editmodel.ResumeFileName = query.ResumeFile.Substring((query.ResumeFile.LastIndexOf('_') + 1));
                        editmodel.ResumeFilePath = query.ResumeFile;
                        if (query.FormFile != null)
                            editmodel.FormFileName = query.FormFile.Substring((query.FormFile.LastIndexOf('_') + 1));
                        editmodel.FormFilePath = query.FormFile;
                        editmodel.ProfessionalId = query.ProfessionalType;
                        editmodel.Name = query.Name;
                        editmodel.ApplicationNumber = query.ApplicationNumber;
                        editmodel.Nameoftheguardian = query.NameoftheGuardian;
                        editmodel.Email = query.Email;
                        editmodel.ContactNumber = query.ContactNumber;
                        editmodel.EmergencyContactNo = query.EmergencyContact;
                        editmodel.isSameasPermanentAddress = query.IsSameAsPresentAddress ?? false;
                        editmodel.TemporaryAddress = query.TemporaryAddress;
                        editmodel.PermanentAddress = query.PermanentAddress;
                        editmodel.IITMPensionerorCSIRStaff = query.IITMPensionerorCSIRStaff ?? 0;
                        editmodel.GSTapplicable = query.GSTApplicable;
                        editmodel.StaffCategory = query.IsICSRStafforProjectStaff == true ? "ICSR" : "NON ICSR";
                        if (query.EmployeeCategory == "Old Employee")
                        {
                            editmodel.EmployeeType = query.EmployeeCategory;
                            editmodel.OldEmployeeNumber = query.OldNumber;
                        }
                        else
                        {
                            editmodel.EmployeeType = query.EmployeeCategory;
                            editmodel.NIDNumber = query.NIDNumber;
                        }
                        if (query.DateofBirth != null)
                            editmodel.DateBrith = String.Format("{0:dd-MMMM-yyyy}", query.DateofBirth);
                        editmodel.DateofBirth = query.DateofBirth;
                        editmodel.Age = query.Age;
                        editmodel.Sex = query.Sex;
                        editmodel.ApplicationReceiveDate = query.ApplicationReceiveDate;
                        editmodel.ApplicatonEntryDate = query.ApplicationEntryDate;
                        editmodel.Remarks = query.Remarks;
                        editmodel.AadharNumber = query.AadhaarNumber;
                        editmodel.BankAccountNo = query.BankAccountNumber;
                        editmodel.BankId = query.BankId;
                        editmodel.BankName = query.BankName;
                        editmodel.IFSCCode = query.IFSCCode;
                        editmodel.PANNo = query.PanNo;
                        editmodel.ProjectId = query.ProjectId;
                        editmodel.Status = query.Status;
                        editmodel.bcc = query.Bcc;
                        editmodel.EmployeeWorkplace = query.EmployeeWorkplace;
                        if (query.ProjectId != null)
                        {
                            var prjno = context.tblProject.Where(x => x.ProjectId == editmodel.ProjectId).Select(x => x.ProjectNumber).FirstOrDefault();
                            int piname = context.tblProject.Where(x => x.ProjectId == editmodel.ProjectId).Select(x => x.PIName).FirstOrDefault() ?? 0;
                            if (piname > 0)
                            {
                                var employeename = context.vwFacultyStaffDetails.Where(vw => vw.UserId == piname).Select(vw => vw.FirstName).FirstOrDefault();
                                if (prjno != null)
                                    editmodel.ProjectNumber = prjno + "-" + employeename;
                            }
                        }
                        editmodel.DesignationId = query.DesignationId;
                        if (query.DesignationId != null)
                        {
                            var designa = (from ds in context.tblRCTDesignation
                                           where ds.DesignationId == editmodel.DesignationId
                                           select new { ds.DesignationCode, ds.Designation }).FirstOrDefault();
                            if (designa != null)
                                editmodel.Designation = designa.DesignationCode;
                        }
                        if (query.AppointmentStartdate != null)
                            editmodel.AppointMentStrDate = String.Format("{0:dd-MMMM-yyyy}", query.AppointmentStartdate);
                        if (query.AppointmentEnddate != null)
                            editmodel.AppointMentEdDate = String.Format("{0:dd-MMMM-yyyy}", query.AppointmentEnddate);
                        editmodel.GST = query.GSTPercentage;
                        editmodel.GSTapplicable = query.GSTApplicable;
                        editmodel.Salary = query.Salary;
                        editmodel.Total = query.TotalAmount;
                        editmodel.CommitmentAmount = query.CommitmentAmount;
                        editmodel.FormId = query.FormType;
                        editmodel.Note = query.Note;
                        editmodel.IITMPensionerorCSIRStaff = query.IITMPensionerorCSIRStaff;
                        editmodel.PPONo = query.PPONo;
                        editmodel.CSIRStaff = query.CSIRStaffPayMode;
                        if (query.NotetoPI == true)
                        {
                            query.NotetoPI = true;
                            editmodel.FlowofMail = "NP";
                        }
                        else if (query.NotetoDean == true)
                        {
                            //editmodel. = true;
                            editmodel.FlowofMail = "NDean";
                        }
                        else if (query.Nodeviation == true)
                        {
                            editmodel.FlowofMail = "Nd";

                        }
                        if (query.NotetoCMAdmin == true)
                        {
                            editmodel.FlowApprover = "CMAdmin";
                        }
                        if (query.NotetoDean == true)
                        {
                            editmodel.FlowApprover = "NDean";
                        }
                        editmodel.ApplicationRefNo = query.RefNumber;
                        editmodel.AutoFillRequstedbyPI = Common.GetPIName(query.RequestedBy ?? 0);
                        editmodel.RequestedByPI = query.RequestedBy;
                        editmodel.SalaryLevelId = query.SalaryLevelId;
                        var queryedu = context.tblRCTConsultantEducationDetail.Where(x => x.ConsultantAppointmentId == consultantAppId && x.Status != "InActive").ToList();
                        if (queryedu.Count > 0)
                        {

                            for (int i = 0; i < queryedu.Count; i++)
                            {
                                int qulid = queryedu[i].QualifiCationId ?? 0;
                                List<MasterlistviewModel> datalist = new List<MasterlistviewModel>();
                                datalist = Common.GetCourseList(qulid);
                                var strMarkType = Common.GetCodeControlName(queryedu[i].MarkType ?? 0, "RCTMarkType");
                                editedu.Add(new EducationModel()
                                {
                                    EducationId = queryedu[i].ConsultantEducationDetailId,
                                    ddlList = datalist,
                                    QualificationId = queryedu[i].QualifiCationId ?? 0,
                                    QualificationName = Common.GetQualificationName(queryedu[i].QualifiCationId ?? 0),
                                    DisciplineId = queryedu[i].DisciplineId,
                                    DisciplineName = Common.GetDeciplineName(queryedu[i].DisciplineId ?? 0),
                                    Institution = queryedu[i].UniversityorInstitution,
                                    YearofPassing = queryedu[i].YearOfPassing,
                                    DivisionClassObtained = queryedu[i].DivisionClassObtained,
                                    strMarkType = strMarkType,
                                    Marks = queryedu[i].Marks,
                                    MarkType = queryedu[i].MarkType,
                                    Remarks = queryedu[i].Remarks,
                                    DocumentName = queryedu[i].DocumentFile,
                                    DocumentActualName = queryedu[i].DocumentName,
                                    DocumentPath = "Requirement"

                                });
                            }
                        }
                        var queryexp = context.tblRCTConsultantExperienceDetail.Where(x => x.ConsultantAppointmentId == consultantAppId && x.Status != "InActive").ToList();
                        if (queryexp.Count > 0)
                        {

                            for (int i = 0; i < queryexp.Count; i++)
                            {
                                explist.Add(new ExperienceModel()
                                {
                                    ExperienceId = queryexp[i].ConsultantExperienceDetailId,
                                    ExperienceTypeName = Common.GetCodeControlnameCommon(queryexp[i].TypeId ?? 0, "RCTExperienceType"),
                                    ExperienceTypeId = queryexp[i].TypeId,
                                    Organisation = queryexp[i].Organisation,
                                    DesignationListId = queryexp[i].DesignationId,
                                    DesignationautoComplete = queryexp[i].Designation,
                                    FromDate = queryexp[i].FromYear,
                                    ToDate = queryexp[i].ToYear,
                                    SalaryDrawn = queryexp[i].SalaryDrawn,
                                    Remarks = queryexp[i].Remarks,
                                    DocumentName = queryexp[i].DocumentFile,
                                    DocumentActualName = queryexp[i].DocumentName,
                                    DocumentPath = "Requirement",
                                    EXPFromDate = String.Format("{0:dd-MMMM-yyyy}", queryexp[i].FromYear),
                                    ExpToDate = String.Format("{0:dd-MMMM-yyyy}", queryexp[i].ToYear)

                                });
                            }
                        }
                        editmodel.EmergencyContactNo = query.EmergencyContact;
                        editmodel.EmployeeId = query.EmployeersID;
                        editmodel.ToMail = query.ToMail;
                        editmodel.bcc = query.Bcc;
                        var jusdoc = (from dc in context.tblRCTCONPIJustificationDocument
                                      where dc.Status != "InActive" && dc.ConsultantAppointmentId == consultantAppId
                                      orderby dc.CONPIJustificationDocumentId descending
                                      select dc).ToList();
                        if (jusdoc.Count > 0)
                        {
                            for (int i = 0; i < jusdoc.Count; i++)
                            {
                                doclist.Add(new PIJustificationModel()
                                {
                                    PIJustificationDocument = jusdoc[i].PIJustificationDocumentFile,
                                    PIJustificationDocumentPath = jusdoc[i].PIJustificationDocumentName,

                                });
                            }
                        }
                    }
                }
                editmodel.PIJustificationDocDetail = doclist;
                editmodel.EducationDetail = editedu;
                editmodel.ExperienceDetail = explist;
                return editmodel;
            }
            catch (Exception ex)
            {
                return editmodel;
            }
        }

        public ConsultantAppointmentModel ViewConsultantAppointment(int consultantAppId)
        {
            ConsultantAppointmentModel Viewmodel = new ConsultantAppointmentModel();
            List<EducationModel> viewedu = new List<EducationModel>();
            List<ExperienceModel> viewlist = new List<ExperienceModel>();
            List<PIJustificationModel> doclist = new List<PIJustificationModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == consultantAppId).FirstOrDefault();
                    if (query != null)
                    {
                        Viewmodel.ConsultantAppointmentId = query.ConsultantAppointmentId;
                        Viewmodel.Status = query.Status;
                        Viewmodel.ApplicationNumber = query.ApplicationNumber;
                        Viewmodel.Name = Common.GetCodeControlnameCommon(query.ProfessionalType ?? 0, "RCTProfessional") + " " + query.Name;
                        Viewmodel.Nameoftheguardian = query.NameoftheGuardian;
                        Viewmodel.DateBrith = string.Format("{0:dd-MMMM-yyyy}", query.DateofBirth);
                        Viewmodel.ApplicationEntryDt = string.Format("{0:dd-MMMM-yyyy}", query.ApplicationEntryDate);
                        Viewmodel.ApplicationRecvDate = string.Format("{0:dd-MMMM-yyyy}", query.ApplicationReceiveDate);
                        Viewmodel.IITMPensionerorCSIRStaff = query.IITMPensionerorCSIRStaff ?? 0;
                        Viewmodel.TemporaryAddress = query.TemporaryAddress;
                        Viewmodel.ProjectNumber = Common.GetProjectNameandNumber(query.ProjectId ?? 0);
                        Viewmodel.ProjectId = query.ProjectId;
                        Viewmodel.AadharNumber = query.AadhaarNumber;
                        Viewmodel.DesignationId = query.DesignationId;
                        Viewmodel.AppointMentStrDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentStartdate);
                        Viewmodel.AppointMentEdDate = string.Format("{0:dd-MMMM-yyyy}", query.AppointmentEnddate);
                        Viewmodel.CommitmentAmount = query.CommitmentAmount ?? 0;
                        Viewmodel.Salary = query.Salary;
                        Viewmodel.GST = query.GSTPercentage;
                        Viewmodel.ContactNumber = query.ContactNumber;
                        Viewmodel.EmergencyContactNo = query.EmergencyContact;
                        Viewmodel.AlternativeContactNumber = query.AlternativeContactNumber;
                        //Viewmodel.IITMPensionerorCSIRStaff = query.IITMPensionerorCSIRStaff;
                        Viewmodel.PensionerCSIRStaff = Common.GetCodeControlnameCommon(query.IITMPensionerorCSIRStaff ?? 0, "IITMPensioner/CSIRStaff");
                        Viewmodel.GSTapplicable = query.GSTApplicable;
                        Viewmodel.GSTapplicabletext = Common.GetCodeControlnameCommon(query.GSTApplicable ?? 0, "GSTApplicable");
                        Viewmodel.EmployeeId = query.EmployeersID;
                        Viewmodel.BankAccountNo = query.BankAccountNumber;
                        Viewmodel.BankName = query.BankName;
                        Viewmodel.IFSCCode = query.IFSCCode;
                        Viewmodel.PersonDocPath = query.CandidateImage;
                        Viewmodel.CantidateSignatureFilePath = query.CandidateSignature;
                        Viewmodel.TemporaryAddress = query.TemporaryAddress;
                        Viewmodel.PermanentAddress = query.PermanentAddress;
                        Viewmodel.CommiteeMember = Common.GetPINameOnly(query.CommitteeMember ?? 0);
                        Viewmodel.CommiteeMembers = Common.GetPINameOnly(query.CommitteeMembers ?? 0);
                        Viewmodel.ChairpersonName = Common.GetPINameOnly(query.Chairperson ?? 0);
                        Viewmodel.ApplicationRefNo = query.RefNumber;
                        Viewmodel.AutoFillRequstedbyPI = Common.GetPIName(query.RequestedBy ?? 0);
                        if (query.IsICSRStafforProjectStaff == true)
                            Viewmodel.StaffCategory = "ICSR";
                        else
                            Viewmodel.StaffCategory = "NON ICSR";
                        if (query.NotetoCMAdmin == true)
                        {
                            Viewmodel.FlowApprover = "CMAdmin";
                        }
                        if (query.NotetoDean == true)
                        {
                            Viewmodel.FlowApprover = "NDean";
                        }
                        if (Viewmodel.DesignationId > 0)
                        {
                            var designation = context.tblRCTDesignation.Where(x => x.DesignationId == Viewmodel.DesignationId).Select(x => x.Designation).FirstOrDefault();
                            if (designation != null)
                                Viewmodel.Designation = designation;
                        }
                        Viewmodel.Notes = (from c in context.tblRCTCONNotes
                                           where c.ConsultantAppointmentId == consultantAppId
                                           orderby c.CONNotesID descending
                                           select new CONNotes()
                                           {
                                               PICommends = c.PICommends,
                                               HRNote = c.HRNote
                                           }).ToList();

                        //var Education = (from c in context.tblRCTConsultantEducationDetail
                        //                 where c.ConsultantAppointmentId == consultantAppId && c.Status != "InActive"
                        //                 orderby c.ConsultantEducationDetailId
                        //                 select new EducationModel()
                        //                 {
                        //                     QualificationId = c.QualifiCationId,
                        //                     DisciplineId = c.DisciplineId,
                        //                 }).ToList();
                        //var ExperienceDetail = (from c in context.tblRCTConsultantExperienceDetail
                        //                        where c.ConsultantAppointmentId == consultantAppId && c.Status != "InActive"
                        //                        orderby c.ConsultantExperienceDetailId
                        //                        select new ExperienceModel()
                        //                        {
                        //                            FromDate = c.FromYear,
                        //                            ToDate = c.ToYear,
                        //                        }).ToList();
                        //string Qualification = "";
                        //if (Education.Count > 0)
                        //{
                        //    for (int i = 0; i < Education.Count; i++)
                        //    {
                        //        int ID = Education[i].QualificationId ?? 0;
                        //        string Qualify = (from Q in context.tblRCTQualificationList where Q.QualificationId == ID select Q.Qualification).FirstOrDefault();
                        //        string Course = (from C in context.tblRCTCourseList where C.CourseId == ID select C.CourseName).FirstOrDefault();
                        //        Qualification += Qualify + "." + Course + "<br/>";
                        //    }
                        //}
                        Viewmodel.QualificationDetail = Common.getQualificationWordings(consultantAppId, "CON"); ;
                        //double Years = 0;
                        //if (ExperienceDetail.Count > 0)
                        //{
                        //    for (int i = 0; i < ExperienceDetail.Count; i++)
                        //    {
                        //        DateTime From = ExperienceDetail[i].FromDate ?? DateTime.Now;
                        //        DateTime To = ExperienceDetail[i].ToDate ?? DateTime.Now;
                        //        var diff = To.Subtract(From).Days / 365.25;
                        //        Years += diff;
                        //    }
                        //}
                        Viewmodel.Experience = Common.getExperienceInWordings(consultantAppId, "CON");
                        int ProjectID = query.ProjectId ?? 0;
                        Viewmodel.ProjectDetailsModel = getProjectSummary(ProjectID);
                        Viewmodel.CommitmentNo = string.IsNullOrEmpty(query.CommitmentNo) ? "-" : query.CommitmentNo;
                        Viewmodel.CommitmentBalance = Common.GetCommitmentBalance(Viewmodel.CommitmentNo);
                        var jusdoc = (from dc in context.tblRCTCONPIJustificationDocument
                                      where dc.Status != "InActive" && dc.ConsultantAppointmentId == consultantAppId
                                      orderby dc.CONPIJustificationDocumentId descending
                                      select dc).ToList();
                        if (jusdoc.Count > 0)
                        {
                            for (int i = 0; i < jusdoc.Count; i++)
                            {
                                doclist.Add(new PIJustificationModel()
                                {
                                    PIJustificationDocument = jusdoc[i].PIJustificationDocumentFile,
                                    PIJustificationDocumentPath = jusdoc[i].PIJustificationDocumentName,

                                });
                            }
                        }
                        var queryedu = context.tblRCTConsultantEducationDetail.Where(x => x.ConsultantAppointmentId == consultantAppId && x.Status != "InActive").ToList();
                        if (queryedu.Count > 0)
                        {

                            for (int i = 0; i < queryedu.Count; i++)
                            {
                                int qulid = queryedu[i].QualifiCationId ?? 0;
                                List<MasterlistviewModel> datalist = new List<MasterlistviewModel>();
                                datalist = Common.GetCourseList(qulid);
                                viewedu.Add(new EducationModel()
                                {
                                    EducationId = queryedu[i].ConsultantEducationDetailId,
                                    ddlList = datalist,
                                    QualificationId = queryedu[i].QualifiCationId ?? 0,
                                    QualificationName = Common.GetQualificationName(queryedu[i].QualifiCationId ?? 0),
                                    DisciplineId = queryedu[i].DisciplineId,
                                    DisciplineName = Common.GetDeciplineName(queryedu[i].DisciplineId ?? 0),
                                    Institution = queryedu[i].UniversityorInstitution,
                                    YearofPassing = queryedu[i].YearOfPassing,
                                    DivisionClassObtained = queryedu[i].DivisionClassObtained,
                                    Marks = queryedu[i].Marks,
                                    Remarks = queryedu[i].Remarks,
                                    DocumentName = queryedu[i].DocumentFile,
                                    DocumentActualName = queryedu[i].DocumentName,
                                    DocumentPath = "Requirement"

                                });
                            }
                        }
                        var queryexp = context.tblRCTConsultantExperienceDetail.Where(x => x.ConsultantAppointmentId == consultantAppId && x.Status != "InActive").ToList();
                        if (queryexp.Count > 0)
                        {

                            for (int i = 0; i < queryexp.Count; i++)
                            {
                                viewlist.Add(new ExperienceModel()
                                {
                                    ExperienceId = queryexp[i].ConsultantExperienceDetailId,
                                    ExperienceTypeId = queryexp[i].TypeId,
                                    ExperienceTypeName = Common.GetCodeControlnameCommon(queryexp[i].TypeId ?? 0, "RCTExperienceType"),
                                    Organisation = queryexp[i].Organisation,
                                    DesignationNames = queryexp[i].Designation,
                                    FromDate = queryexp[i].FromYear,
                                    ToDate = queryexp[i].ToYear,
                                    SalaryDrawn = queryexp[i].SalaryDrawn,
                                    Remarks = queryexp[i].Remarks,
                                    DocumentName = queryexp[i].DocumentFile,
                                    DocumentActualName = queryexp[i].DocumentName,
                                    DocumentPath = "Requirement",
                                    EXPFromDate = String.Format("{0:dd-MMMM-yyyy}", queryexp[i].FromYear),
                                    ExpToDate = String.Format("{0:dd-MMMM-yyyy}", queryexp[i].ToYear)

                                });
                            }
                        }
                        if (query.SalaryLevelId > 0)
                        {
                            var data = getSalaryLevelName_Description(query.SalaryLevelId ?? 0);
                            Viewmodel.SalaryLevel = data.Item1;
                            Viewmodel.SalaryLevelId = query.SalaryLevelId;
                            Viewmodel.SalaryLevelDescription = data.Item2;
                        }
                    }
                }
                Viewmodel.EducationDetail = viewedu;
                Viewmodel.ExperienceDetail = viewlist;
                Viewmodel.PIJustificationDocDetail = doclist;
                return Viewmodel;
            }
            catch (Exception ex)
            {
                return Viewmodel;
            }
        }

        public ConsultantAppointmentModel getCONOfferletterDetails(int CONID)
        {
            ConsultantAppointmentModel model = new ConsultantAppointmentModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from S in context.tblRCTConsultantAppointment
                                 join D in context.tblRCTDesignation on S.DesignationId equals D.DesignationId
                                 where S.ConsultantAppointmentId == CONID
                                 select new { S, D }).FirstOrDefault();
                    if (query != null)
                    {
                        model.Designation = query.D.Designation;
                        model.DesignationId = query.D.DesignationId;
                        model.ProjectDetailsModel = getProjectSummary(query.S.ProjectId ?? 0);
                        model.AppointMentStrDate = string.Format("{0:dd-MMMM-yyyy}", query.S.AppointmentStartdate);
                        model.AppointMentEdDate = string.Format("{0:dd-MMMM-yyyy}", query.S.AppointmentEnddate);
                        model.Total = query.S.TotalAmount;
                        model.GSTapplicabletext = query.S.GSTApplicable != 3 ? Common.GetCodeControlName(query.S.GSTApplicable ?? 0, "GSTApplicable") : "";
                        model.ApplicationRefNo = getOfferDetails(CONID, "CON", null, "OfferLetter"); /*query.S.ApplicationNumber;*/
                        model.Name = Common.GetCodeControlName(query.S.ProfessionalType ?? 0, "RCTProfessional") + query.S.Name;
                        model.TemporaryAddress = query.S.TemporaryAddress;
                        model.OfferDate = string.Format("{0:dd-MMMM-yyyy}", query.S.OfferDate ?? DateTime.Now);
                        model.EmployeeId = query.S.EmployeersID;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }

        public static ConsultantSearchModel GetConsultantList(ConsultantSearchModel model, int page, int pageSize)
        {
            ConsultantSearchModel conseamodel = new ConsultantSearchModel();
            List<ConsultantAppointmentModel> list = new List<ConsultantAppointmentModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    join prj in context.tblProject on vw.ProjectId equals prj.ProjectId into g
                                    from prj in g.DefaultIfEmpty()
                                    orderby vw.ApplicationId descending
                                    where vw.Category == "CON" && vw.ApplicationType == "New" && vw.isEmployee != true
                                    select new ConsultantAppointmentModel()
                                    {
                                        ConsultantAppointmentId = vw.ApplicationId,
                                        ConsultantAppNo = vw.ApplicationNo,
                                        ProjectNumber = prj.ProjectNumber,
                                        Category = vw.Category,
                                        CondidateName = vw.CandidateName,
                                        PIName = vw.PIName,
                                        Email = vw.PIEmail,
                                        Status = vw.Status,
                                        Appointmentstartdate = vw.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<ConsultantAppointmentModel>();
                    if (!string.IsNullOrEmpty(model.ConsultantAppNo))
                        predicate = predicate.And(d => d.ConsultantAppNo.Contains(model.ConsultantAppNo));
                    if (!string.IsNullOrEmpty(model.Category))
                        predicate = predicate.And(d => d.Category.Contains(model.Category));
                    if (!string.IsNullOrEmpty(model.CondidateName))
                        predicate = predicate.And(d => d.CondidateName.Contains(model.CondidateName));
                    if (!string.IsNullOrEmpty(model.PIName))
                        predicate = predicate.And(d => d.PIName.Contains(model.PIName) || d.Email.Contains(model.PIName));
                    if (!string.IsNullOrEmpty(model.ProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.ProjectNumber));
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status.Contains(model.Status));
                    var query = prequery.Where(predicate).OrderByDescending(m => m.ConsultantAppointmentId).Skip(skiprec).Take(pageSize).ToList();
                    conseamodel.TotalRecords = prequery.Where(predicate).Count();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            int appid = query[i].ConsultantAppointmentId ?? 0;
                            int emailcount = context.tblRCTConsutantAppEmailLog.Where(x => x.IsSend == true && x.TypeofMail == 3 && x.ConsultantAppointmentId == appid).Count();
                            bool isCommitmentRejection = false;
                            if (query[i].Status == "Open")
                            {
                                var Qry = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == appid).FirstOrDefault();
                                isCommitmentRejection = Qry.isCommitmentReject ?? false;
                            }
                            bool SendOffer_f = context.tblRCTOfferDetails.
                                               Where(x => x.ApplicationId == appid && x.Category == "CON" &&
                                               x.OfferCategory == "OfferLetter" && x.isSend != true).FirstOrDefault() != null ? true : false;

                            list.Add(new ConsultantAppointmentModel()
                            {
                                SNo = i + 1,
                                ConsultantAppointmentId = query[i].ConsultantAppointmentId,
                                ConsultantAppNo = query[i].ConsultantAppNo,
                                ProjectNumber = query[i].ProjectNumber,
                                Category = query[i].Category,
                                CondidateName = query[i].CondidateName,
                                PIName = query[i].PIName,
                                Email = query[i].Email,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount,
                                isCommitmentRejection = isCommitmentRejection,
                                SendOffer_f = SendOffer_f,
                                Cancel_f = IsCancelAppointment(query[i].Appointmentstartdate, query[i].Status)
                            });

                        }
                    }
                }
                conseamodel.conList = list;
                return conseamodel;
            }
            catch (Exception ex)
            {
                return conseamodel;
            }
        }

        public Tuple<bool, string> CONAPWFInit(int id, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var querystatus = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == id && x.Status == "Open").FirstOrDefault();
                    if (querystatus != null)
                    {
                        var query = context.tblRCTConsultantAppointment.FirstOrDefault(m => m.ConsultantAppointmentId == id);
                        if (query != null)
                        {
                            string Type = "";
                            if (query.NotetoCMAdmin == true)
                                Type = "Consultant Appointment CM Admin";
                            else if (query.NotetoDean == true)
                                Type = "Consultant Appointment Dean";
                            else
                                Type = "Consultant Appointment HR Admin";
                            var fw = CoreAccount.ProcessTrigger(195, Type, 0, id, logged_in_user, "CON", query.ApplicationNumber);
                            if (String.IsNullOrEmpty(fw.errorMsg))
                            {
                                query.Status = "Sent for approval";
                                query.UptdUser = logged_in_user;
                                query.UptdTs = DateTime.Now;
                                context.SaveChanges();
                                RequirementService.PostCONStatusLog(id, "Open", query.Status, logged_in_user);
                                return Tuple.Create(true, "");
                            }
                            else
                                return Tuple.Create(false, fw.errorMsg);
                        }
                        return Tuple.Create(false, "Something went wrong please contact administrator");
                    }
                    else
                        return Tuple.Create(false, "This Consultant Appointment already approved");


                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }


        #region ConsultantAppointmentVerfication
        public SearchCONVerificationModel GetCONVerificationList(int page, int pageSize, SearchCONVerificationModel model, DateFilterModel OfferDate, DateFilterModel ClosureDate, DateFilterModel DateOfJoining)
        {
            try
            {
                SearchCONVerificationModel list = new SearchCONVerificationModel();
                List<ConsultantAppointmentModel> CONList = new List<ConsultantAppointmentModel>();
                var userName = System.Web.HttpContext.Current.User.Identity.Name;
                int userId = Common.GetUserid(userName);
                int[] cancelInitiator = { 0, userId };
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var prequery = (from b in context.vw_RCTVerificationList.AsNoTracking()
                                    from p in context.tblProject
                                    from vw in context.vwFacultyStaffDetails
                                    orderby b.ApplicationId descending
                                    where b.ProjectId == p.ProjectId && p.PIName == vw.UserId && cancelInitiator.Contains(b.CancelInitiator ?? 0)
                                    && b.Category == "CON"
                                    select new ConsultantAppointmentModel()
                                    {
                                        ConsultantAppointmentId = b.ApplicationId,
                                        OrderId = b.OrderId,
                                        ApplicationType = b.ApplicationType,
                                        ApplicationNumber = b.ApplicationNo,
                                        Status = b.Status,
                                        Name = b.CandidateName,
                                        DesignationName = b.PostRecommended,
                                        DepartmentName = vw.DepartmentName,
                                        OfferActualDate = b.UptdTs,
                                        PANNo = b.PANNo,
                                        EmployeeId = b.EmployeeNo,
                                        JoiningDate = b.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<ConsultantAppointmentModel>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.DesignationName.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInApplicationNo))
                        predicate = predicate.And(d => d.ApplicationNumber.Contains(model.SearchInApplicationNo) || d.EmployeeId.Contains(model.SearchInApplicationNo));
                    if (!string.IsNullOrEmpty(model.DepartmentName))
                        predicate = predicate.And(d => d.DepartmentName.Contains(model.DepartmentName));
                    if (OfferDate.@from != null && OfferDate.to != null)
                    {
                        OfferDate.@from = OfferDate.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.OfferActualDate >= OfferDate.@from && d.OfferActualDate <= OfferDate.to);
                    }
                    if (DateOfJoining.@from != null && DateOfJoining.to != null)
                    {
                        DateOfJoining.@from = DateOfJoining.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.JoiningDate >= DateOfJoining.@from && d.JoiningDate <= DateOfJoining.to);
                    }
                    if (!string.IsNullOrEmpty(model.Applicationtype))
                        predicate = predicate.And(d => d.ApplicationType.Contains(model.Applicationtype));
                    var qryList = prequery.Where(predicate).OrderByDescending(m => m.ConsultantAppointmentId).Skip(skiprec).Take(pageSize).ToList();
                    list.TotalRecords = prequery.Where(predicate).Count();
                    if (qryList != null)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < qryList.Count; i++)
                        {
                            bool SendOffer_f = false;
                            int appid = qryList[i].ConsultantAppointmentId ?? 0;
                            int? OrderId = qryList[i].OrderId;
                            int emailcount = context.tblRCTConsutantAppEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 9 &&
                                                x.ConsultantAppointmentId == appid).Count();
                            SendOffer_f = context.tblRCTOfferDetails.
                                            Where(x => x.ApplicationId == appid && x.Category == "CON" &&
                                            x.OfferCategory == "OfferLetter" && x.isSend != true && (x.OrderId == OrderId || OrderId == null)).Any();

                            CONList.Add(new ConsultantAppointmentModel()
                            {
                                SNo = sno + i,
                                ConsultantAppointmentId = qryList[i].ConsultantAppointmentId,
                                OrderId = qryList[i].OrderId,
                                ApplicationType = qryList[i].ApplicationType,
                                ApplicationNumber = qryList[i].ApplicationNumber,
                                Name = qryList[i].Name,
                                Designation = qryList[i].DesignationName,
                                DepartmentName = qryList[i].DepartmentName,
                                Status = qryList[i].Status,
                                OfferDate = String.Format("{0: dd-MMMM-yyyy}", qryList[i].OfferActualDate),
                                PANNo = qryList[i].PANNo,
                                EmailRemaindarCount = emailcount,
                                DateofJoining = String.Format("{0: dd-MMMM-yyyy}", qryList[i].JoiningDate),
                                SendOffer_f = SendOffer_f,
                                Cancel_f = IsCancelAppointment(qryList[i].JoiningDate, qryList[i].Status)

                            });
                        }
                    }

                    list.VerificationList = CONList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchCONVerificationModel list = new SearchCONVerificationModel();
                return list;
            }
        }

        public static int SendEmailCONRemindermailForVerification(int CONAppId, int UserID)
        {
            int res = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    EmailBuilder _eb = new EmailBuilder();
                    EmailModel emodel = new EmailModel();
                    NotePIModel npmodel = new NotePIModel();
                    List<string> addcc = new List<string>();
                    List<CheckListEmailModel> chk = new List<CheckListEmailModel>();
                    var QrySTE = (from S in context.tblRCTConsultantAppointment
                                  from C in context.tblCodeControl
                                  from D in context.tblRCTDesignation
                                  where C.CodeValAbbr == S.ProfessionalType && C.CodeName == "RCTProfessional"
                                  && S.DesignationId == D.DesignationId
                                  where S.ConsultantAppointmentId == CONAppId
                                  select new { S, C, D }).FirstOrDefault();
                    if (QrySTE != null)
                    {
                        int emailcount = (from el in context.tblRCTConsutantAppEmailLog
                                          where el.TypeofMail == 9 && el.IsSend == true && el.ConsultantAppointmentId == CONAppId
                                          select el).Count() + 1;
                        if (QrySTE.S.Bcc != null)
                        {
                            var bcc = QrySTE.S.Bcc.Split(',');
                            foreach (var bccEmail in bcc)
                                addcc.Add(bccEmail.Trim());
                        }
                        var Reminder = "";
                        if (emailcount == 1)
                            Reminder = "Notification";
                        else
                            Reminder = "Reminder";

                        npmodel.subject = "ICSR - Credentials verification" + " - " + QrySTE.S.ApplicationNumber + " " + Reminder;
                        npmodel.toMail = QrySTE.S.Email;
                        npmodel.cc = addcc;
                        var prjctdetails = getProjectSummary(QrySTE.S.ProjectId ?? 0);
                        npmodel.DesignationName = QrySTE.D.Designation;
                        npmodel.ProjectNumber = prjctdetails.ProjectNumber;
                        npmodel.ProjectTitle = prjctdetails.ProjectTitle;
                        npmodel.PIName = prjctdetails.PIName;
                        npmodel.PersonName = QrySTE.C.CodeValDetail + " " + QrySTE.S.Name;
                        string AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.S.AppointmentEnddate);
                        npmodel.AppointmentEndDate = AppointmentEndDate;
                        emodel = npmodel;
                        var bodyResp = _eb.RunCompile("RCTVerificationReminder.cshtml", "", npmodel, typeof(NotePIModel));
                        if (bodyResp.Item1)
                        {
                            var isSend = _eb.RCTSendEmail(emodel, bodyResp.Item2);
                            tblRCTConsutantAppEmailLog EmailStatus = new tblRCTConsutantAppEmailLog();
                            EmailStatus.ToMail = emodel.toMail;
                            EmailStatus.Subject = emodel.subject;
                            EmailStatus.Body = bodyResp.Item2;
                            if (emodel.cc != null)
                                EmailStatus.Cc = string.Join(", ", emodel.cc);
                            else
                                EmailStatus.Cc = "";
                            if (emodel.bcc != null)
                                EmailStatus.Bcc = string.Join(", ", emodel.bcc);
                            else
                                EmailStatus.Bcc = "";
                            if (emodel.attachment != null)
                                EmailStatus.Attachment = string.Join(", ", emodel.attachment);
                            else
                                EmailStatus.Attachment = "";
                            EmailStatus.CRTD_Ts = DateTime.Now;
                            EmailStatus.CRTD_By = UserID;
                            EmailStatus.IsSend = isSend;
                            EmailStatus.TypeofMail = 9; //Remaindar mail Status
                            EmailStatus.ConsultantAppointmentId = CONAppId;
                            EmailStatus.IsManual_f = true;
                            context.tblRCTConsutantAppEmailLog.Add(EmailStatus);
                            context.SaveChanges();
                        }
                        res = emailcount;
                    }
                }
                return res;
            }
            catch (Exception ex)
            {
                return res;
            }
        }

        public ConsultantAppointmentModel GetCONVerification(int ConAppId)
        {
            ConsultantAppointmentModel model = new ConsultantAppointmentModel();
            List<EducationModel> EducationList = new List<EducationModel>();
            List<ExperienceModel> ExperienceList = new List<ExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (ConAppId > 0)
                    {
                        var QryCON = (from A in context.tblRCTConsultantAppointment
                                      from C in context.tblCodeControl
                                      where C.CodeValAbbr == A.ProfessionalType && C.CodeName == "RCTProfessional"
                                      where A.ConsultantAppointmentId == ConAppId
                                      select new { A, C }).FirstOrDefault();
                        model.Status = QryCON.A.Status;
                        model.ConsultantAppointmentId = QryCON.A.ConsultantAppointmentId;
                        model.ApplicationNumber = QryCON.A.ApplicationNumber;
                        model.PersonDocPath = QryCON.A.CandidateImage;
                        model.ProfessionalId = QryCON.A.ProfessionalType;
                        model.Name = QryCON.C.CodeValDetail + " " + QryCON.A.Name;
                        model.Nameoftheguardian = QryCON.A.NameoftheGuardian;
                        model.EmployeeId = QryCON.A.EmployeersID;
                        model.PANNo = QryCON.A.PanNo;
                        model.EmergencyContactNo = QryCON.A.EmergencyContact;
                        //model.EmployeeTypeCatecory = QryCON.A.EmployeeType ?? 0;
                        model.OldEmployeeNumber = QryCON.A.EmployeeCategory == "Old Employee" ? QryCON.A.OldNumber : null;
                        model.AlternativeContactNumber = QryCON.A.AlternativeContactNumber;
                        model.Email = QryCON.A.Email;
                        model.TemporaryAddress = QryCON.A.TemporaryAddress;
                        model.isSameasPermanentAddress = QryCON.A.IsSameAsPresentAddress ?? false;
                        model.PermanentAddress = QryCON.A.PermanentAddress;
                        model.IITMPensionerorCSIRStaff = QryCON.A.IITMPensionerorCSIRStaff ?? 0;
                        model.Salary = QryCON.A.Salary;
                        model.GST = QryCON.A.GSTPercentage ?? 0;
                        model.CommitmentAmount = QryCON.A.CommitmentAmount ?? 0;
                        model.ProjectNumber = Common.getprojectnumber(QryCON.A.ProjectId ?? 0);
                        model.ProjectId = QryCON.A.ProjectId;
                        model.DesignationId = QryCON.A.DesignationId;
                        model.BankAccountNo = QryCON.A.BankAccountNumber;
                        model.BankName = QryCON.A.BankName;
                        model.BankId = QryCON.A.BankId;
                        model.IFSCCode = QryCON.A.IFSCCode;
                        model.GovProof = QryCON.A.GovernmentProofVerifyDoc ?? 0;
                        model.isVerifiedGovProof = QryCON.A.GovernmentProofVerify ?? false;
                        model.JoiningReportPath = QryCON.A.JoiningReport;
                        model.OfferDate = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.OfferDate);
                        model.Appointmentstartdate = QryCON.A.AppointmentStartdate;
                        model.AppointmentEndDate = QryCON.A.AppointmentEnddate;
                        model.AadharNumber = QryCON.A.AadhaarNumber;
                        model.DateBrith = string.Format("{0:dd-MMMM-yyyy}", QryCON.A.DateofBirth);
                        model.ContactNumber = QryCON.A.ContactNumber;
                        model.AlternativeContactNumber = QryCON.A.AlternativeContactNumber;
                        model.EmergencyContactNo = QryCON.A.EmergencyContact;
                        model.CommitmentAmount = QryCON.A.CommitmentAmount;
                        model.StaffCategory = QryCON.A.IsICSRStafforProjectStaff == true ? "ICSR" : "NON ICSR";
                        if (QryCON.A.JoiningReport != null)
                            model.JoiningReportFileName = QryCON.A.JoiningReport.Substring(QryCON.A.JoiningReport.IndexOf("_") + 1);
                        model.Notes = (from c in context.tblRCTCONNotes
                                       where c.ConsultantAppointmentId == ConAppId
                                       orderby c.CONNotesID ascending
                                       select new CONNotes()
                                       {
                                           PICommends = c.PICommends,

                                       }).ToList();
                        model.ProjectNumber = Common.getprojectnumber(QryCON.A.ProjectId ?? 0);
                        var QryEducation = (from c in context.tblRCTConsultantEducationDetail
                                            join q in context.tblRCTQualificationList on c.QualifiCationId equals q.QualificationId into lftj
                                            from lj in lftj.DefaultIfEmpty()
                                            join d in context.tblCodeControl on c.MarkType equals d.CodeValAbbr into lft
                                            from j in lft.DefaultIfEmpty()
                                            where c.ConsultantAppointmentId == ConAppId && c.Status != "InActive"
                                            && (j == null ? true : j.CodeName == "RCTMarkType")
                                            orderby c.ConsultantEducationDetailId
                                            select new { c, lj, j }).ToList();
                        if (QryEducation != null)
                        {
                            for (int i = 0; i < QryEducation.Count; i++)
                            {
                                int EducationID = QryEducation[i].c.QualifiCationId ?? 0;
                                int DisciplineID = QryEducation[i].c.DisciplineId ?? 0;
                                var list = Common.GetCourseList(EducationID);
                                var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();
                                EducationList.Add(new EducationModel()
                                {
                                    QualificationName = QryEducation[i].lj == null ? "" : QryEducation[i].lj.Qualification,
                                    EducationId = QryEducation[i].c.ConsultantEducationDetailId,
                                    QualificationId = QryEducation[i].c.QualifiCationId,
                                    DisciplineId = QryEducation[i].c.DisciplineId,
                                    DisciplineName = Discipline,
                                    Institution = QryEducation[i].c.UniversityorInstitution,
                                    YearofPassing = QryEducation[i].c.YearOfPassing,
                                    strMarkType = QryEducation[i].j == null ? "" : QryEducation[i].j.CodeValDetail,
                                    Marks = QryEducation[i].c.Marks,
                                    DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                    DocumentPath = QryEducation[i].c.DocumentName,
                                    DocumentName = QryEducation[i].c.DocumentFile,
                                    Remarks = QryEducation[i].c.Remarks,
                                    ddlList = list

                                });
                            }
                            model.EducationDetail = EducationList;
                            var QryExperience = (from c in context.tblRCTConsultantExperienceDetail
                                                 join d in context.tblCodeControl on c.TypeId equals d.CodeValAbbr into lft
                                                 from j in lft.DefaultIfEmpty()
                                                 where c.ConsultantAppointmentId == ConAppId && c.Status != "InActive" && (j == null ? true : j.CodeName == "RCTExperienceType")
                                                 orderby c.ConsultantExperienceDetailId
                                                 select new { c, j }).ToList();
                            if (QryExperience.Count > 0)
                            {
                                for (int i = 0; i < QryExperience.Count; i++)
                                {
                                    ExperienceList.Add(new ExperienceModel()
                                    {

                                        ExperienceId = QryExperience[i].c.ConsultantExperienceDetailId,
                                        ExperienceTypeId = QryExperience[i].c.TypeId,
                                        ExperienceTypeName = QryExperience[i].j == null ? "" : QryExperience[i].j.CodeValDetail,
                                        Organisation = QryExperience[i].c.Organisation,
                                        DesignationListId = QryExperience[i].c.DesignationId,
                                        DesignationautoComplete = QryExperience[i].c.Designation,
                                        FromDate = QryExperience[i].c.FromYear,
                                        ToDate = QryExperience[i].c.ToYear,
                                        SalaryDrawn = QryExperience[i].c.SalaryDrawn,
                                        DocumentPath = QryExperience[i].c.DocumentFile,
                                        DocumentName = QryExperience[i].c.DocumentName,
                                        Remarks = QryExperience[i].c.Remarks,
                                        strFromDate = string.Format("{0:dd-MMMM-yyyy}", QryExperience[i].c.FromYear),
                                        strToDate = string.Format("{0:dd-MMMM-yyyy}", QryExperience[i].c.ToYear)

                                    });
                                }

                            }
                            model.ExperienceDetail = ExperienceList.Count > 0 ? ExperienceList : null;
                            model.Experience = Common.getExperienceInWordings(ConAppId, "CON");
                            model.QualificationDetail = Common.getQualificationWordings(ConAppId, "CON");
                            List<string> PICommands = new List<string>();
                            var QryNote = (from c in context.tblRCTCONPIJustificationDocument
                                           where c.ConsultantAppointmentId == ConAppId
                                           orderby c.CONPIJustificationDocumentId descending
                                           select new { c.PIJustificationDescription, }
                            ).ToArray();
                            if (QryNote != null)
                            {
                                for (int i = 0; i < QryNote.Count(); i++)
                                {
                                    if (!string.IsNullOrEmpty(QryNote[i].PIJustificationDescription))
                                        PICommands.Add(QryNote[i].PIJustificationDescription);
                                }
                            }
                            model.PIJustificationCommands = PICommands;
                            model.CommitmentAmount = QryCON.A.CommitmentAmount;
                            var CommitmentNumber = (from c in context.tblRCTCommitmentRequest
                                                    where c.ReferenceNumber == QryCON.A.ApplicationNumber
                                                    select c.CommitmentNumber).FirstOrDefault();
                            if (!string.IsNullOrEmpty(CommitmentNumber))
                                model.CommitmentNo = CommitmentNumber;
                            if (QryCON.A.ResumeFile != null)
                                model.ResumeFileName = QryCON.A.ResumeFile.Substring((QryCON.A.ResumeFile.LastIndexOf('_') + 1));
                            model.ResumeFilePath = QryCON.A.ResumeFile;
                            model.RequestedfromPI = Common.GetPIName(QryCON.A.RequestedBy ?? 0);
                            if (QryCON.A.SalaryLevelId > 0)
                            {
                                var data = getSalaryLevelName_Description(QryCON.A.SalaryLevelId ?? 0);
                                model.SalaryLevel = data.Item1;
                                model.SalaryLevelId = QryCON.A.SalaryLevelId;
                                model.SalaryLevelDescription = data.Item2;
                            }
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {

                return model;
            }
        }
        public Tuple<int, int, string> VerifyCON(ConsultantAppointmentModel model, int logged_in_userId)
        {
            try
            {
                int res = 0;
                int ConAppId = 0;
                string EmployeeID = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            //New Draft Announcement
                            ConAppId = model.ConsultantAppointmentId ?? 0;
                            var QryCONMaster = (from SM in context.tblRCTConsultantAppointment
                                                where SM.ConsultantAppointmentId == ConAppId
                                                && SM.Status == "Awaiting verification"
                                                select SM).FirstOrDefault();
                            if (QryCONMaster != null)
                            {
                                int desid = QryCONMaster.DesignationId ?? 0;
                                var designation = (from ds in context.tblRCTDesignation
                                                   where ds.DesignationId == desid
                                                   select ds
                                                   ).FirstOrDefault();
                                QryCONMaster.Status = "Verification Completed";
                                if (model.PersonDocImage != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.PersonDocImage.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    //model.PersonImagePath.UploadFile("Requirement", docName);
                                    model.PersonDocImage.UploadFile("Requirement", docName);
                                    QryCONMaster.CandidateImage = docName;
                                }
                                if (model.CantidateSignature != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    //model.CantidateSignature.UploadFile("Requirement", docName);
                                    model.CantidateSignature.UploadFile("Requirement", docName);
                                    QryCONMaster.CandidateSignature = docName;
                                }
                                if (model.Resume != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.Resume.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    //model.PersonImagePath.UploadFile("Requirement", docName);
                                    model.Resume.UploadFile("Requirement", docName);
                                    QryCONMaster.ResumeFile = docName;
                                }
                                QryCONMaster.PanNo = model.PANNo;
                                QryCONMaster.AlternativeContactNumber = model.AlternativeContactNumber;
                                QryCONMaster.EmergencyContact = model.EmergencyContactNo;
                                QryCONMaster.IsSameAsPresentAddress = model.isSameasPermanentAddress;
                                QryCONMaster.TemporaryAddress = model.TemporaryAddress;
                                QryCONMaster.PermanentAddress = model.PermanentAddress;
                                QryCONMaster.GovernmentProofVerifyDoc = model.GovProof;
                                QryCONMaster.GovernmentProofVerify = model.isVerifiedGovProof;
                                //QryCONMaster.EmployeeType = model.EmployeeTypeCatecory;
                                //QrySTEMaster.StaffCategory = model.StaffCategory;
                                //QryCONMaster.IITMPensionerorCSIRStaff = model.IITMPensionerorCSIRStaff;
                                //QrySTEMaster.PPONo = model.PPONo;
                                //QrySTEMaster.CSIRStaffPayMode = model.CSIRStaff;
                                //QryCONMaster.MsPhdType = model.MsPhdType;
                                //QryCONMaster.MsPhd = model.MsPhdType > 0 ? true : false;
                                //QryCONMaster.PhdDetail = model.PhdDetail;
                                //QryCONMaster.OfferDate = model.OfferLetterDate;
                                QryCONMaster.ActualDate = model.ActualDate;
                                QryCONMaster.VerificationRemarks = model.VerificationRemarks;
                                if (model.JoiningReport != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.JoiningReport.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    //model.JoinungReport.UploadFile("Requirement", docName);
                                    model.JoiningReport.UploadFile("Requirement", docName);
                                    QryCONMaster.JoiningReport = docName;
                                }

                                QryCONMaster.BankAccountNumber = model.BankAccountNo;
                                QryCONMaster.BankName = model.BankName;
                                QryCONMaster.BankId = model.BankId;
                                QryCONMaster.IFSCCode = model.IFSCCode;
                                if (model.EducationDetail.Count > 0)
                                {
                                    for (int i = 0; i < model.EducationDetail.Count; i++)
                                    {
                                        if (model.EducationDetail[i].EducationId == null)
                                        {
                                            if (model.EducationDetail[i].QualificationId != null)
                                            {
                                                tblRCTConsultantEducationDetail EducationDetail = new tblRCTConsultantEducationDetail();
                                                EducationDetail.ConsultantAppointmentId = ConAppId;
                                                EducationDetail.QualifiCationId = model.EducationDetail[i].QualificationId;
                                                EducationDetail.DisciplineId = model.EducationDetail[i].DisciplineId;
                                                EducationDetail.UniversityorInstitution = model.EducationDetail[i].Institution;
                                                EducationDetail.YearOfPassing = model.EducationDetail[i].YearofPassing;
                                                EducationDetail.MarkType = model.EducationDetail[i].MarkType;
                                                EducationDetail.Marks = model.EducationDetail[i].Marks;
                                                EducationDetail.DivisionClassObtained = model.EducationDetail[i].DivisionClassObtained;
                                                if (model.EducationDetail[i].Certificate != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.EducationDetail[i].Certificate.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    /*Saving the file in server folder*/
                                                    //model.EducationDetail[i].Certificate.UploadFile("SupportDocuments", Certificatedocname);
                                                    model.EducationDetail[i].Certificate.UploadFile("Requirement", Certificatedocname);
                                                    EducationDetail.DocumentFile = Certificatedocname;
                                                    EducationDetail.DocumentName = CertificateDocumentPath;
                                                }
                                                EducationDetail.Remarks = model.EducationDetail[i].Remarks;
                                                EducationDetail.CrtdTs = DateTime.Now;
                                                EducationDetail.CrtdUser = logged_in_userId;
                                                EducationDetail.Status = "Active";
                                                context.tblRCTConsultantEducationDetail.Add(EducationDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            int CONEducationDetailID = model.EducationDetail[i].EducationId ?? 0;
                                            var QryEducation = (from SM in context.tblRCTConsultantEducationDetail where SM.ConsultantAppointmentId == ConAppId && SM.ConsultantEducationDetailId == CONEducationDetailID && SM.Status == "Active" select SM).FirstOrDefault();
                                            if (QryEducation != null)
                                            {
                                                if (model.EducationDetail[i].Certificate != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.EducationDetail[i].Certificate.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    /*Saving the file in server folder*/
                                                    //model.EducationDetail[i].Certificate.UploadFile("SupportDocuments", Certificatedocname);
                                                    model.EducationDetail[i].Certificate.UploadFile("Requirement", Certificatedocname);
                                                    QryEducation.DocumentFile = Certificatedocname;
                                                    QryEducation.DocumentName = CertificateDocumentPath;
                                                    QryEducation.UptdTs = DateTime.Now;
                                                    QryEducation.UptdUser = logged_in_userId;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                }

                                if (model.ExperienceDetail.Count > 0)
                                {
                                    for (int i = 0; i < model.ExperienceDetail.Count; i++)
                                    {
                                        if (model.ExperienceDetail[i].ExperienceId == null)
                                        {
                                            if (model.ExperienceDetail[i].ExperienceTypeId != null)
                                            {
                                                tblRCTConsultantExperienceDetail ExperienceDetail = new tblRCTConsultantExperienceDetail();
                                                ExperienceDetail.ConsultantAppointmentId = ConAppId;
                                                ExperienceDetail.TypeId = model.ExperienceDetail[i].ExperienceTypeId;
                                                ExperienceDetail.Organisation = model.ExperienceDetail[i].Organisation;
                                                //ExperienceDetail.Designation = model.ExperienceDetail[i].DesignationListId;
                                                ExperienceDetail.Designation = model.ExperienceDetail[i].DesignationautoComplete;
                                                ExperienceDetail.FromYear = model.ExperienceDetail[i].FromDate;
                                                ExperienceDetail.ToYear = model.ExperienceDetail[i].ToDate;
                                                ExperienceDetail.SalaryDrawn = model.ExperienceDetail[i].SalaryDrawn;
                                                if (model.ExperienceDetail[i].ExperienceFile != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.ExperienceDetail[i].ExperienceFile.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    /*Saving the file in server folder*/
                                                    model.ExperienceDetail[i].ExperienceFile.UploadFile("Requirement", Certificatedocname);
                                                    //model.ExperienceDetail[i].ExperienceFile.UploadFile("SupportDocuments", Certificatedocname);
                                                    ExperienceDetail.DocumentFile = Certificatedocname;
                                                    ExperienceDetail.DocumentName = CertificateDocumentPath;
                                                }
                                                ExperienceDetail.Remarks = model.ExperienceDetail[i].Remarks;
                                                ExperienceDetail.CrtdUser = logged_in_userId;
                                                ExperienceDetail.CrtdTs = DateTime.Now;
                                                ExperienceDetail.Status = "Active";
                                                context.tblRCTConsultantExperienceDetail.Add(ExperienceDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            int ExperienceId = model.ExperienceDetail[i].ExperienceId ?? 0;
                                            var QryExp = (from SM in context.tblRCTConsultantExperienceDetail where SM.ConsultantAppointmentId == ConAppId && SM.ConsultantExperienceDetailId == ExperienceId && SM.Status == "Active" select SM).FirstOrDefault();
                                            if (QryExp != null)
                                            {
                                                if (model.ExperienceDetail[i].ExperienceId != null)
                                                {
                                                    QryExp.ConsultantAppointmentId = ConAppId;
                                                    QryExp.TypeId = model.ExperienceDetail[i].ExperienceTypeId;
                                                    QryExp.Organisation = model.ExperienceDetail[i].Organisation;
                                                    QryExp.DesignationId = model.ExperienceDetail[i].DesignationListId;
                                                    QryExp.Designation = model.ExperienceDetail[i].DesignationautoComplete;
                                                    QryExp.FromYear = model.ExperienceDetail[i].FromDate;
                                                    QryExp.ToYear = model.ExperienceDetail[i].ToDate;
                                                    QryExp.SalaryDrawn = model.ExperienceDetail[i].SalaryDrawn;
                                                    if (model.ExperienceDetail[i].ExperienceFile != null)
                                                    {
                                                        string CertificateDocumentPath = "";
                                                        CertificateDocumentPath = System.IO.Path.GetFileName(model.ExperienceDetail[i].ExperienceFile.FileName);
                                                        var Certificatedocfileid = Guid.NewGuid().ToString();
                                                        var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                        /*Saving the file in server folder*/
                                                        model.ExperienceDetail[i].ExperienceFile.UploadFile("Requirement", Certificatedocname);
                                                        //model.ExperienceDetail[i].ExperienceFile.UploadFile("SupportDocuments", Certificatedocname);
                                                        QryExp.DocumentFile = Certificatedocname;
                                                        QryExp.DocumentName = CertificateDocumentPath;
                                                    }
                                                    QryExp.Remarks = model.ExperienceDetail[i].Remarks;
                                                    QryExp.UptdUser = logged_in_userId;
                                                    QryExp.UptdTs = DateTime.Now;
                                                    QryExp.Status = "Active";
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                }
                                foreach (var item in model.OtherDocList)
                                {
                                    if (item.Document != null)
                                    {
                                        tblRCTSupportingDocument _SupportDoc = new tblRCTSupportingDocument();
                                        _SupportDoc.AppointmentId = ConAppId;
                                        _SupportDoc.AppointmentType = 1;
                                        _SupportDoc.DocumentName = item.DocumentName;
                                        _SupportDoc.CRTD_By = logged_in_userId;
                                        _SupportDoc.CRTD_TS = DateTime.Now;
                                        _SupportDoc.Status = "Active";
                                        if (item.Document != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.Document.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            //model.Document.UploadFile("Requirement", docName);
                                            item.Document.UploadFile("Requirement", docName);
                                            _SupportDoc.DocumentFileName = actName;
                                            _SupportDoc.DocumentPath = docName;
                                        }
                                        context.tblRCTSupportingDocument.Add(_SupportDoc);
                                        context.SaveChanges();
                                    }
                                }

                                int VerificationSeqNo = 0;
                                var QryVerificationSeqNo = (from SM in context.tblRCTConsultantAppointment select SM.VerificationSeqNo).Max();
                                int VerificationSequenceNo = QryVerificationSeqNo ?? 0;
                                VerificationSeqNo = QryVerificationSeqNo == null ? 10001 : VerificationSequenceNo + 1;
                                EmployeeID = QryCONMaster.OldNumber;
                                if (QryCONMaster.EmployeeCategory == "Old Employee")
                                {
                                    var preQuery = (from s in context.tblRCTConsultantAppointment
                                                    where s.EmployeersID == EmployeeID && s.IsActiveNow == true
                                                    orderby s.ConsultantAppointmentId descending
                                                    select s).FirstOrDefault();
                                    if (preQuery != null)
                                    {
                                        preQuery.IsActiveNow = false;
                                        context.SaveChanges();
                                    }
                                }
                                else
                                    EmployeeID = "CS" + VerificationSeqNo;

                                if (EmployeeID.Contains("CS"))
                                    QryCONMaster.EmployeersID = EmployeeID;
                                else
                                    QryCONMaster.EmployeersID = "CS" + VerificationSeqNo;

                                QryCONMaster.VerificationSeqNo = VerificationSeqNo;
                                QryCONMaster.isEmployee = true;
                                QryCONMaster.IsActiveNow = true;
                                //Update Commitment table
                                string ApplicationRefNo = QryCONMaster.ApplicationNumber;
                                var QryCommitment = (from C in context.tblRCTCommitmentRequest
                                                     where C.ReferenceNumber == ApplicationRefNo
                                                     && C.Status == "Commitment Booked"
                                                     select C).FirstOrDefault();
                                if (QryCommitment != null)
                                    QryCommitment.EmpNumber = EmployeeID;
                                QryCONMaster.EmployeeWorkplace = model.EmployeeWorkplace;
                                QryCONMaster.CommitmentNo = CommitmentNo(ApplicationRefNo);
                                context.SaveChanges();
                                transaction.Commit();
                                res = 1;
                                decimal WidthdrawAmmount = 0;
                                //if employee late join withdraw late days amount
                                if (QryCONMaster.AppointmentStartdate < model.ActualDate && QryCONMaster.CSIRStaffPayMode != 2)
                                {
                                    DateTime FromDate = QryCONMaster.AppointmentStartdate ?? DateTime.Now;
                                    DateTime ToDate = model.ActualDate ?? DateTime.Now;
                                    WidthdrawAmmount = Common.calculateWithdrawalAmount(ConAppId, "CON", FromDate, ToDate, true, 0, true);
                                    if (WidthdrawAmmount > 0)
                                    {
                                        tblRCTCommitmentRequest withdraw = new tblRCTCommitmentRequest();
                                        withdraw.ReferenceNumber = QryCONMaster.ApplicationNumber;
                                        withdraw.AppointmentType = "Verfication";
                                        withdraw.TypeCode = "CON";
                                        withdraw.CandidateName = QryCONMaster.Name;
                                        withdraw.CandidateDesignation = designation.Designation;
                                        withdraw.ProjectId = QryCONMaster.ProjectId;
                                        withdraw.ProjectNumber = Common.getprojectnumber(QryCONMaster.ProjectId ?? 0);
                                        withdraw.TotalSalary = QryCONMaster.Salary;
                                        withdraw.RequestedCommitmentAmount = WidthdrawAmmount;
                                        withdraw.Status = "Awaiting Commitment Booking";
                                        withdraw.RequestType = "Withdraw Commitment";
                                        withdraw.EmpNumber = QryCONMaster.EmployeersID;
                                        withdraw.EmpId = logged_in_userId;
                                        withdraw.Crtd_TS = DateTime.Now;
                                        withdraw.Crtd_UserId = logged_in_userId;
                                        context.tblRCTCommitmentRequest.Add(withdraw);
                                        context.SaveChanges();
                                    }
                                }
                                //OfficeOrder


                                //RCTEmailContentService.SendMailForOfficeOrder(ConAppId, "CON");

                                var Updateqry = (from a in context.tblRCTConsultantAppointment
                                                 where a.ConsultantAppointmentId == ConAppId
                                                 select a).FirstOrDefault();
                                if (Updateqry != null)
                                {
                                    var Actualstartdate = Updateqry.AppointmentStartdate;
                                    Updateqry.ActualAppointmentStartDate = Actualstartdate;
                                    Updateqry.ActualAppointmentEndDate = Updateqry.AppointmentEnddate;
                                    decimal CommitmentAmount = 0;
                                    CommitmentAmount = Updateqry.CommitmentAmount ?? 0;
                                    Updateqry.AppointmentStartdate = model.ActualDate;
                                    if (WidthdrawAmmount > 0)
                                        Updateqry.CommitmentAmount = CommitmentAmount - WidthdrawAmmount;
                                    context.SaveChanges();
                                }

                                //OrderModel History = new OrderModel();
                                //History.EmployeeID = EmployeeID;
                                //History.ApplicationID = ConAppId;
                                //History.Category = "CON";
                                //History.OrderTypestr = "New";
                                //History.FromDate = model.ActualDate;
                                //History.ToDate = QryCONMaster.AppointmentEnddate;
                                //History.Salary = QryCONMaster.Salary;
                                //History.GST = QryCONMaster.GSTPercentage;
                                ////if (QryCONMaster.IsGSTApplicable == true)
                                ////    History.IsGSTapplicable = "Yes";
                                ////else
                                ////    History.IsGSTapplicable = "No";
                                //History.DesignationId = QryCONMaster.DesignationId;
                                //History.ProjectId = QryCONMaster.ProjectId;
                                //History.ProjectId = QryCONMaster.ProjectId;
                                var isLogged = Common.EmployeeHistoryLog(ConAppId, "CON");

                                //tblRCTOrderEffectHistory his = new tblRCTOrderEffectHistory();
                                //his.ApplicationId = ConAppId;
                                //his.AppointmentType = "CON";
                                //his.Basic = QryCONMaster.Salary;
                                //his.GST = QryCONMaster.GSTPercentage;
                                //his.DesignationId = QryCONMaster.DesignationId;
                                //his.EffectiveFrom = model.ActualDate;
                                //his.EffectiveTo = QryCONMaster.AppointmentEnddate;
                                //his.AppointmentStartDate = model.ActualDate;
                                //his.AppointmentEndDate = QryCONMaster.AppointmentEnddate;
                                //his.OrderDate = DateTime.Now;
                                //his.EmployeeId = EmployeeID;
                                //his.HRA = 0;
                                //his.OrderId = 0;
                                //his.Medical = 0;
                                //his.ProjectId = model.ProjectId;
                                //his.OrderTypeId = 0;
                                //his.OrderType = "New";
                                //his.AppointmentStartDate = model.ActualDate;
                                //his.AppointmentEndDate = QryCONMaster.AppointmentEnddate;
                                //his.isMedicalInclusive = false;
                                //his.IITMPensioner_f = QryCONMaster.IITMPensionerorCSIRStaff == 1 ? true : false;
                                //context.tblRCTOrderEffectHistory.Add(his);
                                //context.SaveChanges();
                                RequirementService.PostCONStatusLog(ConAppId, "Awaiting verification", "Verification Completed", logged_in_userId);
                                PostOfferDetails(ConAppId, "CON", "OfficeOrder", logged_in_userId);
                            }
                            else
                            {
                                //Check is verified
                                int PreVerified = (from P in context.tblRCTCONStatusLog
                                                   where P.ConsultantAppointmentId == ConAppId && P.NewStatus == "Verification Completed"
                                                   select P).ToList().Count;
                                if (PreVerified > 0)
                                    res = 2;
                                else
                                    res = -1;
                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, 0, "");
                        }
                    }
                }
                return Tuple.Create(res, ConAppId, EmployeeID);
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, 0, "");
            }
        }


        #endregion

        #region Consultant Modify Profile
        public Tuple<int, int> ModifyConsultant(ConsultantAppointmentModel model)
        {
            try
            {
                int res = 0;
                int ConAppId = 0;
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            ConAppId = model.ConsultantAppointmentId ?? 0;
                            var QryCONMaster = (from SM in context.tblRCTConsultantAppointment where SM.ConsultantAppointmentId == ConAppId select SM).FirstOrDefault();
                            if (QryCONMaster != null)
                            {
                                if (model.PersonDocImage != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.PersonDocImage.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.PersonDocImage.UploadFile("RCTEmployeeImages", docName);
                                    QryCONMaster.CandidateImage = docName;
                                }
                                if (model.CantidateSignature != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.CantidateSignature.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.CantidateSignature.UploadFile("Requirement", docName);
                                    QryCONMaster.CandidateSignature = docName;
                                }
                                QryCONMaster.PanNo = model.PANNo;
                                QryCONMaster.AlternativeContactNumber = model.AlternativeContactNumber;
                                QryCONMaster.EmergencyContact = model.EmergencyContactNo;
                                QryCONMaster.IsSameAsPresentAddress = model.isSameasPermanentAddress;
                                QryCONMaster.TemporaryAddress = model.TemporaryAddress;
                                QryCONMaster.PermanentAddress = model.PermanentAddress;
                                QryCONMaster.IITMPensionerorCSIRStaff = model.IITMPensionerorCSIRStaff;
                                QryCONMaster.BankAccountNumber = model.BankAccountNo;
                                QryCONMaster.BankName = model.BankName;
                                QryCONMaster.BankId = model.BankId;
                                QryCONMaster.IFSCCode = model.IFSCCode;
                                QryCONMaster.Bcc = model.bcc;
                                QryCONMaster.EmployeeWorkplace = model.EmployeeWorkplace;
                                QryCONMaster.RequestedBy = model.RequestedByPI;
                                context.SaveChanges();
                                if (model.EducationDetail.Count > 0)
                                {
                                    for (int i = 0; i < model.EducationDetail.Count; i++)
                                    {
                                        if (model.EducationDetail[i].EducationId == null)
                                        {
                                            if (model.EducationDetail[i].QualificationId != null)
                                            {
                                                tblRCTConsultantEducationDetail EducationDetail = new tblRCTConsultantEducationDetail();
                                                EducationDetail.ConsultantAppointmentId = ConAppId;
                                                EducationDetail.QualifiCationId = model.EducationDetail[i].QualificationId;
                                                EducationDetail.DisciplineId = model.EducationDetail[i].DisciplineId;
                                                EducationDetail.UniversityorInstitution = model.EducationDetail[i].Institution;
                                                EducationDetail.YearOfPassing = model.EducationDetail[i].YearofPassing;
                                                EducationDetail.Marks = model.EducationDetail[i].Marks;
                                                EducationDetail.DivisionClassObtained = model.EducationDetail[i].DivisionClassObtained;
                                                if (model.EducationDetail[i].Certificate != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.EducationDetail[i].Certificate.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    model.EducationDetail[i].Certificate.UploadFile("Requirement", Certificatedocname);
                                                    EducationDetail.DocumentFile = Certificatedocname;
                                                    EducationDetail.DocumentName = CertificateDocumentPath;
                                                }
                                                EducationDetail.Remarks = model.EducationDetail[i].Remarks;
                                                EducationDetail.CrtdTs = DateTime.Now;
                                                EducationDetail.CrtdUser = model.UserId;
                                                EducationDetail.Status = "Active";
                                                context.tblRCTConsultantEducationDetail.Add(EducationDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            int CONEducationDetailID = model.EducationDetail[i].EducationId ?? 0;
                                            var QryEducation = (from SM in context.tblRCTConsultantEducationDetail where SM.ConsultantAppointmentId == ConAppId && SM.ConsultantEducationDetailId == CONEducationDetailID && SM.Status == "Active" select SM).FirstOrDefault();
                                            if (QryEducation != null)
                                            {
                                                if (model.EducationDetail[i].Certificate != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.EducationDetail[i].Certificate.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    model.EducationDetail[i].Certificate.UploadFile("Requirement", Certificatedocname);
                                                    QryEducation.DocumentFile = Certificatedocname;
                                                    QryEducation.DocumentName = CertificateDocumentPath;
                                                    QryEducation.UptdTs = DateTime.Now;
                                                    QryEducation.UptdUser = model.UserId;
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                }

                                if (model.ExperienceDetail.Count > 0)
                                {
                                    for (int i = 0; i < model.ExperienceDetail.Count; i++)
                                    {
                                        if (model.ExperienceDetail[i].ExperienceId == null)
                                        {
                                            if (model.ExperienceDetail[i].ExperienceTypeId != null)
                                            {
                                                tblRCTConsultantExperienceDetail ExperienceDetail = new tblRCTConsultantExperienceDetail();
                                                ExperienceDetail.ConsultantAppointmentId = ConAppId;
                                                ExperienceDetail.TypeId = model.ExperienceDetail[i].ExperienceTypeId;
                                                ExperienceDetail.Organisation = model.ExperienceDetail[i].Organisation;
                                                //ExperienceDetail.Designation = model.ExperienceDetail[i].DesignationListId;
                                                ExperienceDetail.Designation = model.ExperienceDetail[i].DesignationautoComplete;
                                                ExperienceDetail.FromYear = model.ExperienceDetail[i].FromDate;
                                                ExperienceDetail.ToYear = model.ExperienceDetail[i].ToDate;
                                                ExperienceDetail.SalaryDrawn = model.ExperienceDetail[i].SalaryDrawn;
                                                if (model.ExperienceDetail[i].ExperienceFile != null)
                                                {
                                                    string CertificateDocumentPath = "";
                                                    CertificateDocumentPath = System.IO.Path.GetFileName(model.ExperienceDetail[i].ExperienceFile.FileName);
                                                    var Certificatedocfileid = Guid.NewGuid().ToString();
                                                    var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                    /*Saving the file in server folder*/
                                                    model.ExperienceDetail[i].ExperienceFile.UploadFile("Requirement", Certificatedocname);
                                                    //model.ExperienceDetail[i].ExperienceFile.UploadFile("SupportDocuments", Certificatedocname);
                                                    ExperienceDetail.DocumentFile = Certificatedocname;
                                                    ExperienceDetail.DocumentName = CertificateDocumentPath;
                                                }
                                                ExperienceDetail.Remarks = model.ExperienceDetail[i].Remarks;
                                                ExperienceDetail.CrtdUser = model.UserId;
                                                ExperienceDetail.CrtdTs = DateTime.Now;
                                                ExperienceDetail.Status = "Active";
                                                context.tblRCTConsultantExperienceDetail.Add(ExperienceDetail);
                                                context.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            int ExperienceId = model.ExperienceDetail[i].ExperienceId ?? 0;
                                            var QryExp = (from SM in context.tblRCTConsultantExperienceDetail where SM.ConsultantAppointmentId == ConAppId && SM.ConsultantExperienceDetailId == ExperienceId && SM.Status == "Active" select SM).FirstOrDefault();
                                            if (QryExp != null)
                                            {
                                                if (model.ExperienceDetail[i].ExperienceTypeId != null)
                                                {
                                                    QryExp.ConsultantAppointmentId = ConAppId;
                                                    QryExp.TypeId = model.ExperienceDetail[i].ExperienceTypeId;
                                                    QryExp.Organisation = model.ExperienceDetail[i].Organisation;
                                                    //QryExp.DesignationId = model.ExperienceDetail[i].DesignationListId;
                                                    QryExp.Designation = model.ExperienceDetail[i].DesignationautoComplete;
                                                    QryExp.FromYear = model.ExperienceDetail[i].FromDate;
                                                    QryExp.ToYear = model.ExperienceDetail[i].ToDate;
                                                    QryExp.SalaryDrawn = model.ExperienceDetail[i].SalaryDrawn;
                                                    if (model.ExperienceDetail[i].ExperienceFile != null)
                                                    {
                                                        string CertificateDocumentPath = "";
                                                        CertificateDocumentPath = System.IO.Path.GetFileName(model.ExperienceDetail[i].ExperienceFile.FileName);
                                                        var Certificatedocfileid = Guid.NewGuid().ToString();
                                                        var Certificatedocname = Certificatedocfileid + "_" + CertificateDocumentPath;
                                                        /*Saving the file in server folder*/
                                                        model.ExperienceDetail[i].ExperienceFile.UploadFile("Requirement", Certificatedocname);
                                                        //model.ExperienceDetail[i].ExperienceFile.UploadFile("SupportDocuments", Certificatedocname);
                                                        QryExp.DocumentFile = Certificatedocname;
                                                        QryExp.DocumentName = CertificateDocumentPath;
                                                    }
                                                    QryExp.Remarks = model.ExperienceDetail[i].Remarks;
                                                    QryExp.UptdUser = model.UserId;
                                                    QryExp.UptdTs = DateTime.Now;
                                                    QryExp.Status = "Active";
                                                    context.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                }

                                transaction.Commit();
                                res = 1;
                            }

                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return Tuple.Create(0, 0);
                        }
                    }
                }
                return Tuple.Create(res, ConAppId);
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(0, 0);
            }
        }
        #endregion

        #endregion

        #region RCTCommitmentDetails

        public static EmployeeBasicDetails GetCommitmenttransactionDetails(string Commitmentnumber)
        {
            EmployeeBasicDetails model = new EmployeeBasicDetails();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var empQuery = (from emp in context.tblRCTCommitmentRequest
                                    where emp.CommitmentNumber == Commitmentnumber
                                    select emp).FirstOrDefault();
                    if (empQuery != null)
                    {
                        model.EmployeeName = empQuery.CandidateName;
                        model.DesigantionName = empQuery.CandidateDesignation;
                        model.EmployeeNumber = empQuery.EmpNumber;
                        model.ProjectNumber = empQuery.ProjectNumber;
                        model.CommitmentNumber = empQuery.CommitmentNumber;
                        model.CommitmentDetais = (from t in context.tblRCTCommitmentRequest
                                                  where t.CommitmentNumber == Commitmentnumber
                                                  select t).AsEnumerable().Select((x) => new RCTCommitmenttransactionDetails()
                                                  {
                                                      ApplicationType = x.AppointmentType,
                                                      RequestType = x.RequestType,
                                                      CommitmentAmount = x.RequestedCommitmentAmount ?? 0,
                                                      AllocationHead = x.AllocationHead
                                                  }).ToList();

                        if (model.EmployeeNumber.Contains("VS"))
                            model.TotalSalaryAmount = (from a in context.tblAgencyVerifiedSalary
                                                       join aa in context.tblAgencySalaryCommitmentDetail on a.VerifiedSalaryId equals aa.VerifiedSalaryId
                                                       join bb in context.tblCommitmentDetails on aa.CommitmentDetailId equals bb.ComitmentDetailId
                                                       join cc in context.tblCommitment on bb.CommitmentId equals cc.CommitmentId
                                                       where a.EmployeeID == model.EmployeeNumber && cc.CommitmentNumber == Commitmentnumber
                                                       select aa.Amount).Sum() ?? 0;
                        else
                            model.TotalSalaryAmount = (from a in context.tblSalaryPayment
                                                       join ab in context.tblSalaryPaymentHead on a.PaymentHeadId equals ab.PaymentHeadId
                                                       join aa in context.tblAdhocSalaryCommitmentDetail on a.PaymentHeadId equals aa.PaymentHeadId
                                                       join bb in context.tblCommitmentDetails on aa.CommitmentDetailId equals bb.ComitmentDetailId
                                                       join cc in context.tblCommitment on bb.CommitmentId equals cc.CommitmentId
                                                       where a.PayBill == model.EmployeeNumber && cc.CommitmentNumber == Commitmentnumber && ab.Status == "Approval Pending"
                                                       select aa.Amount).Sum() ?? 0;
                        var comQuery = (from c in context.tblCommitment
                                        where c.CommitmentNumber == Commitmentnumber
                                        select c).FirstOrDefault();
                        if (comQuery != null)
                        {
                            model.TotalCommitmentAmount = comQuery.CommitmentAmount ?? 0;
                            model.AvilableBalance = comQuery.CommitmentBalance ?? 0;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return model;
            }
        }

        #endregion

        public static bool PostOfferDetails(int appid, string apptype, string offercategory, int userId, int? orderId = null)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var chkQuery = (from c in context.tblRCTOfferDetails
                                    where c.ApplicationId == appid && c.Category == apptype && c.OfferCategory == offercategory
                                    && ((orderId == null && c.OrderId == null) || c.OrderId == orderId)
                                    select c).FirstOrDefault();
                    if (chkQuery != null)
                    {
                        chkQuery.CRTD_TS = DateTime.Now;
                        chkQuery.CRTD_USER = userId;
                        context.SaveChanges();
                        return true;
                    }
                    var OfferletterSeqNo = (from R in context.tblRCTOfferDetails where R.OfferCategory == "OfferLetter" select R.SeqNo).Max() ?? 0;
                    var OfficeOrderSeqNo = (from R in context.tblRCTOfferDetails where R.OfferCategory == "OfficeOrder" select R.SeqNo).Max() ?? 0;
                    tblRCTOfferDetails offer = new tblRCTOfferDetails();
                    offer.ApplicationId = appid;
                    offer.Category = apptype;
                    offer.OrderId = orderId;
                    offer.OfferCategory = offercategory;
                    if (offercategory == "OfferLetter")
                    {
                        var number = OfferletterSeqNo == 0 ? 1 : OfferletterSeqNo + 1;
                        offer.SeqNo = number;
                        offer.OfferRefNumber = "ICSR/Offer/" + DateTime.Now.Year + "/" + number.ToString("D4");
                    }
                    else if (offercategory == "OfficeOrder")
                    {
                        var number = OfficeOrderSeqNo == 0 ? 1 : OfficeOrderSeqNo + 1;
                        offer.SeqNo = number;
                        offer.OfferRefNumber = "ICSR/Office ord/" + DateTime.Now.Year + "/" + number.ToString("D2");
                    }
                    else if (offercategory == "Order")
                    {
                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderMaster
                                     where o.OrderType == od.CodeID && o.OrderId == orderId
                                     select new { o.OrderType, OrderTypeStr = od.CodeDescription }).FirstOrDefault();
                        if (query != null)
                        {
                            var OrderwiseSeqNo = (from R in context.tblRCTOfferDetails
                                                  from o in context.tblOrder
                                                  where R.OrderId == o.OrderId && o.OrderType == query.OrderType
                                                  select R.OrderwiseSeqNo).Max() ?? 0;
                            var number = OrderwiseSeqNo == 0 ? 1 : OrderwiseSeqNo + 1;
                            offer.OrderwiseSeqNo = number;
                            var Ordertype = query.OrderTypeStr;
                            if (Ordertype == "HRA Booking")
                                Ordertype = "HRA";
                            offer.OfferRefNumber = "ICSR/" + Ordertype + " ord/" + DateTime.Now.Year + "/" + number.ToString("D2");
                        }
                    }
                    offer.CRTD_TS = DateTime.Now;
                    offer.CRTD_USER = userId;
                    context.tblRCTOfferDetails.Add(offer);
                    context.SaveChanges();
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;

            }
        }

        public static string getOfferDetails(int appid, string apptype, int? Orderid = null, string OfferCategory = null)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from o in context.tblRCTOfferDetails
                                 where o.ApplicationId == appid && o.Category == apptype
                                 && (o.OfferCategory == "OfficeOrder" || o.OfferCategory == "Order") && (Orderid == null || o.OrderId == Orderid)
                                 select new
                                 {
                                     o.OfferRefNumber,
                                     o.OfferCategory
                                 }).FirstOrDefault();
                    if (!string.IsNullOrEmpty(OfferCategory))
                    {
                        query = (from o in context.tblRCTOfferDetails
                                 where o.ApplicationId == appid && o.Category == apptype
                                 && o.OfferCategory == OfferCategory && (Orderid == null || o.OrderId == Orderid)
                                 select new
                                 {
                                     o.OfferRefNumber,
                                     o.OfferCategory
                                 }).FirstOrDefault();
                    }
                    if (query != null)
                    {
                        return query.OfferRefNumber;
                    }
                }
                return "";
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public static Tuple<string, string> getReferenceOfferDetails(int appid, int apptype, int? Orderid = null)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string Category = getAppointmentType(apptype);

                    if (Orderid > 0)
                    {
                        var queryodr = (from o in context.tblOrder
                                        from od in context.tblOrderMaster
                                        where o.AppointmentId == appid && o.AppointmentType == apptype
                                        && o.OrderType == od.CodeID && o.OrderId != Orderid && o.OrderId < Orderid && o.Status == "Completed" && o.isUpdated == true
                                        orderby o.OrderId descending
                                        select new { o.OrderId, OrderTypeStr = od.CodeDescription }).FirstOrDefault();
                        if (queryodr != null)
                            Orderid = queryodr.OrderId;
                        else
                            Orderid = null;
                    }
                    var query = (from o in context.tblRCTOfferDetails
                                 where o.ApplicationId == appid && o.Category == Category
                                 && (o.OfferCategory == "OfficeOrder" || o.OfferCategory == "Order") && (Orderid == null || o.OrderId == Orderid)
                                 select new
                                 {
                                     o.OfferRefNumber,
                                     o.OfferCategory,
                                     o.OrderId
                                 }).FirstOrDefault();

                    if (query != null)
                    {
                        var RefField = string.Empty;
                        if (query.OfferCategory == "OfficeOrder")
                            RefField = "office order";
                        else if (query.OfferCategory == "Order")
                        {
                            var queryodr = (from o in context.tblOrder
                                            from od in context.tblOrderMaster
                                            where o.AppointmentId == appid && o.AppointmentType == apptype && o.OrderType == od.CodeID && o.OrderId == query.OrderId
                                            select new { o.OrderType, OrderTypeStr = od.CodeDescription }).FirstOrDefault();
                            if (queryodr != null)
                                RefField = (queryodr.OrderTypeStr.ToLower() == "hra booking" ? "hra" : queryodr.OrderTypeStr.ToLower()) + " order";
                        }
                        return Tuple.Create(query.OfferRefNumber, RefField);
                    }
                }
                return Tuple.Create("", "");
            }
            catch (Exception ex)
            {
                return Tuple.Create("", "");
            }
        }

        public static DateTime getOfferLetterDate(int appid, string apptype, string category, int? orderid = null)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from o in context.tblRCTOfferDetails
                                 where o.ApplicationId == appid && o.Category == apptype && o.OfferCategory == category
                                 && ((orderid == null && o.OrderId == null) || o.OrderId == orderid)
                                 select o.CRTD_TS).FirstOrDefault();
                    if (query != null)
                        return query ?? DateTime.Now;
                }
                return DateTime.Now;
            }
            catch (Exception ex)
            {
                return DateTime.Now;
            }
        }


        #region Stored Procedures

        public static bool ExecuteSPApplicationlog(int appid, string apptype, int userid, int? OrderId = null, IOASDBEntities ctx = null)
        {
            try
            {
                if (ctx != null)
                {
                    ctx.Database.ExecuteSqlCommand("SPRCTApplicationUpdate @p0,@p1,@p2,@p3", appid, apptype, OrderId, userid);
                }
                else
                {
                    using (var context = new IOASDBEntities())
                    {
                        context.Database.ExecuteSqlCommand("SPRCTApplicationUpdate @p0,@p1,@p2,@p3", appid, apptype, OrderId, userid);
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool ExecuteSPSalaryChangeComponent()
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    context.Database.ExecuteSqlCommand("SPRCTExtensionAndEnhancementupdate");
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool ExecuteSPMaternity(IOASDBEntities ctx = null, DateTime? RejoinDate = null)
        {
            try
            {
                using (var context = ctx == null ? new IOASDBEntities() : ctx)
                {
                    context.Database.ExecuteSqlCommand("SPRCTMaternityLeave @p0", RejoinDate);
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool ExecuteSPHRA()
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    context.Database.ExecuteSqlCommand("SPRCTHRA");
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool ExecuteSPRCTEmployeeEffectHistoryLog(int Orderid)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    context.Database.ExecuteSqlCommand("SPRCTEmployeeEffectHistoryLog  @p0", Orderid);
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static int ExecuteSalaryProcessing(PayrollInitiationModel model)
        {
            int payrollId = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {

                    SqlCommand cmd = new SqlCommand();
                    var conn = Common.getConnection();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1800;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "SalaryProcessing";
                    //SP Input Parameter
                    model.VendorId = model.VendorId == null ? 0 : model.VendorId;
                    cmd.Parameters.AddWithValue("@Userid", model.UserId);
                    cmd.Parameters.AddWithValue("@startDate", model.FromInitDate);
                    cmd.Parameters.AddWithValue("@endDate", model.ToInitDate);
                    cmd.Parameters.AddWithValue("@salaryType", model.SalaryType);
                    cmd.Parameters.AddWithValue("@SalaryMonth", model.SalaryMonth);
                    cmd.Parameters.AddWithValue("@SalaryMonthDate", model.SalaryMonthDate);
                    cmd.Parameters.AddWithValue("@AppointmentType", model.Appointmenttype);
                    cmd.Parameters.AddWithValue("@vendorId", model.VendorId);
                    //SP Output Parameter
                    cmd.Parameters.Add("@payrollId", SqlDbType.Int);
                    cmd.Parameters["@payrollId"].Direction = ParameterDirection.Output;
                    conn.Open();
                    int i = cmd.ExecuteNonQuery();
                    //Storing the output parameters value in 3 different variables.  
                    payrollId = Convert.ToInt32(cmd.Parameters["@payrollId"].Value);
                    conn.Close();
                }
                return payrollId;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return payrollId;
            }
        }

        public static bool ExecuteSPApplicationTypeProjectCount(RCTReportProjectModel model)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    SqlCommand cmd = new SqlCommand();
                    var conn = Common.getConnection();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "SPRCTProjectBaseType";
                    cmd.Parameters.AddWithValue("@startDate", model.FromDate);
                    cmd.Parameters.AddWithValue("@endDate", model.ToDate);
                    conn.Open();
                    int i = cmd.ExecuteNonQuery();
                    conn.Close();
                    //context.Database.ExecuteSqlCommand("SPRCTProjectBaseType @startDate,@endDate", model.FromDate, model.ToDate);
                }
                return true;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        public PayrollInitiationSearchModel GetPayrollInitiationList(PayrollInitiationSearchModel model, int page, int pageSize, DateFilterModel MonthStartDate, DateFilterModel MonthEndDate, int UserId, int RoleId)
        {
            PayrollInitiationSearchModel seamodel = new PayrollInitiationSearchModel();
            List<PayrollInitiationModel> list = new List<PayrollInitiationModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from pah in context.tblRCTPayroll.AsNoTracking()
                                    join cc in context.tblCodeControl on pah.SalaryType equals cc.CodeValAbbr
                                    where cc.CodeName == "PayOfBill"/* && pah.CRTD_By == UserId*/
                                    && pah.Status != "InActive"
                                    orderby pah.RCTPayrollId descending
                                    select new PayrollInitiationModel()
                                    {
                                        PayrollId = pah.RCTPayrollId,
                                        FromInitDate = pah.StartDate,
                                        ToInitDate = pah.EndDate,
                                        PayrollSalaryType = cc.CodeValDetail,
                                        SalaryMonth = pah.SalaryMonth,
                                        SalaryStatus = pah.Status,
                                        Appointmenttype = pah.AppointmentType,
                                        VendorId = pah.VendorId
                                    });
                    var predicate = PredicateBuilder.BaseAnd<PayrollInitiationModel>();
                    if (!string.IsNullOrEmpty(model.SearchSalaryMonth))
                        predicate = predicate.And(d => d.SalaryMonth.Contains(model.SearchSalaryMonth));
                    if (!string.IsNullOrEmpty(model.SearchSalaryType))
                        predicate = predicate.And(d => d.PayrollSalaryType.Contains(model.SearchSalaryType));
                    if (MonthStartDate.from != null && MonthStartDate.to != null)
                    {
                        MonthStartDate.to = MonthStartDate.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.FromInitDate >= MonthStartDate.from && d.FromInitDate <= MonthStartDate.to);
                    }
                    if (MonthEndDate.from != null && MonthEndDate.to != null)
                    {
                        MonthEndDate.to = MonthEndDate.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.ToInitDate >= MonthEndDate.from && d.ToInitDate <= MonthEndDate.to);
                    }
                    if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                        predicate = predicate.And(d => d.Appointmenttype == "Adhoc");
                    if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                        predicate = predicate.And(d => d.Appointmenttype == "OSG");
                    if (!string.IsNullOrEmpty(model.SearchSalaryStaus))
                        predicate = predicate.And(d => d.SalaryStatus.Contains(model.SearchSalaryStaus));
                    var payrolllist = prequery.Where(predicate).OrderByDescending(m => m.PayrollId).Skip(skiprec).Take(pageSize).ToList();
                    if (payrolllist != null)
                    {
                        if (payrolllist.Count > 0)
                        {
                            int sno = 0;
                            if (page == 1)
                            {
                                sno = 1;
                            }
                            else
                            {
                                sno = ((page - 1) * pageSize) + 1;
                            }
                            for (int i = 0; i < payrolllist.Count; i++)
                            {

                                string monthname = payrolllist[i].SalaryMonth;
                                bool Requestedforsalaryprocessingmain = false;
                                bool Requestedforsalaryprocessingsubli = false;
                                int paymenustatusid = 0;
                                if (payrolllist[i].Appointmenttype == "Adhoc")
                                {
                                    if (payrolllist[i].PayrollSalaryType == "Main" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingmain = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 1 && x.Status == "Requested for salary processing" && x.AppointmentType == "Adhoc");

                                    }
                                    if (payrolllist[i].PayrollSalaryType == "Supplementary" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingsubli = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 2 && x.Status == "Requested for salary processing" && x.AppointmentType == "Adhoc");
                                    }

                                    if (Requestedforsalaryprocessingmain == true)
                                        paymenustatusid = 1;

                                    if (Requestedforsalaryprocessingsubli == true)
                                        paymenustatusid = 2;
                                }
                                else
                                {
                                    if (payrolllist[i].PayrollSalaryType == "Main" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingmain = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 1 && x.Status == "Requested for salary processing" && x.AppointmentType == "OSG");

                                    }
                                    if (payrolllist[i].PayrollSalaryType == "Supplementary" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingsubli = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 2 && x.Status == "Requested for salary processing" && x.AppointmentType == "OSG");
                                    }

                                    if (Requestedforsalaryprocessingmain == true)
                                        paymenustatusid = 1;

                                    if (Requestedforsalaryprocessingsubli == true)
                                        paymenustatusid = 2;
                                }

                                list.Add(new PayrollInitiationModel()
                                {
                                    SNo = sno + i,
                                    PayrollId = payrolllist[i].PayrollId,
                                    SalaryMonth = payrolllist[i].SalaryMonth,
                                    MonthStartDate = string.Format("{0:s}", payrolllist[i].FromInitDate),
                                    MonthEndDate = string.Format("{0:s}", payrolllist[i].ToInitDate),
                                    SalaryStatus = payrolllist[i].SalaryStatus,
                                    PayrollSalaryType = payrolllist[i].PayrollSalaryType,
                                    Appointmenttype = payrolllist[i].Appointmenttype,
                                    RoleId = RoleId,
                                    UserId = UserId,
                                    PayrollmenuProcessId = paymenustatusid,
                                    VendorName = payrolllist[i].VendorId == null ? "" : Common.GetSalaryAgencyName(payrolllist[i].VendorId ?? 0),
                                });
                            }
                        }
                    }
                    seamodel.TotalRecords = prequery.Where(predicate).Count();
                    seamodel.Payrolllist = list;
                }
                return seamodel;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return seamodel;
            }
        }

        #endregion

        #region OTHPaymentDeductionUpload

        public int ValidateOTHPDList(tblRCTOTHPaymentDeductionUpload master, List<tblRCTOTHPaymentDeductionUploadDetail> detail)
        {
            using (var context = new IOASDBEntities())
            {

                try
                {
                    context.tblRCTOTHPaymentDeductionUpload.Add(master);
                    context.SaveChanges();
                    int masterId = master.OTHPaymentDeductionUploadId;
                    foreach (var det in detail)
                    {
                        if (!string.IsNullOrEmpty(det.EmployeeNumber) || !string.IsNullOrEmpty(det.OtherType) || !string.IsNullOrEmpty(det.HeadName) || det.Amount != null || !string.IsNullOrEmpty(det.Remarks))
                        {
                            var data = ValidateOTHPD(det);
                            det.ValidationMessage = data.Item1;
                            det.HeadId = data.Item2;
                            det.MonthandYear = data.Item3.MonthandYear;
                            det.AppointmentId = data.Item3.AppointmentId;
                            det.AppointmentType = data.Item3.AppointmentType;
                            det.OtherTypeId = data.Item3.OtherTypeId;
                            det.FromDate = data.Item3.FromDate;
                            det.ToDate = data.Item3.ToDate;
                            det.ProjectId = data.Item3.ProjectId;
                            det.ProjectNumber = data.Item3.ProjectNumber;
                            det.CommitmentNumber = data.Item3.CommitmentNumber;
                            det.CommitmentAmount = data.Item3.CommitmentAmount;
                            det.DesignationId = data.Item3.DesignationId;
                            det.DesignationName = data.Item3.DesignationName;
                            det.EmployeeName = data.Item3.EmployeeName;
                            det.OTHPaymentDeductionUploadId = masterId;
                            det.Remarks = data.Item3.Remarks;
                            context.tblRCTOTHPaymentDeductionUploadDetail.Add(det);
                            context.SaveChanges();
                        }
                    }

                    var Projectothdetails = context.tblRCTOTHPaymentDeductionUploadDetail.Where(x => x.OTHPaymentDeductionUploadId == masterId).ToList();
                    if (Projectothdetails.Count > 0)
                    {
                        for (int i = 0; i < Projectothdetails.Count; i++)
                        {
                            if (Projectothdetails[i].ProjectId != null)
                            {
                                int projectidoth = Projectothdetails[i].ProjectId ?? 0;
                                decimal overallamount = Projectothdetails.Where(x => x.ProjectId == projectidoth).Select(x => x.Amount ?? 0).Sum();
                                bool checkFund = Common.IsAvailablefundProject(projectidoth, overallamount);
                                if (checkFund == true)
                                {
                                    Projectothdetails[i].ValidationMessage = "Insufficient fund in project";
                                    context.SaveChanges();
                                }
                            }
                        }
                    }
                    return masterId;
                }
                catch (Exception ex)
                {

                    WriteLog.SendErrorToText(ex);
                    return 0;
                }
            }
        }

        public Tuple<string, int, tblRCTOTHPaymentDeductionUploadDetail> ValidateOTHPD(tblRCTOTHPaymentDeductionUploadDetail model)
        {
            try
            {
                string msg = "Valid";
                int maHead = 0;
                using (var context = new IOASDBEntities())
                {
                    string[] noexp = { "Add Commitment", "Close Commitment" };
                    string[] validOtherType = { "Payment", "Deduction", "Add Commitment", "Close Commitment" };

                    if (model.EmployeeNumber == null || model.EmployeeNumber == "")
                        return Tuple.Create("EmployeeNumber field is required.", 0, model);
                    if (String.IsNullOrEmpty(model.OtherType))
                        return Tuple.Create("OtherType field is required.", 0, model);
                    if (!noexp.Contains(model.OtherType) && String.IsNullOrEmpty(model.HeadName))
                        return Tuple.Create("HeadName field is required.", 0, model);
                    if (model.Amount == null || model.Amount == 0)
                        return Tuple.Create("Amount field is required.", 0, model);

                    string EmployeeNo = model.EmployeeNumber;
                    var EmployeenoExist = context.vw_RCTOverAllApplicationEntry.AsNoTracking().Any(m => m.EmployeeNo == EmployeeNo || m.EmployeeNo.Contains(EmployeeNo) && m.ApplicationType == "New");
                    if (!EmployeenoExist)
                        return Tuple.Create("Employee Number not exists in the database.", 0, model);
                    var checkEmployeeRelived = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                orderby vw.EmployeeNo descending
                                                where vw.EmployeeNo == EmployeeNo && vw.ApplicationType == "New" && vw.Status == "Verification Completed" //vw.Status != "Relieved" && vw.Status != "Cancel"
                                                select vw).FirstOrDefault();
                    if (checkEmployeeRelived == null)
                        return Tuple.Create("This Employee Releived or Cancel", 0, model);
                    if (!validOtherType.Contains(model.OtherType))
                        return Tuple.Create("Other type not valid", 0, model);
                    if (model.OtherType == "Payment")
                    {
                        var PaymentheadExist = context.tblCommonHeads.Any(m => m.Head == model.HeadName || m.Head.Contains(model.HeadName) && m.GroupId == 1 && m.CategoryId == 1);
                        if (!PaymentheadExist)
                            return Tuple.Create("Payment head not exists in the database.", 0, model);
                    }
                    if (model.OtherType == "Deduction")
                    {
                        var PaymentheadExist = context.tblCommonHeads.Any(m => m.Head == model.HeadName || m.Head.Contains(model.HeadName) && m.GroupId == 2 && m.CategoryId == 1);
                        if (!PaymentheadExist)
                            return Tuple.Create("Deduction head not exists in the database.", 0, model);
                    }
                    if (model.OtherType == "Payment")
                    {
                        int Paymentheadid = context.tblCommonHeads.Where(m => m.Head == model.HeadName || m.Head.Contains(model.HeadName) && m.GroupId == 1 && m.CategoryId == 1).Select(x => x.HeadId).FirstOrDefault();
                        maHead = Paymentheadid;
                    }
                    if (model.OtherType == "Deduction")
                    {
                        int deductionheadid = context.tblCommonHeads.Where(m => m.Head == model.HeadName || m.Head.Contains(model.HeadName) && m.GroupId == 2 && m.CategoryId == 1).Select(x => x.HeadId).FirstOrDefault();
                        maHead = deductionheadid;
                    }
                    var empdetails = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                      orderby vw.EmployeeNo descending
                                      where vw.EmployeeNo == EmployeeNo && vw.ApplicationType == "New" && vw.Status == "Verification Completed" //vw.Status != "Relieved" && vw.Status != "Cancel"
                                      select vw).FirstOrDefault();
                    if (empdetails != null)
                    {
                        model.ProjectId = empdetails.ProjectId;
                        model.ProjectNumber = Common.GetProjectNumber(model.ProjectId ?? 0);
                        model.AppointmentId = empdetails.ApplicationId;
                        if (model.OtherType == "Payment")
                            model.OtherTypeId = 1;
                        if (model.OtherType == "Deduction")
                            model.OtherTypeId = 2;
                        if (model.OtherType == "Add Commitment")
                            model.OtherTypeId = 3;
                        if (model.OtherType == "Close Commitment")
                            model.OtherTypeId = 4;
                        model.FromDate = model.FromDate;
                        model.ToDate = model.ToDate;
                        model.AppointmentType = empdetails.AppointmentType;
                        model.DesignationId = empdetails.DesignationId;
                        model.DesignationName = empdetails.PostRecommended;
                        model.EmployeeName = empdetails.CandidateName;

                        model.CommitmentNumber = empdetails.CommitmentNumber;
                        model.CommitmentAmount = empdetails.CommitmentAmount;
                    }
                    model.MonthandYear = model.MonthandYear;
                    if (model.ProjectNumber != null && model.ProjectId != null)
                    {
                        //Me
                        //if (empdetails.Category == "CON")
                        //{
                        //    var querycon = (from con in context.tblRCTConsultantAppointment
                        //                    orderby con.ConsultantAppointmentId descending
                        //                    where con.EmployeersID == EmployeeNo && con.IsActiveNow == true && con.Status != "Relieved" && con.Status != "Cancel"
                        //                    select con).FirstOrDefault();
                        //    if (querycon != null)
                        //    {
                        //        model.CommitmentNumber = querycon.CommitmentNumber;
                        //        model.CommitmentAmount = querycon.CommitmentAmount;
                        //    }
                        //}
                        //else if (empdetails.Category == "STE")
                        //{
                        //    var queryste = (from STE in context.tblRCTSTE
                        //                    orderby STE.STEID descending
                        //                    where STE.EmployeersID == EmployeeNo && STE.IsActiveNow == true && STE.Status != "Relieved" && STE.Status != "Cancel"
                        //                    select STE).FirstOrDefault();
                        //    if (queryste != null)
                        //    {
                        //        model.CommitmentNumber = queryste.CommitmentNo;
                        //        model.CommitmentAmount = queryste.CommitmentAmount;
                        //    }
                        //}
                        //else if (empdetails.Category == "OSG")
                        //{
                        //    var queryosg = (from OSG in context.tblRCTOutsourcing
                        //                    orderby OSG.OSGID descending
                        //                    where OSG.EmployeersID == EmployeeNo && OSG.IsActiveNow == true && OSG.Status != "Relieved" && OSG.Status != "Cancel"
                        //                    select OSG).FirstOrDefault();
                        //    if (queryosg != null)
                        //    {
                        //        model.CommitmentNumber = queryosg.CommitmentNo;
                        //        model.CommitmentAmount = queryosg.CommitmentAmount;
                        //    }
                        //}
                        if (model.CommitmentNumber == null || model.CommitmentNumber == "")
                            return Tuple.Create("Commitment No not exists in the database.", 0, model);
                        if (!String.IsNullOrEmpty(model.CommitmentNumber))
                        {
                            var staffComm = context.tblCommitment.FirstOrDefault(m => m.CommitmentNumber == model.CommitmentNumber);
                            if (staffComm == null)
                                return Tuple.Create("Commitment No not exists in the database.", 0, model);
                        }
                        //else
                        //{
                        //    decimal sumofpayment = (from othd in context.tblRCTOTHPaymentDeductionUploadDetail
                        //                            where othd.OtherType == "Payment" && othd.ProjectId == model.ProjectId
                        //                            select othd.Amount).Sum() ?? 0;
                        //    decimal sumofdeduction = (from othd in context.tblRCTOTHPaymentDeductionUploadDetail
                        //                              where othd.OtherType == "Deduction" && othd.ProjectId == model.ProjectId
                        //                              select othd.Amount).Sum() ?? 0;
                        //    decimal projectExpAmount = 0;
                        //    if (sumofpayment >= sumofdeduction)
                        //    {
                        //        projectExpAmount = Math.Round(sumofpayment - sumofdeduction);
                        //    }
                        //    else if (sumofpayment <= sumofdeduction)
                        //    {
                        //        projectExpAmount = Math.Round(sumofdeduction - sumofpayment);
                        //    }
                        //    var CommQry = (from C in context.tblCommitment
                        //                   join D in context.tblCommitmentDetails on C.CommitmentId equals D.CommitmentId
                        //                   where C.Status == "Active" && C.CommitmentId == D.CommitmentId && C.CommitmentNumber == model.CommitmentNumber
                        //                   select new
                        //                   { C, D }).FirstOrDefault();
                        //    if (CommQry != null)
                        //    {
                        //        int headid = CommQry.D.AllocationHeadId ?? 0;
                        //        string commMsg = Common.ValidateCommitment(model.ProjectId ?? 0, headid, projectExpAmount);
                        //        if (commMsg != "Valid")
                        //            return Tuple.Create("Insufficient fund in project to book commitment.", 0, model);
                        //    }


                        //}
                    }
                }
                return Tuple.Create(msg, maHead, model);
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create("Something went wrong please contact administrator.", 0, model);
            }
        }

        public PagedList<tblRCTOTHPaymentDeductionUploadDetail> GetValidateOTHList(int page, int pageSize, int uploadId)
        {
            try
            {
                int skiprec = 0;

                if (page > 1)
                {
                    skiprec = (page - 1) * pageSize;
                }
                var searchData = new PagedList<tblRCTOTHPaymentDeductionUploadDetail>();

                List<tblRCTOTHPaymentDeductionUploadDetail> list = new List<tblRCTOTHPaymentDeductionUploadDetail>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from emp in context.tblRCTOTHPaymentDeductionUploadDetail
                                 where emp.OTHPaymentDeductionUploadId == uploadId
                                 select emp);

                    list = query
                                 .AsEnumerable()
                                 .Select((x, index) => new tblRCTOTHPaymentDeductionUploadDetail()
                                 {
                                     OTHPaymentDeductionUploadDetail = index + 1,
                                     EmployeeNumber = x.EmployeeNumber,
                                     OtherType = x.OtherType,
                                     HeadName = x.HeadName,
                                     ProjectNumber = x.ProjectNumber,
                                     Amount = x.Amount,
                                     ValidationMessage = x.ValidationMessage
                                 }).Skip(skiprec).Take(pageSize).ToList();


                    var recordCount = query.Count();
                    searchData.TotalRecords = recordCount;
                    searchData.Data = list;
                }
                return searchData;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return null;
            }
        }

        public Tuple<string, int> ValidateAndaddOtherPayment(int uploadId, int userId)
        {
            string msg = string.Empty;
            int res = 0;
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        var queryinvalid = context.tblRCTOTHPaymentDeductionUploadDetail.Any(m => m.ValidationMessage != "Valid" && m.OTHPaymentDeductionUploadId == uploadId);
                        if (queryinvalid)
                            Tuple.Create("Some of the data in otherpay deduction template is not valid.", -1);
                        var masterrec = context.tblRCTOTHPaymentDeductionUploadMaster.Where(x => x.OTHPaymentDeductionUploadId == uploadId && x.Status != "Completed").FirstOrDefault();
                        var query = context.tblRCTOTHPaymentDeductionUploadDetail.Where(m => m.OTHPaymentDeductionUploadId == uploadId).ToList();
                        if (query.Count > 0 && masterrec != null)
                        {
                            var masteruplodedoc = context.tblRCTOTHPaymentDeductionUpload.Where(x => x.OTHPaymentDeductionUploadId == uploadId && x.Status != "Completed").FirstOrDefault();
                            if (masteruplodedoc != null)
                            {
                                masteruplodedoc.Status = "Completed";
                                masteruplodedoc.UpdtTs = DateTime.Now;
                                masteruplodedoc.UpdtUser = userId;
                                context.SaveChanges();
                            }
                            else
                            {
                                Tuple.Create("This Already iniat Process", -1);
                            }

                            foreach (var data in query)
                            {
                                //Commitment based on employee sum
                                var checkexistdata = context.tblRCTOTHPaymentDeductionUploadDetail.Any(m => m.EmployeeNumber == data.EmployeeNumber && m.OTHPaymentDeductionUploadId == uploadId && m.OTHPayDeductionId == null);
                                if (checkexistdata)
                                {
                                    string Remarks = null;
                                    string employeeNo = data.EmployeeNumber;
                                    var detail = query.Where(x => x.EmployeeNumber == employeeNo).ToList();
                                    var employeedetails = (from vwoth in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                           where vwoth.EmployeersID == employeeNo && vwoth.ApplicationType == "New" && vwoth.IsActiveNow == true && vwoth.Status != "Cancel"
                                                           select vwoth).FirstOrDefault();
                                    string[] arrRemark = detail.Where(x => !string.IsNullOrEmpty(x.Remarks)).Select(x => x.Remarks).ToArray();
                                    if (arrRemark.Length > 0)
                                        Remarks = string.Join(",", arrRemark);
                                    tblRCTOTHPaymentDeduction addheadpd = new tblRCTOTHPaymentDeduction();
                                    addheadpd.EmployeeNo = data.EmployeeNumber;
                                    addheadpd.AppointmentId = data.AppointmentId;
                                    addheadpd.AppointmentType = data.AppointmentType;
                                    addheadpd.ProjectId = data.ProjectId;
                                    addheadpd.MonthandYear = masterrec.PaymentMonth;
                                    addheadpd.CrtdUser = userId;
                                    addheadpd.CrtdTS = DateTime.Now;
                                    addheadpd.Status = "Awaiting Commitment Booking";
                                    addheadpd.FromDate = masterrec.FromDate;
                                    addheadpd.ToDate = masterrec.ToDate;
                                    addheadpd.DesignationId = data.DesignationId;
                                    addheadpd.IITMPensioner_f = employeedetails != null && employeedetails.IITMPensionerorCSIRStaff == "IITM Pensioner" ? true : false;
                                    addheadpd.IsBulkBooking_f = true;
                                    addheadpd.Basic = employeedetails.BasicPay;
                                    addheadpd.HRA = employeedetails.HRA;
                                    addheadpd.Medical = employeedetails.MedicalAmmount;
                                    addheadpd.ProcessType = employeedetails.Category == "STE" ? "Adhoc" : employeedetails.Category;
                                    context.tblRCTOTHPaymentDeduction.Add(addheadpd);
                                    context.SaveChanges();
                                    int othid = addheadpd.OTHPayDeductionId;
                                    //string empno = addheadpd.EmployeeNo;
                                    //data.OTHPayDeductionId = othid;
                                    context.tblRCTOTHPaymentDeductionUploadDetail.Where(m => m.OTHPaymentDeductionUploadId == uploadId && m.EmployeeNumber == employeeNo).
                                        ToList().ForEach(m =>
                                    {
                                        m.OTHPayDeductionId = othid;
                                    });
                                    context.SaveChanges();
                                    if (detail.Count > 0)
                                    {
                                        foreach (var item in detail)
                                        {
                                            tblRCTOTHPaymentDeductionDetail adddetail = new tblRCTOTHPaymentDeductionDetail();
                                            adddetail.OTHPayDeductionId = othid;
                                            adddetail.OtherType = item.OtherTypeId;
                                            if (item.OtherType == "Payment")
                                                adddetail.PaymentType = item.HeadId;
                                            if (item.OtherType == "Deduction")
                                                adddetail.DeductionType = item.HeadId;
                                            adddetail.Status = "Active";
                                            adddetail.HeadId = item.HeadId;
                                            adddetail.Remarks = string.IsNullOrEmpty(item.Remarks) ? "other payment bulk booking" : item.Remarks;
                                            adddetail.Amount = item.Amount;
                                            Remarks = adddetail.Remarks;
                                            context.tblRCTOTHPaymentDeductionDetail.Add(adddetail);
                                            context.SaveChanges();
                                        }
                                    }
                                    decimal sumofpayment = (from othd in context.tblRCTOTHPaymentDeductionDetail
                                                            where othd.OTHPayDeductionId == othid && othd.OtherType == 1 && othd.Status != "InActive"
                                                            select othd.Amount).Sum() ?? 0;
                                    sumofpayment += (from othd in context.tblRCTOTHPaymentDeductionUploadDetail
                                                     where othd.OTHPaymentDeductionUploadId == uploadId && othd.EmployeeNumber == employeeNo && othd.OtherTypeId == 3 && othd.ValidationMessage == "Valid"
                                                     select othd.Amount).Sum() ?? 0;
                                    decimal sumofdeduction = (from othd in context.tblRCTOTHPaymentDeductionDetail
                                                              where othd.OTHPayDeductionId == othid && othd.OtherType == 2 && othd.Status != "InActive"
                                                              select othd.Amount).Sum() ?? 0;
                                    sumofdeduction += (from othd in context.tblRCTOTHPaymentDeductionUploadDetail
                                                       where othd.OTHPaymentDeductionUploadId == uploadId && othd.EmployeeNumber == employeeNo && othd.OtherTypeId == 4 && othd.ValidationMessage == "Valid"
                                                       select othd.Amount).Sum() ?? 0;
                                    int commitmentid = context.tblCommitment.Where(x => x.CommitmentNumber == data.CommitmentNumber).Select(x => x.CommitmentId).FirstOrDefault();
                                    var verct = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                 where vw.EmployeeNo == employeeNo && vw.ApplicationType == "New" && vw.IsActiveNow == true
                                                 select vw).FirstOrDefault();
                                    CommitmentResultModel commit = new CommitmentResultModel();
                                    tblRCTCommitmentRequest AddCommitment = new tblRCTCommitmentRequest();
                                    if (sumofpayment >= sumofdeduction && commitmentid > 0)
                                    {
                                        commit.LogTypeId = 1;
                                        AddCommitment.ReferenceNumber = verct.ApplicationNo;
                                        AddCommitment.TypeCode = verct.Category;
                                        AddCommitment.CandidateName = verct.CandidateName;
                                        AddCommitment.CandidateDesignation = verct.PostRecommended;
                                        AddCommitment.ProjectId = addheadpd.ProjectId;
                                        AddCommitment.ProjectNumber = Common.getprojectnumber(addheadpd.ProjectId ?? 0);
                                        AddCommitment.TotalSalary = verct.BasicPay;
                                        AddCommitment.RefId = addheadpd.OTHPayDeductionId;
                                        AddCommitment.RequestType = "Add Commitment";
                                        AddCommitment.AppointmentType = "OtherPayment";
                                        AddCommitment.Status = "Awaiting Commitment Booking";
                                        AddCommitment.RequestedCommitmentAmount = Math.Round(sumofpayment - sumofdeduction);
                                        AddCommitment.Crtd_TS = DateTime.Now;
                                        AddCommitment.Crtd_UserId = userId;
                                        AddCommitment.EmpNumber = verct.EmployeersID;
                                        context.tblRCTCommitmentRequest.Add(AddCommitment);
                                        context.SaveChanges();
                                    }
                                    else if (sumofpayment <= sumofdeduction && commitmentid > 0)
                                    {

                                        commit.LogTypeId = 2;
                                        AddCommitment.ReferenceNumber = verct.ApplicationNo;
                                        AddCommitment.TypeCode = verct.Category;
                                        AddCommitment.CandidateName = verct.CandidateName;
                                        AddCommitment.CandidateDesignation = verct.PostRecommended;
                                        AddCommitment.ProjectId = addheadpd.ProjectId;
                                        AddCommitment.ProjectNumber = Common.getprojectnumber(addheadpd.ProjectId ?? 0);
                                        AddCommitment.TotalSalary = verct.BasicPay;
                                        AddCommitment.RefId = addheadpd.OTHPayDeductionId;
                                        AddCommitment.RequestType = "Withdraw Commitment";
                                        AddCommitment.AppointmentType = "OtherDeduction";
                                        AddCommitment.Status = "Awaiting Commitment Booking";
                                        AddCommitment.Crtd_TS = DateTime.Now;
                                        AddCommitment.Crtd_UserId = userId;
                                        AddCommitment.EmpNumber = verct.EmployeersID;
                                        AddCommitment.RequestedCommitmentAmount = Math.Round(sumofdeduction - sumofpayment);
                                        context.tblRCTCommitmentRequest.Add(AddCommitment);
                                        context.SaveChanges();
                                    }

                                    int requestcomid = AddCommitment.RecruitmentRequestId;
                                    STEViewModel comviewmodel = new STEViewModel();
                                    RecruitCommitRequestModel reqmodel = new RecruitCommitRequestModel();
                                    //comviewmodel = GetAddorWithdrawCommitDetailsoth(requestcomid,context);
                                    //if (comviewmodel != null)
                                    //{
                                    var CommQry = (from C in context.tblCommitment
                                                   join D in context.tblCommitmentDetails on C.CommitmentId equals D.CommitmentId
                                                   where C.Status == "Active" && C.CommitmentId == commitmentid
                                                   select new
                                                   { C, D }).FirstOrDefault();


                                    commit.ComitmentId = commitmentid;
                                    commit.strRemarks = string.IsNullOrEmpty(Remarks) ? "other payment bulk booking" : Remarks; /*"Commitment booked";*/
                                    commit.AddCloseAmt = AddCommitment.RequestedCommitmentAmount ?? 0;
                                    commit.ProjectId = addheadpd.ProjectId ?? 0;
                                    if (CommQry != null)
                                    {
                                        commit.AllHeadId = CommQry.D.AllocationHeadId ?? 0;
                                    }
                                    commit.Remarks = string.IsNullOrEmpty(Remarks) ? "other payment bulk booking" : Remarks;
                                    reqmodel.CommitmentRequestId = requestcomid;
                                    reqmodel.CommitmentBookedId = commitmentid;
                                    reqmodel.AddCommitmentAmount = AddCommitment.RequestedCommitmentAmount;
                                    reqmodel.RequestedAmount = AddCommitment.RequestedCommitmentAmount;
                                    if (CommQry != null)
                                    {
                                        reqmodel.AllocationHead = Common.getAllocationHeadName(CommQry.D.AllocationHeadId ?? 0);
                                        reqmodel.AllocationHeadId = CommQry.D.AllocationHeadId;
                                    }
                                    else
                                    {
                                        reqmodel.AllocationHead = "Staff";
                                        reqmodel.AllocationHeadId = 1;
                                    }
                                    reqmodel.ReferenceNumber = AddCommitment.ReferenceNumber;
                                    reqmodel.TypeofAppointment = AddCommitment.AppointmentType;
                                    reqmodel.RequestType = AddCommitment.RequestType;
                                    reqmodel.AppointmentTypeCode = AddCommitment.TypeCode;
                                    reqmodel.Remarks = string.IsNullOrEmpty(Remarks) ? "other payment bulk booking" : Remarks;
                                    comviewmodel.CommitReqModel = reqmodel;
                                    comviewmodel.appid = addheadpd.OTHPayDeductionId;
                                    var result = CloseThisCommitmentOTH(commit, userId, context);
                                    if (result == 1)
                                    {
                                        var comitreqid = UpdateAddCommitDetailsOth(comviewmodel, commitmentid, userId, context);
                                        if (comitreqid > 0)
                                            res = 1;
                                    }
                                    //}
                                }
                            }

                            if (res == 1)
                            {
                                transaction.Commit();
                            }
                            else
                            {
                                transaction.Rollback();
                                return Tuple.Create("Something went wrong please contact administrator", res);
                            }
                        }
                        return Tuple.Create("Success", res);
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        WriteLog.SendErrorToText(ex);
                        return Tuple.Create("Something went wrong please contact administrator", res);
                    }
                }
            }
        }

        public PagedList<tblRCTOTHPaymentDeductionUploadDetail> GetValidateCompleteOTHList(int page, int pageSize, int uploadId)
        {
            try
            {
                int skiprec = 0;

                if (page > 1)
                {
                    skiprec = (page - 1) * pageSize;
                }
                var searchData = new PagedList<tblRCTOTHPaymentDeductionUploadDetail>();

                List<tblRCTOTHPaymentDeductionUploadDetail> list = new List<tblRCTOTHPaymentDeductionUploadDetail>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from emp in context.tblRCTOTHPaymentDeductionUploadDetail
                                 where emp.OTHPaymentDeductionUploadId == uploadId && emp.ValidationMessage == "Valid"
                                 select emp);

                    list = query
                                 .AsEnumerable()
                                 .Select((x, index) => new tblRCTOTHPaymentDeductionUploadDetail()
                                 {
                                     OTHPaymentDeductionUploadDetail = index + 1,
                                     EmployeeNumber = x.EmployeeNumber,
                                     OtherType = x.OtherType,
                                     HeadName = x.HeadName,
                                     ProjectNumber = x.ProjectNumber,
                                     Amount = x.Amount,
                                     ValidationMessage = x.ValidationMessage
                                 }).Skip(skiprec).Take(pageSize).ToList();

                    var queryinvalid = context.tblRCTOTHPaymentDeductionUploadDetail.Any(m => m.ValidationMessage != "Valid" && m.OTHPaymentDeductionUploadId == uploadId);
                    if (queryinvalid)
                    {
                        searchData.TotalRecords = 0;
                    }
                    else
                    {
                        searchData.TotalRecords = query.Count();
                    }

                    searchData.Data = list;
                }
                return searchData;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return null;
            }
        }

        public Tuple<bool, string> OTHPDUploadWFInit(int id, int logged_in_user, string Month)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblRCTOTHPaymentDeductionUploadMaster.Where(x => x.OTHUploadMasterId == id && x.Status == "Open").FirstOrDefault();
                    if (query != null)
                    {
                        string Type = "OTHUpload";

                        var fw = CoreAccount.ProcessTrigger(216, Type, 0, id, logged_in_user, "OTHUpMastrId", Month);
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Sent for approval";
                            query.Uptd_by = logged_in_user;
                            query.Uptd_Ts = DateTime.Now;
                            context.SaveChanges();
                            return Tuple.Create(true, "");
                        }
                        else
                            return Tuple.Create(false, fw.errorMsg);
                    }
                    return Tuple.Create(false, "Something went wrong please contact administrator");



                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(false, "Something went wrong please contact administrator");
            }
        }

        public STEViewModel GetAddorWithdrawCommitDetailsoth(int CommitRequestID, IOASDBEntities context, bool isView = false)
        {
            RecruitCommitRequestModel commitreqmodel = new RecruitCommitRequestModel();

            STEViewModel model = new STEViewModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();

            try
            {
                //using (var context = new IOASDBEntities())
                //{
                if (CommitRequestID > 0)
                {
                    var QryRecruitCommitReq = (from A in context.tblRCTCommitmentRequest
                                               where A.RecruitmentRequestId == CommitRequestID
                                               && (A.IsBookedFullRequestAmount == false || A.IsBookedFullRequestAmount == null)
                                               select new { A }).FirstOrDefault();
                    if (QryRecruitCommitReq == null)
                    {
                        model.STEId = -1;
                        return model;
                    }
                    if (QryRecruitCommitReq.A.Status != "Awaiting Commitment Booking")
                    {
                        model.STEId = -1;
                        model.Status = QryRecruitCommitReq.A.Status;
                        return model;
                    }
                    var empno = QryRecruitCommitReq.A.EmpNumber;
                    var refid = QryRecruitCommitReq.A.RefId;
                    var refnum = QryRecruitCommitReq.A.ReferenceNumber;
                    var appointype = QryRecruitCommitReq.A.AppointmentType;
                    var reqsttype = QryRecruitCommitReq.A.RequestType;
                    model.EmployeeID = empno;
                    var projectid = QryRecruitCommitReq.A.ProjectId;
                    if (appointype == "Change of Project" && reqsttype == "Withdraw Commitment")
                    {
                        var Aptype = QryRecruitCommitReq.A.TypeCode;
                        if (Aptype == "STE")
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          where A.ApplicationNumber == refnum
                                          select new { A }).FirstOrDefault();
                            var pjtid = QrySTE.A.ProjectId;
                            if (pjtid != projectid)
                            {
                                projectid = pjtid;
                            }
                        }
                        if (Aptype == "CON")
                        {
                            var QrySTE = (from A in context.tblRCTConsultantAppointment
                                          where A.ApplicationNumber == refnum
                                          select new { A }).FirstOrDefault();
                            var pjtid = QrySTE.A.ProjectId;
                            if (pjtid != projectid)
                            {
                                projectid = pjtid;
                            }
                        }
                        if (Aptype == "OSG")
                        {
                            var QrySTE = (from A in context.tblRCTOutsourcing
                                          where A.ApplicationNumber == refnum
                                          select new { A }).FirstOrDefault();
                            var pjtid = QrySTE.A.ProjectId;
                            if (pjtid != projectid)
                            {
                                projectid = pjtid;
                            }
                        }
                    }
                    if (appointype == "Cancel")
                    {
                        var empcommitquery = (from A in context.tblRCTCommitmentRequest
                                              where A.ReferenceNumber == refnum && (A.IsClosed_f == false || A.IsClosed_f == null) && A.ProjectId == projectid
                                              && A.CommitmentNumber != null && A.Status == "Commitment Booked"
                                              orderby A.RecruitmentRequestId descending
                                              select new { A }).FirstOrDefault();
                        var Apltype = empcommitquery.A.TypeCode;
                        var Refno = empcommitquery.A.ReferenceNumber;
                        var newempbookcommitid = empcommitquery.A.RecruitmentRequestId;
                        var odrid = QryRecruitCommitReq.A.OrderId;
                        if (Apltype == "STE")
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          where A.ApplicationNumber == refnum
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.STEID;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.STEID;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.EmployeeType = QrySTE.A.EmployeeCategory;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                // model.Comments = QrySTE.A.Comments;
                                // model.Note = QrySTE.A.Note;






                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                if (ProjectID != projectid)
                                {
                                    ProjectID = projectid ?? 0;
                                    model.ProjectId = projectid;
                                }
                                model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if(QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                var orderqry = (from A in context.tblOrder
                                                where A.OrderId == odrid
                                                select new { A }).FirstOrDefault();
                                if (orderqry != null)
                                {
                                    if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                    }
                                    else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = model.Appointmentstartdate;
                                    }
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                    if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    }
                                }
                                //}
                                if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                {
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                {
                                    var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                  where A.OTHPayDeductionId == refid
                                                  select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                    //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                }
                            }
                        }
                        if (Apltype == "CON")
                        {
                            var QrySTE = (from A in context.tblRCTConsultantAppointment
                                          where A.ApplicationNumber == refnum
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.ConsultantAppointmentId;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.ConsultantAppointmentId;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PermanentAddress;
                                //model.EmployeeType = Common.GetCodeControlnameCommon(QrySTE.A.EmployeeType ?? 0, "");
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                // model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                //model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerorCSIRStaff ?? 0;
                                //model.MsPhd = QrySTE.A.MsPhd ?? false;
                                //model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.Note = QrySTE.A.Note;
                                //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTCONPIJustificationDocument
                                                                  where c.ConsultantAppointmentId == STEID && c.Status != "InActive"
                                                                  orderby c.CONPIJustificationDocumentId
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.PIJustificationDocumentFile,
                                                                      FileName = c.PIJustificationDocumentName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTCONPIJustificationDocument
                                               where c.ConsultantAppointmentId == STEID
                                               orderby c.CONPIJustificationDocumentId descending
                                               select new { c.PIJustificationDescription, }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].PIJustificationDescription))
                                        {
                                            PICommands.Add(QryNote[i].PIJustificationDescription);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTCONNotes
                                               where c.ConsultantAppointmentId == STEID
                                               orderby c.CONNotesID descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                var Curr = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                if (ProjectID != projectid)
                                {
                                    ProjectID = projectid ?? 0;
                                    model.ProjectId = projectid;
                                }
                                model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                var orderqry = (from A in context.tblOrder
                                                where A.OrderId == odrid
                                                select new { A }).FirstOrDefault();
                                if (orderqry != null)
                                {
                                    if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                    }
                                    else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = model.Appointmentstartdate;
                                    }
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                    if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    }
                                }
                                if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                {
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                {
                                    var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                  where A.OTHPayDeductionId == refid
                                                  select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                    //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                }
                                //}
                            }
                        }
                        if (Apltype == "OSG")
                        {
                            var QrySTE = (from A in context.tblRCTOutsourcing
                                          where A.ApplicationNumber == refnum
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.OSGID;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.OSGID;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.EmployeeType = QrySTE.A.EmployeeCategory;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.Note = QrySTE.A.Note;
                                //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                                  where c.OSGID == STEID && c.Deleted_f != true
                                                                  orderby c.DocsID
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.DocsName,
                                                                      FileName = c.FileName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTOSGPIJustificationDoc
                                               where c.OSGID == STEID && c.Deleted_f != true
                                               orderby c.DocsID descending
                                               select new { c.Description, }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].Description))
                                        {
                                            PICommands.Add(QryNote[i].Description);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTOSGNotes
                                               where c.OSGNotesID == STEID
                                               orderby c.OSGId descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                if (ProjectID != projectid)
                                {
                                    ProjectID = projectid ?? 0;
                                    model.ProjectId = projectid;
                                }
                                model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                var orderqry = (from A in context.tblOrder
                                                where A.OrderId == odrid
                                                select new { A }).FirstOrDefault();
                                if (orderqry != null)
                                {
                                    if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                    }
                                    else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = model.Appointmentstartdate;
                                    }
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                    if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    }
                                }
                                if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                {
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                {
                                    var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                  where A.OTHPayDeductionId == refid
                                                  select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                    //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                }
                                //}
                            }

                        }
                        if (isView == true)
                        {
                            model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid, true);
                        }
                    }
                    else
                    {

                        var empcommitquery = (from A in context.tblRCTCommitmentRequest
                                              where (A.EmpNumber == empno || empno == null) && (A.IsClosed_f == null || A.IsClosed_f == false)
                                              && A.CommitmentNumber != null && A.Status == "Commitment Booked" && A.ProjectId == projectid
                                              orderby A.RecruitmentRequestId descending
                                              select new { A }).FirstOrDefault();
                        var Apltype = empcommitquery.A.TypeCode;
                        var Refno = empcommitquery.A.ReferenceNumber;
                        var newempbookcommitid = empcommitquery.A.RecruitmentRequestId;
                        var odrid = QryRecruitCommitReq.A.OrderId;

                        if (Apltype == "STE")
                        {
                            var QrySTE = (from A in context.tblRCTSTE
                                          where A.EmployeersID == empno
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.STEID;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.STEID;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.EmployeeType = QrySTE.A.EmployeeCategory;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                // model.Comments = QrySTE.A.Comments;
                                // model.Note = QrySTE.A.Note;
                                //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTSTEPIJustificationDocs
                                                                  where c.STEID == STEID && c.Deleted_f != true
                                                                  orderby c.DocsID
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.DocsName,
                                                                      FileName = c.FileName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTSTEPIJustificationDocs
                                               where c.STEID == STEID && c.Deleted_f != true
                                               orderby c.DocsID descending
                                               select new { c.Description, }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].Description))
                                        {
                                            PICommands.Add(QryNote[i].Description);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTSTENotes
                                               where c.STEID == STEID
                                               orderby c.NotesID descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                if (ProjectID != projectid)
                                {
                                    ProjectID = projectid ?? 0;
                                    model.ProjectId = projectid;
                                }
                                model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if(QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                var orderqry = (from A in context.tblOrder
                                                where A.OrderId == odrid
                                                select new { A }).FirstOrDefault();
                                if (orderqry != null)
                                {
                                    if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                    }
                                    else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = model.Appointmentstartdate;
                                    }
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                    if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    }
                                }
                                if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                {
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                }
                                //}
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                {
                                    var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                  where A.OTHPayDeductionId == refid
                                                  select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                    //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                }
                            }
                        }
                        if (Apltype == "CON")
                        {
                            var QrySTE = (from A in context.tblRCTConsultantAppointment
                                          where A.EmployeersID == empno
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.ConsultantAppointmentId;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.ConsultantAppointmentId;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PermanentAddress;
                                //model.EmployeeType = Common.GetCodeControlnameCommon(QrySTE.A.EmployeeType ?? 0, "");
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                // model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                //model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerorCSIRStaff ?? 0;
                                //model.MsPhd = QrySTE.A.MsPhd ?? false;
                                //model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.Note = QrySTE.A.Note;
                                //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTCONPIJustificationDocument
                                                                  where c.ConsultantAppointmentId == STEID && c.Status != "InActive"
                                                                  orderby c.CONPIJustificationDocumentId
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.PIJustificationDocumentFile,
                                                                      FileName = c.PIJustificationDocumentName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTCONPIJustificationDocument
                                               where c.ConsultantAppointmentId == STEID
                                               orderby c.CONPIJustificationDocumentId descending
                                               select new { c.PIJustificationDescription, }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].PIJustificationDescription))
                                        {
                                            PICommands.Add(QryNote[i].PIJustificationDescription);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTCONNotes
                                               where c.ConsultantAppointmentId == STEID
                                               orderby c.CONNotesID descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);

                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                if (ProjectID != projectid)
                                {
                                    ProjectID = projectid ?? 0;
                                    model.ProjectId = projectid;
                                }
                                model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                var orderqry = (from A in context.tblOrder
                                                where A.OrderId == odrid
                                                select new { A }).FirstOrDefault();
                                if (orderqry != null)
                                {
                                    if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                    }
                                    else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = model.Appointmentstartdate;
                                    }
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                    if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    }
                                }
                                if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                {
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                {
                                    var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                  where A.OTHPayDeductionId == refid
                                                  select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                    //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                }
                                //}
                            }
                        }
                        if (Apltype == "OSG")
                        {
                            var QrySTE = (from A in context.tblRCTOutsourcing
                                          where A.EmployeersID == empno
                                          select new { A }).FirstOrDefault();
                            if (QrySTE != null)
                            {
                                var STEID = QrySTE.A.OSGID;
                                model.Status = QrySTE.A.Status;
                                model.STEId = QrySTE.A.OSGID;
                                model.ApplicationNo = QrySTE.A.ApplicationNumber;
                                model.PresentAddress = QrySTE.A.PresentAddress;
                                model.EmployeeType = QrySTE.A.EmployeeCategory;
                                model.Name = Common.GetCodeControlnameCommon(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional") + QrySTE.A.Name;
                                model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                                model.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                                model.ApplicationEntryDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationEntryDate);
                                model.ApplicationReceiveDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ApplicationReceiveDate);
                                model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                                model.Fellowship = QrySTE.A.Fellowship ?? false;
                                model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff ?? 0;
                                model.MsPhd = QrySTE.A.MsPhd ?? false;
                                model.PhdDetail = QrySTE.A.PhdDetail;
                                model.ProjectId = QrySTE.A.ProjectId;
                                model.DesignationId = QrySTE.A.DesignationId;
                                int designationID = QrySTE.A.DesignationId ?? 0;
                                var designation = context.tblRCTDesignation.FirstOrDefault(m => m.DesignationId == designationID).Designation;
                                model.Designation = designation;
                                model.Medical = QrySTE.A.Medical ?? 0;
                                model.Appointmentstartdate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentStartdate);
                                model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.AppointmentEnddate);
                                model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                                model.CommitmentAmount = QrySTE.A.CommitmentAmount ?? 0;
                                model.Comments = QrySTE.A.Comments;
                                model.Note = QrySTE.A.Note;
                                //model.ProjectNumber = Common.GetProjectNameandNumber(QrySTE.A.ProjectId ?? 0);
                                model.PIJustificationDocuments = (from c in context.tblRCTOSGPIJustificationDoc
                                                                  where c.OSGID == STEID && c.Deleted_f != true
                                                                  orderby c.DocsID
                                                                  select new STEJustificationDoc()
                                                                  {
                                                                      FilePath = c.DocsName,
                                                                      FileName = c.FileName
                                                                  }).ToList();
                                List<string> PICommands = new List<string>();
                                var QryNote = (from c in context.tblRCTOSGPIJustificationDoc
                                               where c.OSGID == STEID && c.Deleted_f != true
                                               orderby c.DocsID descending
                                               select new { c.Description, }
                                           ).ToArray();
                                if (QryNote != null)
                                {
                                    for (int i = 0; i < QryNote.Count(); i++)
                                    {
                                        if (!string.IsNullOrEmpty(QryNote[i].Description))
                                        {
                                            PICommands.Add(QryNote[i].Description);
                                        }
                                    }
                                }
                                model.PIJustificationCommands = PICommands;
                                model.Notes = (from c in context.tblRCTOSGNotes
                                               where c.OSGNotesID == STEID
                                               orderby c.OSGId descending
                                               select new STENotes()
                                               {
                                                   PICommends = c.PICommends,
                                               }).ToList();
                                model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                                model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                                model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                                model.Qualification = Common.getQualificationWordings(STEID, Apltype);
                                model.Experience = Common.getExperienceInWordings(STEID, Apltype);
                                int ProjectID = QrySTE.A.ProjectId ?? 0;
                                if (ProjectID != projectid)
                                {
                                    ProjectID = projectid ?? 0;
                                    model.ProjectId = projectid;
                                }
                                model.ProjectNumber = Common.GetProjectNameandNumber(ProjectID);
                                model.ProjectDetailsModel = getProjectSummary(ProjectID);
                                model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid);
                                model.CommitReqModel.BasicPayAmount = QrySTE.A.Salary ?? 0;
                                model.CommitReqModel.CommitmentRequestId = CommitRequestID;
                                model.CommitReqModel.CommitmentBookedId = newempbookcommitid;
                                model.CommitReqModel.AddCommitmentAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.RequestedAmount = QryRecruitCommitReq.A.RequestedCommitmentAmount;
                                model.CommitReqModel.AllocationHead = empcommitquery.A.AllocationHead ?? "Staff";
                                model.CommitReqModel.AllocationHeadId = empcommitquery.A.AllocationHeadId ?? 1;
                                model.CommitReqModel.ReferenceNumber = Refno;
                                model.CommitReqModel.TypeofAppointment = QryRecruitCommitReq.A.AppointmentType;
                                model.CommitReqModel.RequestType = QryRecruitCommitReq.A.RequestType;
                                model.CommitReqModel.AppointmentTypeCode = Apltype;
                                //if (QryRecruitCommitReq.A.RequestType == "HRA")
                                //{
                                var orderqry = (from A in context.tblOrder
                                                where A.OrderId == odrid
                                                select new { A }).FirstOrDefault();
                                if (orderqry != null)
                                {
                                    if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate < orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate.Value.AddDays(-1));
                                    }
                                    else if (model.CommitReqModel.TypeofAppointment == "Change of Project" && QrySTE.A.AppointmentStartdate >= orderqry.A.FromDate)
                                    {
                                        model.AppointmentEndDate = model.Appointmentstartdate;
                                    }
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.FromDate);
                                    model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", orderqry.A.ToDate);
                                    model.CommitReqModel.OrderTypeId = orderqry.A.OrderType;
                                    if (model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                    {
                                        model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.ActualAppointmentStartDate);
                                        model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", orderqry.A.FromDate);
                                    }
                                }
                                if (orderqry == null && model.CommitReqModel.TypeofAppointment == "Verfication" && model.CommitReqModel.RequestType == "Withdraw Commitment")
                                {
                                    model.CommitReqModel.ActionStartDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualAppointmentStartDate);
                                    model.CommitReqModel.ActionEndDate = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.ActualDate);
                                }
                                if (model.CommitReqModel.TypeofAppointment == "OtherPayment" || model.CommitReqModel.TypeofAppointment == "OtherDeduction")
                                {
                                    var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                                  where A.OTHPayDeductionId == refid
                                                  select new { A }).FirstOrDefault();
                                    model.CommitReqModel.ActionStartDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.MonthandYear);
                                    //model.CommitReqModel.ActionEndDate = String.Format("{0:ddd dd-MMM-yyyy}", othqry.A.ToDate);
                                }
                                //}
                            }

                        }
                        if (isView == true)
                        {
                            model.CommitReqModel = getAddorWithdrawCommitreqdetls(newempbookcommitid, true);
                        }
                    }
                }
                //}
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public int UpdateAddCommitDetailsOth(STEViewModel model, int commitmentId, int logged_in_userId, IOASDBEntities context)
        {


            try
            {
                if (model.CommitReqModel.CommitmentRequestId > 0)
                {
                    var commit = (from prj in context.tblCommitment
                                  where prj.CommitmentId == commitmentId
                                  select prj).FirstOrDefault();
                    var comitrquestid = model.CommitReqModel.CommitmentRequestId;
                    var commitbookedid = model.CommitReqModel.CommitmentBookedId;
                    var commitrequest = (from prj in context.tblRCTCommitmentRequest
                                         where prj.RecruitmentRequestId == comitrquestid
                                         select prj).FirstOrDefault();

                    var typecode = commitrequest.TypeCode;
                    var empno = commitrequest.EmpNumber;
                    //appointmenttype = commitrequest.AppointmentType;
                    commitrequest.CommitmentNumber = commit.CommitmentNumber;
                    commitrequest.CommitmentCrtdBy = logged_in_userId;
                    commitrequest.CommitmentCrtdTS = DateTime.Now;
                    commitrequest.AllocationHeadId = model.CommitReqModel.AllocationHeadId;
                    var allocheadid = model.CommitReqModel.AllocationHeadId ?? 0;
                    commitrequest.AllocationHead = Common.getAllocationHeadName(allocheadid);
                    commitrequest.Remarks = model.CommitReqModel.Remarks;
                    commitrequest.BookedAmount = model.CommitReqModel.AddCommitmentAmount;
                    var reason = Common.getreason(model.CommitReqModel.Reason);
                    commitrequest.ReasonforClose = reason;
                    commitrequest.ReasonId = model.CommitReqModel.Reason;

                    commitrequest.IsBookedFullRequestAmount = true;
                    commitrequest.Status = "Commitment Booked";
                    context.SaveChanges();


                    #region log
                    tblRCTCommitmentBookLog log = new tblRCTCommitmentBookLog();
                    log.RecruitmentRequestId = model.CommitReqModel.CommitmentRequestId;
                    log.CommitmentNumber = commit.CommitmentNumber;
                    log.CommitmentCrtdBy = logged_in_userId;
                    log.CommitmentCrtdTS = DateTime.Now;
                    log.RequestedCommitmentAmount = commitrequest.RequestedCommitmentAmount;
                    log.BookedAmount = commitrequest.BookedAmount;
                    log.RequestType = commitrequest.RequestType;
                    log.RefNumber = commitrequest.ReferenceNumber;
                    context.tblRCTCommitmentBookLog.Add(log);
                    context.SaveChanges();
                    #endregion
                    if (commitrequest.AppointmentType == "OtherPayment" || commitrequest.AppointmentType == "OtherDeduction")
                    {
                        var refid = model.appid;
                        var othqry = (from A in context.tblRCTOTHPaymentDeduction
                                      where A.OTHPayDeductionId == refid
                                      select new { A }).FirstOrDefault();
                        if (othqry != null)
                        {
                            othqry.A.Status = "Completed";
                            context.SaveChanges();
                        }
                    }

                }

                return 1;
            }


            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return -1;
            }
        }

        public static int CloseThisCommitmentOTH(CommitmentResultModel model, int UserId, IOASDBEntities context)
        {
            try
            {
                bool isClosed = true;
                int result = 0;
                List<BillCommitmentDetailModel> commitbalance = new List<BillCommitmentDetailModel>();
                //using (var context = new IOASDBEntities())
                //{

                var CommQry = (from C in context.tblCommitment
                               join D in context.tblCommitmentDetails on C.CommitmentId equals D.CommitmentId
                               where C.Status == "Active" && C.CommitmentId == model.ComitmentId
                               select new
                               { C, D }).FirstOrDefault();
                if (commitbalance != null)
                {
                    decimal? AvailBal = CommQry.D.BalanceAmount;

                    if (model.LogTypeId == 2 && model.AddCloseAmt == AvailBal)
                    {
                        commitbalance = (from C in context.tblCommitment
                                         join D in context.tblCommitmentDetails on C.CommitmentId equals D.CommitmentId
                                         where C.Status == "Active" && C.CommitmentId == model.ComitmentId
                                         select new BillCommitmentDetailModel()
                                         {
                                             CommitmentDetailId = D.ComitmentDetailId,
                                             AvailableAmount = D.BalanceAmount,
                                             CommitmentId = C.CommitmentId,
                                         }).ToList();
                        CoreAccountsService _CAS = new CoreAccountsService();
                        bool commitdetls = _CAS.UpdateCommitmentBalance(commitbalance, false, false, UserId, 0, "", isClosed);
                        if (commitdetls == true)
                        {
                            var query = (from D in context.tblCommitment
                                         where (D.CommitmentId == model.ComitmentId)
                                         select D).FirstOrDefault();
                            if (query != null)
                            {
                                query.Status = "Closed";
                                query.UPDT_UserID = UserId;
                                query.UPDT_TS = DateTime.Now;
                                context.SaveChanges();
                                tblCommitmentClosedLog clLog = new tblCommitmentClosedLog();
                                clLog.CommitmentID = model.ComitmentId;
                                clLog.Reason = model.Reason;
                                clLog.Remarks = model.Remarks;
                                clLog.CRTD_By = UserId;
                                clLog.CRTD_TS = DateTime.Now;
                                context.tblCommitmentClosedLog.Add(clLog);
                                context.SaveChanges();
                                tblCommitmentAddandCloseLog clAddClose = new tblCommitmentAddandCloseLog();
                                clAddClose.LogType = model.LogTypeId;
                                clAddClose.CommitmentId = CommQry.C.CommitmentId;
                                clAddClose.CommitmentDetailId = CommQry.D.ComitmentDetailId;
                                clAddClose.PrevCommitmentAmount = CommQry.C.CommitmentAmount;
                                clAddClose.PrevCommtBalanceAmount = CommQry.C.CommitmentBalance;
                                clAddClose.PrevCommtDetBalanceAmount = CommQry.D.BalanceAmount;
                                clAddClose.Remarks = model.strRemarks;
                                clAddClose.Amount = model.AddCloseAmt;
                                clAddClose.ProjectId = model.ProjectId;
                                clAddClose.Reason = model.Reason;
                                clAddClose.HeadId = model.AllHeadId;
                                clAddClose.CRTD_BY = UserId;
                                clAddClose.CRTD_TS = DateTime.Now;
                                context.tblCommitmentAddandCloseLog.Add(clAddClose);
                                context.SaveChanges();
                                result = 1;

                            }
                        }
                    }
                    else
                    {

                        tblCommitmentAddandCloseLog clAddClose = new tblCommitmentAddandCloseLog();
                        clAddClose.LogType = model.LogTypeId;
                        clAddClose.CommitmentId = CommQry.C.CommitmentId;
                        clAddClose.CommitmentDetailId = CommQry.D.ComitmentDetailId;
                        clAddClose.PrevCommitmentAmount = CommQry.C.CommitmentAmount;
                        clAddClose.PrevCommtBalanceAmount = CommQry.C.CommitmentBalance;
                        clAddClose.PrevCommtDetBalanceAmount = CommQry.D.BalanceAmount;
                        clAddClose.Remarks = model.strRemarks;
                        clAddClose.Amount = model.AddCloseAmt;
                        clAddClose.ProjectId = model.ProjectId;
                        clAddClose.Reason = model.Reason;
                        clAddClose.HeadId = model.AllHeadId;
                        clAddClose.CRTD_BY = UserId;
                        clAddClose.CRTD_TS = DateTime.Now;
                        context.tblCommitmentAddandCloseLog.Add(clAddClose);
                        context.SaveChanges();
                        result = 1;
                    }
                    var Comqry = context.tblCommitment.Where(m => m.CommitmentId == model.ComitmentId).FirstOrDefault();
                    var ComDetqry = context.tblCommitmentDetails.Where(m => m.CommitmentId == model.ComitmentId).FirstOrDefault();
                    if (Comqry != null && ComDetqry != null)
                    {
                        if (model.LogTypeId == 2 && model.AddCloseAmt != AvailBal)
                        {
                            //Comqry.CommitmentAmount = (Comqry.CommitmentAmount - model.AddCloseAmt);
                            Comqry.CommitmentBalance = (Comqry.CommitmentBalance - model.AddCloseAmt);
                            context.SaveChanges();
                            //ComDetqry.Amount = (ComDetqry.Amount - model.AddCloseAmt);
                            ComDetqry.BalanceAmount = (ComDetqry.BalanceAmount - model.AddCloseAmt);
                            context.SaveChanges();
                        }
                        else if (model.LogTypeId == 1)
                        {
                            Comqry.CommitmentAmount = (Comqry.CommitmentAmount + model.AddCloseAmt);
                            Comqry.CommitmentBalance = (Comqry.CommitmentBalance + model.AddCloseAmt);
                            context.SaveChanges();
                            ComDetqry.Amount = (ComDetqry.Amount + model.AddCloseAmt);
                            ComDetqry.BalanceAmount = (ComDetqry.BalanceAmount + model.AddCloseAmt);
                            context.SaveChanges();
                        }

                    }
                }
                //return 

                //}
                return result;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public DataTable GetBulkUploadEmployeeList(int UploadId)
        {
            DataTable dtColumns = new DataTable();
            try
            {
                using (var connection = Common.getConnection())
                {
                    connection.Open();
                    var command = new System.Data.SqlClient.SqlCommand();
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = "select ROW_NUMBER() OVER(ORDER BY [EmployeeNumber]) AS [S. No.], b.PaymentDeductionMonthYear as Month,EmployeeNumber as [Employee Id],EmployeeName as [Employee Name] ,OtherType as Type, HeadName,ProjectNumber,CommitmentNumber,Amount,a.Remarks,DesignationName,ValidationMessage from tblRCTOTHPaymentDeductionUploadDetail a join tblRCTOTHPaymentDeductionUpload  b on a.OTHPaymentDeductionUploadId = b.OTHPaymentDeductionUploadId where b.OTHPaymentDeductionUploadId=" + UploadId;
                    var adapter = new System.Data.SqlClient.SqlDataAdapter(command);
                    var dataset = new DataSet();
                    adapter.Fill(dataset);
                    dtColumns = dataset.Tables[0];
                }
                return dtColumns;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Tuple<int, string> AddOthMasterUpload(OtherPaymentDeductionUploadModel model)
        {
            int res = 0;
            string Msg = string.Empty;
            try
            {

                using (var context = new IOASDBEntities())
                {
                    int masterid = 0;
                    if (model.OTHUploadMasterId == null)
                    {
                        tblRCTOTHPaymentDeductionUploadMaster addmaster = new tblRCTOTHPaymentDeductionUploadMaster();
                        addmaster.PaymentMonth = model.MonthandYear;
                        addmaster.FromDate = model.FromDate;
                        addmaster.ToDate = model.ToDate;
                        addmaster.OTHPaymentDeductionUploadId = model.UploadId;
                        addmaster.Status = "Open";
                        addmaster.Crtd_Ts = DateTime.Now;
                        addmaster.Crtd_By = model.UserId;
                        context.tblRCTOTHPaymentDeductionUploadMaster.Add(addmaster);
                        context.SaveChanges();
                        masterid = addmaster.OTHUploadMasterId;

                    }
                    else
                    {
                        var updatemaster = context.tblRCTOTHPaymentDeductionUploadMaster.Where(x => x.OTHUploadMasterId == model.OTHUploadMasterId).FirstOrDefault();
                        if (updatemaster != null)
                        {
                            updatemaster.PaymentMonth = model.MonthandYear;
                            updatemaster.FromDate = model.FromDate;
                            updatemaster.ToDate = model.ToDate;
                            updatemaster.OTHPaymentDeductionUploadId = model.UploadId;
                            updatemaster.Uptd_Ts = DateTime.Now;
                            updatemaster.Uptd_by = model.UserId;
                            context.SaveChanges();
                        }
                        masterid = model.OTHUploadMasterId ?? 0;
                    }
                    res = 1;
                    var checkValidStatus = context.tblRCTOTHPaymentDeductionUploadDetail.Any(m => m.ValidationMessage != "Valid" && m.OTHPaymentDeductionUploadId == model.UploadId);
                    if (!checkValidStatus)
                    {
                        var iniatSatus = OTHPDUploadWFInit(masterid, model.UserId ?? 0, model.MonthandYear);
                        Msg = iniatSatus.Item2;
                        res = 2;
                    }

                    return Tuple.Create(res, Msg);
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(-1, "Something went wrong please contact administrator");
            }
        }

        public static SearchOTHUploadMaster GetOtherPaymentUploadList(SearchOTHUploadMaster model, int page, int pageSize, DateFilterModel FormStrDate, DateFilterModel ToStrDate)
        {
            SearchOTHUploadMaster searchdata = new SearchOTHUploadMaster();
            List<OtherPaymentDeductionUploadModel> list = new List<OtherPaymentDeductionUploadModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                if (FormStrDate.to != null)
                    FormStrDate.to = FormStrDate.to.Value.Date.AddDays(1).AddTicks(-2);
                if (ToStrDate.to != null)
                    ToStrDate.to = ToStrDate.to.Value.Date.AddDays(1).AddTicks(-2);
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from oth in context.tblRCTOTHPaymentDeductionUploadMaster.AsNoTracking()
                                    join othm in context.tblRCTOTHPaymentDeductionUpload on oth.OTHPaymentDeductionUploadId equals othm.OTHPaymentDeductionUploadId
                                    select new OtherPaymentDeductionUploadModel()
                                    {
                                        OTHUploadMasterId = oth.OTHUploadMasterId,
                                        MonthandYear = oth.PaymentMonth,
                                        FromDate = oth.FromDate,
                                        ToDate = oth.ToDate,
                                        Status = oth.Status,
                                        UploadId = oth.OTHPaymentDeductionUploadId,
                                    });
                    var predicate = PredicateBuilder.BaseAnd<OtherPaymentDeductionUploadModel>();
                    if (!string.IsNullOrEmpty(model.MonthandYear))
                        predicate = predicate.And(d => d.MonthandYear.Contains(model.MonthandYear));
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status.Contains(model.Status));

                    var query = prequery.Where(predicate).OrderByDescending(m => m.OTHUploadMasterId).Skip(skiprec).Take(pageSize).ToList();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new OtherPaymentDeductionUploadModel()
                            {

                                SNo = sno + i,
                                OTHUploadMasterId = query[i].OTHUploadMasterId,
                                MonthandYear = query[i].MonthandYear,
                                Status = query[i].Status,
                                UploadId = query[i].UploadId,
                                FormStrDate = String.Format("{0:s}", query[i].FromDate),
                                ToStrDate = String.Format("{0:s}", query[i].ToDate),
                            });
                        }
                    }
                    searchdata.TotalRecords = prequery.Where(predicate).Count();
                    searchdata.TotalList = list;
                    return searchdata;
                }

            }
            catch (Exception ex)
            {
                return searchdata;
            }
        }

        #endregion

        #region Update Details

        public bool UpdateRelieveDetails(int orderid, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var query = (from o in context.tblOrder
                                         from od in context.tblOrderDetail
                                         from vw in context.vw_RCTOverAllApplicationEntry
                                         where o.OrderId == od.OrderId && o.OrderId == vw.OrderId && o.Status == "Relieving initiated"
                                         && o.OrderId == orderid
                                         select new { o, od, vw }).FirstOrDefault();
                            if (query != null)
                            {
                                int AppointmentId = query.o.AppointmentId ?? 0;
                                string Category = query.vw.Category;
                                DateTime? RelieveDate = query.o.FromDate;
                                var commitmentnumber = string.Empty;

                                if (!Common.EmployeeHistoryLog(AppointmentId, Category, orderid))
                                    return false;

                                if (!PostOfferDetails(AppointmentId, Category, "Order", logged_in_userId, orderid))
                                    return false;

                                if (RelieveDate <= DateTime.Now.Date)
                                {
                                    query.o.isUpdated = true;
                                    context.Database.ExecuteSqlCommand("SPRCTApplicationUpdate @p0,@p1,@p2,@p3", query.o.AppointmentId, query.vw.Category, orderid, logged_in_userId);
                                    context.Database.ExecuteSqlCommand("SPRCTEmployeeEffectHistoryLog  @p0", orderid);
                                    if (Category == "CON")
                                    {
                                        var querymast = context.tblRCTConsultantAppointment.FirstOrDefault(m => m.ConsultantAppointmentId == query.o.AppointmentId);
                                        if (querymast != null)
                                        {
                                            querymast.Status = "Relieved";
                                            querymast.RelieveDate = query.o.FromDate;
                                            querymast.AppointmentEnddate = query.o.FromDate;
                                            querymast.UptdTs = DateTime.Now;
                                            querymast.UptdUser = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                    }
                                    else if (Category == "STE")
                                    {
                                        var querymast = context.tblRCTSTE.FirstOrDefault(m => m.STEID == query.o.AppointmentId);
                                        if (querymast != null)
                                        {
                                            querymast.Status = "Relieved";
                                            querymast.RelieveDate = query.o.FromDate;
                                            querymast.AppointmentEnddate = query.o.FromDate;
                                            querymast.UptdTs = DateTime.Now;
                                            querymast.UptdUser = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                    }
                                    else if (Category == "OSG")
                                    {
                                        var querymast = context.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == query.o.AppointmentId);
                                        if (querymast != null)
                                        {
                                            querymast.Status = "Relieved";
                                            querymast.RelieveDate = query.o.FromDate;
                                            querymast.AppointmentEnddate = query.o.FromDate;
                                            querymast.UptdTs = DateTime.Now;
                                            querymast.UptdUser = logged_in_userId;
                                            context.SaveChanges();
                                        }
                                    }

                                    if (query.o.WithdrawAmmount > 0 && (query.od.CommitmentOption == "1" || query.od.CommitmentOption == "3"))
                                    {
                                        var withdrawamount = query.o.WithdrawAmmount;

                                        if (query.od.CommitmentOption == "3")
                                        {
                                            //var commitmentnumber = query.vw.CommitmentNumber;
                                            var withdrawreq = (from A in context.tblRCTCommitmentRequest
                                                               where A.ReferenceNumber == query.vw.ApplicationNo && (A.IsClosed_f == false || A.IsClosed_f == null) && A.ProjectId == query.vw.ProjectId
                                                               && A.CommitmentNumber != null && A.Status == "Commitment Booked"
                                                               orderby A.RecruitmentRequestId descending
                                                               select A).FirstOrDefault();
                                            if (withdrawreq != null)
                                                commitmentnumber = withdrawreq.CommitmentNumber;
                                            var CommitmentBalance = (from c in context.tblCommitment
                                                                     where c.CommitmentNumber == commitmentnumber
                                                                     select c.CommitmentBalance).FirstOrDefault();
                                            withdrawamount = CommitmentBalance;
                                        }
                                        tblRCTCommitmentRequest withdraw = new tblRCTCommitmentRequest();
                                        withdraw.ReferenceNumber = query.vw.ApplicationNo;
                                        withdraw.OrderId = orderid;
                                        withdraw.AppointmentType = "Relieving";
                                        withdraw.TypeCode = query.vw.Category;
                                        withdraw.CandidateName = query.vw.CandidateName;
                                        withdraw.CandidateDesignation = query.vw.PostRecommended;
                                        withdraw.ProjectId = query.vw.ProjectId;
                                        withdraw.OrderNumber = query.o.OrderNo;
                                        withdraw.ProjectNumber = Common.getprojectnumber(query.vw.ProjectId ?? 0);
                                        decimal Salary = 0;
                                        if (query.o.AppointmentType == 2)
                                        {
                                            Salary += query.vw.BasicPay ?? 0;
                                            Salary += query.vw.HRA ?? 0;
                                            Salary += query.vw.MedicalType == 1 ? (query.vw.MedicalAmmount ?? 0) : 0;
                                        }
                                        else
                                            Salary = query.vw.BasicPay ?? 0;
                                        withdraw.TotalSalary = Salary;
                                        withdraw.RequestedCommitmentAmount = query.o.WithdrawAmmount;
                                        withdraw.Status = "Awaiting Commitment Booking";
                                        withdraw.RequestType = "Withdraw Commitment";
                                        withdraw.EmpNumber = query.vw.EmployeersID;
                                        withdraw.Crtd_TS = DateTime.Now;
                                        withdraw.Crtd_UserId = logged_in_userId;
                                        context.tblRCTCommitmentRequest.Add(withdraw);
                                        context.SaveChanges();
                                    }
                                }
                                if (query.o.InitByPI_f == true && query.od.NOCDocSubmitted != true)
                                {
                                    int ordreqid = query.o.OrderRequestId ?? 0;
                                    bool nocf = context.tblRCTOrderRequest.Where(x => x.OrderRequestId == ordreqid).Select(x => x.NoDues_f).FirstOrDefault() ?? false;
                                    if (nocf == false)
                                    {
                                        query.o.Status = "Completed";
                                    }
                                    else
                                    {
                                        query.o.Status = "Open";
                                    }
                                }
                                else
                                {
                                    if (query.od.NOCDocSubmitted)
                                        query.o.Status = "Completed";
                                    else
                                        query.o.Status = "Open";
                                }
                                query.o.UpdtUser = logged_in_userId;
                                query.o.UpdtTS = DateTime.Now;
                                context.SaveChanges();
                                transaction.Commit();
                                PostOrderStatusLog(orderid, "Relieving initiated", query.o.Status, logged_in_userId);
                            }
                            return true;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        public bool UpdateCOPDetails(int orderid, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var query = (from o in context.tblOrder
                                         from od in context.tblOrderDetail
                                         from vw in context.vw_RCTOverAllApplicationEntry
                                         where o.AppointmentId == vw.ApplicationId && o.AppointmentType == vw.AppointmentType
                                         && vw.ApplicationType == "New" && o.OrderId == od.OrderId && o.OrderId == orderid
                                         select new { o, vw, od.WithdrawnFullAmount }).FirstOrDefault();
                            if (query != null)
                            {
                                var nofund_f = Common.IsAvailablefundProject(query.o.NewProjectId ?? 0, query.o.CommitmentAmmount ?? 0, query.vw.TypeofAppointmentinInt);

                                if (query.vw.CSIRStaffPayMode == 2)
                                {
                                    query.o.Status = "Awaiting Committee Approval";
                                }
                                else if (query.vw.TypeofAppointmentinInt == 4 && nofund_f)
                                {
                                    query.o.isGovAgencyFund = true;
                                    query.o.Status = "Awaiting Committee Approval";
                                }
                                else
                                {
                                    query.o.Status = "Awaiting Commitment Booking";

                                    tblRCTCommitmentRequest withdraw = new tblRCTCommitmentRequest();
                                    withdraw.ReferenceNumber = query.vw.ApplicationNo;
                                    withdraw.OrderNumber = query.o.OrderNo;
                                    withdraw.OrderId = orderid;
                                    withdraw.AppointmentType = "Change of Project";
                                    withdraw.TypeCode = query.vw.Category;
                                    withdraw.CandidateName = query.vw.CandidateName;
                                    withdraw.CandidateDesignation = query.vw.PostRecommended;
                                    withdraw.ProjectId = query.o.OldProjectId;
                                    withdraw.ProjectNumber = Common.getprojectnumber(query.o.OldProjectId ?? 0);
                                    withdraw.TotalSalary = query.vw.BasicPay;
                                    withdraw.RequestedCommitmentAmount = query.o.WithdrawAmmount;
                                    decimal Balance = Common.GetCommitmentBalance(query.vw.CommitmentNumber);
                                    if (query.WithdrawnFullAmount == true)
                                        withdraw.RequestedCommitmentAmount = Balance;
                                    withdraw.Status = "Awaiting Commitment Booking";
                                    withdraw.RequestType = "Withdraw Commitment";
                                    withdraw.EmpNumber = query.vw.EmployeersID;
                                    withdraw.Crtd_TS = DateTime.Now;
                                    withdraw.Crtd_UserId = loggedInUser;
                                    context.tblRCTCommitmentRequest.Add(withdraw);

                                    tblRCTCommitmentRequest NewCommitment = new tblRCTCommitmentRequest();
                                    NewCommitment.ReferenceNumber = query.vw.ApplicationNo;
                                    NewCommitment.OrderNumber = query.o.OrderNo;
                                    NewCommitment.OrderId = orderid;
                                    NewCommitment.AppointmentType = "Change of Project";
                                    NewCommitment.TypeCode = query.vw.Category;
                                    NewCommitment.CandidateName = query.vw.CandidateName;
                                    NewCommitment.CandidateDesignation = query.vw.PostRecommended;
                                    NewCommitment.ProjectId = query.o.NewProjectId;
                                    NewCommitment.ProjectNumber = Common.getprojectnumber(query.o.NewProjectId ?? 0);
                                    NewCommitment.TotalSalary = query.o.Basic;
                                    NewCommitment.RequestedCommitmentAmount = query.o.CommitmentAmmount;
                                    NewCommitment.Status = "Awaiting Commitment Booking";
                                    NewCommitment.RequestType = "New Commitment";
                                    NewCommitment.EmpNumber = query.vw.EmployeersID;
                                    NewCommitment.EmpId = loggedInUser;
                                    NewCommitment.Crtd_TS = DateTime.Now;
                                    NewCommitment.Crtd_UserId = loggedInUser;
                                    context.tblRCTCommitmentRequest.Add(NewCommitment);
                                }
                                query.o.UpdtUser = loggedInUser;
                                query.o.UpdtTS = DateTime.Now;
                                context.SaveChanges();
                                transaction.Commit();
                                PostOrderStatusLog(orderid, "Sent for approval", query.o.Status, loggedInUser);
                                return true;
                            }
                            return false;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        public bool UpdateExtensionDetails(int orderid, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var mastQuery = (from vw in context.vw_RCTOverAllApplicationEntry
                                             from o in context.tblOrder
                                             where vw.ApplicationId == o.AppointmentId && vw.AppointmentType == o.AppointmentType
                                             && vw.ApplicationType == "New" && o.OrderId == orderid
                                             select new { o, vw.CSIRStaffPayMode, vw.BasicPay, vw.Category, vw.ApplicationNo, vw.CandidateName, vw.PostRecommended, vw.EmployeersID, vw.TypeofAppointmentinInt }).FirstOrDefault();
                            if (mastQuery != null)
                            {
                                var nofund_f = Common.IsAvailablefundProject(mastQuery.o.OldProjectId ?? 0, mastQuery.o.CommitmentAmmount ?? 0, mastQuery.TypeofAppointmentinInt);

                                if (mastQuery.CSIRStaffPayMode == 2 && mastQuery.o.Basic < mastQuery.BasicPay)//Payment through agencies
                                {
                                    mastQuery.o.Status = "Awaiting Committee Approval";
                                }
                                else if (mastQuery.CSIRStaffPayMode == 2 && mastQuery.o.Basic >= mastQuery.BasicPay)//Payment through agencies
                                {
                                    var othQuery = context.tblRCTOTHPaymentDeduction.FirstOrDefault(m => m.OrderId == orderid && m.Status == "Open");
                                    if (othQuery != null)
                                        othQuery.Status = "Completed";
                                    mastQuery.o.Status = "Completed";
                                }
                                else if (mastQuery.TypeofAppointmentinInt == 4 && nofund_f && mastQuery.BasicPay > mastQuery.o.Basic)
                                {
                                    mastQuery.o.isGovAgencyFund = true;
                                    //if (mastQuery.BasicPay > mastQuery.o.Basic)
                                    mastQuery.o.Status = "Awaiting Committee Approval";
                                    //else
                                    //    mastQuery.o.Status = "Open";
                                }
                                else
                                {
                                    mastQuery.o.Status = "Awaiting Commitment Booking";

                                    tblRCTCommitmentRequest Commitment = new tblRCTCommitmentRequest();
                                    Commitment.ReferenceNumber = mastQuery.ApplicationNo;
                                    Commitment.OrderNumber = mastQuery.o.OrderNo;
                                    Commitment.OrderId = orderid;
                                    Commitment.AppointmentType = "Extension";
                                    Commitment.TypeCode = mastQuery.Category;
                                    Commitment.CandidateName = mastQuery.CandidateName;
                                    Commitment.CandidateDesignation = mastQuery.PostRecommended;
                                    Commitment.ProjectId = mastQuery.o.NewProjectId;
                                    Commitment.ProjectNumber = Common.getprojectnumber(mastQuery.o.NewProjectId ?? 0);
                                    Commitment.TotalSalary = mastQuery.o.Basic;
                                    Commitment.RequestedCommitmentAmount = mastQuery.o.CommitmentAmmount;
                                    Commitment.Status = "Awaiting Commitment Booking";
                                    Commitment.RequestType = "Add Commitment";
                                    Commitment.EmpNumber = mastQuery.EmployeersID;
                                    Commitment.Crtd_TS = DateTime.Now;
                                    Commitment.Crtd_UserId = loggedInUser;
                                    context.tblRCTCommitmentRequest.Add(Commitment);
                                }
                                mastQuery.o.UpdtUser = loggedInUser;
                                mastQuery.o.UpdtTS = DateTime.Now;
                                mastQuery.o.isExtended = true;
                                context.SaveChanges();
                                transaction.Commit();
                                if (mastQuery.o.Status == "Completed")
                                {
                                    Common.EmployeeHistoryLog(mastQuery.o.AppointmentId ?? 0, mastQuery.Category, mastQuery.o.OrderId);
                                    PostOfferDetails(mastQuery.o.AppointmentId ?? 0, mastQuery.Category, "Order", loggedInUser, orderid);
                                }
                                PostOrderStatusLog(orderid, "Sent for approval", mastQuery.o.Status, loggedInUser);
                                return true;
                            }
                            return false;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        public bool UpdateEnhancementDetails(int orderid, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            var query = (from o in context.tblOrder
                                         from od in context.tblOrderDetail
                                         from s in context.vw_RCTOverAllApplicationEntry
                                         from d in context.tblRCTDesignation
                                         where s.ApplicationId == o.AppointmentId && s.AppointmentType == o.AppointmentType && s.ApplicationType == "New"
                                         && o.OrderId == od.OrderId && o.NewDesignation == d.DesignationId && o.Status == "Sent for approval" && o.OrderId == orderid
                                         select new
                                         {
                                             o,
                                             od.WithdrawCommitment,
                                             d.Designation,
                                             s.ApplicationNo,
                                             s.EmployeersID,
                                             s.CandidateName,
                                             s.Category,
                                             s.ProjectId,
                                             s.AppointmentEnddate,
                                             s.CSIRStaffPayMode,
                                             s.AppointmentStartdate,
                                             s.BasicPay,
                                             s.TypeofAppointmentinInt
                                         }).FirstOrDefault();
                            if (query != null)
                            {
                                string RequestType = string.Empty;
                                int oldprojectid = query.ProjectId ?? 0;
                                int newprojectid = query.o.NewProjectId ?? 0;
                                bool nofund_f = false;
                                if (!query.WithdrawCommitment && query.o.WithdrawAmmount > 0)
                                    nofund_f = Common.IsAvailablefundProject(newprojectid, query.o.WithdrawAmmount ?? 0, query.TypeofAppointmentinInt);

                                if (oldprojectid != newprojectid)
                                    RequestType = "New Commitment";
                                else if (query.WithdrawCommitment == true)
                                    RequestType = "Withdraw Commitment";
                                else
                                    RequestType = "Add Commitment";


                                if (query.CSIRStaffPayMode == 2)
                                {
                                    if (query.o.FromDate >= query.AppointmentStartdate && query.o.ToDate <= query.AppointmentEnddate && query.o.Basic > query.BasicPay && query.o.OldProjectId == query.o.NewProjectId && query.o.NewDesignation != null && query.o.OldDesignation == query.o.NewDesignation)
                                        query.o.Status = "Completed";
                                    else
                                        query.o.Status = "Awaiting Committee Approval";
                                }
                                else if (query.TypeofAppointmentinInt == 4 && (RequestType == "Add Commitment" || RequestType == "New Commitment") && nofund_f && (query.o.Basic < query.BasicPay || query.o.OldProjectId != query.o.NewProjectId || query.o.OldDesignation != query.o.NewDesignation))
                                {
                                    query.o.isGovAgencyFund = true;
                                    //if (query.o.FromDate >= query.AppointmentStartdate && query.o.ToDate <= query.AppointmentEnddate && query.o.Basic > query.BasicPay && query.o.OldProjectId == query.o.NewProjectId && query.o.NewDesignation != null && query.o.OldDesignation == query.o.NewDesignation)
                                    //    query.o.Status = "Open";
                                    //else
                                    query.o.Status = "Awaiting Committee Approval";
                                }
                                else
                                {
                                    query.o.Status = "Awaiting Commitment Booking";
                                    if (query.o.WithdrawAmmount > 0)
                                    {
                                        tblRCTCommitmentRequest addcommit = new tblRCTCommitmentRequest();
                                        addcommit.ReferenceNumber = query.ApplicationNo;
                                        addcommit.OrderNumber = query.o.OrderNo;
                                        addcommit.OrderId = orderid;
                                        addcommit.AppointmentType = "Enhancement";
                                        addcommit.TypeCode = query.Category;
                                        addcommit.CandidateName = query.CandidateName;
                                        addcommit.CandidateDesignation = query.Designation;
                                        addcommit.ProjectId = newprojectid;
                                        addcommit.ProjectNumber = Common.getprojectnumber(newprojectid);
                                        addcommit.TotalSalary = query.o.Basic;
                                        addcommit.RequestType = RequestType;
                                        addcommit.RequestedCommitmentAmount = query.o.WithdrawAmmount;
                                        addcommit.Status = "Awaiting Commitment Booking";
                                        addcommit.EmpNumber = query.EmployeersID;
                                        addcommit.Crtd_TS = DateTime.Now;
                                        addcommit.Crtd_UserId = loggedInUser;
                                        context.tblRCTCommitmentRequest.Add(addcommit);
                                    }
                                    else if (query.o.OldDesignation != query.o.NewDesignation && query.o.WithdrawAmmount == 0)
                                        query.o.Status = "Awaiting Committee Approval";
                                }
                                if (query.AppointmentEnddate < query.o.FromDate)
                                    query.o.isExtended = true;
                                query.o.UpdtUser = loggedInUser;
                                query.o.UpdtTS = DateTime.Now;
                                context.SaveChanges();
                                transaction.Commit();
                                if (query.o.Status == "Completed")
                                {
                                    Common.EmployeeHistoryLog(query.o.AppointmentId ?? 0, query.Category, query.o.OrderId);
                                    PostOfferDetails(query.o.AppointmentId ?? 0, query.Category, "Order", loggedInUser, orderid);
                                }
                                PostOrderStatusLog(orderid, "Sent for approval", query.o.Status, loggedInUser);
                                return true;
                            }
                            return false;
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return false;
            }
        }

        #endregion

        #region OSGUploadDocument

        public static List<MasterlistviewModel> GettypeOfDocumentList(int id)
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkAppointment = (from osg in context.tblRCTOutsourcing
                                            where osg.OSGID == id && (string.IsNullOrEmpty(osg.OfficeOrder) || string.IsNullOrEmpty(osg.OfferLetter))
                                            select new { osg.OSGID, osg.ApplicationNumber, }).FirstOrDefault();
                    if (checkAppointment != null)
                    {
                        list.Add(new MasterlistviewModel()
                        {
                            id = id,
                            name = "New Appointment" + " - " + checkAppointment.ApplicationNumber
                        });
                    }

                    int[] ordertype = { 1, 2, 3, 4, 9 };
                    var checkOrder = (from or in context.tblOrder
                                      join ord in context.tblOrderDetail on or.OrderId equals ord.OrderId
                                      join ofd in context.tblRCTOfferDetails on or.OrderId equals ofd.OrderId
                                      join om in context.tblOrderMaster on or.OrderType equals om.CodeID
                                      where ((ofd.OfferCategory == "OfferLetter" && string.IsNullOrEmpty(ord.OfferLetter)) || ((ofd.OfferCategory == "Order" || ofd.OfferCategory == "OfficeOrder") && string.IsNullOrEmpty(ord.OfficeOrder)))
                                      && or.AppointmentId == id && or.AppointmentType == 3 && ordertype.Contains(om.CodeID)
                                      group or by new
                                      {
                                          or.OrderId,
                                          om.CodeDescription,
                                          or.OrderNo,
                                          or.FromDate,
                                          or.ToDate
                                      } into gp
                                      select new
                                      {
                                          gp.Key.OrderId,
                                          Code = gp.Key.CodeDescription,
                                          gp.Key.OrderNo,
                                          gp.Key.FromDate,
                                          gp.Key.ToDate
                                      }).ToList();
                    if (checkOrder.Count > 0)
                    {
                        for (int i = 0; i < checkOrder.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = checkOrder[i].OrderId,
                                name = checkOrder[i].Code + " - (" + string.Format("{0:dd-MMMM-yyyy}", checkOrder[i].FromDate) + " - " + string.Format("{0:dd-MMMM-yyyy}", checkOrder[i].ToDate) + ")"
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static List<OSGAttachmentModel> GetAttachementList(int id, string appointmentname)
        {
            List<OSGAttachmentModel> list = new List<OSGAttachmentModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (appointmentname.Contains("New Appointment"))
                    {
                        var queryNew = (from osg in context.tblRCTOutsourcing
                                        where osg.OSGID == id && (string.IsNullOrEmpty(osg.OfficeOrder) || string.IsNullOrEmpty(osg.OfferLetter))
                                        select new { osg.OSGID, osg.OfferLetter, osg.OfficeOrder }).FirstOrDefault();
                        if (queryNew != null)
                        {
                            if (string.IsNullOrEmpty(queryNew.OfferLetter))
                            {
                                list.Add(new OSGAttachmentModel()
                                {
                                    DocumentId = id,
                                    DocumentType = "OfferLetter"
                                });
                            }
                            if (string.IsNullOrEmpty(queryNew.OfficeOrder))
                            {
                                list.Add(new OSGAttachmentModel()
                                {
                                    DocumentId = id,
                                    DocumentType = "OfficeOrder"
                                });
                            }
                        }
                    }
                    else
                    {
                        int[] ordertype = { 1, 2, 3, 4, 9 };
                        var query = (from or in context.tblOrder
                                     join ord in context.tblOrderDetail on or.OrderId equals ord.OrderId
                                     join ofd in context.tblRCTOfferDetails on or.OrderId equals ofd.OrderId
                                     join om in context.tblOrderMaster on or.OrderType equals om.CodeID
                                     where (ofd.OfferCategory == "OfferLetter" && string.IsNullOrEmpty(ord.OfferLetter) || ((ofd.OfferCategory == "Order" || ofd.OfferCategory == "OfficeOrder") && string.IsNullOrEmpty(ord.OfficeOrder)))
                                     && or.OrderId == id && ordertype.Contains(om.CodeID)
                                     select new { or.OrderId, ofd.OfferCategory }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                list.Add(new OSGAttachmentModel()
                                {
                                    DocumentId = query[i].OrderId,
                                    DocumentType = query[i].OfferCategory
                                });
                            }
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static int AddAttachement(OutSourcingDocumentUpload model)
        {
            int res = 0;
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.OSGid != null)
                        {
                            if (model.DocumentDetail != null)
                            {
                                foreach (var item in model.DocumentDetail)
                                {
                                    var query = (from osg in context.tblRCTOutsourcing
                                                 where osg.OSGID == item.DocumentId && model.AppointmentTypeName.Contains("New Appointment")
                                                 select osg).FirstOrDefault();
                                    if (query != null)
                                    {
                                        if (item.DocumentType == "OfferLetter")
                                        {
                                            if (query.OfferLetter == null && item.Document != null)
                                            {
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + item.Document.FileName;
                                                item.Document.UploadFile("RCTOfferLetter", docName);
                                                query.OfferLetter = docName;
                                                context.SaveChanges();
                                            }
                                        }
                                        if (item.DocumentType == "OfficeOrder" && query != null)
                                        {
                                            if (query.OfficeOrder == null && item.Document != null)
                                            {
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + item.Document.FileName;
                                                item.Document.UploadFile("RCTOfferLetter", docName);
                                                query.OfficeOrder = docName;
                                                context.SaveChanges();
                                            }
                                        }

                                    }


                                    var queryOrder = (from or in context.tblOrder
                                                      join ord in context.tblOrderDetail on or.OrderId equals ord.OrderId
                                                      where or.OrderId == item.DocumentId && !model.AppointmentTypeName.Contains("New Appointment")
                                                      select new { ord }).FirstOrDefault();
                                    if (queryOrder != null && item.Document != null)
                                    {
                                        if (item.DocumentType == "OfferLetter" && queryOrder.ord.OfferLetter == null)
                                        {
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + item.Document.FileName;
                                            item.Document.UploadFile("RCTOfferLetter", docName);
                                            queryOrder.ord.OfferLetter = docName;
                                            context.SaveChanges();
                                        }
                                        else if (item.DocumentType == "OfficeOrder" && queryOrder.ord.OfficeOrder == null)
                                        {
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + item.Document.FileName;
                                            item.Document.UploadFile("RCTOfferLetter", docName);
                                            queryOrder.ord.OfficeOrder = docName;
                                            context.SaveChanges();
                                        }
                                        else if (item.DocumentType == "Order" && queryOrder.ord.OfficeOrder == null)
                                        {
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + item.Document.FileName;
                                            item.Document.UploadFile("RCTOfferLetter", docName);
                                            queryOrder.ord.OfficeOrder = docName;
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                res = 1;
                                transaction.Commit();
                            }
                        }
                        return res;
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        res = -1;
                        return res;
                    }
                }
            }
        }

        #endregion

        public static string IITExperienceInWording(string EmployeeNo)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int?[] exptype = new int?[] { 0, 2, 3, 4 };
                    TimeSpan? span = DateTime.Now.Date - DateTime.Now.Date;

                    context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeNo && exptype.Contains(x.OrderTypeId) && x.IsCanceled != true && x.isExtended == true)
                    .OrderByDescending(x => new { x.OrderId, x.OrderDate, x.EffectiveFrom }).Select(m => new
                    {
                        m.ApplicationId,
                        m.EffectiveFrom,
                        m.EffectiveTo
                    }).ToList().ForEach(m =>
                    {
                        if (context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeNo && x.OrderTypeId == 9 && x.ApplicationId == m.ApplicationId && x.IsCanceled != true).Any())
                        {
                            var relievedemp = context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeNo && x.OrderTypeId == 9 && x.ApplicationId == m.ApplicationId && x.IsCanceled != true).Select(x => x.EffectiveFrom).FirstOrDefault();
                            if (m.EffectiveFrom <= relievedemp && m.EffectiveTo >= relievedemp)
                                span += relievedemp.Value.AddDays(+1) - m.EffectiveFrom;
                            else
                                span += m.EffectiveTo.Value.AddDays(+1) - m.EffectiveFrom;
                        }
                        else
                        {
                            span += m.EffectiveTo.Value.AddDays(+1) - m.EffectiveFrom;
                        }

                    });
                    int ms = (int)span.Value.TotalMilliseconds;
                    var spanc = span.Value.TotalMilliseconds;
                    var Year = Math.Floor(spanc / 31536000000);
                    var Month = Math.Floor((spanc % 31536000000) / 2628000000);
                    var Days = Math.Floor(((spanc % 31536000000) % 2628000000) / 86400000);

                    return Year + " Years " + Month + " Months " + Days + " Days";
                }
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public static decimal IITExperience(int ID, string Category, string EmployeeNo = null, DateTime? From = null, DateTime? To = null)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int?[] exptype = new int?[] { 0, 2, 3, 4 };
                    decimal dateDiff = 0;
                    DateTime? EffectiveFrom = null;
                    DateTime? EffectiveTo = null;
                    List<RCTPopupListModel> list1 = new List<RCTPopupListModel>();
                    var list = context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeNo && exptype.Contains(x.OrderTypeId) && x.IsCanceled != true && x.isExtended == true)
                        .Select(m => new RCTPopupListModel()
                        {
                            AppId = m.ApplicationId ?? 0,
                            EffectFromDate = m.EffectiveFrom ?? DateTime.Now,
                            EffectToDate = m.EffectiveTo ?? DateTime.Now,
                            OrderDate = m.OrderDate ?? DateTime.Now
                        }).ToList();
                    if (From != null && To != null)
                    {
                        list.Add(new RCTPopupListModel()
                        {
                            AppId = 0,
                            EffectFromDate = From ?? DateTime.Now,
                            EffectToDate = To ?? DateTime.Now,
                            OrderDate = DateTime.Now
                        });
                    }
                    list = list.OrderByDescending(x => x.OrderDate).ThenByDescending(x => x.EffectFromDate).ToList();
                    list.ForEach(m =>
                    {
                        if (context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeNo && x.OrderTypeId == 9 && x.ApplicationId == m.AppId && x.IsCanceled != true).Any())
                        {
                            var relievedemp = context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeNo && x.OrderTypeId == 9 && x.ApplicationId == m.AppId && x.IsCanceled != true).Select(x => x.EffectiveFrom).FirstOrDefault();
                            if (m.EffectFromDate <= relievedemp && m.EffectToDate >= relievedemp)
                            {
                                m.EffectToDate = relievedemp ?? DateTime.Now;
                            }
                        }
                    });
                    int i = 0;
                    foreach (var item in list)
                    {
                        if (i == 0)
                            EffectiveFrom = item.EffectFromDate;
                        if (i > 0)
                            EffectiveTo = item.EffectToDate;
                        if (EffectiveFrom != null && EffectiveTo != null)
                        {
                            //decimal totaldays = Common.GetAvgDaysInAYear(EffectiveTo ?? DateTime.Now, EffectiveFrom ?? DateTime.Now);
                            decimal totaldays = Common.GetAvgDaysInAYear(EffectiveFrom ?? DateTime.Now, EffectiveTo ?? DateTime.Now,true);
                            var Differance = EffectiveFrom.Value.Subtract(EffectiveTo.Value).Days + 1;
                            //var Differance = EffectiveTo.Value.Subtract(EffectiveFrom.Value).Days + 1;
                            var totalYear = Differance / totaldays;
                            if (totalYear >= 1)
                                break;
                            EffectiveFrom = item.EffectFromDate;
                        }
                        var Diff = item.EffectToDate.Subtract(item.EffectFromDate).Days + 1;
                        dateDiff += Diff;
                        if (i == 0)
                            i++;
                    }
                    dateDiff = dateDiff / 365;
                    return dateDiff;
                }
            }
            catch (Exception ex)
            {
                decimal dateDiff = Convert.ToDecimal(5.5);
                return dateDiff;
            }
        }

        public static decimal getIITExperience(string EmployeeId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    decimal days = 0;
                    decimal year = 0;
                    int?[] exptype = new int?[] { 0, 2, 3, 4 };

                    var list = context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeId && exptype.Contains(x.OrderTypeId) && x.IsCanceled != true && x.isExtended == true)
                        .OrderByDescending(x => new { x.OrderId, x.OrderDate, x.EffectiveFrom }).Select(m => new RCTPopupListModel()
                        {
                            AppId = m.ApplicationId ?? 0,
                            EffectFromDate = m.EffectiveFrom ?? DateTime.Now,
                            EffectToDate = m.EffectiveTo ?? DateTime.Now,
                        }).ToList();
                    list.ForEach(m =>
                    {
                        if (context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeId && x.OrderTypeId == 9 && x.ApplicationId == m.AppId && x.IsCanceled != true).Any())
                        {
                            var relievedemp = context.vw_RCTEmployeeHistory.AsNoTracking().Where(x => x.EmployeeId == EmployeeId && x.OrderTypeId == 9 && x.ApplicationId == m.AppId && x.IsCanceled != true).Select(x => x.EffectiveFrom).FirstOrDefault();
                            if (m.EffectFromDate <= relievedemp && m.EffectToDate >= relievedemp)
                            {
                                m.EffectToDate = relievedemp ?? DateTime.Now;
                            }
                        }
                    });
                    list.ForEach(m =>
                    {
                        if (m.EffectFromDate != m.EffectToDate && m.EffectFromDate < m.EffectToDate)
                        {
                            DateTime now = DateTime.Now.Date;
                            if (m.EffectToDate < now)
                                now = m.EffectToDate;
                            days = days + (now.Subtract(m.EffectFromDate).Days + 1);
                        }

                    });
                    year = days / 365;
                    return year;
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public static Nullable<decimal> getHRAValue(int appid, int apptype)
        {
            decimal? hraValue = null;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    hraValue = context.vw_RCTOverAllApplicationEntry.Where(m => m.ApplicationId == appid && m.AppointmentType == apptype && m.ApplicationType == "New" && m.isEmployee == true).Select(x => x.HRA).FirstOrDefault();
                }
                return hraValue;
            }
            catch (Exception ex)
            {
                return hraValue;
            }
        }
        public static Tuple<int, int, int> DateDifference(DateTime From, DateTime To)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    DateTime zeroTime = new DateTime(1, 1, 1);
                    TimeSpan? span = zeroTime - zeroTime;
                    span = To.AddDays(+1) - From;
                    int ms = (int)span.Value.TotalMilliseconds;
                    var spanc = span.Value.TotalMilliseconds;
                    var Year = Math.Floor(spanc / 31536000000);
                    var Month = Math.Floor((spanc % 31536000000) / 2628000000);
                    var Days = Math.Floor(((spanc % 31536000000) % 2628000000) / 86400000);
                    return Tuple.Create((int)Year, (int)Month, (int)Days);
                }
                return Tuple.Create(0, 0, 0);
            }
            catch (Exception ex)
            {
                return Tuple.Create(0, 0, 0);
            }
        }

        public static Tuple<int, int, int> DateDifference(DateTime[] From, DateTime[] To)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    DateTime zeroTime = new DateTime(1, 1, 1);
                    TimeSpan? span = zeroTime - zeroTime;
                    if (From.Count() > 0)
                    {
                        for (int i = 0; i < From.Count(); i++)
                        {
                            span += To[i].AddDays(+1) - From[i];
                        }
                    }
                    int ms = (int)span.Value.TotalMilliseconds;
                    var spanc = span.Value.TotalMilliseconds;
                    var Year = Math.Floor(spanc / 31536000000);
                    var Month = Math.Floor((spanc % 31536000000) / 2628000000);
                    var Days = Math.Floor(((spanc % 31536000000) % 2628000000) / 86400000);
                    return Tuple.Create((int)Year, (int)Month, (int)Days);
                }
                return Tuple.Create(0, 0, 0);
            }
            catch (Exception ex)
            {
                return Tuple.Create(0, 0, 0);
            }
        }

        public static bool DeleteDocument(int appid, string apptype, string doctype, string filepath, int? orderid = null, int? userid = null)
        {
            bool status = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (doctype == "PI Request Document" && orderid > 0)
                    {
                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderDetail
                                     where o.OrderId == od.OrderId && o.OrderId == orderid
                                     select new { o, od }).FirstOrDefault();
                        if (query != null)
                        {
                            query.od.PILetter = null;
                            query.od.PILetterFileName = null;
                            query.o.UpdtTS = DateTime.Now;
                            query.o.UpdtUser = userid;
                            context.SaveChanges();
                            status = true;
                        }
                    }
                    if (doctype == "PI Justification Document" && orderid > 0)
                    {
                        var query = (from o in context.tblRCTOrderPIJustificationDocs where o.OrderId == orderid && o.DocsName == filepath select o).FirstOrDefault();
                        if (query != null)
                        {
                            query.Deleted_f = true;
                            query.DeletedUser = userid;
                            query.Deleted_TS = DateTime.Now;
                            context.SaveChanges();
                            status = true;
                        }
                    }
                    if (doctype == "PI Justification Document" && appid != 0 && !string.IsNullOrEmpty(apptype))
                    {
                        if (apptype == "STE")
                        {
                            var query = (from o in context.tblRCTSTEPIJustificationDocs where o.STEID == appid && o.DocsName == filepath select o).FirstOrDefault();
                            if (query != null)
                            {
                                query.Deleted_f = true;
                                query.DeletedUser = userid;
                                query.Deleted_TS = DateTime.Now;
                                context.SaveChanges();
                                status = true;
                            }
                        }
                        if (apptype == "CON")
                        {
                            var query = (from o in context.tblRCTCONPIJustificationDocument where o.ConsultantAppointmentId == appid && o.PIJustificationDocumentFile == filepath select o).FirstOrDefault();
                            if (query != null)
                            {
                                query.Status = "InActive";
                                query.DeletedUser = userid;
                                query.Deleted_TS = DateTime.Now;
                                context.SaveChanges();
                                status = true;
                            }
                        }
                        if (apptype == "OSG")
                        {
                            var query = (from o in context.tblRCTOSGPIJustificationDoc where o.OSGID == appid && o.DocsName == filepath select o).FirstOrDefault();
                            if (query != null)
                            {
                                query.Deleted_f = true;
                                query.DeletedUser = userid;
                                query.Deleted_TS = DateTime.Now;
                                context.SaveChanges();
                                status = true;
                            }
                        }
                    }
                    return status;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #region Application Status

        public static int PostSTEStatusLog(int STEID, string PreStatus, string NewStatus, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (STEID > 0) 
                    {
                        tblRCTSTEStatusLog log = new tblRCTSTEStatusLog();
                        log.STEID = STEID;
                        log.PresentStatus = PreStatus;
                        log.NewStatus = NewStatus;
                        log.Crt_By = logged_in_userId;
                        log.Crt_TS = DateTime.Now;
                        if (NewStatus == "Draft")
                            log.Message = "Short term engagement drafted by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Open" || NewStatus == "Note to PI")
                            log.Message = "Short term engagement updated or clarified or re-send for commitment by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancellation Initiated")
                            log.Message = "Short term engagement application cancellation Initiated by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancel")
                            log.Message = "Short term engagement application canceled by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Rejected")
                            log.Message = "Short term engagement application Rejected by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Committee Approval")
                            log.Message = "Short term engagement application sent for committee by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Committee Clarify")
                            log.Message = "Short term engagement application sent for committee clarified by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Sent for approval")
                            log.Message = "Short term engagement application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Sent for approval-Verify")
                            log.Message = "Short term engagement application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Commitment Booking")
                            log.Message = "Short term engagement application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Verification")
                            log.Message = "Short term engagement application sent for verification by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Verification-Draft")
                            log.Message = "Short term engagement application sent for verification drafted by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Verification Completed")
                            log.Message = "Short term engagement application verified by " + Common.GetUserFirstName(logged_in_userId);
                        context.tblRCTSTEStatusLog.Add(log);
                        context.SaveChanges();
                        return 1;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        public static int PostCONStatusLog(int CONID, string PreStatus, string NewStatus, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (CONID > 0)
                    {
                        tblRCTCONStatusLog log = new tblRCTCONStatusLog();
                        log.ConsultantAppointmentId = CONID;
                        log.PresentStatus = PreStatus;
                        log.NewStatus = NewStatus;
                        log.Crt_By = logged_in_userId;
                        log.Crt_TS = DateTime.Now;
                        if (NewStatus == "Draft")
                            log.Message = "Consultant drafted by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Open" || NewStatus == "Note to PI")
                            log.Message = "Consultant updated or clarified or re-send for commitment by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancellation Initiated")
                            log.Message = "Consultant application cancellation Initiated by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancel")
                            log.Message = "Consultant application canceled by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Rejected")
                            log.Message = "Consultant application Rejected by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Committee Approval")
                            log.Message = "Consultant application sent for committee by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Committee Clarify")
                            log.Message = "Consultant application sent for committee clarified by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Sent for approval")
                            log.Message = "Consultant application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Commitment Booking")
                            log.Message = "Consultant application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Verification")
                            log.Message = "Consultant application sent for verification by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Verification Completed")
                            log.Message = "Consultant application verified by " + Common.GetUserFirstName(logged_in_userId);
                        context.tblRCTCONStatusLog.Add(log);
                        context.SaveChanges();
                        return 1;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        public static int PostOSGStatusLog(int OSGID, string PreStatus, string NewStatus, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OSGID > 0)
                    {
                        tblRCTOSGStatusLog log = new tblRCTOSGStatusLog();
                        log.OSGID = OSGID;
                        log.PresentStatus = PreStatus;
                        log.NewStatus = NewStatus;
                        log.Crt_By = logged_in_userId;
                        log.Crt_TS = DateTime.Now;
                        if (NewStatus == "Draft")
                            log.Message = "Outsourcing application drafted by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Open" || NewStatus == "Note to PI")
                            log.Message = "Outsourcing application updated or clarified or re-send for commitment by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancellation Initiated")
                            log.Message = "Outsourcing application cancellation Initiated by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancel")
                            log.Message = "Outsourcing application canceled by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Rejected")
                            log.Message = "Outsourcing application Rejected by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Committee Approval")
                            log.Message = "Outsourcing application sent for committee by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Committee Clarify")
                            log.Message = "Outsourcing application sent for committee clarified by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Verification-Draft")
                            log.Message = "Outsourcing application sent for verification drafted by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Sent for approval")
                            log.Message = "Outsourcing application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Sent for approval-Verify")
                            log.Message = "Outsourcing application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Commitment Booking")
                            log.Message = "Outsourcing application sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Verification")
                            log.Message = "Outsourcing application sent for verification by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Verification Completed")
                            log.Message = "Outsourcing application verified by " + Common.GetUserFirstName(logged_in_userId);
                        context.tblRCTOSGStatusLog.Add(log);
                        context.SaveChanges();
                        return 1;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        public static int PostOrderStatusLog(int OrderId, string PreStatus, string NewStatus, int logged_in_userId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (OrderId > 0)
                    {
                        tblRCTOrderLog log = new tblRCTOrderLog();
                        log.OrderID = OrderId;
                        log.PresentStatus = PreStatus; 
                        log.NewStatus = NewStatus;
                        log.Crt_By = logged_in_userId;
                        log.Crt_TS = DateTime.Now;
                        if (NewStatus == "Open" || NewStatus == "Note to PI")
                            log.Message = "Order updated or clarified or re-send for commitment by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancellation Initiated")
                            log.Message = "Order Initiated by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Cancel")
                            log.Message = "Order canceled by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Rejected")
                            log.Message = "Order Rejected by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Committee Approval")
                            log.Message = "Order sent for committee by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Verification")
                            log.Message = "Order sent for verification by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Verification-Draft")
                            log.Message = "Short term engagement application sent for verification drafted by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Committee Clarify")
                            log.Message = "Outsourcing application sent for committee clarified by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Sent for approval")
                            log.Message = "Order sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Sent for approval-Verify")
                            log.Message = "Order sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Awaiting Commitment Booking")
                            log.Message = "Order sent for approval by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Verification Completed")
                            log.Message = "Order verified by " + Common.GetUserFirstName(logged_in_userId);
                        else if (NewStatus == "Completed")
                            log.Message = "Order status completed by " + Common.GetUserFirstName(logged_in_userId);
                        context.tblRCTOrderLog.Add(log);
                        context.SaveChanges();
                        return 1;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        #endregion

        //Don't remove this method. This method refers from view
        public static string GetTenWorkingDates(DateTime OfferDate, DateTime AppointmentStartDate)
        {
            int i = 0;
            DateTime woringDate = DateTime.Now;
            if (OfferDate < AppointmentStartDate)
                OfferDate = AppointmentStartDate;
            for (woringDate = OfferDate; woringDate >= OfferDate; woringDate = woringDate.AddDays(1))
            {
                if (!(woringDate.DayOfWeek == DayOfWeek.Sunday || woringDate.DayOfWeek == DayOfWeek.Saturday))
                    i++;
                if (i == 10)
                    break;
            }
            return string.Format("{0:dd-MMMM-yyyy}", woringDate);
        }

        #region GetTenureClosureList

        public static SearchOrderModel GetTenureClosureList(SearchOrderModel model, int page, int pageSize, DateFilterModel ToDate, int UserId, int RoleId)
        {
            SearchOrderModel list = new SearchOrderModel();
            List<OrderListModel> closureList = new List<OrderListModel>();
            try
            {
                DateTime fromDate = DateTime.Now.Date;
                DateTime toDate = fromDate.AddDays(+30);
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    int?[] exptype = new int?[] { 2, 3 };
                    var prequery = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    join prj in context.tblProject on vw.ProjectId equals prj.ProjectId
                                    join vwp in context.vwFacultyStaffDetails on prj.PIName equals vwp.UserId
                                    orderby vw.ApplicationId descending
                                    where vw.ApplicationType == "New" && vw.Status == "Verification Completed" && ((vw.AppointmentEnddate >= fromDate && vw.AppointmentEnddate <= toDate) || fromDate > vw.AppointmentEnddate)
                                    && (!context.tblOrder.Any(x => x.AppointmentId == vw.ApplicationId && x.AppointmentType == vw.AppointmentType && x.Status != "Cancel" && x.Status != "Rejected" && x.isUpdated != true && ((x.FromDate > vw.AppointmentEnddate && exptype.Contains(x.OrderType)) || (x.FromDate <= vw.AppointmentEnddate && x.OrderType == 9))))
                                    select new OrderListModel()
                                    {
                                        ID = vw.ApplicationId ?? 0,
                                        EmployeeId = vw.EmployeersID,
                                        CategoryName = vw.Category,
                                        Designation = vw.PostRecommended,
                                        Name = vw.CandidateName,
                                        Status = vw.Status,
                                        AppointmentStartdate = vw.AppointmentStartdate,
                                        AppointmentEnddate = vw.AppointmentEnddate,
                                        PIName = vw.PIName,
                                        ProjectNumber = prj.ProjectNumber,
                                        UserId = vw.crtdUserId,
                                        RoleId = vw.UserRoleId,
                                        DepartmentName = vwp.DepartmentName,
                                        TypeofAppointmentName = vw.TypeofAppointment
                                    });

                    var predicate = PredicateBuilder.BaseAnd<OrderListModel>();

                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchPIname))
                        predicate = predicate.And(d => d.PIName.Contains(model.SearchPIname) || d.ProjectNumber.Contains(model.SearchPIname));
                    if (!string.IsNullOrEmpty(model.DepartmentName))
                        predicate = predicate.And(d => d.DepartmentName.Contains(model.DepartmentName));
                    if (!string.IsNullOrEmpty(model.SearchTypeofAppointment))
                        predicate = predicate.And(d => d.TypeofAppointmentName.Contains(model.SearchTypeofAppointment));

                    if (ToDate.@from != null && ToDate.to != null)
                    {
                        ToDate.@from = ToDate.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.AppointmentEnddate >= ToDate.@from && d.AppointmentEnddate <= ToDate.to);
                    }

                    if ((RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105) && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "STE");
                    else if (RoleId == 106 && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "STE" || d.CategoryName == "CON");
                    else if ((RoleId == 107 || RoleId == 108 || RoleId == 109) && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "OSG");
                    else if ((RoleId == 94 || RoleId == 93) && UserId > 0)
                        predicate = predicate.And(d => d.CategoryName == "CON");
                    list.TotalRecords = prequery.Where(predicate).Count();
                    var query = prequery.Where(predicate).OrderByDescending(m => m.AppointmentEnddate).Skip(skiprec).Take(pageSize).ToList();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = (page - 1) * pageSize + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            int appid = query[i].ID;
                            string apptype = query[i].CategoryName;
                            int emailcount = 0;
                            if (query[i].CategoryName == "STE")
                                emailcount = context.tblRCTSTEEmailLog.Where(x => x.IsSend == true && x.TypeofMail == 8 && x.Respondtermend_f != true && x.STEID == appid).Count();
                            else if (query[i].CategoryName == "CON")
                                emailcount = context.tblRCTConsutantAppEmailLog.Where(x => x.IsSend == true && x.TypeofMail == 8 && x.Respondtermend_f != true && x.ConsultantAppointmentId == appid).Count();
                            else if (query[i].CategoryName == "OSG")
                                emailcount = context.tblRCTOSGEmailLog.Where(x => x.IsSend == true && x.TypeofMail == 8 && x.Respondtermend_f != true && x.OSGID == appid).Count();


                            int stopmailId = (from c in context.tblRCTStopMail
                                              where c.ApplicationId == appid && c.Appointmenttype == apptype
                                              && c.Status == "Active" && c.Respond_f != true
                                              select c.StopMailId).FirstOrDefault();

                            var Due = query[i].AppointmentEnddate.Value.Subtract(fromDate).Days;
                            closureList.Add(new OrderListModel()
                            {
                                SNo = sno + i,
                                ID = query[i].ID,
                                EmployeeId = query[i].EmployeeId,
                                CategoryName = query[i].CategoryName,
                                Designation = query[i].Designation,
                                Name = query[i].Name,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount,
                                FromDate = string.Format("{0:s}", query[i].AppointmentStartdate),
                                ToDate = string.Format("{0:s}", query[i].AppointmentEnddate),
                                DueforTenureEnd = Due,
                                PIName = query[i].PIName,
                                ProjectNumber = query[i].ProjectNumber,
                                UserId = query[i].UserId,
                                RoleId = query[i].RoleId,
                                DepartmentName = query[i].DepartmentName,
                                TypeofAppointmentName = query[i].TypeofAppointmentName,
                                stopmailId = stopmailId
                            });
                        }
                    }
                }
                list.List = closureList;
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static bool IsRespondTermEndMail(int appid, string category, int userid, int refId, IOASDBEntities context)
        {
            try
            {
                if (category == "STE")
                    context.tblRCTSTEEmailLog.Where(m => m.STEID == appid && m.TypeofMail == 8 && (m.Respondtermend_f == false || m.Respondtermend_f == null)).ToList()
                        .ForEach(m =>
                        {
                            m.Respondtermend_f = true;
                            m.UPTD_By = userid;
                            m.UPTD_Ts = DateTime.Now;
                            m.OrderId = refId;
                        });
                else if (category == "CON")
                    context.tblRCTConsutantAppEmailLog.Where(m => m.ConsultantAppointmentId == appid && m.TypeofMail == 8 && (m.Respondtermend_f == false || m.Respondtermend_f == null)).ToList()
                        .ForEach(m =>
                        {
                            m.Respondtermend_f = true;
                            m.UPTD_By = userid;
                            m.UPTD_Ts = DateTime.Now;
                            m.OrderId = refId;
                        });
                else if (category == "OSG")
                    context.tblRCTOSGEmailLog.Where(m => m.OSGID == appid && m.TypeofMail == 8 && (m.Respondtermend_f == false || m.Respondtermend_f == null)).ToList()
                        .ForEach(m =>
                        {
                            m.Respondtermend_f = true;
                            m.UPTD_By = userid;
                            m.UPTD_Ts = DateTime.Now;
                            m.OrderId = refId;
                        });

                var spQuery = (from v in context.tblRCTStopMail
                               where v.ApplicationId == appid && v.Appointmenttype == category && v.Status == "Active"
                               && v.Respond_f != true
                               select v).FirstOrDefault();
                if (spQuery != null)
                {
                    spQuery.Respond_f = true;
                    spQuery.Respond_TS = DateTime.Now;
                    spQuery.Respond_BY = userid;
                    spQuery.RefId = refId;
                }
                context.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static int StopTermEndNotification(string employeeId, int userId, int? stopmailId = null)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (stopmailId > 0)
                    {
                        var spQuery = (from v in context.tblRCTStopMail
                                       where v.StopMailId == stopmailId && v.Status == "Active"
                                       && v.Respond_f != true
                                       select v).FirstOrDefault();
                        if (spQuery != null)
                        {
                            spQuery.Status = "InActive";
                            spQuery.Released_TS = DateTime.Now;
                            spQuery.Released_BY = userId;
                            context.SaveChanges();
                            return 2;
                        }
                        else
                        {
                            return 0;
                        }
                    }
                    else
                    {
                        var vwQuery = (from v in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                       where v.ApplicationType == "New" && v.Status == "Verification Completed"
                                       && v.EmployeersID == employeeId
                                       select new
                                       {
                                           v.ApplicationId,
                                           v.Category
                                       }).FirstOrDefault();
                        if (vwQuery != null)
                        {

                            var checkQuery = (from v in context.tblRCTStopMail
                                              where v.ApplicationId == vwQuery.ApplicationId && v.Appointmenttype == vwQuery.Category
                                              && v.Status == "Active" && v.Respond_f != true
                                              select v).Any();
                            if (checkQuery)
                                return -1;

                            tblRCTStopMail email = new tblRCTStopMail();
                            email.EmployeeId = employeeId;
                            email.ApplicationId = vwQuery.ApplicationId;
                            email.Appointmenttype = vwQuery.Category;
                            email.EmailType = 8;
                            email.Initiated_Ts = DateTime.Now;
                            email.Initiated_By = userId;
                            email.Status = "Active";
                            context.tblRCTStopMail.Add(email);
                            context.SaveChanges();
                            return 1;
                        }
                        return 0;
                    }
                }
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        #endregion

        #region Employee Portal

        public static EmployeeDetailModel GetRestEmployeeDetails(string employeeno)
        {
            EmployeeDetailModel detail = new EmployeeDetailModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from ste in context.tblRCTSTE
                                 orderby ste.STEID descending
                                 where ste.EmployeersID == employeeno && ste.IsActiveNow == true && ste.isEmployee == true && ste.Status == "Verification Completed"
                                 select ste).FirstOrDefault();
                    if (query != null)
                    {
                        detail.Employeename = query.Name;
                        detail.EmployeeEmail = query.Email;
                        detail.EmployeeNumber = query.EmployeersID;
                    }
                }
                return detail;
            }
            catch (Exception ex)
            {
                return detail;
            }

        }

        public static int ResetEmployeePassword(string employeeId, int userId)
        {
            try
            {
                using (var EmployeeContext = new ICSRExternalEntities())
                {
                    using (var Employeetransaction = EmployeeContext.Database.BeginTransaction())
                    {
                        try
                        {
                            var query = EmployeeContext.tblProjectStaffUser.Where(x => x.UserName == employeeId && x.Status != "InActive").FirstOrDefault();
                            if (query != null)
                            {
                                query.Password = Guid.NewGuid().ToString("N").Substring(0, 12);
                                query.Uptd_Ts = DateTime.Now;
                                query.Uptd_Id = userId;
                                EmployeeContext.SaveChanges();
                                var status = RCTEmailContentService.SendMailProjectStaffResetPassword(employeeId, EmployeeContext, query.Email);
                                if (status == 1)
                                    Employeetransaction.Commit();
                                else
                                {
                                    Employeetransaction.Rollback();
                                    return -1;
                                }
                            }
                            return 1;
                        }
                        catch (Exception ex)
                        {
                            ErrorHandler WriteLog = new ErrorHandler();
                            Employeetransaction.Rollback();
                            WriteLog.SendErrorToText(ex);
                            return -1;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                //Employeetransaction.Rollback();
                WriteLog.SendErrorToText(ex);
                return -1;
            }
        }

        public static EmployeeDetailModel GetAccessEmployeeDetails(string employeeno)
        {
            EmployeeDetailModel detail = new EmployeeDetailModel();
            try
            {
                using (var context = new ICSRExternalEntities())
                {
                    var query = (from emp in context.tblProjectStaffUser
                                 where emp.UserName == employeeno
                                 select emp).FirstOrDefault();
                    if (query != null)
                    {
                        detail.Employeename = query.Name;
                        detail.EmployeeEmail = query.Email;
                        detail.EmployeeNumber = query.UserName;
                        detail.EmployeeCurrentStatus = query.Status;
                    }
                }
                return detail;
            }
            catch (Exception ex)
            {
                return detail;
            }

        }

        public static int Employeeaccessmodifier(EmployeeDetailModel model, int userId)
        {
            try
            {
                using (var EmployeeContext = new ICSRExternalEntities())
                {
                    var checkEmployee = EmployeeContext.tblAdminEmployeeaccess.Where(x => x.EmployeeNo == model.EmployeeNumber).FirstOrDefault();
                    if (checkEmployee == null)
                    {
                        tblAdminEmployeeaccess addEmployee = new tblAdminEmployeeaccess();
                        addEmployee.EmployeeNo = model.EmployeeNumber;
                        addEmployee.EmployeeStatus = model.EmployeeStatus;
                        addEmployee.Crtd_Id = userId;
                        addEmployee.Crtd_ts = DateTime.Now;
                        EmployeeContext.tblAdminEmployeeaccess.Add(addEmployee);
                        EmployeeContext.SaveChanges();
                        var checkemployee = EmployeeContext.tblProjectStaffUser.Where(x => x.UserName == model.EmployeeNumber).FirstOrDefault();
                        if (checkemployee != null)
                        {
                            checkemployee.Status = model.EmployeeStatus;
                            checkemployee.Uptd_Id = userId;
                            checkemployee.Uptd_Ts = DateTime.Now;
                            EmployeeContext.SaveChanges();
                        }
                    }
                    else
                    {
                        checkEmployee.EmployeeStatus = model.EmployeeStatus;
                        checkEmployee.Uptd_Id = userId;
                        checkEmployee.Uptd_ts = DateTime.Now;
                        EmployeeContext.SaveChanges();
                        var checkemployee = EmployeeContext.tblProjectStaffUser.Where(x => x.UserName == model.EmployeeNumber).FirstOrDefault();
                        if (checkemployee != null)
                        {
                            checkemployee.Status = model.EmployeeStatus;
                            checkemployee.Uptd_Id = userId;
                            checkemployee.Uptd_Ts = DateTime.Now;
                            EmployeeContext.SaveChanges();
                        }
                    }
                }
                return 1;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return -1;

            }
        }

        public static int UpdateModifiyProfileBaseEmployeePortal(string empno, string email, int userid)
        {
            int res = -1;
            try
            {
                using (var EmployeeContext = new ICSRExternalEntities())
                {
                    var changemail = (from emp in EmployeeContext.tblProjectStaffUser
                                      where emp.UserName == empno && emp.Status == "Active"
                                      select emp).FirstOrDefault();
                    if (changemail != null)
                    {
                        changemail.Email = email;
                        changemail.Uptd_Ts = DateTime.Now;
                        changemail.Uptd_Id = userid;
                        EmployeeContext.SaveChanges();
                    }
                }
                res = 1;
                return res;
            }
            catch (Exception ex)
            {
                return res;
            }
        }

        #endregion

        #region EmployeeMaster Separate

        #region Consultant EmployeeMaster
        public SearchEmployeeModel GetConsultantEmployeeList(SearchEmployeeModel model, int page, int pageSize, DateFilterModel DateOfBirth, DateFilterModel DateOfJoining)
        {
            try
            {
                SearchEmployeeModel list = new SearchEmployeeModel();
                List<EmployeeMaster> EmployeeList = new List<EmployeeMaster>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var prequery = (from b in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    from p in context.tblProject
                                    where b.isEmployee == true && b.ProjectId == p.ProjectId && b.Status == "Verification Completed"
                                     && b.ApplicationType == "New" && b.IsActiveNow == true && b.Category == "CON"
                                    orderby b.EmployeersID descending
                                    select new EmployeeMaster()
                                    {
                                        ID = b.ApplicationId ?? 0,
                                        TypeCodeID = b.AppointmentType ?? 0,
                                        EmployeeId = b.EmployeersID,
                                        CategoryName = b.Category,
                                        ApplicationNumber = b.ApplicationNo,
                                        Name = b.CandidateName,
                                        DateofBirth = b.DateofBirth ?? DateTime.Now,
                                        DateofJoining = b.ActualDate ?? DateTime.Now,
                                        Email = b.Email,
                                        ContactNumber = b.ContactNumber,
                                        ProjectNumber = p.ProjectNumber,
                                        Status = b.Status,
                                        gender = b.Sex ?? 0,
                                        DesignationName = b.PostRecommended,
                                        TypeOfAppointment = b.TypeofAppointmentinInt ?? 0,
                                        CSIRStaffMode = b.CSIRStaffPayMode ?? 0,
                                        RoleId = b.UserRoleId,
                                        UserId = b.crtdUserId,
                                        RequestRelieving = context.tblOrder.Any(m => m.AppointmentId == b.ApplicationId && m.AppointmentType == b.AppointmentType && m.OrderType == 9 && m.Status != "Rejected" && m.Status != "Cancel"),
                                        AppointmentStartDate = b.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<EmployeeMaster>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.DesignationName.Contains(model.SearchInName) || d.Email.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (DateOfBirth.@from != null && DateOfBirth.to != null)
                    {
                        DateOfBirth.to = DateOfBirth.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofBirth >= DateOfBirth.@from && d.DateofBirth <= DateOfBirth.to);
                    }
                    if (DateOfJoining.@from != null && DateOfJoining.to != null)
                    {
                        DateOfJoining.@from = DateOfJoining.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofJoining >= DateOfJoining.@from && d.DateofJoining <= DateOfJoining.to);
                    }

                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber));
                    var querylist = prequery.Where(predicate).OrderByDescending(m => m.ID).Skip(skiprec).Take(pageSize).ToList();
                    if (querylist != null)
                    {
                        if (querylist.Count > 0)
                        {
                            int sno = 0;
                            if (page == 1)
                            {
                                sno = 1;
                            }
                            else
                            {
                                sno = ((page - 1) * pageSize) + 1;
                            }
                            for (int i = 0; i < querylist.Count; i++)
                            {
                                EmployeeList.Add(new EmployeeMaster()
                                {
                                    SNo = sno + i,
                                    ID = querylist[i].ID,
                                    TypeCodeID = querylist[i].TypeCodeID,
                                    EmployeeId = querylist[i].EmployeeId,
                                    CategoryName = querylist[i].CategoryName,
                                    ApplicationNumber = querylist[i].ApplicationNumber,
                                    Name = querylist[i].Name,
                                    strDateofBirth = string.Format("{0:s}", querylist[i].DateofBirth),
                                    strDateofJoining = string.Format("{0:s}", querylist[i].DateofJoining),
                                    Email = querylist[i].Email,
                                    ContactNumber = querylist[i].ContactNumber,
                                    ProjectNumber = querylist[i].ProjectNumber,
                                    Status = querylist[i].Status,
                                    gender = querylist[i].gender,
                                    DesignationName = querylist[i].DesignationName,
                                    TypeOfAppointment = querylist[i].TypeOfAppointment,
                                    RequestRelieving = querylist[i].RequestRelieving,
                                    Cancel_f = IsCancelAppointment(querylist[i].AppointmentStartDate, querylist[i].Status, querylist[i].ID, querylist[i].CategoryName)
                                });
                            }
                        }
                    }
                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                SearchEmployeeModel list = new SearchEmployeeModel();
                return list;
            }
        }
        #endregion

        #region STE EmployeeMaster
        public SearchEmployeeModel GetSTEEmployeeList(SearchEmployeeModel model, int page, int pageSize, DateFilterModel DateOfBirth, DateFilterModel DateOfJoining)
        {
            try
            {
                SearchEmployeeModel list = new SearchEmployeeModel();
                List<EmployeeMaster> EmployeeList = new List<EmployeeMaster>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var prequery = (from b in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    from p in context.tblProject
                                    where b.isEmployee == true && b.ProjectId == p.ProjectId && b.Status == "Verification Completed"
                                     && b.ApplicationType == "New" && b.IsActiveNow == true && b.Category == "STE"
                                    orderby b.EmployeersID descending
                                    select new EmployeeMaster()
                                    {
                                        ID = b.ApplicationId ?? 0,
                                        TypeCodeID = b.AppointmentType ?? 0,
                                        EmployeeId = b.EmployeersID,
                                        CategoryName = b.Category,
                                        ApplicationNumber = b.ApplicationNo,
                                        Name = b.CandidateName,
                                        DateofBirth = b.DateofBirth ?? DateTime.Now,
                                        DateofJoining = b.ActualDate ?? DateTime.Now,
                                        Email = b.Email,
                                        ContactNumber = b.ContactNumber,
                                        ProjectNumber = p.ProjectNumber,
                                        Status = b.Status,
                                        gender = b.Sex ?? 0,
                                        DesignationName = b.PostRecommended,
                                        TypeOfAppointment = b.TypeofAppointmentinInt ?? 0,
                                        CSIRStaffMode = b.CSIRStaffPayMode ?? 0,
                                        RoleId = b.UserRoleId,
                                        UserId = b.crtdUserId,
                                        RequestRelieving = context.tblOrder.Any(m => m.AppointmentId == b.ApplicationId && m.AppointmentType == b.AppointmentType && m.OrderType == 9 && m.Status != "Rejected" && m.Status != "Cancel"),
                                        PaymentThroughAgency = context.tblRCTSTE.Any(m => m.CSIRStaffPayMode == 2 && m.STEID == b.ApplicationId),
                                        isHRABooking = (from s in context.tblRCTSTE
                                                        from d in context.tblRCTDesignation
                                                        where s.DesignationId == d.DesignationId && s.STEID == b.ApplicationId
                                                        && d.HRA == true && (s.HRA == null || s.HRA == 0)
                                                        select s).Any(),
                                        isHRACancellation = context.tblRCTSTE.Any(m => m.STEID == b.ApplicationId && m.HRA > 0),
                                        isMaternity = context.tblOrder.Any(m => m.AppointmentId == b.ApplicationId && m.OrderType == 10 && m.AppointmentType == b.AppointmentType && m.Status == "Open"),
                                        AppointmentStartDate = b.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<EmployeeMaster>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.DesignationName.Contains(model.SearchInName) || d.Email.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (DateOfBirth.@from != null && DateOfBirth.to != null)
                    {
                        DateOfBirth.to = DateOfBirth.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofBirth >= DateOfBirth.@from && d.DateofBirth <= DateOfBirth.to);
                    }
                    if (DateOfJoining.@from != null && DateOfJoining.to != null)
                    {
                        DateOfJoining.to = DateOfJoining.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofJoining >= DateOfJoining.@from && d.DateofJoining <= DateOfJoining.to);
                    }
                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber));
                    var querylist = prequery.Where(predicate).OrderByDescending(m => m.ID).Skip(skiprec).Take(pageSize).ToList();
                    if (querylist != null)
                    {
                        if (querylist.Count > 0)
                        {
                            int sno = 0;
                            if (page == 1)
                            {
                                sno = 1;
                            }
                            else
                            {
                                sno = ((page - 1) * pageSize) + 1;
                            }
                            for (int i = 0; i < querylist.Count; i++)
                            {
                                EmployeeList.Add(new EmployeeMaster()
                                {
                                    SNo = sno + i,
                                    ID = querylist[i].ID,
                                    TypeCodeID = querylist[i].TypeCodeID,
                                    EmployeeId = querylist[i].EmployeeId,
                                    CategoryName = querylist[i].CategoryName,
                                    ApplicationNumber = querylist[i].ApplicationNumber,
                                    Name = querylist[i].Name,
                                    strDateofBirth = string.Format("{0:s}", querylist[i].DateofBirth),
                                    strDateofJoining = string.Format("{0:s}", querylist[i].DateofJoining),
                                    Email = querylist[i].Email,
                                    ContactNumber = querylist[i].ContactNumber,
                                    ProjectNumber = querylist[i].ProjectNumber,
                                    Status = querylist[i].Status,
                                    gender = querylist[i].gender,
                                    isHRABooking = querylist[i].isHRABooking,
                                    isHRACancellation = querylist[i].isHRACancellation,
                                    isMaternity = querylist[i].isMaternity,
                                    DesignationName = querylist[i].DesignationName,
                                    PaymentThroughAgency = querylist[i].PaymentThroughAgency,
                                    TypeOfAppointment = querylist[i].TypeOfAppointment,
                                    RequestRelieving = querylist[i].RequestRelieving,
                                    Cancel_f = IsCancelAppointment(querylist[i].AppointmentStartDate, querylist[i].Status, querylist[i].ID, querylist[i].CategoryName)
                                });
                            }
                        }
                    }
                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                SearchEmployeeModel list = new SearchEmployeeModel();
                return list;
            }
        }
        #endregion

        #region OSG EmployeeMaster
        public SearchEmployeeModel GetOSGEmployeeList(SearchEmployeeModel model, int page, int pageSize, DateFilterModel DateOfBirth, DateFilterModel DateOfJoining)
        {
            try
            {
                SearchEmployeeModel list = new SearchEmployeeModel();
                List<EmployeeMaster> EmployeeList = new List<EmployeeMaster>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var prequery = (from b in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                    from p in context.tblProject
                                    where b.isEmployee == true && b.ProjectId == p.ProjectId && b.Status == "Verification Completed"
                                     && b.ApplicationType == "New" && b.IsActiveNow == true && b.Category == "OSG"
                                    orderby b.EmployeersID descending
                                    select new EmployeeMaster()
                                    {
                                        ID = b.ApplicationId ?? 0,
                                        TypeCodeID = b.AppointmentType ?? 0,
                                        EmployeeId = b.EmployeersID,
                                        CategoryName = b.Category,
                                        ApplicationNumber = b.ApplicationNo,
                                        Name = b.CandidateName,
                                        DateofBirth = b.DateofBirth ?? DateTime.Now,
                                        DateofJoining = b.ActualDate ?? DateTime.Now,
                                        Email = b.Email,
                                        ContactNumber = b.ContactNumber,
                                        ProjectNumber = p.ProjectNumber,
                                        Status = b.Status,
                                        gender = b.Sex ?? 0,
                                        DesignationName = b.PostRecommended,
                                        TypeOfAppointment = b.TypeofAppointmentinInt ?? 0,
                                        CSIRStaffMode = b.CSIRStaffPayMode ?? 0,
                                        RoleId = b.UserRoleId,
                                        UserId = b.crtdUserId,
                                        RequestRelieving = context.tblOrder.Any(m => m.AppointmentId == b.ApplicationId && m.AppointmentType == b.AppointmentType && m.OrderType == 9 && m.Status != "Rejected" && m.Status != "Cancel"),
                                        isMaternity = context.tblOrder.Any(m => m.AppointmentId == b.ApplicationId && m.OrderType == 10 && m.AppointmentType == b.AppointmentType && m.Status == "Open"),
                                        AppointmentStartDate = b.AppointmentStartdate
                                    });
                    var predicate = PredicateBuilder.BaseAnd<EmployeeMaster>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.DesignationName.Contains(model.SearchInName) || d.Email.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (DateOfBirth.@from != null && DateOfBirth.to != null)
                    {
                        DateOfBirth.to = DateOfBirth.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofBirth >= DateOfBirth.@from && d.DateofBirth <= DateOfBirth.to);
                    }
                    if (DateOfJoining.@from != null && DateOfJoining.to != null)
                    {
                        DateOfJoining.to = DateOfJoining.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.DateofJoining >= DateOfJoining.@from && d.DateofJoining <= DateOfJoining.to);
                    }
                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber));
                    var querylist = prequery.Where(predicate).OrderByDescending(m => m.ID).Skip(skiprec).Take(pageSize).ToList();
                    if (querylist != null)
                    {
                        if (querylist.Count > 0)
                        {
                            int sno = 0;
                            if (page == 1)
                            {
                                sno = 1;
                            }
                            else
                            {
                                sno = ((page - 1) * pageSize) + 1;
                            }
                            for (int i = 0; i < querylist.Count; i++)
                            {
                                EmployeeList.Add(new EmployeeMaster()
                                {
                                    SNo = sno + i,
                                    ID = querylist[i].ID,
                                    TypeCodeID = querylist[i].TypeCodeID,
                                    EmployeeId = querylist[i].EmployeeId,
                                    CategoryName = querylist[i].CategoryName,
                                    ApplicationNumber = querylist[i].ApplicationNumber,
                                    Name = querylist[i].Name,
                                    strDateofBirth = string.Format("{0:s}", querylist[i].DateofBirth),
                                    strDateofJoining = string.Format("{0:s}", querylist[i].DateofJoining),
                                    Email = querylist[i].Email,
                                    ContactNumber = querylist[i].ContactNumber,
                                    ProjectNumber = querylist[i].ProjectNumber,
                                    Status = querylist[i].Status,
                                    gender = querylist[i].gender,
                                    isMaternity = querylist[i].isMaternity,
                                    DesignationName = querylist[i].DesignationName,
                                    PaymentThroughAgency = querylist[i].PaymentThroughAgency,
                                    TypeOfAppointment = querylist[i].TypeOfAppointment,
                                    RequestRelieving = querylist[i].RequestRelieving,
                                    Cancel_f = IsCancelAppointment(querylist[i].AppointmentStartDate, querylist[i].Status, querylist[i].ID, querylist[i].CategoryName)
                                });
                            }
                        }
                    }
                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                SearchEmployeeModel list = new SearchEmployeeModel();
                return list;
            }
        }
        #endregion

        #endregion

        #region Reliving TabList
        public SearchOrderModel GetEmployeeRelievingList(int page, int pageSize, SearchOrderModel model, DateFilterModel EmployeeDateofBirth, string Category)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> EmployeeList = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {

                    int skiprec = 0;
                    if (page == 1)
                        skiprec = 0;
                    else
                        skiprec = (page - 1) * pageSize;

                    if (EmployeeDateofBirth.@from != null && EmployeeDateofBirth.to != null)
                        EmployeeDateofBirth.to = EmployeeDateofBirth.to.Value.Date.AddDays(1).AddTicks(-2);

                    var prequery = (from vw in context.vw_RCTRelievedEmployees.AsNoTracking()
                                     where (vw.Category == model.SearchInCategory)
                                      //&& (vw.EmployeersID.Contains(model.SearchInEmployeeId) || string.IsNullOrEmpty(model.SearchInEmployeeId))
                                      //&& (vw.CandidateName.Contains(model.SearchInName) || vw.Email.Contains(model.SearchInName) || vw.PostRecommended.Contains(model.SearchInName) || string.IsNullOrEmpty(model.SearchInName))
                                      //&& (vw.ProjectNumber.Contains(model.SearchInProjectNumber) || string.IsNullOrEmpty(model.SearchInProjectNumber))
                                      //&& (vw.Status.Contains(model.SearchInStatus) || string.IsNullOrEmpty(model.SearchInStatus))
                                      //&& (vw.RelievingType.Contains(model.relievingType) || string.IsNullOrEmpty(model.relievingType))
                                      //&& ((vw.DateofBirth >= EmployeeDateofBirth.@from && vw.DateofBirth <= EmployeeDateofBirth.to) || (EmployeeDateofBirth.@from == null || EmployeeDateofBirth.to == null))
                                     orderby vw.OrderId descending
                                     select new RelivingOrderList()
                                     {
                                         OrderId=vw.OrderId,
                                         ApplicationId=vw.ApplicationId,
                                         AppointmentType=vw.AppointmentType,
                                         Category=vw.Category,
                                         EmployeersID=vw.EmployeersID,
                                         ApplicationNo=vw.ApplicationNo,
                                         CandidateName=vw.CandidateName,
                                         PIName=vw.PIName,
                                         Status=vw.Status,
                                         PostRecommended=vw.PostRecommended,
                                         RelievingType=vw.RelievingType,
                                         NOCDocSubmitted=vw.NOCDocSubmitted??false,
                                         isGenarateRelieveOrder=vw.isGenarateRelieveOrder ?? false,
                                         isGenarateFinalSettlement=vw.isGenarateFinalSettlement ?? false,
                                         isGenarateServiceCertificate=vw.isGenarateServiceCertificate ?? false,
                                         ProjectNumber=vw.ProjectNumber,
                                         TypeofAppointment=vw.TypeofAppointment,
                                         DateofBirth=vw.DateofBirth,
                                         Email=vw.Email,
                                         InitByPI_f=vw.InitByPI_f ?? false
                                     });
                    var predicate = PredicateBuilder.BaseAnd<RelivingOrderList>();
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeersID.Contains(model.SearchInEmployeeId) || d.EmployeersID.Contains(model.SearchInEmployeeId));
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.CandidateName.Contains(model.SearchInName) || d.CandidateName.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber) || d.ProjectNumber.Contains(model.SearchInProjectNumber));
                    if (!string.IsNullOrEmpty(model.SearchInStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchInStatus) || d.Status.Contains(model.SearchInStatus));
                    if (!string.IsNullOrEmpty(model.relievingType))
                        predicate = predicate.And(d => d.RelievingType.Contains(model.relievingType) || d.RelievingType.Contains(model.relievingType));
                    if (EmployeeDateofBirth.@from!=null&& EmployeeDateofBirth.to!=null)
                        predicate = predicate.And(d => d.DateofBirth >= EmployeeDateofBirth.@from && d.DateofBirth <= EmployeeDateofBirth.to);
                    var querylist= prequery.Where(predicate).OrderByDescending(m => m.OrderId).Skip(skiprec).Take(pageSize).ToList();
                    list.TotalRecords=prequery.Where(predicate).Count();
                    if (querylist.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                            sno = 1;
                        else
                            sno = (page - 1) * pageSize + 1;
                        for (int i = 0; i < querylist.Count; i++)
                        {
                            int OrderID = querylist[i].OrderId??0;
                            string SendMailType = string.Empty;
                            string Status = querylist[i].Status;
                            if (Status == "Open" && querylist[i].Category == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
                                SendMailType = "Send Relieve Order";
                            else if (Status == "Open" && querylist[i].Category == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
                                SendMailType = "Send Relieve Order";
                            else if (Status == "Open" && querylist[i].Category == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)
                                SendMailType = "Send Relieve Order";
                            else if (Status == "Completed" && querylist[i].RelievingType != "Termination" && ((querylist[i].Category == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0) || (querylist[i].Category == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0) || (querylist[i].Category == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 0)))
                                SendMailType = "Send Relieve Order / Service Certificate";
                            else if (Status == "Completed" && querylist[i].RelievingType != "Termination" && ((querylist[i].Category == "OSG" && context.tblRCTOSGEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1) || (querylist[i].Category == "STE" && context.tblRCTSTEEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1) || (querylist[i].Category == "CON" && context.tblRCTConsutantAppEmailLog.Where(x => x.OrderId == OrderID && x.TypeofMail == 12).ToList().Count == 1)) && context.tblRCTOfferDetails.Any(x => x.OrderId == OrderID && x.isSend != true))
                                SendMailType = "Send Service Certificate";

                            EmployeeList.Add(new OrderListModel()
                            {
                                SNo = sno + i,
                                OrderID = querylist[i].OrderId??0,
                                ID = querylist[i].ApplicationId ?? 0,
                                TypeCodeID = querylist[i].AppointmentType ?? 0,
                                CategoryName = querylist[i].Category,
                                EmployeeId = querylist[i].EmployeersID,
                                ApplicationNumber = querylist[i].ApplicationNo,
                                Name = querylist[i].CandidateName,
                                PIName = querylist[i].PIName,
                                Status = querylist[i].Status,
                                Designation = querylist[i].PostRecommended,
                                RelievingType = querylist[i].RelievingType,
                                isSubmittedNOC = querylist[i].NOCDocSubmitted,
                                isGenarateRelieveOrder = querylist[i].isGenarateRelieveOrder,
                                isGenarateFinalSettlement = querylist[i].isGenarateFinalSettlement,
                                isGenarateServiceCertificate = querylist[i].isGenarateServiceCertificate,
                                ProjectNumber = querylist[i].ProjectNumber,
                                SendMailType = SendMailType,
                                TypeofAppointmentName = querylist[i].TypeofAppointment,
                                EmployeeEmail = querylist[i].Email,
                                EmployeeDateofBirth = string.Format("{0:s}", querylist[i].DateofBirth),
                                Is_InitByPI = querylist[i].InitByPI_f
                            });
                        }
                    }

                    //list.TotalRecords = (from vw in context.vw_RCTRelievedEmployees.AsNoTracking()
                    //                     where (vw.Category == model.SearchInCategory || model.SearchInCategory == null)
                    //                      && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || string.IsNullOrEmpty(model.SearchInEmployeeId))
                    //                      //&& (vw.CandidateName.Contains(model.SearchInName) || string.IsNullOrEmpty(model.SearchInName))
                    //                      && (vw.CandidateName.Contains(model.SearchInName) || vw.Email.Contains(model.SearchInName) || vw.PostRecommended.Contains(model.SearchInName) || string.IsNullOrEmpty(model.SearchInName))
                    //                      && (vw.ProjectNumber.Contains(model.SearchInProjectNumber) || string.IsNullOrEmpty(model.SearchInProjectNumber))
                    //                      && (vw.Status.Contains(model.SearchInStatus) || string.IsNullOrEmpty(model.SearchInStatus))
                    //                      && (vw.RelievingType.Contains(model.relievingType) || string.IsNullOrEmpty(model.relievingType))
                    //                      && ((vw.DateofBirth >= EmployeeDateofBirth.@from && vw.DateofBirth <= EmployeeDateofBirth.to) || (EmployeeDateofBirth.@from == null || EmployeeDateofBirth.to == null))
                    //                     orderby vw.OrderId descending
                    //                     select new
                    //                     { vw.CandidateName }).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }
        #endregion

        #region Stop Payment Tab List
        public SearchOrderModel GetEmployeeLOPSPList(int page, int pageSize, SearchOrderModel model, string Category)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> listitem = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    int[] ids = { 7, 8 };
                    var prequery = (from b in context.tblOrder
                                    from c in context.tblCodeControl
                                    from vw in context.vw_RCTOverAllApplicationEntry
                                    orderby b.OrderId descending
                                    where ids.Contains(b.OrderType ?? 0) && vw.Category == Category
                                    && b.AppointmentId == vw.ApplicationId && b.AppointmentType == vw.AppointmentType
                                    && vw.ApplicationType == "New" && c.CodeName == "PaymentType" && c.CodeValAbbr == b.OrderType
                                    select new OrderListModel()
                                    {
                                        ID = vw.ApplicationId ?? 0,
                                        TypeCodeID = vw.AppointmentType ?? 0,
                                        CategoryName = vw.Category,
                                        EmployeeId = vw.EmployeersID,
                                        ApplicationNumber = vw.ApplicationNo,
                                        Name = vw.CandidateName,
                                        ProjectNumber = vw.ProjectNumber,
                                        Status = b.Status,
                                        Designation = vw.PostRecommended,
                                        OrderID = b.OrderId,
                                        AppointmentStartdate = b.FromDate,
                                        AppointmentEnddate = b.ToDate,
                                        PIName = vw.PIName,
                                        Salary = vw.BasicPay ?? 0,
                                        TypeCategory = c.CodeValDetail,
                                        MaternityOrderID = b.MeternityOrderId ?? 0,
                                        isLossOfPay = c.CodeValAbbr == 8 ? true : false,
                                        Is_InitByPI = b.InitByPI_f ?? false
                                    });
                    var predicate = PredicateBuilder.BaseAnd<OrderListModel>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.PIName.Contains(model.SearchInProjectNumber) || d.ProjectNumber.Contains(model.SearchInProjectNumber));
                    if (!string.IsNullOrEmpty(model.TypeCategory))
                        predicate = predicate.And(d => d.TypeCategory.Contains(model.TypeCategory));
                    if (!string.IsNullOrEmpty(model.SearchInStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchInStatus));

                    var query = prequery.Where(predicate).OrderByDescending(m => m.OrderID).Skip(skiprec).Take(pageSize).ToList();
                    if (query != null)
                    {
                        int sno = 0;
                        if (page == 1)
                            sno = 1;
                        else
                            sno = ((page - 1) * pageSize) + 1;
                        int i = 0;
                        listitem = query;
                        listitem.ForEach(m => { m.SNo = sno + i; i++; });
                        //for (int i = 0; i < query.Count; i++)
                        //{
                        //    listitem.Add(new OrderListModel()
                        //    {
                        //        SNo = sno + i,
                        //        ID = query[i].ID,
                        //        TypeCodeID = query[i].TypeCodeID,
                        //        CategoryName = query[i].CategoryName,
                        //        EmployeeId = query[i].EmployeeId,
                        //        ApplicationNumber = query[i].ApplicationNumber,
                        //        Name = query[i].Name,
                        //        ProjectNumber = query[i].ProjectNumber,
                        //        Status = query[i].Status,
                        //        Designation = query[i].Designation,
                        //        TypeCategory = query[i].TypeCategory,
                        //        Salary = query[i].Salary,
                        //        isLossOfPay = query[i].isLossOfPay,
                        //        OrderID = query[i].OrderID,
                        //        PIName = query[i].PIName,
                        //        MaternityOrderID = query[i].MaternityOrderID
                        //    });
                        //}
                    }
                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = listitem;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }
        #endregion

        #region Maternity Tab List
        public SearchOrderModel GetEmployeeMaternityList(int page, int pageSize, SearchOrderModel model, DateFilterModel From, DateFilterModel To, string Category)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> EmployeeList = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }

                    var prequery = (from b in context.tblOrder
                                    from vw in context.vw_RCTOverAllApplicationEntry
                                    orderby b.OrderId descending
                                    where b.AppointmentId == vw.ApplicationId && vw.Category == Category && vw.ApplicationType == "New"
                                    && b.AppointmentType == vw.AppointmentType && b.OrderType == 10
                                    select new OrderListModel()
                                    {
                                        ID = vw.ApplicationId ?? 0,
                                        TypeCodeID = vw.AppointmentType ?? 0,
                                        CategoryName = vw.Category,
                                        EmployeeId = vw.EmployeersID,
                                        ApplicationNumber = vw.ApplicationNo,
                                        Name = vw.CandidateName,
                                        ProjectNumber = vw.ProjectNumber,
                                        Status = b.Status,
                                        Designation = vw.PostRecommended,
                                        OrderID = b.OrderId,
                                        AppointmentStartdate = b.FromDate,
                                        AppointmentEnddate = b.ToDate,
                                        PIName = vw.PIName,
                                        Is_Clarified = b.Is_Clarify
                                    });
                    var predicate = PredicateBuilder.BaseAnd<OrderListModel>();
                    if (!string.IsNullOrEmpty(model.SearchInName))
                        predicate = predicate.And(d => d.Name.Contains(model.SearchInName) || d.Designation.Contains(model.SearchInName));
                    if (!string.IsNullOrEmpty(model.SearchInEmployeeId))
                        predicate = predicate.And(d => d.EmployeeId.Contains(model.SearchInEmployeeId));
                    if (From.@from != null && From.to != null)
                    {
                        From.to = From.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.AppointmentStartdate >= From.@from && d.AppointmentStartdate <= From.to);
                    }
                    if (To.@from != null && To.to != null)
                    {
                        To.@from = To.@from.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.AppointmentEnddate >= To.@from && d.AppointmentEnddate <= To.to);
                    }
                    if (!string.IsNullOrEmpty(model.SearchInProjectNumber))
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.SearchInProjectNumber) || d.PIName.Contains(model.SearchInProjectNumber));
                    if (!string.IsNullOrEmpty(model.SearchInStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchInStatus));
                    var QryEmployeeList = prequery.Where(predicate).OrderByDescending(m => m.OrderID).Skip(skiprec).Take(pageSize).ToList();
                    if (QryEmployeeList != null)
                    {
                        for (int i = 0; i < QryEmployeeList.Count; i++)
                        {
                            EmployeeList.Add(new OrderListModel()
                            {
                                SNo = i + 1,
                                ID = QryEmployeeList[i].ID,
                                TypeCodeID = QryEmployeeList[i].TypeCodeID,
                                CategoryName = QryEmployeeList[i].CategoryName,
                                EmployeeId = QryEmployeeList[i].EmployeeId,
                                ApplicationNumber = QryEmployeeList[i].ApplicationNumber,
                                Name = QryEmployeeList[i].Name,
                                ProjectNumber = QryEmployeeList[i].ProjectNumber,
                                Status = QryEmployeeList[i].Status,
                                Designation = QryEmployeeList[i].Designation,
                                OrderID = QryEmployeeList[i].OrderID,
                                FromDate = string.Format("{0:s}", QryEmployeeList[i].AppointmentStartdate),
                                ToDate = string.Format("{0:s}", QryEmployeeList[i].AppointmentEnddate),
                                PIName = QryEmployeeList[i].PIName,
                                Is_Clarified = QryEmployeeList[i].Is_Clarified
                            });
                        }
                    }

                    list.TotalRecords = prequery.Where(predicate).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }
        #endregion

        #region Other Paymentdeduction Tab List
        public static SearchOtherPaymentModel GetEmployeeOtherPaymentList(SearchOtherPaymentModel model, int page, int pageSize, DateFilterModel crtd_ts, string Category)
        {
            SearchOtherPaymentModel searchdata = new SearchOtherPaymentModel();
            List<OtherPaymentDeductionModel> list = new List<OtherPaymentDeductionModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                if (crtd_ts.from == null && crtd_ts.to == null)
                {
                    crtd_ts.from = DateTime.Now.AddDays(-30).AddTicks(-2);
                    crtd_ts.to = DateTime.Now.AddDays(1).AddTicks(-2);
                }
                if (crtd_ts.to != null)
                    crtd_ts.to = crtd_ts.to.Value.Date.AddDays(1).AddTicks(-2);
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from oth in context.tblRCTOTHPaymentDeduction.AsNoTracking()
                                    join prj in context.tblProject on oth.ProjectId equals prj.ProjectId
                                    join vw in context.vw_RCTOverAllApplicationEntry on oth.AppointmentId equals vw.ApplicationId
                                    where (vw.AppointmentType == oth.AppointmentType && vw.ApplicationType == "New" && oth.Isbackend_f == false && oth.IsBulkBooking_f != true)
                                    && oth.CrtdTS >= crtd_ts.@from && oth.CrtdTS <= crtd_ts.to && vw.Category == Category
                                    select new OtherPaymentDeductionModel()
                                    {
                                        OTHPayDeductionId = oth.OTHPayDeductionId,
                                        EmployeeNo = oth.EmployeeNo,
                                        Name = vw.CandidateName,
                                        AppointmentType = oth.AppointmentType,
                                        AppointmentTypeName = vw.Category,
                                        ProjectNumber = prj.ProjectNumber,
                                        Status = oth.Status,
                                        OrderId = oth.OrderId,
                                        OtherPaymentNo = oth.OTHPayDeductionNo,
                                        CRTD_TS = oth.CrtdTS
                                    });
                    var predicate = PredicateBuilder.BaseAnd<OtherPaymentDeductionModel>();
                    if (!string.IsNullOrEmpty(model.SearchEMPNo))
                        predicate = predicate.And(d => d.EmployeeNo.Contains(model.SearchEMPNo));
                    //if (model.SearchOtherType != null)
                    //    // predicate = predicate.And(d => d.OtherType == model.SearchOtherType);
                    if (!string.IsNullOrEmpty(model.Appointmenttype))
                        predicate = predicate.And(d => d.AppointmentTypeName == model.Appointmenttype);
                    if (model.ProjectNo != null)
                        predicate = predicate.And(d => d.ProjectNumber.Contains(model.ProjectNo));
                    if (!string.IsNullOrEmpty(model.SearchStatus))
                        predicate = predicate.And(d => d.Status.Contains(model.SearchStatus));
                    if (!string.IsNullOrEmpty(model.EmployeeName))
                        predicate = predicate.And(d => d.Name.Contains(model.EmployeeName));
                    if (!string.IsNullOrEmpty(model.SearchPaymentNo))
                        predicate = predicate.And(d => d.OtherPaymentNo.Contains(model.SearchPaymentNo));
                    var query = prequery.Where(predicate).OrderByDescending(m => m.OTHPayDeductionId).Skip(skiprec).Take(pageSize).ToList();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new OtherPaymentDeductionModel()
                            {
                                SNo = sno + i,
                                OTHPayDeductionId = query[i].OTHPayDeductionId,
                                EmployeeNo = query[i].EmployeeNo,
                                AppointmentType = query[i].AppointmentType,
                                AppointmentTypeName = query[i].AppointmentTypeName,
                                ProjectNumber = query[i].ProjectNumber,
                                Status = query[i].Status,
                                OrderId = query[i].OrderId,
                                Name = query[i].Name,
                                OtherPaymentNo = query[i].OtherPaymentNo,
                                CreatedDate = string.Format("{0:s}", query[i].CRTD_TS)
                            });
                        }
                    }
                    searchdata.TotalRecords = prequery.Where(predicate).Count();
                    searchdata.Detail = list;
                    return searchdata;
                }

            }
            catch (Exception ex)
            {
                return searchdata;
            }
        }
        #endregion

        #region PayrollInitiation Tab List
        public PayrollInitiationSearchModel GetEmployeePayrollInitiationList(PayrollInitiationSearchModel model, int page, int pageSize, DateFilterModel MonthStartDate, DateFilterModel MonthEndDate, string Category)
        {
            PayrollInitiationSearchModel seamodel = new PayrollInitiationSearchModel();
            List<PayrollInitiationModel> list = new List<PayrollInitiationModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var prequery = (from pah in context.tblRCTPayroll.AsNoTracking()
                                    join cc in context.tblCodeControl on pah.SalaryType equals cc.CodeValAbbr
                                    where cc.CodeName == "PayOfBill"/* && pah.CRTD_By == UserId*/
                                    && pah.Status != "InActive" && pah.AppointmentType == Category
                                    orderby pah.RCTPayrollId descending
                                    select new PayrollInitiationModel()
                                    {
                                        PayrollId = pah.RCTPayrollId,
                                        FromInitDate = pah.StartDate,
                                        ToInitDate = pah.EndDate,
                                        PayrollSalaryType = cc.CodeValDetail,
                                        SalaryMonth = pah.SalaryMonth,
                                        SalaryStatus = pah.Status,
                                        Appointmenttype = pah.AppointmentType,
                                        VendorId = pah.VendorId
                                    });
                    var predicate = PredicateBuilder.BaseAnd<PayrollInitiationModel>();
                    if (!string.IsNullOrEmpty(model.SearchSalaryMonth))
                        predicate = predicate.And(d => d.SalaryMonth.Contains(model.SearchSalaryMonth));
                    if (!string.IsNullOrEmpty(model.SearchSalaryType))
                        predicate = predicate.And(d => d.PayrollSalaryType.Contains(model.SearchSalaryType));
                    if (MonthStartDate.from != null && MonthStartDate.to != null)
                    {
                        MonthStartDate.to = MonthStartDate.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.FromInitDate >= MonthStartDate.from && d.FromInitDate <= MonthStartDate.to);
                    }
                    if (MonthEndDate.from != null && MonthEndDate.to != null)
                    {
                        MonthEndDate.to = MonthEndDate.to.Value.Date.AddDays(1).AddTicks(-2);
                        predicate = predicate.And(d => d.ToInitDate >= MonthEndDate.from && d.ToInitDate <= MonthEndDate.to);
                    }
                    if (!string.IsNullOrEmpty(model.SearchSalaryStaus))
                        predicate = predicate.And(d => d.SalaryStatus.Contains(model.SearchSalaryStaus));
                    var payrolllist = prequery.Where(predicate).OrderByDescending(m => m.PayrollId).Skip(skiprec).Take(pageSize).ToList();
                    if (payrolllist != null)
                    {
                        if (payrolllist.Count > 0)
                        {
                            int sno = 0;
                            if (page == 1)
                            {
                                sno = 1;
                            }
                            else
                            {
                                sno = ((page - 1) * pageSize) + 1;
                            }
                            for (int i = 0; i < payrolllist.Count; i++)
                            {

                                string monthname = payrolllist[i].SalaryMonth;
                                bool Requestedforsalaryprocessingmain = false;
                                bool Requestedforsalaryprocessingsubli = false;
                                int paymenustatusid = 0;
                                if (payrolllist[i].Appointmenttype == "Adhoc")
                                {
                                    if (payrolllist[i].PayrollSalaryType == "Main" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingmain = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 1 && x.Status == "Requested for salary processing" && x.AppointmentType == "Adhoc");

                                    }
                                    if (payrolllist[i].PayrollSalaryType == "Supplementary" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingsubli = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 2 && x.Status == "Requested for salary processing" && x.AppointmentType == "Adhoc");
                                    }

                                    if (Requestedforsalaryprocessingmain == true)
                                        paymenustatusid = 1;

                                    if (Requestedforsalaryprocessingsubli == true)
                                        paymenustatusid = 2;
                                }
                                else
                                {
                                    if (payrolllist[i].PayrollSalaryType == "Main" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingmain = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 1 && x.Status == "Requested for salary processing" && x.AppointmentType == "OSG");

                                    }
                                    if (payrolllist[i].PayrollSalaryType == "Supplementary" && payrolllist[i].SalaryStatus == "Init")
                                    {
                                        Requestedforsalaryprocessingsubli = context.tblRCTPayroll.Any(x => x.SalaryMonth == monthname && x.SalaryType == 2 && x.Status == "Requested for salary processing" && x.AppointmentType == "OSG");
                                    }

                                    if (Requestedforsalaryprocessingmain == true)
                                        paymenustatusid = 1;

                                    if (Requestedforsalaryprocessingsubli == true)
                                        paymenustatusid = 2;
                                }

                                list.Add(new PayrollInitiationModel()
                                {
                                    SNo = sno + i,
                                    PayrollId = payrolllist[i].PayrollId,
                                    SalaryMonth = payrolllist[i].SalaryMonth,
                                    MonthStartDate = string.Format("{0:s}", payrolllist[i].FromInitDate),
                                    MonthEndDate = string.Format("{0:s}", payrolllist[i].ToInitDate),
                                    SalaryStatus = payrolllist[i].SalaryStatus,
                                    PayrollSalaryType = payrolllist[i].PayrollSalaryType,
                                    Appointmenttype = payrolllist[i].Appointmenttype,
                                    PayrollmenuProcessId = paymenustatusid,
                                    VendorName = payrolllist[i].VendorId == null ? "" : Common.GetSalaryAgencyName(payrolllist[i].VendorId ?? 0),
                                });
                            }
                        }
                    }
                    seamodel.TotalRecords = prequery.Where(predicate).Count();
                    seamodel.Payrolllist = list;
                }
                return seamodel;
            }
            catch (Exception ex)
            {
                WriteLog.SendErrorToText(ex);
                return seamodel;
            }
        }
        #endregion

        #region DAApplication Separate
        public static ProjectExtentionEnhmentSearchListModel GetEmployeeExtandEnhment(ProjectExtentionEnhmentSearchListModel model, int page, int pageSize, DateFilterModel StrFrmDate, DateFilterModel StrtoDate, string Category)
        {
            ProjectExtentionEnhmentSearchListModel searenhext = new ProjectExtentionEnhmentSearchListModel();
            List<ProjectExtentionEnhmentListModel> list = new List<ProjectExtentionEnhmentListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                if (StrFrmDate.to != null)
                    StrFrmDate.to = StrFrmDate.to.Value.Date.AddDays(1).AddTicks(-2);
                if (StrtoDate.to != null)
                    StrtoDate.to = StrtoDate.to.Value.Date.AddDays(1).AddTicks(-2);

                using (var context = new IOASDBEntities())
                {
                    var query = (from ord in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                 join ordin in context.tblOrder on ord.OrderId equals ordin.OrderId
                                 join f in context.tblRCTOfferDetails on new { OfferCategory = "OfferLetter", OrderId = ordin.OrderId } equals new { OfferCategory = f.OfferCategory, OrderId = f.OrderId ?? 0 } into lf
                                 from f in lf.DefaultIfEmpty()
                                 join prj in context.tblProject on ordin.NewProjectId equals prj.ProjectId
                                 join vw in context.vwFacultyStaffDetails on prj.PIName equals vw.UserId
                                 orderby ord.OrderId descending
                                 where ord.Status != "InActive" && ord.Status != "Cancel"
                                 && ord.Category == Category && (ord.ApplicationType == "Extension" || ord.ApplicationType == "Enhancement" || ord.ApplicationType == "Amendment")
                                 && (ord.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                 && (ord.ApplicationType.Contains(model.ExtensionEnhCategory) || model.ExtensionEnhCategory == null)
                                 && (prj.ProjectNumber.Contains(model.ProjectNumber) || model.ProjectNumber == null)
                                 && (ord.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                 && ((ordin.FromDate >= StrFrmDate.@from && ordin.FromDate <= StrFrmDate.to) || (StrFrmDate.@from == null && StrFrmDate.to == null))
                                 && ((ordin.ToDate >= StrtoDate.@from && ordin.ToDate <= StrtoDate.to) || (StrtoDate.@from == null && StrtoDate.to == null))
                                 && (ord.Status.Contains(model.Status) || model.Status == null)
                                  && (vw.DepartmentName.Contains(model.DepartmentName) || model.DepartmentName == null)
                                  && (ord.TypeofAppointment.Contains(model.SearchTypeofAppointmentName) || model.SearchTypeofAppointmentName == null)
                                 select new
                                 {
                                     ord.TypeofAppointment,
                                     ord.OrderId,
                                     ordin.FromDate,
                                     ordin.ToDate,
                                     ord.Status,
                                     ord.EmployeeNo,
                                     ord.Category,
                                     ord.CandidateName,
                                     ord.ApplicationId,
                                     ord.ApplicationType,
                                     prj.ProjectNumber,
                                     ordin.isCommitmentReject,
                                     vw.DepartmentName,
                                     SendOffer_f = f != null ? (f.isSend == null ? false : f.isSend) : null,
                                     ordin.InitByPI_f
                                 }).Skip(skiprec).Take(pageSize).ToList();

                    searenhext.TotalRecords = (from ord in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                               join ordin in context.tblOrder on ord.OrderId equals ordin.OrderId
                                               join prj in context.tblProject on ordin.NewProjectId equals prj.ProjectId
                                               join vw in context.vwFacultyStaffDetails on prj.PIName equals vw.UserId
                                               orderby ord.OrderId descending
                                               where ord.Status != "InActive" && ord.Status != "Cancel" && ord.Category == Category && (ord.ApplicationType == "Extension" || ord.ApplicationType == "Enhancement" || ord.ApplicationType == "Amendment")
                                               && (ord.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                               && (ord.ApplicationType.Contains(model.ExtensionEnhCategory) || model.ExtensionEnhCategory == null)
                                               && (ord.Category.Contains(model.ApplicationCategory) || model.ApplicationCategory == null)
                                               && (prj.ProjectNumber.Contains(model.ProjectNumber) || model.ProjectNumber == null)
                                               && (ord.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                               && ((ordin.FromDate >= StrFrmDate.@from && ordin.FromDate <= StrFrmDate.to) || (StrFrmDate.@from == null && StrFrmDate.to == null))
                                               && ((ordin.ToDate >= StrtoDate.@from && ordin.FromDate <= StrtoDate.to) || (StrtoDate.@from == null && StrtoDate.to == null))
                                               && (ord.Status.Contains(model.Status) || model.Status == null)
                                                && (vw.DepartmentName.Contains(model.DepartmentName) || model.DepartmentName == null)
                                  && (ord.TypeofAppointment.Contains(model.SearchTypeofAppointmentName) || model.SearchTypeofAppointmentName == null)

                                               select new { ord.TypeofAppointment, ord.OrderId, ordin.FromDate, ordin.ToDate, ord.Status, ord.EmployeeNo, ord.Category, ord.CandidateName, ord.ApplicationId, ord.ApplicationType, prj.ProjectNumber, ordin.isCommitmentReject, vw.DepartmentName }).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new ProjectExtentionEnhmentListModel()
                            {
                                SNo = sno + i,
                                OrderId = query[i].OrderId,
                                EmployeeNo = query[i].EmployeeNo,
                                ExtensionEnhCategory = query[i].ApplicationType,
                                EmployeeName = query[i].CandidateName,
                                ProjectNumber = query[i].ProjectNumber,
                                ApplicationId = query[i].ApplicationId ?? 0,
                                ApplicationCategory = query[i].Category,
                                StrFrmDate = String.Format("{0:s}", query[i].FromDate),
                                StrtoDate = String.Format("{0:s}", query[i].ToDate),
                                Status = query[i].Status,
                                isCommitmentRejection = query[i].isCommitmentReject,
                                EmployeeDept = query[i].DepartmentName,
                                TypeofAppointmentName = query[i].TypeofAppointment,
                                SendOffer_f = query[i].SendOffer_f,
                                InitByPI_f = query[i].InitByPI_f ?? false,
                                Cancel_f = IsCancelAppointment(query[i].FromDate, query[i].Status, query[i].ApplicationId, query[i].Category, query[i].OrderId)
                            });
                        }
                    }
                }
                searenhext.ExtandEnhList = list;
                return searenhext;
            }
            catch (Exception ex)
            {
                return searenhext;
            }
        }

        public SearchOrderModel GetEmployeeHRAList(int page, int pageSize, SearchOrderModel model, string Category)
        {
            try
            {
                SearchOrderModel list = new SearchOrderModel();
                List<OrderListModel> EmployeeList = new List<OrderListModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    int[] ids = { 5, 6 };
                    var QryEmployeeList = (from b in context.tblOrder
                                           from od in context.tblOrderDetail
                                           from p in context.tblProject
                                           from vw in context.vw_RCTOverAllApplicationEntry
                                           orderby b.OrderId descending
                                           where vw.ApplicationType == "New" && vw.ProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId
                                           && b.AppointmentType == vw.AppointmentType && ids.Contains(b.OrderType ?? 0) && b.OrderId == od.OrderId
                                           && (vw.CandidateName.Contains(model.SearchInName) || model.SearchInName == null) && vw.Category == Category
                                           && (vw.PostRecommended.Contains(model.SearchInDesignation) || model.SearchInDesignation == null)
                                           && (p.ProjectNumber.Contains(model.SearchInProjectNumber) || model.SearchInProjectNumber == null)
                                           && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || model.SearchInEmployeeId == null)
                                           && (b.Status.Contains(model.SearchInStatus) || model.SearchInStatus == null)
                                           && (vw.BasicPay==model.SearchBasicAmount || model.SearchBasicAmount == null)
                                           select new
                                           {
                                               vw.CandidateName,
                                               vw.ApplicationId,
                                               vw.ApplicationNo,
                                               vw.EmployeersID,
                                               vw.PostRecommended,
                                               vw.Category,
                                               vw.AppointmentType,
                                               vw.PIName,
                                               p.ProjectNumber,
                                               od.RelievingMode,
                                               od.NOCDocSubmitted,
                                               od.RelievingOrderGenerate,
                                               b.Status,
                                               b.OrderId,
                                               b.OrderType,
                                               vw.BasicPay,
                                               b.isGovAgencyFund,
                                               b.isCommitmentReject
                                           }).Skip(skiprec).Take(pageSize).ToList();
                    if (QryEmployeeList != null)
                    {
                        for (int i = 0; i < QryEmployeeList.Count; i++)
                        {
                            string TypeCategory = "";
                            TypeCategory = QryEmployeeList[i].OrderType == 5 ? "HRA Booking" : QryEmployeeList[i].OrderType == 6 ? "HRA Cancellation" : "";
                            EmployeeList.Add(new OrderListModel()
                            {
                                SNo = i + 1,
                                ID = QryEmployeeList[i].ApplicationId ?? 0,
                                TypeCodeID = QryEmployeeList[i].AppointmentType ?? 0,
                                CategoryName = QryEmployeeList[i].Category,
                                EmployeeId = QryEmployeeList[i].EmployeersID,
                                ApplicationNumber = QryEmployeeList[i].ApplicationNo,
                                Name = QryEmployeeList[i].CandidateName,
                                ProjectNumber = QryEmployeeList[i].PIName + " (" + QryEmployeeList[i].ProjectNumber + ")",
                                Status = QryEmployeeList[i].Status,
                                Designation = QryEmployeeList[i].PostRecommended,
                                OrderID = QryEmployeeList[i].OrderId,
                                TypeCategory = TypeCategory,
                                Salary = QryEmployeeList[i].BasicPay ?? 0,
                                Is_GovAgency = QryEmployeeList[i].isGovAgencyFund,
                                Is_CommitmentReject = QryEmployeeList[i].isCommitmentReject,
                            });
                        }
                    }

                    list.TotalRecords = (from b in context.tblOrder
                                         from od in context.tblOrderDetail
                                         from p in context.tblProject
                                         from vw in context.vw_RCTOverAllApplicationEntry
                                         orderby b.OrderId descending
                                         where vw.ApplicationType == "New" && vw.ProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId
                                         && b.AppointmentType == vw.AppointmentType && ids.Contains(b.OrderType ?? 0) && b.OrderId == od.OrderId
                                         && (vw.CandidateName.Contains(model.SearchInName) || model.SearchInName == null) && vw.Category == Category
                                         && (vw.PostRecommended.Contains(model.SearchInDesignation) || model.SearchInDesignation == null)
                                         && (p.ProjectNumber.Contains(model.SearchInProjectNumber) || model.SearchInProjectNumber == null)
                                         && (vw.EmployeersID.Contains(model.SearchInEmployeeId) || model.SearchInEmployeeId == null)
                                         && (b.Status.Contains(model.SearchInStatus) || model.SearchInStatus == null)
                                         select b).Count();
                    list.List = EmployeeList;
                }
                return list;
            }
            catch (Exception ex)
            {
                SearchOrderModel list = new SearchOrderModel();
                return list;
            }
        }

        public static SearchChangeofProjectModel GetEmployeeChangeofProject(SearchChangeofProjectModel model, int page, int pageSize, string Category)
        {
            SearchChangeofProjectModel seachmodel = new SearchChangeofProjectModel();
            List<ChangeofProjectListModel> list = new List<ChangeofProjectListModel>();
            try
            {
                int skiprec = 0;
                if (page == 1)
                    skiprec = 0;
                else
                    skiprec = (page - 1) * pageSize;

                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblOrder
                                 from p in context.tblProject
                                 from vw in context.vw_RCTOverAllApplicationEntry
                                 join f in context.tblRCTOfferDetails on new { OfferCategory = "OfferLetter", OrderId = b.OrderId } equals new { OfferCategory = f.OfferCategory, OrderId = f.OrderId ?? 0 } into lf
                                 from f in lf.DefaultIfEmpty()
                                 orderby b.OrderId descending
                                 where b.NewProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId && b.OrderType == 1 && b.Status != "InActive"
                                 && vw.ApplicationType == "New" && b.AppointmentType == vw.AppointmentType && vw.Category == Category
                                 && (vw.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                 && (p.ProjectNumber.Contains(model.NewProjectNumber) || model.NewProjectNumber == null)
                                  && (vw.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                 && (b.Status.Contains(model.Status) || model.Status == null)
                                 select new
                                 {
                                     vw.CandidateName,
                                     b.OrderId,
                                     vw.EmployeeNo,
                                     p.ProjectNumber,
                                     b.Status,
                                     vw.Category,
                                     vw.ApplicationId,
                                     vw.ApplicationType,
                                     SendOffer_f = f != null ? (f.isSend == null ? false : f.isSend) : null,
                                     b.InitByPI_f,
                                     b.FromDate
                                 }).Skip(skiprec).Take(pageSize).ToList();
                    seachmodel.TotalRecords = (from b in context.tblOrder
                                                   //from od in context.tblOrderDetail
                                               from p in context.tblProject
                                               from vw in context.vw_RCTOverAllApplicationEntry
                                               orderby b.OrderId descending
                                               where b.NewProjectId == p.ProjectId && b.AppointmentId == vw.ApplicationId && b.OrderType == 1 && b.Status != "InActive"
                                               && vw.ApplicationType == "New" && b.AppointmentType == vw.AppointmentType && vw.Category == Category
                                               && (vw.EmployeeNo.Contains(model.EmployeeNo) || model.EmployeeNo == null)
                                               //&& (vw.Category.Contains(model.Category) || model.Category == null)
                                               && (p.ProjectNumber.Contains(model.NewProjectNumber) || model.NewProjectNumber == null)
                                               && (vw.CandidateName.Contains(model.EmployeeName) || model.EmployeeName == null)
                                               && (b.Status.Contains(model.Status) || model.Status == null)
                                               select new
                                               {
                                                   vw.CandidateName,
                                                   b.OrderId,
                                                   vw.EmployeeNo,
                                                   p.ProjectNumber,
                                                   b.Status,
                                                   vw.Category,
                                                   vw.ApplicationId,
                                                   vw.ApplicationType
                                               }).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        for (int i = 0; i < query.Count; i++)
                        {

                            list.Add(new ChangeofProjectListModel()
                            {
                                SNo = sno + i,
                                OrderId = query[i].OrderId,
                                EmployeeNo = query[i].EmployeeNo,
                                Category = query[i].Category,
                                EmployeeName = query[i].CandidateName,
                                NewProjectNumber = query[i].ProjectNumber,
                                Status = query[i].Status,
                                ApplicationId = query[i].ApplicationId ?? 0,
                                ApplicationCategory = query[i].ApplicationType,
                                SendOffer_f = query[i].SendOffer_f,
                                InitByPI_f = query[i].InitByPI_f ?? false,
                                Cancel_f = IsCancelAppointment(query[i].FromDate, query[i].Status, query[i].ApplicationId, query[i].Category, query[i].OrderId)

                            });
                        }
                    }
                    seachmodel.Changelist = list;
                }
                return seachmodel;
            }
            catch (Exception ex)
            {
                return seachmodel;
            }
        }

        public static ApplicationSearchListModel GetEmployeeCancelApplicationList(ApplicationSearchListModel model, int page, int pageSize, string Category)
        {
            ApplicationSearchListModel appseamodel = new ApplicationSearchListModel();
            List<ApplicationListModel> list = new List<ApplicationListModel>();
            //string []Statuslist= "Submit for approval","Awaiting commitment booking";

            try
            {
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var query = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                 orderby vw.ApplicationId descending
                                 where vw.Status == "Cancel" && vw.isEmployee == true
                                 && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                 && vw.Category == Category
                                 && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                 && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                 && (vw.Status.Contains(model.Status) || model.Status == null)
                                 && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                 && (vw.ApplicationType.Contains(model.ApplicationType) || model.ApplicationType == null)
                                 select vw).Skip(skiprec).Take(pageSize).ToList();

                    appseamodel.TotalRecords = (from vw in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                                orderby vw.ApplicationId descending
                                                where vw.Status == "Cancel" && vw.isEmployee == true
                                                && (vw.ApplicationNo.Contains(model.ApplicationNo) || model.ApplicationNo == null)
                                                && vw.Category == Category
                                                && (vw.CandidateName.Contains(model.CondidateName) || model.CondidateName == null)
                                                && (vw.PIName.Contains(model.PIName) || model.PIName == null)
                                                && (vw.Status.Contains(model.Status) || model.Status == null)
                                                && (vw.PIEmail.Contains(model.PIEmail) || model.PIEmail == null)
                                                && (vw.ApplicationType.Contains(model.ApplicationType) || model.ApplicationType == null)
                                                select vw).Count();
                    if (query.Count > 0)
                    {
                        int sno = 0;
                        if (page == 1)
                        {
                            sno = 1;
                        }
                        else
                        {
                            sno = ((page - 1) * pageSize) + 1;
                        }
                        int emailcount = 0;
                        for (int i = 0; i < query.Count; i++)
                        {
                            if (query[i].Category == "CON")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTConsutantAppEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.ConsultantAppointmentId == appid).Count();
                            }
                            else if (query[i].Category == "STE")
                            {
                                int appid = query[i].ApplicationId ?? 0;
                                emailcount = context.tblRCTSTEEmailLog.
                                                Where(x => x.IsSend == true && x.TypeofMail == 3 &&
                                                x.STEID == appid).Count();
                            }
                            list.Add(new ApplicationListModel()
                            {
                                SNo = sno + i,
                                OrderId = query[i].OrderId,
                                ApplicationId = query[i].ApplicationId,
                                ApplicationNumber = query[i].ApplicationNo,
                                ApplicationType = query[i].ApplicationType,
                                Category = query[i].Category,
                                CondidateName = query[i].CandidateName,
                                PIName = query[i].PIName,
                                Email = query[i].PIEmail,
                                Status = query[i].Status,
                                EmailRemaindarCount = emailcount,
                                EmployeeNo = query[i].EmployeeNo
                            });

                        }
                    }
                }
                appseamodel.ApplicationList = list;
                return appseamodel;
            }
            catch (Exception ex)
            {
                return appseamodel;
            }
        }
        #endregion

        #region Test
        public bool STEWFInitSccess(int STEID, int loggedInUser)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = (from S in context.tblRCTSTE
                                 from D in context.tblRCTDesignation
                                 where S.DesignationId == D.DesignationId && S.STEID == STEID
                                 //&& S.Status == "Sent for approval"
                                 select new { S, D }).FirstOrDefault();
                    if (query != null)
                    {

                        bool nofund_f = Common.IsAvailablefundProject(query.S.ProjectId ?? 0, query.S.CommitmentAmount ?? 0, query.S.TypeofAppointment);
                        if (query.S.CSIRStaffPayMode == 2)
                        {
                            //query.S.Status = "Awaiting Committee Approval";
                        }
                        else if (query.S.TypeofAppointment == 4 && nofund_f)
                        {
                            //query.S.isGovAgencyFund = true;
                            //query.S.Status = "Awaiting Committee Approval";
                        }
                        else
                        {
                            //query.S.Status = "Awaiting Commitment Booking";

                            tblRCTCommitmentRequest add = new tblRCTCommitmentRequest();
                            add.ReferenceNumber = query.S.ApplicationNumber;
                            add.AppointmentType = "Short Term Engagement";
                            add.TypeCode = "STE";
                            add.CandidateName = query.S.Name;
                            add.CandidateDesignation = query.D.Designation;
                            add.ProjectId = query.S.ProjectId;
                            add.ProjectNumber = Common.getprojectnumber(query.S.ProjectId ?? 0);
                            add.TotalSalary = query.S.Salary;
                            add.RequestedCommitmentAmount = query.S.CommitmentAmount;
                            add.Status = "Awaiting Commitment Booking";
                            add.RequestType = "New Appointment";
                            add.Crtd_TS = DateTime.Now;
                            add.Crtd_UserId = loggedInUser;
                            context.tblRCTCommitmentRequest.Add(add);
                        }

                        query.S.UptdUser = loggedInUser;
                        query.S.UptdTs = DateTime.Now;
                        context.SaveChanges();
                        //RequirementService.PostSTEStatusLog(STEID, "Sent for approval", query.S.Status, loggedInUser);
                        return true;
                    }
                    return false;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion

    }
}