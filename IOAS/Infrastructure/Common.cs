using IOAS.DataModel;
using IOAS.GenericServices;
using IOAS.Models;
using System;
using System.Data;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Configuration;
using System.Data.Common;
using System.Configuration;
using System.Data.SqlClient;
using WorkFlow;
namespace IOAS.Infrastructure
{
    public class Common
    {
        public static List<AutoCompleteModel> GetAutoCompleteAdhocStaffWitheEmpDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwCombineStaffDetails
                                 where string.IsNullOrEmpty(term) || C.EmployeeId.Contains(term) || C.Name.Contains(term) || C.PaybillNo.Contains(term)
                                 //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 //where (C.RoleId == 7)
                                 where C.Category == "AdhocStaff"
                                 orderby C.Name
                                 select new { C.ID, C.Name, C.EmployeeId, C.PaybillNo }).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].EmployeeId,
                                label = query[i].ID + "-" + query[i].Name + "-" + query[i].PaybillNo,

                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }


        //karthi
        public static List<AutoCompleteModel> GetAutoCompleteBankDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblAccountHead
                                 where string.IsNullOrEmpty(term) || C.AccountHead.Contains(term) || C.AccountHeadCode.Contains(term)
                                 //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 //where (C.RoleId == 7)
                                 where C.Status == "Active"
                             && C.Bank_f == true
                             && C.AccountGroupId == 38
                                 orderby C.AccountHead
                                 select new { C.AccountHeadId, C.AccountHead, C.AccountHeadCode }).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].AccountHeadId.ToString(),
                                //label = query[i].AccountHead + "-" + query[i].AccountHeadCode + "-" + query[i].AccountHeadId,
                                label = query[i].AccountHead,

                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }





        public static string GetRolename(int RoleId)
        {

            using (var context = new IOASDBEntities())
            {
                var query = context.tblRole.FirstOrDefault(dup => dup.RoleId == RoleId);
                var userRoleName = "";
                if (query != null)
                {
                    userRoleName = query.RoleName;
                }
                context.Dispose();
                return userRoleName;
            }
        }
        public static int GetRoleId(string username)
        {

            var context = new IOASDBEntities();
            var query = (from U in context.tblUser
                         where (U.UserName == username && U.Status == "Active")
                         select U).FirstOrDefault();
            var userRoleId = 0;
            if (query != null)
            {
                userRoleId = (Int32)query.RoleId;
            }


            return userRoleId;

        }
        public static List<MenuListViewModel> Getaccessrole(int UserId)
        {
            List<MenuListViewModel> addmenu = new List<MenuListViewModel>();

            using (var context = new IOASDBEntities())
            {
                var addtionalroles = (from R in context.tblUserRole
                                      where R.UserId == UserId
                                      select R.RoleId).ToArray();
                var defaultrole = (from R in context.tblUser
                                   where (R.UserId == UserId)
                                   select R.RoleId).FirstOrDefault();

                var roles = (from RA in context.tblRoleaccess
                             from F in context.tblFunction
                             from M in context.tblModules
                             from MG in context.tblMenuGroup
                             where (addtionalroles.Contains(RA.RoleId) || RA.RoleId == defaultrole) && RA.FunctionId == F.FunctionId && F.ModuleID == M.ModuleID && F.MenuGroupID == MG.MenuGroupID
                             select new { F.FunctionId, F.FunctionName, F.ActionName, F.ControllerName, M.ModuleID, M.ModuleIcon, M.ModuleName, MG.MenuGroup, MG.MenuGroupID, F.MenuSeq }).Distinct().ToList();


                //This get rolewise menucount
                if (roles.Count > 0)
                {
                    //This query using get modules in roles count using distinct
                    var module = roles.Select(m => m.ModuleName).Distinct().ToArray();
                    var menugroup = roles.Select(m => m.MenuGroup).Distinct().ToArray();


                    for (int m = 0; m < module.Length; m++)
                    {
                        string moduleName = module[m];
                        var moduleIconName = (from C in roles where C.ModuleName == moduleName select C.ModuleIcon).FirstOrDefault(); //roles.Select(S => S.ModuleName == moduleName).FirstOrDefault();
                        List<submodulemenuviewmodel> submodules = new List<submodulemenuviewmodel>();
                        for (int i = 0; i < menugroup.Length; i++)
                        {

                            string submodule = menugroup[i];
                            var menu = roles.Where(S => S.ModuleName == moduleName && S.MenuGroup == submodule).FirstOrDefault();
                            if (menu != null)
                            {

                                submodules.Add(new submodulemenuviewmodel()
                                {

                                    Menugroupname = submodule,
                                    Submenu = (from sm in roles
                                               where sm.ModuleName == moduleName && sm.MenuGroup == submodule
                                               orderby sm.MenuSeq
                                               select new SubmenuViewModel()
                                               {
                                                   FunctionId = sm.FunctionId,
                                                   Functioname = sm.FunctionName,
                                                   Actionname = sm.ActionName,
                                                   Controllername = sm.ControllerName
                                               }).Distinct().ToList()
                                });
                            }
                        }
                        addmenu.Add(new MenuListViewModel()
                        {
                            Modulename = moduleName,
                            submodule = submodules,
                            ModuleIconName = moduleIconName
                        });

                    }
                }

                return addmenu;
            }
        }
        public static int GetUserid(string Username)
        {

            var context = new IOASDBEntities();
            var query = (from U in context.tblUser
                         where U.UserName == Username && U.Status == "Active"
                         select U).FirstOrDefault();
            var userId = 0;
            if (query != null)
            {
                userId = (Int32)query.UserId;
            }


            return userId;

        }
        public static int getseqncenumber(int financialyear)
        {
            try
            {
                var lastseqnum = 0;
                var context = new IOASDBEntities();
                var Proposalnum = (from proposal in context.tblProposal
                                   where proposal.FinancialYear == financialyear
                                   orderby proposal.ProposalId descending
                                   select proposal.ProposalNumber).FirstOrDefault();
                if (Proposalnum != null)
                {
                    var lastproposalnumber = Proposalnum;
                    var value = lastproposalnumber.Split('_').Last();
                    string number = Regex.Replace(value, @"\D", "");
                    var seqnum = Convert.ToInt32(number);
                    lastseqnum = seqnum + 1;
                    return lastseqnum;
                }
                else
                {
                    return lastseqnum;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string GetNewSRBNumber()
        {
            try
            {
                var srbNum = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var num = (from srb in context.tblSRB
                               orderby srb.SRBId descending
                               select srb.SRBNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('_').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return "SRB_" + seqnum;
                    }
                    else
                    {
                        return "SRB_1";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<MasterlistviewModel> GetUserlist(int Roleid)
        {
            try
            {
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblUser
                                 where (U.RoleId == Roleid && U.Status == "Active")
                                 select new { U.UserId, U.UserName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            User.Add(new MasterlistviewModel()
                            {
                                id = query[i].UserId,
                                name = query[i].UserName
                            });
                        }
                    }

                }
                return User;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                return User;
            }
        }
        public static List<MasterlistviewModel> GetUserNameList()
        {
            try
            {
                List<MasterlistviewModel> getUser = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblUser
                                 where (U.Status == "Active")
                                 select new { U.UserId, U.UserName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            getUser.Add(new MasterlistviewModel()
                            {
                                id = query[i].UserId,
                                name = query[i].UserName

                            });
                        }
                    }
                }
                return getUser;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> getUser = new List<MasterlistviewModel>();
                return getUser;
            }
        }
        public static List<MasterlistviewModel> GetRoleList()
        {
            try
            {
                List<MasterlistviewModel> roleList = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from R in context.tblRole
                                 where (R.Status == "Active")
                                 select new { R.RoleId, R.RoleName }).OrderBy(m => m.RoleName).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            roleList.Add(new MasterlistviewModel()
                            {
                                id = query[i].RoleId,
                                name = query[i].RoleName
                            });
                        }
                    }
                }
                return roleList;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> roleList = new List<MasterlistviewModel>();
                return roleList;
            }
        }
        public static List<MasterlistviewModel> GetCommonHeadList(int categoryId, int groupId)
        {
            try
            {
                List<MasterlistviewModel> roleList = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    roleList = (from h in context.tblCommonHeads
                                where h.CategoryId == categoryId
                                && h.GroupId == groupId && h.Status != "InActive"
                                select new MasterlistviewModel()
                                {
                                    id = h.HeadId,
                                    name = h.Head
                                }).ToList();

                }
                return roleList;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }
        }
        public static bool GetCommonHeadFlag(int headId)
        {
            bool flag = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    flag = context.tblCommonHeads.FirstOrDefault(m => m.HeadId == headId && m.Status != "InActive").Common_f ?? false;

                }
                return flag;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return flag;
            }
        }
        public static List<CountryListViewModel> getCountryList()
        {
            try
            {
                List<CountryListViewModel> country = new List<CountryListViewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCountries
                                 orderby C.countryName
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            country.Add(new CountryListViewModel()
                            {
                                CountryID = query[i].countryID,
                                CountryCode = query[i].countryCode,
                                CountryName = query[i].countryName
                            });
                        }
                    }


                }

                return country;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<MasterlistviewModel> getDepartment()
        {
            try
            {

                List<MasterlistviewModel> department = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from dept in context.vwFacultyStaffDetails
                                 group dept by dept.DepartmentName into g
                                 select new
                                 {
                                     Department = g.Key,
                                     deptCode = g.Select(m => m.DepartmentCode).FirstOrDefault()
                                 }).OrderBy(m => m.Department).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            if (!String.IsNullOrEmpty(query[i].Department) && !String.IsNullOrWhiteSpace(query[i].Department))
                            {
                                department.Add(new MasterlistviewModel()
                                {
                                    name = query[i].Department,
                                    code = query[i].deptCode
                                });
                            }

                        }
                    }


                }

                return department;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> getGender()
        {
            try
            {

                List<MasterlistviewModel> gender = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from gnder in context.tblCodeControl
                                 where (gnder.CodeName == "Gender")
                                 select gnder).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            gender.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail,
                            });
                        }
                    }

                }

                return gender;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> getPI()
        {
            try
            {

                List<MasterlistviewModel> PI = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwFacultyStaffDetails
                                 orderby C.FirstName
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new MasterlistviewModel()
                            {
                                id = query[i].UserId,
                                name = query[i].FirstName
                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetProjectPIWithDetails()
        {
            try
            {

                List<MasterlistviewModel> PI = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwFacultyStaffDetails
                                     //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                     //where (C.RoleId == 7)
                                 orderby C.FirstName
                                 select new { C.DepartmentCode, C.UserId, C.FirstName, C.EmployeeId }).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new MasterlistviewModel()
                            {
                                id = query[i].UserId,
                                name = query[i].EmployeeId + "-" + query[i].FirstName, // + " " + query[i].LastName, + "-" + query[i].Institutecode,
                                code = query[i].DepartmentCode
                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetPIWithDetails()
        {
            try
            {

                List<MasterlistviewModel> PI = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwFacultyStaffDetails
                                     //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                     //where (C.RoleId == 7)
                                 orderby C.FirstName
                                 select new { C.UserId, C.FirstName, C.EmployeeId }).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new MasterlistviewModel()
                            {
                                id = query[i].UserId,
                                name = query[i].EmployeeId + "-" + query[i].FirstName,
                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }


        //        using (var context = new IOASDBEntities())
        //        {
        //            var query = (from C in context.tblFunctionDocument                                 
        //                         where C.FunctionId == 4
        //                         orderby C.FunctionDocumentId
        //                         select C).ToList();


        //            if (query.Count > 0)
        //            {
        //                for (int i = 0; i < query.Count; i++)
        //                {
        //                    var docid = query[i].DocumentId;
        //                    var docquery = (from D in context.tblDocument
        //                                    where D.DocumentId == docid
        //                                    select D).FirstOrDefault();
        //                    Doctype.Add(new MasterlistviewModel()
        //                    {
        //                        id = docquery.DocumentId,
        //                        name = docquery.DocumentName,                               
        //                    });
        //                }
        //            }

        //        }

        //        return Doctype;
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }

        //}

        public static Tuple<Int32, Int32> getUserIdAndRole(string username)
        {
            try
            {
                int userId = 0, role = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblUser.FirstOrDefault(dup => dup.UserName == username);
                    if (query != null)
                    {
                        userId = query.UserId;
                        role = query.RoleId ?? 0;
                    }
                }
                return Tuple.Create(userId, role);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                int userId = 0, role = 0;
                return Tuple.Create(userId, role);
            }
        }

        public static List<MasterlistviewModel> getschemes()
        {
            try
            {

                List<MasterlistviewModel> Scheme = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSchemes
                                 select new { C.SchemeId, C.SchemeName }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Scheme.Add(new MasterlistviewModel()
                            {
                                id = query[i].SchemeId,
                                name = query[i].SchemeName,
                            });
                        }
                    }

                }

                return Scheme;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> getagency()
        {
            try
            {

                List<MasterlistviewModel> Agency = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblAgencyMaster
                                 where C.Status == "Active"
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Agency.Add(new MasterlistviewModel()
                            {
                                id = query[i].AgencyId,
                                name = !String.IsNullOrEmpty(query[i].GSTIN) ? query[i].AgencyName + "-" + query[i].GSTIN : !String.IsNullOrEmpty(query[i].PAN) ? query[i].AgencyName + "-" + query[i].PAN : query[i].AgencyName + "-NA",
                                code = query[i].AgencyCode
                            });
                        }
                    }

                }

                return Agency;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getprojecttype()
        {
            try
            {

                List<CodeControllistviewModel> Projecttype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Projecttype"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projecttype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Projecttype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        private static IDictionary<string, string> _mappings = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase)
        {
             #region Big freaking list of mime types
        // combination of values from Windows 7 Registry and 
        // from C:\Windows\System32\inetsrv\config\applicationHost.config
        // some added, including .7z and .dat
        {".323", "text/h323"},
        {".3g2", "video/3gpp2"},
        {".3gp", "video/3gpp"},
        {".3gp2", "video/3gpp2"},
        {".3gpp", "video/3gpp"},
        {".7z", "application/x-7z-compressed"},
        {".aa", "audio/audible"},
        {".AAC", "audio/aac"},
        {".aaf", "application/octet-stream"},
        {".aax", "audio/vnd.audible.aax"},
        {".ac3", "audio/ac3"},
        {".aca", "application/octet-stream"},
        {".accda", "application/msaccess.addin"},
        {".accdb", "application/msaccess"},
        {".accdc", "application/msaccess.cab"},
        {".accde", "application/msaccess"},
        {".accdr", "application/msaccess.runtime"},
        {".accdt", "application/msaccess"},
        {".accdw", "application/msaccess.webapplication"},
        {".accft", "application/msaccess.ftemplate"},
        {".acx", "application/internet-property-stream"},
        {".AddIn", "text/xml"},
        {".ade", "application/msaccess"},
        {".adobebridge", "application/x-bridge-url"},
        {".adp", "application/msaccess"},
        {".ADT", "audio/vnd.dlna.adts"},
        {".ADTS", "audio/aac"},
        {".afm", "application/octet-stream"},
        {".ai", "application/postscript"},
        {".aif", "audio/x-aiff"},
        {".aifc", "audio/aiff"},
        {".aiff", "audio/aiff"},
        {".air", "application/vnd.adobe.air-application-installer-package+zip"},
        {".amc", "application/x-mpeg"},
        {".application", "application/x-ms-application"},
        {".art", "image/x-jg"},
        {".asa", "application/xml"},
        {".asax", "application/xml"},
        {".ascx", "application/xml"},
        {".asd", "application/octet-stream"},
        {".asf", "video/x-ms-asf"},
        {".ashx", "application/xml"},
        {".asi", "application/octet-stream"},
        {".asm", "text/plain"},
        {".asmx", "application/xml"},
        {".aspx", "application/xml"},
        {".asr", "video/x-ms-asf"},
        {".asx", "video/x-ms-asf"},
        {".atom", "application/atom+xml"},
        {".au", "audio/basic"},
        {".avi", "video/x-msvideo"},
        {".axs", "application/olescript"},
        {".bas", "text/plain"},
        {".bcpio", "application/x-bcpio"},
        {".bin", "application/octet-stream"},
        {".bmp", "image/bmp"},
        {".c", "text/plain"},
        {".cab", "application/octet-stream"},
        {".caf", "audio/x-caf"},
        {".calx", "application/vnd.ms-office.calx"},
        {".cat", "application/vnd.ms-pki.seccat"},
        {".cc", "text/plain"},
        {".cd", "text/plain"},
        {".cdda", "audio/aiff"},
        {".cdf", "application/x-cdf"},
        {".cer", "application/x-x509-ca-cert"},
        {".chm", "application/octet-stream"},
        {".class", "application/x-java-applet"},
        {".clp", "application/x-msclip"},
        {".cmx", "image/x-cmx"},
        {".cnf", "text/plain"},
        {".cod", "image/cis-cod"},
        {".config", "application/xml"},
        {".contact", "text/x-ms-contact"},
        {".coverage", "application/xml"},
        {".cpio", "application/x-cpio"},
        {".cpp", "text/plain"},
        {".crd", "application/x-mscardfile"},
        {".crl", "application/pkix-crl"},
        {".crt", "application/x-x509-ca-cert"},
        {".cs", "text/plain"},
        {".csdproj", "text/plain"},
        {".csh", "application/x-csh"},
        {".csproj", "text/plain"},
        {".css", "text/css"},
        {".csv", "text/csv"},
        {".cur", "application/octet-stream"},
        {".cxx", "text/plain"},
        {".dat", "application/octet-stream"},
        {".datasource", "application/xml"},
        {".dbproj", "text/plain"},
        {".dcr", "application/x-director"},
        {".def", "text/plain"},
        {".deploy", "application/octet-stream"},
        {".der", "application/x-x509-ca-cert"},
        {".dgml", "application/xml"},
        {".dib", "image/bmp"},
        {".dif", "video/x-dv"},
        {".dir", "application/x-director"},
        {".disco", "text/xml"},
        {".dll", "application/x-msdownload"},
        {".dll.config", "text/xml"},
        {".dlm", "text/dlm"},
        {".doc", "application/msword"},
        {".docm", "application/vnd.ms-word.document.macroEnabled.12"},
        {".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"},
        {".dot", "application/msword"},
        {".dotm", "application/vnd.ms-word.template.macroEnabled.12"},
        {".dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"},
        {".dsp", "application/octet-stream"},
        {".dsw", "text/plain"},
        {".dtd", "text/xml"},
        {".dtsConfig", "text/xml"},
        {".dv", "video/x-dv"},
        {".dvi", "application/x-dvi"},
        {".dwf", "drawing/x-dwf"},
        {".dwp", "application/octet-stream"},
        {".dxr", "application/x-director"},
        {".eml", "message/rfc822"},
        {".emz", "application/octet-stream"},
        {".eot", "application/octet-stream"},
        {".eps", "application/postscript"},
        {".etl", "application/etl"},
        {".etx", "text/x-setext"},
        {".evy", "application/envoy"},
        {".exe", "application/octet-stream"},
        {".exe.config", "text/xml"},
        {".fdf", "application/vnd.fdf"},
        {".fif", "application/fractals"},
        {".filters", "Application/xml"},
        {".fla", "application/octet-stream"},
        {".flr", "x-world/x-vrml"},
        {".flv", "video/x-flv"},
        {".fsscript", "application/fsharp-script"},
        {".fsx", "application/fsharp-script"},
        {".generictest", "application/xml"},
        {".gif", "image/gif"},
        {".group", "text/x-ms-group"},
        {".gsm", "audio/x-gsm"},
        {".gtar", "application/x-gtar"},
        {".gz", "application/x-gzip"},
        {".h", "text/plain"},
        {".hdf", "application/x-hdf"},
        {".hdml", "text/x-hdml"},
        {".hhc", "application/x-oleobject"},
        {".hhk", "application/octet-stream"},
        {".hhp", "application/octet-stream"},
        {".hlp", "application/winhlp"},
        {".hpp", "text/plain"},
        {".hqx", "application/mac-binhex40"},
        {".hta", "application/hta"},
        {".htc", "text/x-component"},
        {".htm", "text/html"},
        {".html", "text/html"},
        {".htt", "text/webviewhtml"},
        {".hxa", "application/xml"},
        {".hxc", "application/xml"},
        {".hxd", "application/octet-stream"},
        {".hxe", "application/xml"},
        {".hxf", "application/xml"},
        {".hxh", "application/octet-stream"},
        {".hxi", "application/octet-stream"},
        {".hxk", "application/xml"},
        {".hxq", "application/octet-stream"},
        {".hxr", "application/octet-stream"},
        {".hxs", "application/octet-stream"},
        {".hxt", "text/html"},
        {".hxv", "application/xml"},
        {".hxw", "application/octet-stream"},
        {".hxx", "text/plain"},
        {".i", "text/plain"},
        {".ico", "image/x-icon"},
        {".ics", "application/octet-stream"},
        {".idl", "text/plain"},
        {".ief", "image/ief"},
        {".iii", "application/x-iphone"},
        {".inc", "text/plain"},
        {".inf", "application/octet-stream"},
        {".inl", "text/plain"},
        {".ins", "application/x-internet-signup"},
        {".ipa", "application/x-itunes-ipa"},
        {".ipg", "application/x-itunes-ipg"},
        {".ipproj", "text/plain"},
        {".ipsw", "application/x-itunes-ipsw"},
        {".iqy", "text/x-ms-iqy"},
        {".isp", "application/x-internet-signup"},
        {".ite", "application/x-itunes-ite"},
        {".itlp", "application/x-itunes-itlp"},
        {".itms", "application/x-itunes-itms"},
        {".itpc", "application/x-itunes-itpc"},
        {".IVF", "video/x-ivf"},
        {".jar", "application/java-archive"},
        {".java", "application/octet-stream"},
        {".jck", "application/liquidmotion"},
        {".jcz", "application/liquidmotion"},
        {".jfif", "image/pjpeg"},
        {".jnlp", "application/x-java-jnlp-file"},
        {".jpb", "application/octet-stream"},
        {".jpe", "image/jpeg"},
        {".jpeg", "image/jpeg"},
        {".jpg", "image/jpeg"},
        {".js", "application/x-javascript"},
        {".json", "application/json"},
        {".jsx", "text/jscript"},
        {".jsxbin", "text/plain"},
        {".latex", "application/x-latex"},
        {".library-ms", "application/windows-library+xml"},
        {".lit", "application/x-ms-reader"},
        {".loadtest", "application/xml"},
        {".lpk", "application/octet-stream"},
        {".lsf", "video/x-la-asf"},
        {".lst", "text/plain"},
        {".lsx", "video/x-la-asf"},
        {".lzh", "application/octet-stream"},
        {".m13", "application/x-msmediaview"},
        {".m14", "application/x-msmediaview"},
        {".m1v", "video/mpeg"},
        {".m2t", "video/vnd.dlna.mpeg-tts"},
        {".m2ts", "video/vnd.dlna.mpeg-tts"},
        {".m2v", "video/mpeg"},
        {".m3u", "audio/x-mpegurl"},
        {".m3u8", "audio/x-mpegurl"},
        {".m4a", "audio/m4a"},
        {".m4b", "audio/m4b"},
        {".m4p", "audio/m4p"},
        {".m4r", "audio/x-m4r"},
        {".m4v", "video/x-m4v"},
        {".mac", "image/x-macpaint"},
        {".mak", "text/plain"},
        {".man", "application/x-troff-man"},
        {".manifest", "application/x-ms-manifest"},
        {".map", "text/plain"},
        {".master", "application/xml"},
        {".mda", "application/msaccess"},
        {".mdb", "application/x-msaccess"},
        {".mde", "application/msaccess"},
        {".mdp", "application/octet-stream"},
        {".me", "application/x-troff-me"},
        {".mfp", "application/x-shockwave-flash"},
        {".mht", "message/rfc822"},
        {".mhtml", "message/rfc822"},
        {".mid", "audio/mid"},
        {".midi", "audio/mid"},
        {".mix", "application/octet-stream"},
        {".mk", "text/plain"},
        {".mmf", "application/x-smaf"},
        {".mno", "text/xml"},
        {".mny", "application/x-msmoney"},
        {".mod", "video/mpeg"},
        {".mov", "video/quicktime"},
        {".movie", "video/x-sgi-movie"},
        {".mp2", "video/mpeg"},
        {".mp2v", "video/mpeg"},
        {".mp3", "audio/mpeg"},
        {".mp4", "video/mp4"},
        {".mp4v", "video/mp4"},
        {".mpa", "video/mpeg"},
        {".mpe", "video/mpeg"},
        {".mpeg", "video/mpeg"},
        {".mpf", "application/vnd.ms-mediapackage"},
        {".mpg", "video/mpeg"},
        {".mpp", "application/vnd.ms-project"},
        {".mpv2", "video/mpeg"},
        {".mqv", "video/quicktime"},
        {".ms", "application/x-troff-ms"},
        {".msi", "application/octet-stream"},
        {".mso", "application/octet-stream"},
        {".mts", "video/vnd.dlna.mpeg-tts"},
        {".mtx", "application/xml"},
        {".mvb", "application/x-msmediaview"},
        {".mvc", "application/x-miva-compiled"},
        {".mxp", "application/x-mmxp"},
        {".nc", "application/x-netcdf"},
        {".nsc", "video/x-ms-asf"},
        {".nws", "message/rfc822"},
        {".ocx", "application/octet-stream"},
        {".oda", "application/oda"},
        {".odc", "text/x-ms-odc"},
        {".odh", "text/plain"},
        {".odl", "text/plain"},
        {".odp", "application/vnd.oasis.opendocument.presentation"},
        {".ods", "application/oleobject"},
        {".odt", "application/vnd.oasis.opendocument.text"},
        {".one", "application/onenote"},
        {".onea", "application/onenote"},
        {".onepkg", "application/onenote"},
        {".onetmp", "application/onenote"},
        {".onetoc", "application/onenote"},
        {".onetoc2", "application/onenote"},
        {".orderedtest", "application/xml"},
        {".osdx", "application/opensearchdescription+xml"},
        {".p10", "application/pkcs10"},
        {".p12", "application/x-pkcs12"},
        {".p7b", "application/x-pkcs7-certificates"},
        {".p7c", "application/pkcs7-mime"},
        {".p7m", "application/pkcs7-mime"},
        {".p7r", "application/x-pkcs7-certreqresp"},
        {".p7s", "application/pkcs7-signature"},
        {".pbm", "image/x-portable-bitmap"},
        {".pcast", "application/x-podcast"},
        {".pct", "image/pict"},
        {".pcx", "application/octet-stream"},
        {".pcz", "application/octet-stream"},
        {".pdf", "application/pdf"},
        {".pfb", "application/octet-stream"},
        {".pfm", "application/octet-stream"},
        {".pfx", "application/x-pkcs12"},
        {".pgm", "image/x-portable-graymap"},
        {".pic", "image/pict"},
        {".pict", "image/pict"},
        {".pkgdef", "text/plain"},
        {".pkgundef", "text/plain"},
        {".pko", "application/vnd.ms-pki.pko"},
        {".pls", "audio/scpls"},
        {".pma", "application/x-perfmon"},
        {".pmc", "application/x-perfmon"},
        {".pml", "application/x-perfmon"},
        {".pmr", "application/x-perfmon"},
        {".pmw", "application/x-perfmon"},
        {".png", "image/png"},
        {".pnm", "image/x-portable-anymap"},
        {".pnt", "image/x-macpaint"},
        {".pntg", "image/x-macpaint"},
        {".pnz", "image/png"},
        {".pot", "application/vnd.ms-powerpoint"},
        {".potm", "application/vnd.ms-powerpoint.template.macroEnabled.12"},
        {".potx", "application/vnd.openxmlformats-officedocument.presentationml.template"},
        {".ppa", "application/vnd.ms-powerpoint"},
        {".ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"},
        {".ppm", "image/x-portable-pixmap"},
        {".pps", "application/vnd.ms-powerpoint"},
        {".ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"},
        {".ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"},
        {".ppt", "application/vnd.ms-powerpoint"},
        {".pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"},
        {".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"},
        {".prf", "application/pics-rules"},
        {".prm", "application/octet-stream"},
        {".prx", "application/octet-stream"},
        {".ps", "application/postscript"},
        {".psc1", "application/PowerShell"},
        {".psd", "application/octet-stream"},
        {".psess", "application/xml"},
        {".psm", "application/octet-stream"},
        {".psp", "application/octet-stream"},
        {".pub", "application/x-mspublisher"},
        {".pwz", "application/vnd.ms-powerpoint"},
        {".qht", "text/x-html-insertion"},
        {".qhtm", "text/x-html-insertion"},
        {".qt", "video/quicktime"},
        {".qti", "image/x-quicktime"},
        {".qtif", "image/x-quicktime"},
        {".qtl", "application/x-quicktimeplayer"},
        {".qxd", "application/octet-stream"},
        {".ra", "audio/x-pn-realaudio"},
        {".ram", "audio/x-pn-realaudio"},
        {".rar", "application/octet-stream"},
        {".ras", "image/x-cmu-raster"},
        {".rat", "application/rat-file"},
        {".rc", "text/plain"},
        {".rc2", "text/plain"},
        {".rct", "text/plain"},
        {".rdlc", "application/xml"},
        {".resx", "application/xml"},
        {".rf", "image/vnd.rn-realflash"},
        {".rgb", "image/x-rgb"},
        {".rgs", "text/plain"},
        {".rm", "application/vnd.rn-realmedia"},
        {".rmi", "audio/mid"},
        {".rmp", "application/vnd.rn-rn_music_package"},
        {".roff", "application/x-troff"},
        {".rpm", "audio/x-pn-realaudio-plugin"},
        {".rqy", "text/x-ms-rqy"},
        {".rtf", "application/rtf"},
        {".rtx", "text/richtext"},
        {".ruleset", "application/xml"},
        {".s", "text/plain"},
        {".safariextz", "application/x-safari-safariextz"},
        {".scd", "application/x-msschedule"},
        {".sct", "text/scriptlet"},
        {".sd2", "audio/x-sd2"},
        {".sdp", "application/sdp"},
        {".sea", "application/octet-stream"},
        {".searchConnector-ms", "application/windows-search-connector+xml"},
        {".setpay", "application/set-payment-initiation"},
        {".setreg", "application/set-registration-initiation"},
        {".settings", "application/xml"},
        {".sgimb", "application/x-sgimb"},
        {".sgml", "text/sgml"},
        {".sh", "application/x-sh"},
        {".shar", "application/x-shar"},
        {".shtml", "text/html"},
        {".sit", "application/x-stuffit"},
        {".sitemap", "application/xml"},
        {".skin", "application/xml"},
        {".sldm", "application/vnd.ms-powerpoint.slide.macroEnabled.12"},
        {".sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"},
        {".slk", "application/vnd.ms-excel"},
        {".sln", "text/plain"},
        {".slupkg-ms", "application/x-ms-license"},
        {".smd", "audio/x-smd"},
        {".smi", "application/octet-stream"},
        {".smx", "audio/x-smd"},
        {".smz", "audio/x-smd"},
        {".snd", "audio/basic"},
        {".snippet", "application/xml"},
        {".snp", "application/octet-stream"},
        {".sol", "text/plain"},
        {".sor", "text/plain"},
        {".spc", "application/x-pkcs7-certificates"},
        {".spl", "application/futuresplash"},
        {".src", "application/x-wais-source"},
        {".srf", "text/plain"},
        {".SSISDeploymentManifest", "text/xml"},
        {".ssm", "application/streamingmedia"},
        {".sst", "application/vnd.ms-pki.certstore"},
        {".stl", "application/vnd.ms-pki.stl"},
        {".sv4cpio", "application/x-sv4cpio"},
        {".sv4crc", "application/x-sv4crc"},
        {".svc", "application/xml"},
        {".swf", "application/x-shockwave-flash"},
        {".t", "application/x-troff"},
        {".tar", "application/x-tar"},
        {".tcl", "application/x-tcl"},
        {".testrunconfig", "application/xml"},
        {".testsettings", "application/xml"},
        {".tex", "application/x-tex"},
        {".texi", "application/x-texinfo"},
        {".texinfo", "application/x-texinfo"},
        {".tgz", "application/x-compressed"},
        {".thmx", "application/vnd.ms-officetheme"},
        {".thn", "application/octet-stream"},
        {".tif", "image/tiff"},
        {".tiff", "image/tiff"},
        {".tlh", "text/plain"},
        {".tli", "text/plain"},
        {".toc", "application/octet-stream"},
        {".tr", "application/x-troff"},
        {".trm", "application/x-msterminal"},
        {".trx", "application/xml"},
        {".ts", "video/vnd.dlna.mpeg-tts"},
        {".tsv", "text/tab-separated-values"},
        {".ttf", "application/octet-stream"},
        {".tts", "video/vnd.dlna.mpeg-tts"},
        {".txt", "text/plain"},
        {".u32", "application/octet-stream"},
        {".uls", "text/iuls"},
        {".user", "text/plain"},
        {".ustar", "application/x-ustar"},
        {".vb", "text/plain"},
        {".vbdproj", "text/plain"},
        {".vbk", "video/mpeg"},
        {".vbproj", "text/plain"},
        {".vbs", "text/vbscript"},
        {".vcf", "text/x-vcard"},
        {".vcproj", "Application/xml"},
        {".vcs", "text/plain"},
        {".vcxproj", "Application/xml"},
        {".vddproj", "text/plain"},
        {".vdp", "text/plain"},
        {".vdproj", "text/plain"},
        {".vdx", "application/vnd.ms-visio.viewer"},
        {".vml", "text/xml"},
        {".vscontent", "application/xml"},
        {".vsct", "text/xml"},
        {".vsd", "application/vnd.visio"},
        {".vsi", "application/ms-vsi"},
        {".vsix", "application/vsix"},
        {".vsixlangpack", "text/xml"},
        {".vsixmanifest", "text/xml"},
        {".vsmdi", "application/xml"},
        {".vspscc", "text/plain"},
        {".vss", "application/vnd.visio"},
        {".vsscc", "text/plain"},
        {".vssettings", "text/xml"},
        {".vssscc", "text/plain"},
        {".vst", "application/vnd.visio"},
        {".vstemplate", "text/xml"},
        {".vsto", "application/x-ms-vsto"},
        {".vsw", "application/vnd.visio"},
        {".vsx", "application/vnd.visio"},
        {".vtx", "application/vnd.visio"},
        {".wav", "audio/wav"},
        {".wave", "audio/wav"},
        {".wax", "audio/x-ms-wax"},
        {".wbk", "application/msword"},
        {".wbmp", "image/vnd.wap.wbmp"},
        {".wcm", "application/vnd.ms-works"},
        {".wdb", "application/vnd.ms-works"},
        {".wdp", "image/vnd.ms-photo"},
        {".webarchive", "application/x-safari-webarchive"},
        {".webtest", "application/xml"},
        {".wiq", "application/xml"},
        {".wiz", "application/msword"},
        {".wks", "application/vnd.ms-works"},
        {".WLMP", "application/wlmoviemaker"},
        {".wlpginstall", "application/x-wlpg-detect"},
        {".wlpginstall3", "application/x-wlpg3-detect"},
        {".wm", "video/x-ms-wm"},
        {".wma", "audio/x-ms-wma"},
        {".wmd", "application/x-ms-wmd"},
        {".wmf", "application/x-msmetafile"},
        {".wml", "text/vnd.wap.wml"},
        {".wmlc", "application/vnd.wap.wmlc"},
        {".wmls", "text/vnd.wap.wmlscript"},
        {".wmlsc", "application/vnd.wap.wmlscriptc"},
        {".wmp", "video/x-ms-wmp"},
        {".wmv", "video/x-ms-wmv"},
        {".wmx", "video/x-ms-wmx"},
        {".wmz", "application/x-ms-wmz"},
        {".wpl", "application/vnd.ms-wpl"},
        {".wps", "application/vnd.ms-works"},
        {".wri", "application/x-mswrite"},
        {".wrl", "x-world/x-vrml"},
        {".wrz", "x-world/x-vrml"},
        {".wsc", "text/scriptlet"},
        {".wsdl", "text/xml"},
        {".wvx", "video/x-ms-wvx"},
        {".x", "application/directx"},
        {".xaf", "x-world/x-vrml"},
        {".xaml", "application/xaml+xml"},
        {".xap", "application/x-silverlight-app"},
        {".xbap", "application/x-ms-xbap"},
        {".xbm", "image/x-xbitmap"},
        {".xdr", "text/plain"},
        {".xht", "application/xhtml+xml"},
        {".xhtml", "application/xhtml+xml"},
        {".xla", "application/vnd.ms-excel"},
        {".xlam", "application/vnd.ms-excel.addin.macroEnabled.12"},
        {".xlc", "application/vnd.ms-excel"},
        {".xld", "application/vnd.ms-excel"},
        {".xlk", "application/vnd.ms-excel"},
        {".xll", "application/vnd.ms-excel"},
        {".xlm", "application/vnd.ms-excel"},
        {".xls", "application/vnd.ms-excel"},
        {".xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"},
        {".xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"},
        {".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"},
        {".xlt", "application/vnd.ms-excel"},
        {".xltm", "application/vnd.ms-excel.template.macroEnabled.12"},
        {".xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"},
        {".xlw", "application/vnd.ms-excel"},
        {".xml", "text/xml"},
        {".xmta", "application/xml"},
        {".xof", "x-world/x-vrml"},
        {".XOML", "text/plain"},
        {".xpm", "image/x-xpixmap"},
        {".xps", "application/vnd.ms-xpsdocument"},
        {".xrm-ms", "text/xml"},
        {".xsc", "application/xml"},
        {".xsd", "text/xml"},
        {".xsf", "text/xml"},
        {".xsl", "text/xml"},
        {".xslt", "text/xml"},
        {".xsn", "application/octet-stream"},
        {".xss", "application/xml"},
        {".xtp", "application/octet-stream"},
        {".xwd", "image/x-xwindowdump"},
        {".z", "application/x-compress"},
        {".zip", "application/x-zip-compressed"},
        #endregion

        };
        public static string GetMimeType(string extension)
        {
            if (extension == null)
            {
                throw new ArgumentNullException("extension");
            }

            if (!extension.StartsWith("."))
            {
                extension = "." + extension;
            }

            string mime;

            return _mappings.TryGetValue(extension, out mime) ? mime : "application/octet-stream";
        }

        public static string getPIusernamebyname(int PIName)
        {

            var context = new IOASDBEntities();
            var query = (from User in context.tblUser
                         where (User.UserId == PIName)
                         select User).FirstOrDefault();
            var username = "";

            if (query != null)
            {
                username = query.UserName;
            }

            return username;

        }

        public static string GetTapalType(int Id)
        {
            try
            {
                string TapalType = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = context.tblCodeControl.FirstOrDefault(m => m.CodeName == "TapalCatagory" && m.CodeValAbbr == Id).CodeValDetail;
                    if (Query != null)
                    {
                        TapalType = Query;
                    }
                }
                return TapalType;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static string GetPIName(int Id, bool appendEmpId = false)
        {
            try
            {
                string PIName = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = context.vwFacultyStaffDetails.FirstOrDefault(m => m.UserId == Id);
                    if (Query != null)
                    {
                        if (appendEmpId)
                            PIName = Query.EmployeeId + "-" + Query.FirstName;
                        else
                            PIName = Query.FirstName;
                    }
                }
                return PIName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string GetProjectStaffName(int Id, bool appendEmpId = false)
        {
            try
            {
                string name = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = context.tblProjectStaffDetail.FirstOrDefault(m => m.CastEmployeeId == Id);
                    if (Query != null)
                    {
                        if (appendEmpId)
                            name = Query.EmployeeId + "-" + Query.EmployeeName;
                        else
                            name = Query.EmployeeName;
                    }
                }
                return name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static string GetPIEmail(int Id)
        {
            try
            {
                string PIEmail = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = context.vwFacultyStaffDetails.FirstOrDefault(m => m.UserId == Id);
                    if (Query != null)
                    {
                        PIEmail = Query.Email;
                    }
                }
                return PIEmail;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static List<MasterlistviewModel> GetDepartment()
        {
            try
            {
                List<MasterlistviewModel> Department = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblDepartment where C.Status == "Active" orderby C.DepartmentId ascending select C).ToList();
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            Department.Add(new MasterlistviewModel()
                            {
                                id = Query[i].DepartmentId,
                                name = Query[i].DepartmentName
                            });
                        }
                    }
                    return Department;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Department = new List<MasterlistviewModel>();
                return Department;
            }
        }

        public static List<MasterlistviewModel> GetUserList()
        {
            try
            {
                List<MasterlistviewModel> UserList = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblUser orderby C.UserId ascending select C).ToList();
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            UserList.Add(new MasterlistviewModel()
                            {
                                id = Query[i].UserId,
                                name = Query[i].FirstName + ' ' + Query[i].LastName
                            });
                        }
                    }
                    return UserList;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> UserList = new List<MasterlistviewModel>();
                return UserList;
            }
        }
        //public static List<MasterlistviewModel> GetUserListByDepId(int ID)
        //{
        //    try
        //    {
        //        List<MasterlistviewModel> UserList = new List<MasterlistviewModel>();
        //        using (var context = new IOASDBEntities())
        //        {
        //            var Query = (from C in context.tblUser where C.DepartmentId == ID orderby C.UserId ascending select C).ToList();
        //            if (Query.Count > 0)
        //            {
        //                for (int i = 0; i < Query.Count; i++)
        //                {
        //                    UserList.Add(new MasterlistviewModel()
        //                    {
        //                        id = Query[i].UserId,
        //                        name = Query[i].FirstName + ' ' + Query[i].LastName
        //                    });
        //                }
        //            }
        //            return UserList;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        List<MasterlistviewModel> UserList = new List<MasterlistviewModel>();
        //        return UserList;
        //    }
        //}

        public static List<MasterlistviewModel> GetTapalCatagory()
        {
            try
            {
                List<MasterlistviewModel> Catagory = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblCodeControl where C.CodeName == "TapalCatagory" orderby C.CodeValDetail ascending select C).ToList();
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            Catagory.Add(new MasterlistviewModel()
                            {
                                id = Query[i].CodeValAbbr,
                                name = Query[i].CodeValDetail
                            });
                        }
                    }
                    return Catagory;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Catagory = new List<MasterlistviewModel>();
                return Catagory;
            }
        }

        public static string GetDepartmentById(int TapalId)
        {
            try
            {
                string Department = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblTapalWorkflow where C.TapalId == TapalId && C.Is_Active == false orderby C.TapalWorkflowId descending select C.MarkTo).FirstOrDefault();
                    if (Query != null)
                    {

                        Department = GetDepartmentName(Query ?? 0);

                    }
                    return Department;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string GetDepartmentName(int Depid)
        {
            try
            {
                string Department = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblDepartment where C.DepartmentId == Depid select C.DepartmentName).FirstOrDefault();
                    if (Query != null)
                    {

                        Department = Query;

                    }
                    return Department;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string GetTapalDepartmentById(int TapalId)
        {
            try
            {
                string Department = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblTapalWorkflow where C.TapalId == TapalId && C.Is_Active == false orderby C.TapalWorkflowId descending select C.MarkTo).FirstOrDefault();
                    if (Query != null)
                    {

                        Department = GetDepartmentName(Query ?? 0);

                    }
                    return Department;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static string GetUserListById(int UserId)
        {
            try
            {
                string User = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblUser where C.UserId == UserId select C).FirstOrDefault();
                    if (Query != null)
                    {
                        User = Query.FirstName + ' ' + Query.LastName;
                    }
                    return User;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }


        public static Tuple<string, string> getUploadFileName(int TapalDocId, int TapalId)
        {
            string fileName = "";
            string DocName = "";
            using (var context = new IOASDBEntities())
            {
                var file = (from c in context.tblTapal
                            join d in context.tblTapalDocumentDetail on c.TapalId equals d.TapalId
                            where c.TapalId == TapalId && d.TapalDocumentDetailId == TapalDocId
                            select d).FirstOrDefault();
                if (file != null)
                {
                    fileName = file.FileName;
                    DocName = file.DocumentName;
                }
            }
            return Tuple.Create(fileName, DocName);
        }

        public static List<MasterlistviewModel> GetSRBItemCatagory()
        {
            try
            {
                List<MasterlistviewModel> Catagory = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblSRBItemCategory
                                 where C.Status == "Active"
                                 orderby C.Category
                                 select C).ToList();
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            Catagory.Add(new MasterlistviewModel()
                            {
                                id = Query[i].SRBItemCategotyId,
                                name = Query[i].Category
                            });
                        }
                    }
                    return Catagory;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Catagory = new List<MasterlistviewModel>();
                return Catagory;
            }
        }
        public static bool CheckIsAsset(int CategoryId)
        {
            try
            {
                bool isAsset = false;
                using (var context = new IOASDBEntities())
                {
                    var Query = context.tblSRBItemCategory.FirstOrDefault(m => m.SRBItemCategotyId == CategoryId);
                    if (Query != null)
                    {
                        isAsset = Query.Asset_f ?? false;
                    }
                    return isAsset;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static List<MasterlistviewModel> GetInstitute()
        {
            try
            {
                List<MasterlistviewModel> inusmodel = new List<MasterlistviewModel>();
                {
                    using (var context = new IOASDBEntities())
                    {
                        var query = (from I in context.tblInstituteMaster
                                     orderby I.Institutename
                                     select new { I.InstituteId, I.Institutename }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                inusmodel.Add(new MasterlistviewModel()
                                {
                                    id = query[i].InstituteId,
                                    name = query[i].Institutename
                                });
                            }

                        }
                        return inusmodel;
                    }

                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> inusmodel = new List<MasterlistviewModel>();
                return inusmodel;
            }
        }

        public static List<MasterlistviewModel> GetPIByInstitute(int InstituteId)
        {
            try
            {
                List<MasterlistviewModel> Catagory = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from user in context.tblUser
                                 where user.InstituteId == InstituteId && user.Status == "Active"
                                 orderby user.FirstName, user.LastName
                                 select new { user.UserId, user.FirstName, user.LastName, user.EMPCode }).ToList();
                    Catagory.Add(new MasterlistviewModel()
                    {
                        id = null,
                        name = "Select PI"
                    });
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            Catagory.Add(new MasterlistviewModel()
                            {
                                id = Query[i].UserId,
                                name = Query[i].EMPCode + "-" + Query[i].FirstName + " " + Query[i].LastName
                            });
                        }
                    }
                    return Catagory;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> name = new List<MasterlistviewModel>();
                return name;
            }
        }
        public static int Gcd(int a, int b)
        {
            if (a == 0)
                return b;
            else
                return Gcd(b % a, a);
        }
        public static string GetRatio(int a, int b)
        {
            int gcd = Gcd(a, b);
            return (a / gcd).ToString() + ":" + (b / gcd).ToString();
        }

        public static List<MasterlistviewModel> GetPIProjects(int PIId)
        {
            try
            {
                List<MasterlistviewModel> Catagory = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from pro in context.tblProject
                                 where pro.PIName == PIId
                                 orderby pro.ProposalNumber
                                 select new { pro.ProjectId, pro.ProjectNumber }).ToList();
                    //Catagory.Add(new MasterlistviewModel()
                    //{
                    //    id = null,
                    //    name = "Select Project"
                    //});
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            Catagory.Add(new MasterlistviewModel()
                            {
                                id = Query[i].ProjectId,
                                name = Query[i].ProjectNumber
                            });
                        }
                    }
                    return Catagory;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> name = new List<MasterlistviewModel>();
                return name;
            }
        }

        public static string GetProjectNumber(int ProjectId, bool appendPIName = false)
        {
            try
            {
                string num = "";
                using (var context = new IOASDBEntities())
                {
                    if (!appendPIName)
                    {
                        var PNum = context.tblProject.Where(m => m.ProjectId == ProjectId).FirstOrDefault();
                        if (PNum != null)
                            num = PNum.ProjectNumber;
                    }
                    else
                    {
                        var query = (from P in context.tblProject
                                     join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                     where P.ProjectId == ProjectId
                                     select new
                                     {
                                         P.ProjectNumber,
                                         U.FirstName
                                     }).FirstOrDefault();
                        if (query != null)
                            num = query.ProjectNumber + "-" + query.FirstName;
                    }
                    return num;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static List<MasterlistviewModel> getproposalnumber()
        {
            try
            {

                List<MasterlistviewModel> Proposalnumber = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProposal
                                 where C.Status == "Active"
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Proposalnumber.Add(new MasterlistviewModel()
                            {
                                id = query[i].ProposalId,
                                name = query[i].ProposalNumber,
                            });
                        }
                    }

                }

                return Proposalnumber;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<MasterlistviewModel> getMinistry()
        {
            try
            {

                List<MasterlistviewModel> ministry = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from minstry in context.tblMinistryMaster
                                 select minstry).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            ministry.Add(new MasterlistviewModel()
                            {
                                id = query[i].MinistryId,
                                name = query[i].MinistryName,

                            });
                        }
                    }


                }

                return ministry;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<CodeControllistviewModel> getsponprojectsubtype()
        {
            try
            {

                List<CodeControllistviewModel> Projectsubtype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "SponsoredProjectSubtype"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projectsubtype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Projectsubtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<CodeControllistviewModel> getconsprojectsubtype()
        {
            try
            {

                List<CodeControllistviewModel> Projectsubtype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ConsultancyProjectSubtype"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projectsubtype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Projectsubtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<MasterlistviewModel> getcategoryofproject()
        {
            try
            {

                List<MasterlistviewModel> projectcategory = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSchemes
                                 orderby C.SchemeId
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            projectcategory.Add(new MasterlistviewModel()
                            {
                                id = query[i].SchemeId,
                                name = query[i].SchemeName,
                            });
                        }
                    }

                }

                return projectcategory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<CodeControllistviewModel> getFacultyCadre()
        {
            try
            {

                List<CodeControllistviewModel> facultycadre = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "FacultyCadre"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            facultycadre.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return facultycadre;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<CodeControllistviewModel> getprojectcategory()
        {
            try
            {

                List<CodeControllistviewModel> projectcategory = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ConsultancyProjectSubtype"
                                 orderby C.CodeValDetail
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            projectcategory.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return projectcategory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<MasterlistviewModel> getallocationhead()
        {
            try
            {

                List<MasterlistviewModel> allocationhead = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblBudgetHead
                                 orderby C.HeadName
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            allocationhead.Add(new MasterlistviewModel()
                            {
                                id = query[i].BudgetHeadId,
                                name = query[i].HeadName,
                                code = query[i].IsRecurring == true ? "Recurring" : "Non-Recurring"
                            });
                        }
                    }

                }

                return allocationhead;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<CodeControllistviewModel> gettaxservice()
        {
            try
            {

                List<CodeControllistviewModel> allocationhead = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ServiceMode"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            allocationhead.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return allocationhead;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetProjecttitledetails()
        {
            try
            {

                List<MasterlistviewModel> Projectdetails = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join user in context.tblUser on C.PIName equals user.UserId
                                 where !context.tblProjectEnhancementAllocation.Any(m => m.ProjectId == C.ProjectId && m.IsCurrentVersion == true)
                                 && C.Status == "Active"
                                 select new { C, user.FirstName, user.LastName, user.EMPCode }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projectdetails.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.ProjectId,
                                name = query[i].C.ProjectNumber + "-" + query[i].C.ProjectTitle + "-" + query[i].FirstName + " " + query[i].LastName,
                            });
                        }
                    }
                }

                return Projectdetails;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Projectdetails = new List<MasterlistviewModel>();
                return Projectdetails;
            }

        }

        //public static string getDepartmentCode(string Departmentid)
        //{
        //    try
        //    {
        //        var departmentcode = " ";
        //        var context = new IOASDBEntities();
        //        var Departquery = (from dept in context.tblPIDepartmentMaster
        //                           where dept.DepartmentId == Departmentid
        //                           select dept).FirstOrDefault();

        //        if (Departquery != null)
        //        {
        //            departmentcode = Departquery.DepartmentCode;
        //            return departmentcode;
        //        }
        //        else
        //        {
        //            return departmentcode;
        //        }

        //    }

        //    catch (Exception ex)
        //    {

        //        throw ex;

        //    }
        //}
        public static string getfacultycode(int PIid)
        {
            try
            {
                var facultycode = " ";
                var context = new IOASDBEntities();
                var query = (from user in context.vwFacultyStaffDetails
                             where user.UserId == PIid
                             select user).FirstOrDefault();

                if (query != null)
                {
                    facultycode = query.EmployeeId;
                    return facultycode;
                }
                else
                {
                    return facultycode;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getinvoicenumber(int invoiceid)
        {
            try
            {
                var invoicenumber = " ";
                var context = new IOASDBEntities();
                var query = (from inv in context.tblProjectInvoice
                             where inv.InvoiceId == invoiceid
                             select inv).FirstOrDefault();

                if (query != null)
                {
                    invoicenumber = query.InvoiceNumber;
                    return invoicenumber;
                }
                else
                {
                    return invoicenumber;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static List<MasterlistviewModel> getservicetype()
        {
            try
            {
                List<MasterlistviewModel> taxtype = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblTaxMasterInvoice
                                 orderby C.TaxMasterId
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            taxtype.Add(new MasterlistviewModel()
                            {
                                id = query[i].TaxMasterId,
                                name = query[i].ServiceType
                            });
                        }
                    }
                }
                return taxtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }
        }
        public static string getagencycode(int AgencyID)
        {
            try
            {
                var agncycode = " ";
                var context = new IOASDBEntities();
                var query = (from agncy in context.tblAgencyMaster
                             where agncy.AgencyId == AgencyID
                             select agncy).FirstOrDefault();

                if (query != null)
                {
                    agncycode = query.AgencyCode;
                    return agncycode;
                }
                else
                {
                    return agncycode;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                throw ex;

            }
        }
        public static string getprojectnumber(int projectid)
        {
            try
            {
                var projectnumber = " ";
                var context = new IOASDBEntities();
                var query = (from proj in context.tblProject
                             where proj.ProjectId == projectid
                             select proj).FirstOrDefault();

                if (query != null)
                {
                    projectnumber = query.ProjectNumber;
                    return projectnumber;
                }
                else
                {
                    return projectnumber;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static Tuple<int, int, string> GetProjectType(int projectid)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                string pNo = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = (from proj in context.tblProject
                                 where proj.ProjectId == projectid
                                 select proj).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                        pNo = query.ProjectNumber;
                    }
                }
                return Tuple.Create(type, sponCate, pNo);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static Tuple<int, int, int> GetProjectType(string projectNo)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                int classification = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from proj in context.tblProject
                                 where proj.ProjectNumber == projectNo
                                 select proj).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                        classification = Convert.ToInt32(query.ProjectClassification);
                    }
                }
                return Tuple.Create(type, sponCate, classification);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string getDDFprojectnumber(int projectid)
        {
            try
            {
                var projectnumber = " ";
                var context = new IOASDBEntities();
                var query = (from proj in context.tblDDFMapping
                             where proj.Id == projectid
                             select proj).FirstOrDefault();

                if (query != null)
                {
                    projectnumber = query.ProjectNumber;
                    return projectnumber;
                }
                else
                {
                    return projectnumber;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static Tuple<int, int> GetTravelCommitmentProjectDetail(int travelBillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblTravelBillCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.TravelBillId == travelBillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static string GetCountryName(int Id)
        {
            string Country = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (Id > 0)
                    {
                        var qry = context.tblCountries.Where(m => m.countryID == Id).Select(m => m.countryName).FirstOrDefault();
                        Country = "," + qry;
                    }
                    return Country;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Country;
            }
        }
        public static string GetProjectCountryName(int Id)
        {
            string Country = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (Id > 0)
                    {
                        var qry = context.tblCountries.Where(m => m.countryID == Id).Select(m => m.countryName).FirstOrDefault();
                        Country = qry;
                    }
                    return Country;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Country;
            }
        }
        public static int GetProjectSequenceNumber(int financialyear)
        {
            try
            {
                var lastseqnum = 0;
                var context = new IOASDBEntities();
                var Projectquery = (from project in context.tblProject
                                    where project.FinancialYear == financialyear
                                    select project.SequenceNumber).Max();

                int seqnum = Projectquery ?? 0;
                lastseqnum = seqnum + 1;
                return lastseqnum;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string GetDefaultRoleName(int UserId)
        {
            try
            {
                string _roles = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblUser
                                 from R in context.tblRole
                                 where (U.UserId == UserId && U.RoleId == R.RoleId)
                                 select R.RoleName).FirstOrDefault();
                    if (query != null)
                    {
                        _roles = query;
                    }

                }
                return _roles;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static string GetRoles(int UserId)
        {
            try
            {
                string _roles = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = (from ur in context.tblUserRole
                                 join r in context.tblRole on ur.RoleId equals r.RoleId
                                 where ur.UserId == UserId
                                 select r.RoleName).ToArray();
                    var defaultRole = GetDefaultRoleName(UserId);
                    if (query.Count() > 0)
                    {
                        _roles = string.Join(",", query);
                        _roles = _roles + "," + defaultRole;
                    }
                    else
                    {
                        return defaultRole;
                    }

                }
                return _roles;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static string GetUserFirstName(string Username)
        {
            try
            {
                string _fName = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblUser.FirstOrDefault(m => m.UserName == Username && m.Status == "Active");
                    if (query != null)
                    {
                        _fName = query.FirstName + " " + query.LastName;
                    }

                }
                return _fName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static string GetUserFirstName(int UserId)
        {
            try
            {
                string _fName = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblUser.FirstOrDefault(m => m.UserId == UserId);
                    if (query != null)
                    {
                        _fName = query.FirstName + " " + query.LastName;
                    }

                }
                return _fName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static string GetLoginTS(int UserId)
        {
            try
            {
                string _ts = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLoginDetails.Where(m => m.UserId == UserId).OrderByDescending(m => m.LoginDetailId).FirstOrDefault();
                    if (query != null)
                    {
                        _ts = String.Format("{0:ddd dd-MM-yy h:mm tt}", query.LoginTime);
                    }

                }
                return _ts;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static List<NotificationModel> GetNotification(int logged_in_userId)
        {
            try
            {
                List<NotificationModel> list = new List<NotificationModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from notify in context.tblNotification
                                 join user in context.tblUser on notify.FromUserId equals user.UserId
                                 where notify.ToUserId == logged_in_userId && notify.IsDeleted != true
                                 orderby notify.NotificationId descending
                                 select new { notify, user.FirstName, user.LastName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new NotificationModel()
                            {
                                FromUserName = query[i].FirstName + " " + query[i].LastName,
                                FunctionURL = query[i].notify.FunctionURL,
                                NotificationDateTime = String.Format("{0:ddd dd-MM-yy h:mm tt}", query[i].notify.Crt_Ts),
                                NotificationId = query[i].notify.NotificationId,
                                NotificationType = query[i].notify.NotificationType,
                                ReferenceId = query[i].notify.ReferenceId
                            });
                        }
                    }
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<NotificationModel>();
            }

        }
        public static string getproposalnumber(int proposalid)
        {
            try
            {
                var proposalnumber = " ";
                var context = new IOASDBEntities();
                var query = (from propsl in context.tblProposal
                             where propsl.ProposalId == proposalid
                             select propsl).FirstOrDefault();

                if (query != null)
                {
                    proposalnumber = query.ProposalNumber;
                    return proposalnumber;
                }
                else
                {
                    return proposalnumber;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static string GetProjectStatus(int Id)
        {
            try
            {
                string Status = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = context.tblCodeControl.FirstOrDefault(m => m.CodeName == "ProjectStatus" && m.CodeValAbbr == Id);
                    if (Query != null)
                    {
                        Status = Query.CodeValDetail;
                    }
                }
                return Status;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static string getconsprjctype(int ConsprojectSubtype)
        {
            try
            {
                var fundingcategory = " ";
                var context = new IOASDBEntities();
                var query = (from cc in context.tblSchemes
                             where cc.SchemeId == ConsprojectSubtype
                             select cc).FirstOrDefault();

                if (query != null)
                {
                    fundingcategory = query.SchemeName;

                }
                return fundingcategory;
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static List<CodeControllistviewModel> getprojectsubtype()
        {
            try
            {

                List<CodeControllistviewModel> Projectsubtype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectSubtype"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projectsubtype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Projectsubtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getconsfundingcategory()
        {
            try
            {

                List<CodeControllistviewModel> fundingcategory = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSchemes
                                 where C.ProjectType == 2
                                 orderby C.SchemeId
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundingcategory.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].SchemeName,
                                codevalAbbr = query[i].SchemeId,
                                CodeValDetail = query[i].SchemeName
                            });
                        }
                    }

                }

                return fundingcategory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> GetSourceList()
        {
            try
            {

                List<CodeControllistviewModel> list = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Source"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<CodeControllistviewModel>();
            }

        }
        public static List<CodeControllistviewModel> getfundingtype()
        {
            try
            {

                List<CodeControllistviewModel> fundingtype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectFundingType"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundingtype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return fundingtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> GetFundingTypeWOBoth()
        {
            try
            {

                List<CodeControllistviewModel> fundingtype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectFundingType" && C.CodeValAbbr != 3
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundingtype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return fundingtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getfundedby()
        {
            try
            {

                List<CodeControllistviewModel> fundedby = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectFundedBy"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundedby.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return fundedby;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getindfundinggovtbody()
        {
            try
            {

                List<CodeControllistviewModel> fundedby = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Indfundgovtbody"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundedby.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return fundedby;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<CodeControllistviewModel> fundedby = new List<CodeControllistviewModel>();
                return fundedby;

            }
        }
        public static List<MasterlistviewModel> GetAccounttype()
        {
            try
            {
                List<MasterlistviewModel> acct = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from A in context.tblAccountType
                                 orderby A.AccountType
                                 select A).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            acct.Add(new MasterlistviewModel()
                            {

                                id = query[i].AccountTypeId,
                                name = query[i].AccountType,
                                code = query[i].AccountTypeCode
                            });
                        }
                    }
                    return acct;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> acct = new List<MasterlistviewModel>();
                return acct;
            }


        }
        public static List<MasterlistviewModel> Parentaccountgroup()
        {
            try
            {
                List<MasterlistviewModel> PAGlist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from PG in context.tblAccountGroup
                                 where (PG.Status == "Active")
                                 orderby PG.AccountGroup
                                 select new { PG.AccountGroupId, PG.AccountGroup, PG.AccountGroupCode }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PAGlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountGroupId,
                                name = query[i].AccountGroup + '-' + query[i].AccountGroupCode
                            });
                        }
                    }
                }
                return PAGlist;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> PAGlist = new List<MasterlistviewModel>();
                return PAGlist;
            }
        }
        public static List<CodeControllistviewModel> getindfundingnongovtbody()
        {
            try
            {

                List<CodeControllistviewModel> fundedby = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Indfundnongovtbody"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundedby.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return fundedby;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getforgnfundinggovtbody()
        {
            try
            {

                List<CodeControllistviewModel> fundedby = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Fornfundgovtbody"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundedby.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return fundedby;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        //public static List<CodeControllistviewModel> getforgnfundingnongovtbody()
        //{
        //    try
        //    {
        public static List<CodeControllistviewModel> getforgnfundingnongovtbody()
        {
            try
            {

                List<CodeControllistviewModel> fundedby = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Fornfundnongovtbody"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            fundedby.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return fundedby;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetAllRoles()
        {
            try
            {
                List<MasterlistviewModel> Role = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblRole where C.Status == "Active" orderby C.RoleName ascending select C).ToList();
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            Role.Add(new MasterlistviewModel()
                            {
                                id = Query[i].RoleId,
                                name = Query[i].RoleName
                            });
                        }
                    }
                    return Role;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Role = new List<MasterlistviewModel>();
                return Role;
            }
        }
        public static List<MasterlistviewModel> GetRoleListByDepId(int ID)
        {
            try
            {
                List<MasterlistviewModel> RoleList = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblRole where C.DepartmentId == ID && C.DepartmentId != 0 && C.Status == "Active" orderby C.DepartmentId ascending select C).ToList();
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            RoleList.Add(new MasterlistviewModel()
                            {
                                id = Query[i].RoleId,
                                name = Query[i].RoleName
                            });
                        }
                    }
                    return RoleList;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> UserList = new List<MasterlistviewModel>();
                return UserList;
            }
        }
        public static List<MasterlistviewModel> GetUserListByRoleId(int ID)
        {
            try
            {
                List<MasterlistviewModel> UserList = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    DateTime CurrDate = DateTime.Now;
                    var Query = (from C in context.tblUser
                                 join ad in context.tblUserRole on C.UserId equals ad.UserId into g
                                 from ad in g.DefaultIfEmpty()
                                 where (C.RoleId == ID || ad.RoleId == ID)
                                 && C.Status == "Active" && C.ExpiryDate >= CurrDate
                                 orderby C.UserId ascending
                                 select C).Distinct().ToList();
                    if (Query.Count > 0)
                    {
                        for (int i = 0; i < Query.Count; i++)
                        {
                            UserList.Add(new MasterlistviewModel()
                            {
                                id = Query[i].UserId,
                                name = Query[i].FirstName + ' ' + Query[i].LastName
                            });
                        }
                    }
                    return UserList;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> UserList = new List<MasterlistviewModel>();
                return UserList;
            }
        }

        public static List<MasterlistviewModel> GetTapalAction(int UserID)
        {
            try
            {
                List<MasterlistviewModel> TapalAction = new List<MasterlistviewModel>();
                List<MasterlistviewModel> result = new List<MasterlistviewModel>();
                var AccessRole = GetRoleAccess(UserID, 14);

                using (var context = new IOASDBEntities())
                {

                    if (AccessRole.Count > 0)
                    {
                        var AccessIsApprove = AccessRole.Select(m => m.IsApprove).Distinct().ToArray();
                        for (int i = 0; i < AccessIsApprove.Length; i++)
                        {
                            if (AccessIsApprove[i] == true)
                            {
                                var QryAction = (from C in context.tblCodeControl where C.CodeName == "TapalAction" && C.CodeValAbbr != 0 select C).ToList();
                                if (QryAction.Count > 0)
                                {
                                    for (int j = 0; j < QryAction.Count; j++)
                                    {
                                        TapalAction.Add(new MasterlistviewModel()
                                        {
                                            id = QryAction[j].CodeValAbbr,
                                            name = QryAction[j].CodeValDetail
                                        });
                                    }
                                }
                            }
                            else
                            {
                                var QryAction = (from C in context.tblCodeControl where C.CodeName == "TapalAction" && C.CodeValAbbr != 0 && C.CodeValAbbr != 3 && C.CodeValAbbr != 4 select C).ToList();
                                if (QryAction.Count > 0)
                                {
                                    for (int k = 0; k < QryAction.Count; k++)
                                    {
                                        TapalAction.Add(new MasterlistviewModel()
                                        {
                                            id = QryAction[k].CodeValAbbr,
                                            name = QryAction[k].CodeValDetail
                                        });
                                    }
                                }
                            }
                        }
                    }
                }

                var tapal = (from c in TapalAction
                             from d in TapalAction //on c.id equals d.id
                             orderby c.id ascending
                             group c by c.id into g
                             select new
                             {
                                 id = g.Key,
                                 name = g.Select(m => m.name).FirstOrDefault()
                             }).ToList();

                if (tapal.Count > 0)
                {
                    for (int k = 0; k < tapal.Count; k++)
                    {
                        result.Add(new MasterlistviewModel()
                        {
                            id = tapal[k].id,
                            name = tapal[k].name
                        });
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> TapalAction = new List<MasterlistviewModel>();
                return TapalAction;
            }
        }

        public static string GetTapalActionById(int ActionId)
        {
            try
            {
                string TapalAction = "";
                using (var context = new IOASDBEntities())
                {
                    var QryAction = (from C in context.tblCodeControl where C.CodeName == "TapalAction" && C.CodeValAbbr == ActionId select C.CodeValDetail).FirstOrDefault();
                    if (QryAction != null)
                    {
                        TapalAction = QryAction;
                    }
                }
                return TapalAction;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static string getTapalNo()
        {
            try
            {
                var no = string.Empty;
                var tapalNo = "TPL" + "/" + GetCurrentFinYear() + "/";


                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblTapal
                               where (b.TapalNo.Contains(tapalNo))
                               orderby b.TapalId descending
                               select b.TapalNo).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return tapalNo + seqnum.ToString("000000");
                    }
                    else
                    {
                        return tapalNo + "000001";
                    }
                    //var Qry = (from C in context.tblTapal select C).Count();
                    //var FinancialYear = context.tblFinYear.FirstOrDefault(m => m.CurrentYearFlag == true).Year;
                    //if (Qry > 0)
                    //{
                    //    //var value = lastproposalnumber.Split('_').Last();
                    //    //string number = Regex.Replace(value, @"\D", "");
                    //    //var seqnum = Convert.ToInt32(number);
                    //    //sequencenumber = seqnum + 1;
                    //    tapalNo = "TPL/" + FinancialYear + (Qry + 1).ToString("000000");
                    //}
                    //else
                    //{
                    //    tapalNo = "TPL/" + FinancialYear + "/000001";
                    //}
                }

                return tapalNo;
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                throw ex;

            }
        }
        public static string GetTapalNo(int id)
        {
            try
            {
                var tapalNo = "";
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.tblTapal.Where(m => m.TapalId == id).FirstOrDefault();
                    if (Qry != null)
                        tapalNo = Qry.TapalNo;
                }

                return tapalNo;
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string GetSRBNumber(int SRBId)
        {
            try
            {
                var no = "SRB";
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblSRB
                                 where cc.SRBId == SRBId
                                 select cc).FirstOrDefault();

                    if (query != null)
                        no = query.SRBNumber;
                }
                return no;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "SRB";
            }
        }
        public static List<CodeControllistviewModel> gettypeofproject()
        {
            try
            {

                List<CodeControllistviewModel> typeofproject = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "TypeofProject"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            typeofproject.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return typeofproject;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getsponprojectcategory()
        {
            try
            {

                List<CodeControllistviewModel> Projectsubtype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "SponProjectCategory"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projectsubtype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Projectsubtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getconstaxtype()
        {
            try
            {

                List<CodeControllistviewModel> Taxtype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ConsProjecttaxtype"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Taxtype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Taxtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> gettaxregstatus()
        {
            try
            {

                List<CodeControllistviewModel> Taxregstatus = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "TaxServiceRegStatus"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Taxregstatus.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Taxregstatus;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        //change by karthi

        public static List<CodeControllistviewModel> getprojectfunding()
        {
            try
            {

                List<CodeControllistviewModel> projectcategory = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectFundingCategory"
                                 orderby C.CodeValDetail
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            projectcategory.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return projectcategory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<Bankdetails> GetTSABankList()
        {
            try
            {
                List<Bankdetails> roleList = new List<Bankdetails>();
                using (var context = new IOASDBEntities())
                {
                    roleList = (from h in context.tblAccountHead
                                where h.Status == "Active"
                                && h.Bank_f == true
                                && h.AccountGroupId == 38
                                select new Bankdetails()
                                {
                                    BankID = h.AccountHeadId,
                                    bankname = h.AccountHead
                                }).ToList();

                }
                return roleList;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<Bankdetails>();
            }
        }


        public static int GetRoleIdByUserId(int UserId)
        {

            var context = new IOASDBEntities();
            var query = (from U in context.tblUser
                         where (U.UserId == UserId && U.Status == "Active")
                         select U).FirstOrDefault();
            var userRoleId = 0;
            if (query != null)
            {
                userRoleId = (Int32)query.RoleId;
            }


            return userRoleId;

        }
        public static List<MasterlistviewModel> Getmonth()
        {
            try
            {
                List<MasterlistviewModel> getlistmonth = new List<MasterlistviewModel>();
                int Month = 12;
                for (int i = 1; i <= Month; i++)
                {
                    getlistmonth.Add(new MasterlistviewModel()
                    {

                        id = i,
                        name = Convert.ToString(i)
                    });

                }
                return getlistmonth;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> getlistmonth = new List<MasterlistviewModel>();
                return getlistmonth;
            }
        }

        public static List<MasterlistviewModel> Getyear()
        {
            try
            {
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                int year = DateTime.Now.Year;
                for (int i = 2000; i <= year; i++)
                {
                    getlistyear.Add(new MasterlistviewModel()
                    {

                        id = i,
                        name = Convert.ToString(i)
                    });

                }
                return getlistyear;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                return getlistyear;
            }
        }
        public static List<MasterlistviewModel> Getreport()
        {
            try
            {
                List<MasterlistviewModel> Getlist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from M in context.tblCodeControl
                                 where (M.CodeName == "ReportGroup")
                                 orderby M.CodeValDetail
                                 select new { M.CodeValAbbr, M.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Getlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return Getlist;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Getlist = new List<MasterlistviewModel>();
                return Getlist;
            }

        }

        public static List<MasterlistviewModel> getinternalfundingagency()
        {
            try
            {

                List<MasterlistviewModel> internalfundingagency = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblAgencyMaster
                                 where C.AgencyType == 1 && C.Status == "Active"
                                 orderby C.AgencyId
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            internalfundingagency.Add(new MasterlistviewModel()
                            {
                                id = query[i].AgencyId,
                                name = query[i].AgencyName,

                            });
                        }
                    }

                }

                return internalfundingagency;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }


        //public static List<MasterlistviewModel> getProposalDocType()
        //{
        //    try
        //    {

        //        List<MasterlistviewModel> Doctype = new List<MasterlistviewModel>();

        //        using (var context = new IOASDBEntities())
        //        {
        //            var query = (from C in context.tblFunctionDocument
        //                         where C.FunctionId == 9
        //                         orderby C.FunctionDocumentId
        //                         select C).ToList();


        //            if (query.Count > 0)
        //            {
        //                for (int i = 0; i < query.Count; i++)
        //                {
        //                    var docid = query[i].DocumentId;
        //                    var docquery = (from D in context.tblDocument
        //                                    where D.DocumentId == docid
        //                                    select D).FirstOrDefault();
        //                    Doctype.Add(new MasterlistviewModel()
        //                    {
        //                        id = docquery.DocumentId,
        //                        name = docquery.DocumentName,
        //                    });
        //                }
        //            }

        //        }

        //        return Doctype;
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }

        //}


        public static List<MasterlistviewModel> getstaffcategory()
        {
            try
            {

                List<MasterlistviewModel> staffcategory = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProjectStaffCategoryMaster
                                 orderby C.ProjectStaffCategoryId
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            staffcategory.Add(new MasterlistviewModel()
                            {
                                id = query[i].ProjectStaffCategoryId,
                                name = query[i].ProjectStaffCategory,

                            });
                        }
                    }

                }

                return staffcategory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<RoleAccessDetailModel> GetRoleAccess(int UserId, int FunctionId)
        {
            try
            {
                List<RoleAccessDetailModel> Detail = new List<RoleAccessDetailModel>();
                int RoleID = GetRoleIdByUserId(UserId);
                using (var context = new IOASDBEntities())
                {
                    var addtionalroles = (from R in context.tblUserRole
                                          where R.UserId == UserId
                                          select R.RoleId).ToArray();
                    var defaultrole = (from R in context.tblUser
                                       where (R.UserId == UserId)
                                       select R.RoleId).FirstOrDefault();

                    var roles = (from RA in context.tblRoleaccess
                                 where (addtionalroles.Contains(RA.RoleId) || RA.RoleId == defaultrole) && RA.FunctionId == FunctionId
                                 select new { RA.RoleId, RA.Read_f, RA.Add_f, RA.Approve_f, RA.Update_f, RA.Delete_f }).Distinct().ToList();
                    if (roles.Count > 0)
                    {
                        for (int i = 0; i < roles.Count; i++)
                        {
                            Detail.Add(new RoleAccessDetailModel()
                            {
                                RoleId = roles[i].RoleId ?? 0,
                                IsAdd = roles[i].Add_f ?? false,
                                IsRead = roles[i].Read_f ?? false,
                                IsApprove = roles[i].Approve_f ?? false,
                                IsDelete = roles[i].Delete_f ?? false,
                                IsUpdate = roles[i].Update_f ?? false,
                            });
                        }
                    }
                }
                return Detail;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<RoleAccessDetailModel> Detail = new List<RoleAccessDetailModel>();
                return Detail;
            }
        }
        public static List<MasterlistviewModel> GetStatelist()
        {
            try
            {
                List<MasterlistviewModel> Statelist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from S in context.tblStateMaster
                                 orderby S.StateName
                                 select new { S.StateId, S.StateName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Statelist.Add(new MasterlistviewModel()
                            {
                                id = query[i].StateId,
                                name = query[i].StateName
                            });

                        }
                    }
                    return Statelist;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Statelist = new List<MasterlistviewModel>();
                return Statelist;
            }
        }
        public static List<MasterlistviewModel> GetAgencyType()
        {
            try
            {
                List<MasterlistviewModel> agencytype = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from AT in context.tblCodeControl
                                 where (AT.CodeName == "AgencyCountry")
                                 select new { AT.CodeValAbbr, AT.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            agencytype.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return agencytype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> agencytype = new List<MasterlistviewModel>();
                return agencytype;
            }
        }
        public static List<MasterlistviewModel> GetIndianAgencyCategory()
        {
            try
            {
                List<MasterlistviewModel> indainagency = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from IC in context.tblCodeControl
                                 where IC.CodeName == "IndianAgencyCategory"
                                 select new { IC.CodeValAbbr, IC.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            indainagency.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }

                }
                return indainagency;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> indainagency = new List<MasterlistviewModel>();
                return indainagency;
            }
        }
        public static List<MasterlistviewModel> GetNonSEZCategory()
        {
            try
            {
                List<MasterlistviewModel> NONSEZCategory = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from NS in context.tblCodeControl
                                 where (NS.CodeName == "NonSEZCategory")
                                 select new { NS.CodeValAbbr, NS.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            NONSEZCategory.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return NONSEZCategory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> NONSEZCategory = new List<MasterlistviewModel>();
                return NONSEZCategory;
            }
        }
        public static List<CoPIModel> GetCoPIs(int pId)
        {
            try
            {
                List<CoPIModel> list = new List<CoPIModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from copi in context.tblProjectCoPI
                            join fs in context.tblFacultyDetail on copi.Name equals fs.CastEmployeeId
                            where copi.ProjectId == pId && copi.Status == "Active"
                            select new CoPIModel
                            {
                                Name = fs.EmployeeName + "-" + fs.DepartmentName,
                                PCF = copi.PCF,
                                RMF = copi.RMF,
                                CoPIId = copi.Name
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<CoPIModel>();
            }
        }
        public static List<MasterlistviewModel> GetAccountGroup(bool? isBank = null)
        {
            try
            {
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from A in context.tblAccountGroup
                                 where A.Status == "Active" && (isBank == null || A.Bank_f == isBank)
                                 orderby A.AccountGroup
                                 select new { A.AccountGroupId, A.AccountGroup, A.AccountGroupCode }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Acctlist.Add(new MasterlistviewModel()
                            {

                                id = query[i].AccountGroupId,
                                name = query[i].AccountGroup + '-' + query[i].AccountGroupCode
                            });
                        }
                    }
                    return Acctlist;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                return Acctlist;
            }
        }
        public static List<MasterlistviewModel> GetAccountGroup(int groupId)
        {
            try
            {
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    Acctlist = (from A in context.tblAccountGroup
                                orderby A.AccountGroup
                                where A.AccountGroupId == groupId
                                select new MasterlistviewModel()
                                { id = A.AccountGroupId, name = A.AccountGroup }).ToList();

                    return Acctlist;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                return Acctlist;
            }
        }
        public static Int32 GetAccountGroupId(string groupName)
        {
            try
            {
                Int32 gId = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAccountGroup.FirstOrDefault(m => m.AccountGroup == groupName);
                    if (query != null)
                        gId = query.AccountGroupId;
                    return gId;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        //public static List<MasterlistviewModel> GetAgencyDocument()
        //{

        //    try
        //    {
        //        List<MasterlistviewModel> Agencydoc = new List<MasterlistviewModel>();
        //        using (var context = new IOASDBEntities())
        //        {
        //            var documentid = (from FD in context.tblFunctionDocument
        //                              where (FD.FunctionId == 19)
        //                              select FD.DocumentId).ToArray();
        //            if (documentid != null)
        //            {
        //                var query = (from D in context.tblDocument
        //                             where documentid.Contains(D.DocumentId)
        //                             select new { D.DocumentId, D.DocumentName }).ToList();
        //                if (query.Count > 0)
        //                {
        //                    for (int i = 0; i < query.Count; i++)
        //                    {
        //                        Agencydoc.Add(new MasterlistviewModel()
        //                        {

        //                            id = query[i].DocumentId,
        //                            name = query[i].DocumentName
        //                        });
        //                    }
        //                }
        //            }
        //            return Agencydoc;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        List<MasterlistviewModel> Agencydoc = new List<MasterlistviewModel>();
        //        return Agencydoc;
        //    }
        //}

        public static string GetUserEmail(int Id)
        {
            try
            {
                string email = "";
                using (var context = new IOASDBEntities())
                {
                    var Query = context.tblUser.FirstOrDefault(m => m.UserId == Id);
                    if (Query != null)
                    {
                        email = Query.Email;
                    }
                }
                return email;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string GetPIDesignation(int PIid)
        {
            try
            {
                var des = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = (from user in context.vwFacultyStaffDetails
                                 where user.UserId == PIid //&& user.RoleId == 7
                                 select user).FirstOrDefault();

                    if (query != null)
                        des = query.Designation;

                    return des;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";

            }
        }

        public static List<MasterlistviewModel> GetFinYearList()
        {
            try
            {

                List<MasterlistviewModel> finYear = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblFinYear
                                 orderby C.EndDate descending
                                 select C).ToList();


                    if (query.Count > 0)
                    {

                        for (int i = 0; i < query.Count; i++)
                        {
                            string text = query[i].Year;
                            char[] words = text.ToCharArray();
                            string Year = "" + words[0] + words[1] + "-" + words[2] + words[3] + "";
                            finYear.Add(new MasterlistviewModel()
                            {
                                id = query[i].FinYearId,
                                name = Year,
                            });
                        }
                    }
                }
                return finYear;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> finYear = new List<MasterlistviewModel>();
                return finYear;
            }

        }
        public static List<MasterlistviewModel> GetFinYearList(int pId)
        {
            try
            {

                List<MasterlistviewModel> finYear = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var pQuery = context.tblProject.FirstOrDefault(m => m.ProjectId == pId);
                    if (pQuery != null)
                    {
                        var sDate = pQuery.TentativeStartDate;
                        var extDate = GetProjectDueDate(pId);
                        var eDate = extDate == null ? pQuery.TentativeCloseDate : extDate;
                        if (eDate != null && sDate != null)
                        {
                            var query = (from C in context.tblFinYear
                                         where (C.StartDate >= sDate && C.StartDate <= eDate) ||
                                         (C.EndDate >= sDate && C.EndDate <= eDate)
                                         orderby C.EndDate descending
                                         select C).ToList();

                            if (query.Count > 0)
                            {
                                for (int i = 0; i < query.Count; i++)
                                {
                                    finYear.Add(new MasterlistviewModel()
                                    {
                                        id = query[i].FinYearId,
                                        name = query[i].Year,
                                    });
                                }
                            }
                        }
                    }
                }
                return finYear;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> finYear = new List<MasterlistviewModel>();
                return finYear;
            }

        }
        public static string GetFinYear(int finId)
        {
            try
            {

                string finYear = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFinYear.FirstOrDefault(m => m.FinYearId == finId);


                    if (query != null)
                        finYear = query.Year;
                }
                return finYear;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }

        }

        public static List<MasterlistviewModel> GetWorkflowRefNumberList()
        {
            try
            {

                List<MasterlistviewModel> listWF = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    listWF.Add(new MasterlistviewModel()
                    {
                        id = null,
                        name = "Select Ref. Number",
                    });
                }
                return listWF;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> listWF = new List<MasterlistviewModel>();
                return listWF;
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteWorkflowRefNumberList()
        {
            try
            {

                List<AutoCompleteModel> listWF = new List<AutoCompleteModel>();


                return listWF;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<AutoCompleteModel> listWF = new List<AutoCompleteModel>();
                return listWF;
            }

        }
        public static int GetDepartmentId(string username)
        {
            try
            {
                int Department = 0;
                using (var context = new IOASDBEntities())
                {
                    var Query = (from C in context.tblUser where C.UserName == username select C.DepartmentId).FirstOrDefault();
                    if (Query != null)
                        Department = Query ?? 0;
                    return Department;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static List<MasterlistviewModel> GetTapalRefNumberList(int depId)
        {
            try
            {

                List<MasterlistviewModel> listRefNum = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblTapal
                                 join wf in context.tblTapalWorkflow on C.TapalId equals wf.TapalId
                                 orderby C.TapalId descending
                                 where wf.MarkTo == depId && C.IsClosed == true
                                 group C by C.TapalId into g
                                 select new
                                 {
                                     TapalId = g.Key,
                                     TapalNo = g.Select(m => m.TapalNo).FirstOrDefault()
                                 }).ToList();
                    listRefNum.Add(new MasterlistviewModel()
                    {
                        id = null,
                        name = "Select Ref. Number",
                    });
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            listRefNum.Add(new MasterlistviewModel()
                            {
                                id = query[i].TapalId,
                                name = query[i].TapalNo,
                            });
                        }
                    }
                }
                return listRefNum;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> listRefNum = new List<MasterlistviewModel>();
                return listRefNum;
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteTapalRefNumberList(string term, int depId)
        {
            try
            {

                List<AutoCompleteModel> stud = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    //stud = (from C in context.tblTapal
                    //        join wf in context.tblTapalWorkflow on C.TapalId equals wf.TapalId
                    //        orderby C.TapalId descending
                    //        where wf.MarkTo == depId && C.IsClosed == true
                    //        && C.TapalNo.Contains(term)
                    //        group C by C.TapalId into g
                    //        select new AutoCompleteModel
                    //        {
                    //            value = g.Key.ToString(),
                    //            label = g.Select(m => m.TapalNo).FirstOrDefault()
                    //        }).ToList();
                    stud = context.Database.SqlQuery<AutoCompleteModel>("EXEC SP_GetTapalNo @term, @depId",
                        new SqlParameter("@term", term),
                        new SqlParameter("@depId", depId)
                        ).ToList();

                }

                return stud;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<MasterlistviewModel> GetSponsoredSchemeCodeList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSponsoredSchemes
                                 orderby C.SponsoredSchemesId descending
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].SponsoredSchemesId,
                                name = query[i].SchemeCode,
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }

        }
        public static string ValidateEnhancementAndExtension(ProjectEnhancementModel model)
        {
            try
            {
                string msg = "Valid";
                using (var context = new IOASDBEntities())
                {
                    if (model.Extension_Qust_1 == "Yes")
                    {
                        var query = context.tblProject.FirstOrDefault(m => m.ProjectId == model.ProjectID && m.Status == "Active" && m.IsSubProject == true);
                        if (query != null)
                        {

                            msg = "You can't do the extension for subproject";
                        }
                    }
                    //if (model.Enhancement_Qust_1 == "Yes")
                    //{
                    //    var query = context.tblProject.Any(m => m.MainProjectId == model.ProjectID && m.Status == "Active");
                    //    if (query)
                    //    {

                    //        msg = "You can't do the enhancement for  main project";
                    //    }
                    //}
                }
                return msg;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "Something went wrong please contact administrator";
            }
        }
        public static decimal UpdateSanctionValue(int projectId, bool isUpdate = true)
        {

            decimal amt = 0, mainPrjAmt = 0;
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        var Query = context.tblProject.FirstOrDefault(m => m.ProjectId == projectId);
                        if (Query != null)
                        {
                            if (Query.IsSubProject == true)
                            {
                                context.tblProjectEnhancement.Where(p => p.ProjectId == projectId && p.Status == "Active")
                                  .ToList()
                                  .ForEach(m =>
                                  {
                                      amt += (m.EnhancedSanctionValue ?? 0);
                                  });

                                if (isUpdate == true)
                                {
                                    amt += Query.BaseValue ?? 0;
                                    Query.SanctionValue = amt;
                                    context.SaveChanges();

                                    int mainProjectId = Query.MainProjectId ?? 0;
                                    //(from p in context.tblProject
                                    // join enh in context.tblProjectEnhancement on p.ProjectId equals enh.ProjectId
                                    // where (p.MainProjectId == mainProjectId && p.Status == "Active" && enh.Status == "Active")
                                    // select enh)
                                    //       .ToList()
                                    //       .ForEach(m =>
                                    //       {
                                    //           mainPrjAmt += (m.EnhancedSanctionValue ?? 0);
                                    //       });
                                    context.tblProjectEnhancement.Where(p => p.ProjectId == mainProjectId && p.Status == "Active")
                                      .ToList()
                                      .ForEach(m =>
                                      {
                                          mainPrjAmt += (m.EnhancedSanctionValue ?? 0);
                                      });
                                    var mainPrjQuery = context.tblProject.FirstOrDefault(m => m.ProjectId == mainProjectId);
                                    if (mainPrjQuery != null)
                                    {
                                        mainPrjAmt += mainPrjQuery.BaseValue ?? 0;
                                        mainPrjQuery.SanctionValue = mainPrjAmt;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return amt;
                            }
                            else
                            {
                                // Added additional condition -- "Open" status  for bug #8120 & #8094
                                (from p in context.tblProject
                                 join enh in context.tblProjectEnhancement on p.ProjectId equals enh.ProjectId
                                 where (p.ProjectId == projectId && (p.Status == "Active" || p.Status == "Open") && enh.Status == "Active")
                                 select enh)
                                       .ToList()
                                       .ForEach(m =>
                                       {
                                           amt += (m.EnhancedSanctionValue ?? 0);
                                       });
                                // Commented by Praveen for bug #8120 & #8094
                                //context.tblProjectEnhancement.Where(p => p.ProjectId == projectId && p.Status == "Active")
                                //  .ToList()
                                //  .ForEach(m =>
                                //  {
                                //      amt += (m.EnhancedSanctionValue ?? 0);
                                //  });

                                //Commented by Nandhini for bug #7304 
                                //(from p in context.tblProject
                                // join enh in context.tblProjectEnhancement on p.ProjectId equals enh.ProjectId
                                // where (p.MainProjectId == projectId && p.Status == "Active" && enh.Status == "Active")
                                // select enh)
                                //       .ToList()
                                //       .ForEach(m =>
                                //       {
                                //           amt += (m.EnhancedSanctionValue ?? 0);
                                //       });
                                //context.tblProjectEnhancement.Where(p => p.ProjectId == projectId && p.Status == "Active")
                                //  .ToList()
                                //  .ForEach(m =>
                                //  {
                                //      amt += (m.EnhancedSanctionValue ?? 0);
                                //  });

                                if (isUpdate == true)
                                {
                                    amt += Query.BaseValue ?? 0;
                                    Query.SanctionValue = amt;
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return amt;
                            }
                        }
                        else
                            throw new Exception();
                    }
                    catch (Exception ex)
                    {
                        Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                        transaction.Rollback();
                        throw ex;
                    }
                }
            }
        }
        public static decimal GetSanctionValue(int projectId)
        {
            try
            {
                decimal amt = 0;
                using (var context = new IOASDBEntities())
                {

                    var Query = context.tblProject.FirstOrDefault(m => m.ProjectId == projectId);
                    if (Query != null)
                    {
                        amt = Query.SanctionValue ?? 0;
                    }

                }

                return amt;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static Nullable<DateTime> GetProjectDueDate(int projectId, bool isUpdate = false)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Query = context.tblProject.FirstOrDefault(m => m.ProjectId == projectId);
                    if (Query != null)
                    {
                        //int mainProjectId = Query.MainProjectId ?? 0;
                        var enhanQuery = context.tblProjectEnhancement.Where(m => m.ProjectId == projectId && m.Status == "Active" && m.ExtendedDueDate != null).OrderByDescending(m => m.ProjectEnhancementId).FirstOrDefault();
                        if (enhanQuery != null)
                        {
                            if (isUpdate == true)
                            {
                                //context.tblProject.Where(p => p.MainProjectId == projectId && p.Status == "Active")
                                //.ToList()
                                //.ForEach(m =>
                                //{
                                //    m.ActuaClosingDate = enhanQuery.ExtendedDueDate;
                                //    m.TentativeCloseDate = enhanQuery.ExtendedDueDate;
                                //});
                                Query.ActuaClosingDate = enhanQuery.ExtendedDueDate;
                                Query.TentativeCloseDate = enhanQuery.ExtendedDueDate;
                                context.SaveChanges();
                            }
                            return enhanQuery.ExtendedDueDate;
                        }
                        //else
                        //{
                        //    if (isUpdate == true)
                        //    {
                        //        context.tblProject.Where(p => p.MainProjectId == projectId && p.Status == "Active")
                        //        .ToList()
                        //        .ForEach(m =>
                        //        {
                        //            m.ActuaClosingDate = Query.ActuaClosingDate;
                        //            m.TentativeCloseDate = Query.ActuaClosingDate;
                        //        });
                        //        context.SaveChanges();
                        //    }
                        //}

                    }
                    //else
                    //{
                    // var enhanQuery = context.tblProjectEnhancement.Where(m => m.ProjectId == projectId && m.Status == "Active" && m.ExtendedDueDate != null).OrderByDescending(m => m.ProjectEnhancementId).FirstOrDefault();
                    // if (enhanQuery != null)
                    // {
                    // Query.ActuaClosingDate = enhanQuery.ExtendedDueDate;
                    // context.SaveChanges();
                    // return enhanQuery.ExtendedDueDate;
                    // }
                    //}
                    return null;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static Nullable<DateTime> GetProjectStartDate(int projectId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Query = context.tblProject.FirstOrDefault(m => m.ProjectId == projectId);
                    if (Query != null)
                    {
                        return Query.TentativeStartDate;
                    }
                    return null;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static Tuple<decimal, decimal> GetMainAndSubProjectValues(int mainPId, int projectId)
        {
            try
            {
                decimal subProjectTtl = 0, mainProjectValue = 0;
                using (var context = new IOASDBEntities())
                {
                    context.tblProject.Where(p => p.MainProjectId == mainPId && p.IsSubProject == true && p.Status == "Active" && p.ProjectId != projectId)
                            .ToList()
                            .ForEach(m =>
                            {
                                subProjectTtl += (m.SanctionValue ?? 0);
                            });
                    var Query = context.tblProject.FirstOrDefault(m => m.ProjectId == mainPId);
                    if (Query != null)
                    {
                        mainProjectValue = Query.SanctionValue ?? 0;
                    }
                }

                return Tuple.Create(mainProjectValue, subProjectTtl);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((Decimal)0, (Decimal)0);
            }
        }

        public static List<MasterlistviewModel> getCommitmentType()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryCommitment = (from C in context.tblCodeControl where C.CodeName == "CommitmentType" select C).ToList();
                    if (qryCommitment.Count > 0)
                    {
                        for (int i = 0; i < qryCommitment.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryCommitment[i].CodeValAbbr,
                                name = qryCommitment[i].CodeValDetail
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }

        public static List<MasterlistviewModel> getBudgetHead()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryBudgetHead = (from C in context.tblBudgetHead select C).ToList();
                    if (qryBudgetHead.Count > 0)
                    {
                        for (int i = 0; i < qryBudgetHead.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryBudgetHead[i].BudgetHeadId,
                                name = qryBudgetHead[i].HeadName
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }
        public static List<MasterlistviewModel> getFRMcurrency()
        {
            try
            {

                List<MasterlistviewModel> Currency = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCurrency
                                 orderby C.ISOCode
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Currency.Add(new MasterlistviewModel()
                            {
                                id = query[i].CurrencyID,
                                name = query[i].ISOCode + " - " + query[i].CurrencyUnit,
                                code = query[i].ISOCode
                            });
                        }
                    }

                }

                return Currency;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> getCurrency(bool exceptINR = false)
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryCurrency = (from C in context.tblCurrency
                                       where exceptINR == false || (exceptINR && C.CurrencyID != 44)
                                       select C
                                       ).ToList();
                    if (qryCurrency.Count > 0)
                    {
                        for (int i = 0; i < qryCurrency.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryCurrency[i].CurrencyID,
                                name = qryCurrency[i].CurrencyUnit,
                                code = qryCurrency[i].ISOCode
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }

        public static List<MasterlistviewModel> getAccountGroup()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryAccountGroup = (from C in context.tblAccountGroup select C).ToList();
                    if (qryAccountGroup.Count > 0)
                    {
                        for (int i = 0; i < qryAccountGroup.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryAccountGroup[i].AccountGroupId,
                                name = qryAccountGroup[i].AccountGroup
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }

        public static List<MasterlistviewModel> GetBankAccountGroup()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    List = (from C in context.tblAccountGroup
                            where C.Bank_f == true
                            orderby C.AccountGroup
                            select new MasterlistviewModel()
                            {
                                id = C.AccountGroupId,
                                name = C.AccountGroup
                            }).ToList();
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }
        }

        public static List<MasterlistviewModel> getForeignSupplierList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from V in context.tblVendorMaster
                                 where V.Country != 128 && V.Status == "Active"
                                 orderby V.VendorId
                                 select V).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].VendorId,
                                name = query[i].Name + " - " + query[i].AccountNumber + " - " + query[i].SWIFTorBICCode
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }
        }
        public static List<MasterlistviewModel> getProjectNumber()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryProjectNo = (from C in context.tblProject where C.Status == "Active" select new { C.ProjectId, C.ProjectNumber }).ToList();
                    if (qryProjectNo.Count > 0)
                    {
                        for (int i = 0; i < qryProjectNo.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryProjectNo[i].ProjectId,
                                name = qryProjectNo[i].ProjectNumber
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }

        public static List<MasterlistviewModel> getVendor()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryProjectNo = (from C in context.tblVendorMaster select new { C.VendorId, C.Name }).ToList();
                    if (qryProjectNo.Count > 0)
                    {
                        for (int i = 0; i < qryProjectNo.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryProjectNo[i].VendorId,
                                name = qryProjectNo[i].Name
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }

        //public static string getCommitmentNo(int ProjectType)
        //{
        //    try
        //    {
        //        var CommitNo = "";
        //        string Prefix = "";

        //        using (var context = new IOASDBEntities())
        //        {
        //            var Qry = (from C in context.tblCommitment select C).Count();
        //            var FinancialYear = context.tblFinYear.FirstOrDefault(m => m.CurrentYearFlag == true).Year;
        //            if (Qry > 0)

        //                CommitNo = "COM/" + Prefix + "" + FinancialYear + "/0000" + (Qry + 1);
        //        }
        //                else
        //                {
        //            CommitNo = "COM/" + Prefix + "" + FinancialYear + "/0000" + 1;
        //        }
        //    }
        //        }else
        //        {
        //            CommitNo = "0";
        //        }
        //        return CommitNo;
        //    }

        //    catch (Exception ex)
        //    {

        //        throw ex;

        //    }
        //}

        public static Tuple<List<MasterlistviewModel>, string> getProjectNo(int projecttype)
        {
            try
            {
                var CommitNo = "";
                List<MasterlistviewModel> ProjectNo = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qry = (from C in context.tblProject
                               where (C.ProjectType == projecttype && C.Status == "Active")
                               orderby C.ProjectId
                               select new { C.ProjectId, C.ProjectNumber }).ToList();
                    if (qry.Count > 0)
                    {
                        for (int i = 0; i < qry.Count; i++)
                        {
                            ProjectNo.Add(new MasterlistviewModel()
                            {
                                id = qry[i].ProjectId,
                                name = qry[i].ProjectNumber,
                            });
                        }
                    }
                    int num = (from b in context.tblCommitment
                               select b).Max(m => m.SequenceNo) ?? 0;

                    if (num > 0)
                    {
                        num += 1;
                        CommitNo = "COM/" + GetCurrentFinYear() + "/" + num.ToString("000000");
                    }
                    else
                    {
                        CommitNo = "COM/" + GetCurrentFinYear() + "/" + "000001";
                    }
                }

                return Tuple.Create(ProjectNo, CommitNo);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> ProjectNo = new List<MasterlistviewModel>();
                return Tuple.Create(ProjectNo, "0");
            }

        }

        public static string getCommitmentName(int CommitType)
        {
            try
            {
                string CommitmentType = "";
                using (var context = new IOASDBEntities())
                {
                    var qryCT = (from C in context.tblCodeControl where C.CodeName == "CommitmentType" && C.CodeValAbbr == CommitType select C.CodeValDetail).FirstOrDefault();
                    if (qryCT != null)
                    {
                        CommitmentType = qryCT;
                    }
                }
                return CommitmentType;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static List<MasterlistviewModel> getPurpose()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryPurpose = (from C in context.tblCodeControl where C.CodeName == "StaffPurpose" select new { C.CodeValAbbr, C.CodeValDetail }).ToList();
                    if (qryPurpose.Count > 0)
                    {
                        for (int i = 0; i < qryPurpose.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryPurpose[i].CodeValAbbr,
                                name = qryPurpose[i].CodeValDetail
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }
        public static string getVendorName(int ID)
        {
            try
            {
                string VendorName = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblVendorMaster
                                 where C.VendorId == ID
                                 select C.Name).FirstOrDefault();
                    if (query != null)
                    {
                        VendorName = query;
                    }
                }
                return VendorName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static string getCurrency(int ID)
        {
            try
            {
                string Currency = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCurrency
                                 where C.CurrencyID == ID
                                 select C.ISOCode).FirstOrDefault();
                    if (query != null)
                    {
                        Currency = query;
                    }
                }
                return Currency;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string getRefrenceName(int ID)
        {
            try
            {
                string Refrence = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectSource" && C.CodeValAbbr == ID
                                 select C.CodeValDetail).FirstOrDefault();
                    if (query != null)
                    {
                        Refrence = query;
                    }
                }
                return Refrence;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string getPurpose(int ID)
        {
            try
            {
                string Purpose = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "StaffPurpose" && C.CodeValAbbr == ID
                                 select C.CodeValDetail).FirstOrDefault();
                    if (query != null)
                    {
                        Purpose = query;
                    }
                }
                return Purpose;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string getTaxStatusById(int taxId)
        {
            try
            {
                string Tax = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ConsProjecttaxtype" && C.CodeValAbbr == taxId
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        Tax = query.CodeValDetail;
                    }

                }

                return Tax;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getStaffDepartName(string DepartCode)
        {
            try
            {
                string DepartName = "";
                using (var context = new IOASDBEntities())
                {
                    var depQry = (from C in context.vwFacultyStaffDetails
                                  where C.DepartmentCode == DepartCode
                                  select C.DepartmentName).FirstOrDefault();
                    if (depQry != null)
                    {
                        DepartName = depQry;
                    }
                }
                return DepartName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string getAllocationHeadName(int AllocationId)
        {
            try
            {
                string AllocationName = "";
                using (var context = new IOASDBEntities())
                {
                    var qryAN = (from C in context.tblBudgetHead where C.BudgetHeadId == AllocationId select C.HeadName).FirstOrDefault();
                    if (qryAN != null)
                    {
                        AllocationName = qryAN;
                    }
                }
                return AllocationName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string getAllocationType(int AllocationId)
        {
            try
            {
                string AllocationType = "";
                using (var context = new IOASDBEntities())
                {
                    var IsRecuring = (from C in context.tblBudgetHead where C.BudgetHeadId == AllocationId select C.IsRecurring).FirstOrDefault();
                    if (IsRecuring != null)
                    {
                        if (IsRecuring == true)
                        {
                            AllocationType = "Recurring";
                        }
                        else
                        {
                            AllocationType = "Non-Recurring";
                        }
                    }
                }
                return AllocationType;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string getStaffCategoryName(int CategoryId)
        {
            try
            {
                string Category = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProjectStaffCategoryMaster
                                 where C.ProjectStaffCategoryId == CategoryId
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        Category = query.ProjectStaffCategory;
                    }

                }

                return Category;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getTypeofPrjoectName(int TypeOfPrj)
        {
            try
            {
                string TypeofPrj = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "TypeofProject" && C.CodeValAbbr == TypeOfPrj
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        TypeofPrj = query.CodeValDetail;
                    }

                }

                return TypeofPrj;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getProjectSubTypeName(int PrjSubType)
        {
            try
            {
                string SubType = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "SponsoredProjectSubtype" && C.CodeValAbbr == PrjSubType
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        SubType = query.CodeValDetail;
                    }

                }

                return SubType;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getSchemeName(int SchemeId)
        {
            try
            {
                string Scheme = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSchemes
                                 where C.SchemeId == SchemeId
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        Scheme = query.SchemeName;
                    }

                }

                return Scheme;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getSchemeCodeName(int SchemeCodeId)
        {
            try
            {
                string SchemeCode = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSponsoredSchemes
                                 where C.SponsoredSchemesId == SchemeCodeId
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        SchemeCode = query.SchemeCode;
                    }

                }

                return SchemeCode;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getPrjoectFundingTypeName(int FundingType)
        {
            try
            {
                string FundType = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectFundingType" && C.CodeValAbbr == FundingType
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        FundType = query.CodeValDetail;
                    }

                }

                return FundType;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getPrjoectFundedByName(int FundedBy)
        {
            try
            {
                string FundedByName = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectFundedBy" && C.CodeValAbbr == FundedBy
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        FundedByName = query.CodeValDetail;
                    }

                }

                return FundedByName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getSponseredPrjCatagoryName(int PrjCatagory)
        {
            try
            {
                string Sponserd = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "SponProjectCategory" && C.CodeValAbbr == PrjCatagory
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        Sponserd = query.CodeValDetail;
                    }

                }

                return Sponserd;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getConsultancyPrjCatagoryName(int FundCatagory)
        {
            try
            {
                string ConsFundCatagory = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSchemes
                                 where C.SchemeId == FundCatagory
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        ConsFundCatagory = query.SchemeName;
                    }

                }

                return ConsFundCatagory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static string getGovFundingBody(int GovFundingId)
        {
            try
            {
                string ConsFundCatagory = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Indfundgovtbody" && C.CodeValAbbr == GovFundingId
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        ConsFundCatagory = query.CodeValDetail;
                    }

                }

                return ConsFundCatagory;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }

        public static decimal getExchangeRate(string fromCurrency)
        {
            try
            {
                string toCurrency = "INR";
                decimal exchangeRate = 0;
                WebClient web = new WebClient();
                var pair = fromCurrency.ToUpper() + "_" + toCurrency.ToUpper();
                string url = string.Format("https://free.currencyconverterapi.com/api/v5/convert?q={0}&compact=y", pair);
                var response = web.DownloadString(url);
                var split = response.Split((new string[] { "\"val\":" }), StringSplitOptions.None);
                var value = split[1].Split('}')[0];
                exchangeRate = decimal.Parse(value, System.Globalization.CultureInfo.InvariantCulture);
                return exchangeRate;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }

        public static string getDocumentTypeName(int DocId)
        {
            try
            {
                string DocTypeName = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblDocument
                                 where C.DocumentId == DocId
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        DocTypeName = query.DocumentName;
                    }

                }

                return DocTypeName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex); return "";
            }

        }
        public static string getProjecTypeName(int projectType)
        {
            try
            {
                string PrjTypeName = "";
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Projecttype" && C.CodeValAbbr == projectType
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        PrjTypeName = query.CodeValDetail;
                    }

                }

                return PrjTypeName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static List<MasterlistviewModel> GetVendorList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblVendorMaster
                                 orderby C.Name
                                 where C.Status == "Active"
                                 select new { C.Name, C.VendorId, C.isGstVendor }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].VendorId,
                                name = query[i].Name,
                                isGstVendor = query[i].isGstVendor
                            });
                        }
                    }
                }

                return list;

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }

        }

        public static List<MasterlistviewModel> GetBillTypeList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "DeductionCategory"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }

        public static List<MasterlistviewModel> GetTypeOfServiceList(int type)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblTaxMaster
                                 where (type == 1 && C.Service_f == true)
                                 || (type == 2 && C.Service_f != true)
                                 || type == 3
                                 orderby C.ServiceType
                                 select new { C.ServiceType, C.TaxMasterId }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].TaxMasterId,
                                name = query[i].ServiceType,
                            });
                        }
                    }
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }

        }

        public static List<MasterlistviewModel> GetDocTypeList(int functionId)
        {
            try
            {

                List<MasterlistviewModel> Doctype = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from fd in context.tblFunctionDocument
                                 join d in context.tblDocument on fd.DocumentId equals d.DocumentId
                                 where fd.FunctionId == functionId
                                 orderby d.DocumentName
                                 select d).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Doctype.Add(new MasterlistviewModel()
                            {
                                id = query[i].DocumentId,
                                name = query[i].DocumentName,
                            });
                        }
                    }

                }

                return Doctype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static tblTaxMaster GetServiceDetail(int serviceType)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTaxMaster.FirstOrDefault(dup => dup.TaxMasterId == serviceType);
                    if (query != null)
                    {
                        return query;
                    }
                    else
                        return new tblTaxMaster();
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new tblTaxMaster();
            }
        }

        public static List<CheckListModel> GetCheckedList(int functionId)
        {
            try
            {
                List<CheckListModel> list = new List<CheckListModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from chk in context.tblFunctionCheckList
                            orderby chk.FunctionCheckListId
                            where chk.FunctionId == functionId
                            select new CheckListModel { CheckList = chk.CheckList, FunctionCheckListId = chk.FunctionCheckListId }).ToList();
                    return list;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<CheckListModel>();
            }
        }

        public static List<MasterlistviewModel> GetAccountHeadList(int accountGroupId, int accountHead = 0, string tSubCode = "", string transTypeCode = "", bool? isBank = null, bool? isInActive = null)
        {
            try
            {

                List<MasterlistviewModel> headList = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    if (!String.IsNullOrEmpty(tSubCode))
                    {
                        var groupIds = (from c in context.tblTransactionDefinition
                                        where c.TransactionTypeCode == transTypeCode
                                        && c.SubCode == tSubCode && c.AccountGroupId == accountGroupId
                                        select new { c.AccountHeadId }).FirstOrDefault();
                        if (groupIds != null)
                        {
                            int headId = accountHead == 0 ? groupIds.AccountHeadId ?? 0 : accountHead;
                            headList = (from ah in context.tblAccountHead
                                        where ah.AccountGroupId == accountGroupId && (headId == 0 || ah.AccountHeadId == headId)
                                        && ((ah.Status != "InActive" && isInActive == null) || (isInActive == true))
                                        select new MasterlistviewModel()
                                        {
                                            id = ah.AccountHeadId,
                                            name = ah.AccountHead
                                        }).OrderBy(num => num.id != headId ? num.id : -1).ToList();

                        }
                        else
                        {
                            headList = (from ah in context.tblAccountHead
                                        orderby ah.AccountHead
                                        where ah.AccountGroupId == accountGroupId && ((ah.Status != "InActive" && isInActive == null) || (isInActive == true))
                                        select new MasterlistviewModel()
                                        {
                                            id = ah.AccountHeadId,
                                            name = ah.AccountHead
                                        }).ToList();
                        }
                    }
                    else
                    {
                        headList = (from ah in context.tblAccountHead
                                    orderby ah.AccountHead
                                    where ah.AccountGroupId == accountGroupId && (isBank == null || ah.Bank_f == isBank)
                                    && ((ah.Status != "InActive" && isInActive == null) || (isInActive == true))
                                    select new MasterlistviewModel()
                                    {
                                        id = ah.AccountHeadId,
                                        name = ah.AccountHead
                                    }).ToList();
                    }

                }
                return headList;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }



        public static string GetNewPOBillNo(string type)
        {
            try
            {
                var no = string.Empty;
                var checkNum = type + "/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblBillEntry
                               where (b.BillNumber.Contains(checkNum))
                               orderby b.BillId descending
                               select b.BillNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewUCNo(string type)
        {
            try
            {
                var no = string.Empty;
                var checkNum = type + "/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblUCHead
                               where (b.UCNumber.Contains(checkNum))
                               orderby b.UCId descending
                               select b.UCNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewTravelBillNo(string type)
        {
            try
            {
                var no = string.Empty;
                var checkNum = type + "/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblTravelBill
                               where (b.BillNumber.Contains(checkNum))
                               orderby b.TravelBillId descending
                               select b.BillNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewProjectTransferNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "PFT/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblProjectTransfer
                               where (b.TransferNumber.Contains(checkNum))
                               orderby b.ProjectTransferId descending
                               select b.TransferNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewProjectTransNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "PDT/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblProjectDirectTransfer
                               where (b.TransferNumber.Contains(checkNum))
                               orderby b.ProjectTransferId descending
                               select b.TransferNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewContraNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "CTR/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblContra
                               where (b.ContraNumber.Contains(checkNum))
                               orderby b.ContraId descending
                               select b.ContraNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewBRSNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "BRS/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblBRS
                               where (b.BRSNumber.Contains(checkNum))
                               orderby b.BRSId descending
                               select b.BRSNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewCommitmentNo()
        {
            try
            {
                string CommitNo = string.Empty;
                var checkNum = "COM/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    int num = (from b in context.tblCommitment
                               where (b.CommitmentNumber.Contains(checkNum))
                               select b).Max(m => m.SequenceNo) ?? 0;

                    if (num > 0)
                    {

                        num += 1;
                        return checkNum + num.ToString("00000");
                    }
                    else
                    {
                        return checkNum + "00001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewVoucherNo(string voucherType)
        {
            try
            {
                var no = string.Empty;
                var checkNum = voucherType + "/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblBOA
                               where (b.VoucherNumber.Contains(checkNum))
                               orderby b.BOAId descending
                               select b.VoucherNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewGeneralVoucherNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "GVR/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblGeneralVoucher
                               where (b.VoucherNumber.Contains(checkNum))
                               orderby b.GeneralVoucherId descending
                               select b.VoucherNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewJvNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "JV/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblJournal
                               where (b.JournalNumber.Contains(checkNum))
                               orderby b.JournalId descending
                               select b.JournalNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewCrNoteNo()
        {
            try
            {
                var no = string.Empty;
                var defNum = "CN" + GetCurrentFinYear();
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblCreditNote
                               where b.CreditNoteNumber.Contains(defNum)
                               orderby b.CreditNoteId descending
                               select b.CreditNoteNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Substring(6);// num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return defNum + seqnum;
                    }
                    else
                    {
                        return defNum + "1";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewTempVoucherNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "PBAT/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblBOADraft
                               where (b.TempVoucherNumber.Contains(checkNum))
                               orderby b.BOADraftId descending
                               select b.TempVoucherNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static Tuple<string, int> GetNewFDNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "FDT/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblFixedDeposit
                               where b.FixedDepositNumber.Contains(checkNum)
                               select b).Max(m => m.SeqNbr);

                    if (num != null)
                    {
                        var seqnum = Convert.ToInt32(num);
                        seqnum += 1;
                        return Tuple.Create(checkNum + seqnum.ToString("000000"), seqnum);
                    }
                    else
                    {
                        return Tuple.Create(checkNum + "000001", 1);
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static Tuple<string, int> GetNewFDCNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "FDC/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblFixedDepositClosed
                               where b.FixedDepositClosedNumber.Contains(checkNum)
                               select b).Max(m => m.SeqNbr);

                    if (num != null)
                    {
                        var seqnum = Convert.ToInt32(num);
                        seqnum += 1;
                        return Tuple.Create(checkNum + seqnum.ToString("000000"), seqnum);
                    }
                    else
                    {
                        return Tuple.Create(checkNum + "000001", 1);
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetCurrentFinYear()
        {
            try
            {
                var year = "";
                using (var context = new IOASDBEntities())
                {
                    var financialYear = context.tblFinYear.FirstOrDefault(m => m.CurrentYearFlag == true);
                    if (financialYear != null)
                        year = financialYear.Year;
                }

                return year;
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static int GetCurrentFinYearId()
        {
            try
            {
                int cId = 0;
                using (var context = new IOASDBEntities())
                {
                    var financialYear = context.tblFinYear.FirstOrDefault(m => m.CurrentYearFlag == true);
                    if (financialYear != null)
                        cId = financialYear.FinYearId;
                }

                return cId;
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static DateTime? GetCurrentFinYearFromDate()
        {
            try
            {
                DateTime? finFrom = null;
              
                using (var context = new IOASDBEntities())
                {
                    var financialYear = context.tblFinYear.FirstOrDefault(m => m.CurrentYearFlag == true);
                    if (financialYear != null)
                        finFrom = Convert.ToDateTime(financialYear.StartDate);
                       


                }

                return finFrom;
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }
        }

        public static DateTime? GetCurrentFinYearToDate()
        {
            try
            {
               
                DateTime? finTo = null;
                using (var context = new IOASDBEntities())
                {
                    var financialYear = context.tblFinYear.FirstOrDefault(m => m.CurrentYearFlag == true);
                    if (financialYear != null)
                        
                    finTo = Convert.ToDateTime(financialYear.EndDate);


                }

                return finTo;
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }
        }

        public static string GetRefNumberForValidation(string Refnum, string vouchertype)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var refnums = "";
                    switch (vouchertype)
                    {
                        case "AdminVoucher":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "AVO" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;

                        case "Clearance":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "CLP" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;

                        case "Contra":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "CTR" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "DirectFundTransfer":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "PDT" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "Distribution":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "DIS" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "PCFAndDistributionOverheads":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "DOP" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;

                        case "FixedDeposit":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "FDT" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "FixedDepositClose":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "FDC" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "ForeignRemittance":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "FRM" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "GeneralVoucher":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "GVR" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "GstOffset":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "GOF" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "HeadCredit":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "HCR" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "HeadWiseFundTransfer":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       from BED in context.tblBOAExpenditureDetail
                                       where boa.Status == "Posted" && BED.TransactionTypeCode == "PFT" && BED.ReferenceNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select BED.ReferenceNumber).FirstOrDefault();
                            break;

                        case "Honorarium":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "HON" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "Imprest":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "IMR" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "ImprestRecoupment":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "IBR" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "OHAddRev":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "OHAR" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "OverheadPosting":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "OHP" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "PartTimePayment":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "PTP" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "ReceiptDate":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && (boa.TransactionTypeCode == "RBU" || boa.TransactionTypeCode == "RCV") && boa.RefNumber == Refnum
                                        && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "Reimbursement":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "REM" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "SummerInternship":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "SMI" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "TdsPayment":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "TXP" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "TravelBill":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && (boa.TransactionTypeCode == "DTV" || boa.TransactionTypeCode == "TAD" || boa.TransactionTypeCode == "TST") && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "BillDate":

                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && (boa.TransactionTypeCode == "STM" || boa.TransactionTypeCode == "ADV" || boa.TransactionTypeCode == "PTV") && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "JournalBillDateChange":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "JV" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "LCR":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "LCR" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "ImprestEnhance":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "IME" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "ImprestMaster":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "IMP" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                        case "ImprestMasterClose":
                            refnums = (from boa in context.tblBOA
                                       from fy in context.tblFinYear
                                       where boa.Status == "Posted" && boa.TransactionTypeCode == "IMC" && boa.RefNumber == Refnum
                                       && boa.PostedDate >= fy.StartDate && boa.PostedDate <= fy.EndDate && fy.CurrentYearFlag == true
                                       select boa.RefNumber).FirstOrDefault();
                            break;
                    }
                    return refnums.ToString();

                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static int GetPreviousFinYearId(int finId)
        {
            try
            {
                int preFinId = 0;
                using (var context = new IOASDBEntities())
                {
                    var financialYear = context.tblFinYear.AsNoTracking().FirstOrDefault(m => m.FinYearId == finId);
                    if (financialYear != null)
                    {
                        DateTime startDate = Convert.ToDateTime(financialYear.StartDate);
                        DateTime endDate = Convert.ToDateTime(financialYear.EndDate);
                        string preYear = startDate.ToString("yy") + endDate.ToString("yy");
                        var preQuery = context.tblFinYear.AsNoTracking().FirstOrDefault(m => m.Year == preYear);
                        if (preQuery != null)
                            preFinId = preQuery.FinYearId;
                    }
                    else
                        throw new Exception();
                }

                return preFinId;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw new Exception();
            }
        }
        public static List<MasterlistviewModel> GetAdvancedPercentageList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "AdvancedPercentage"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }

        public static List<MasterlistviewModel> GetBillRMNGPercentageList(string poNumber, Nullable<Int32> vendorId, int negBillId = 0)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var previousPct = (from b in context.tblBillEntry
                                       where b.PONumber == poNumber && b.VendorId == vendorId && b.BillId != negBillId && b.Status != "Rejected"
                                       select b.AdvancePercentage ?? 0).Sum();
                    previousPct = 100 - previousPct;
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "AdvancedPercentage" && C.CodeValAbbr < previousPct
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static Tuple<decimal, decimal> GetBillRMNGBalance(string poNumber, Nullable<Int32> vendorId, int negBillId = 0)
        {
            try
            {

                decimal avlAmt = 0, avlTaxAmt = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblBillEntry
                                 where b.PONumber == poNumber && b.VendorId == vendorId && b.BillId != negBillId && b.Status != "Rejected"
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        decimal? preSettAmt = query.Select(m => m.ExpenseAmount).Sum();
                        decimal? preSettTaxAmt = query.Select(m => m.DeductionAmount).Sum();
                        avlAmt = (query[0].BillAmount - preSettAmt) ?? 0;
                        avlTaxAmt = (query[0].BillTaxAmount - preSettTaxAmt) ?? 0;
                    }

                }

                return Tuple.Create(avlAmt, avlTaxAmt);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((Decimal)0, (Decimal)0);
            }

        }
        public static Tuple<decimal, decimal, decimal, decimal> GetBillPaidAndRMNGAmt(string poNumber, Nullable<Int32> vendorId, int negBillId = 0)
        {
            try
            {
                decimal paidAmt = 0, paidTaxAmt = 0, billAmt = 0, billTaxAmt = 0;

                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblBillEntry
                                 where b.PONumber == poNumber && b.VendorId == vendorId && b.BillId != negBillId && b.Status != "Rejected" && b.Status != "InActive"
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        paidAmt = query.Select(m => m.ExpenseAmount).Sum() ?? 0;
                        paidTaxAmt = query.Select(m => m.DeductionAmount).Sum() ?? 0;
                        billAmt = query[0].BillAmount ?? 0;
                        billTaxAmt = query[0].BillTaxAmount ?? 0;
                    }

                }
                return Tuple.Create(paidAmt, paidTaxAmt, billAmt, billTaxAmt);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((Decimal)0, (Decimal)0, (Decimal)0, (Decimal)0);
            }

        }
        public static decimal GetBillRMNGPercentage(string poNumber, Nullable<Int32> vendorId, int negBillId = 0)
        {
            try
            {

                decimal rmngPct = 0;
                using (var context = new IOASDBEntities())
                {
                    var previousPct = (from b in context.tblBillEntry
                                       where b.PONumber == poNumber && b.VendorId == vendorId && b.BillId != negBillId
                                       && b.Status != "Rejected" && b.Status != "InActive"
                                       select b.AdvancePercentage ?? 0).Sum();
                    rmngPct = 100 - previousPct;

                }

                return rmngPct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static string GetBillStatus(int billId)
        {
            try
            {
                string status = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId);
                    if (query != null)
                        status = query.Status;
                }
                return status;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static string GetBillPONumber(int billId)
        {
            try
            {
                string no = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId);
                    if (query != null)
                        no = query.PONumber;
                }
                return no;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }
        }
        public static bool ValidateBillOnEdit(int billId, string type)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId && m.TransactionTypeCode == type && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static bool ValidateVendorOnEdit(int vendorId, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblVendorMaster.FirstOrDefault(m => m.VendorId == vendorId && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidatePartBillOnEdit(int billId, bool? partADV_f = null)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId && m.TransactionTypeCode == "PTM" && m.Status == "Open" && m.PartAdvance_f == partADV_f);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<MasterlistviewModel> GetBillPONumberList(Nullable<Int32> vendorId, string selPONo = "", string transTypeCode = "")
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry
                        .Where(m => m.VendorId == vendorId && m.Status == "Completed")
                        .GroupBy(m => new { m.PONumber, m.VendorId })
                        .Where(b => /*b.Select(m => m.VendorId).FirstOrDefault() == vendorId && b.Select(m => m.Status).FirstOrDefault() == "Completed" &&*/
                         (String.IsNullOrEmpty(transTypeCode) || b.Any(m => m.TransactionTypeCode == transTypeCode))
                        && (b.Key.PONumber == selPONo || (String.IsNullOrEmpty(selPONo) && b.Sum(m => m.AdvancePercentage) < 100 && transTypeCode != "ADV")
                        || (String.IsNullOrEmpty(selPONo) &&
                        !context.tblBillEntry.Any(m => m.PONumber == b.Select(g => g.PONumber).FirstOrDefault() && m.VendorId == vendorId && m.TransactionTypeCode == "STM")
                        && transTypeCode == "ADV"))
                        )
                        .Select(m => new { BillId = m.OrderByDescending(x => x.BillId).FirstOrDefault().BillId, PONumber = m.Key.PONumber, pct = m.Sum(v => v.AdvancePercentage) }).ToList();

                    //(from b in context.tblBillEntry
                    //where b.VendorId == vendorId && b.Status == "Completed"
                    //&& (transTypeCode == "" || b.TransactionTypeCode == transTypeCode)
                    ////(transTypeCode != "ADV" && b.TransactionTypeCode == transTypeCode) ||
                    ////(transTypeCode == "ADV" && (b.TransactionTypeCode == transTypeCode || b.TransactionTypeCode == "STM")))
                    ////&& !context.tblBillEntry.Any(m => m.PONumber == b.PONumber && m.TransactionTypeCode == "STM" && (string.IsNullOrEmpty(selPONo) || m.PONumber != selPONo))
                    ////&& context.tblBillEntry.Where(m => m.PONumber == b.PONumber && (string.IsNullOrEmpty(selPONo) || m.PONumber != selPONo)).Select(m=>m.AdvancePercentage).Sum() < 100
                    //group b by b.PONumber into g
                    //where g.Any(m => m.PONumber == selPONo || g.Sum(v => v.AdvancePercentage) < 100)
                    //select new { BillId = g.OrderByDescending(x => x.BillId).FirstOrDefault().BillId, PONumber = g.Key, pct = g.Sum(v => v.AdvancePercentage) }).ToList();
                    //var query = context.tblBillEntry

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].BillId,
                                name = query[i].PONumber
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static List<TDSPaymentModel> Section()
        {
            try
            {
                List<TDSPaymentModel> tds = new List<TDSPaymentModel>();
                using (var context = new IOASDBEntities())
                {
                    // int[] id = { 39, 40, 41, 42, 43 };
                    var query = (from H in context.tblAccountHead
                                 where H.AccountGroupId == 15
                                 select new
                                 {
                                     H.AccountHead,
                                     H.AccountHeadId
                                 }).Distinct().ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            tds.Add(new TDSPaymentModel()
                            {
                                HeadId = query[i].AccountHeadId,
                                Head = query[i].AccountHead
                            });
                        }

                    }
                }
                return tds;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<TDSPaymentModel> tds = new List<TDSPaymentModel>();
                return tds;
            }
        }
        public static List<MasterlistviewModel> GetCodeControlList(string codeName, string codeDes = "", bool appendDes = false)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == codeName && (String.IsNullOrEmpty(codeDes) || C.CodeDescription == codeDes)
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = appendDes ? query[i].CodeDescription + "-" + query[i].CodeValDetail : query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }

        //rajesh vs11764 Distribution
        public static List<MasterlistviewModel> GetDistributionProjectNumber()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {//35690
                    list = (from P in context.tblProject
                            join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                            where  P.ProjectId == 35690
                            orderby P.ProjectNumber
                            group new { P.ProjectId, P.ProjectNumber, U.FirstName } by P.ProjectId into g
                            select new
                            {
                                ProjectId = g.Key,
                                ProjectNumber = g.Select(m => m.ProjectNumber).FirstOrDefault(),
                                PIName = g.Select(m => m.FirstName).FirstOrDefault()
                            })
                            .AsEnumerable()
                            .Select((x, index) => new MasterlistviewModel()
                            {
                                id = x.ProjectId,
                                name = x.ProjectNumber + " - " + x.PIName
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        //    public static string GetDistributionProjectNumber()
        //    {
        //        try
        //        {

        //            using (var context = new IOASDBEntities())
        //            {
        //                var query = (from ProjDis in context.tblProject
        //                             where ProjDis.ProjectId==35690
        //                             //select ProjDis).FirstOrDefault();
        //                             select new { ProjDis.ProjectNumber }).ToList();

        //                return Convert.ToString(query);

        //            }
        //        }

        //        catch (Exception ex)
        //        {
        //            Infrastructure.IOASException.Instance.HandleMe(
        //(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
        //            throw ex;

        //        }
        //    }

        public static string ValidateSettlement(string poNumber, Nullable<Int32> vendorId, decimal deductAmt, decimal expAmt, int negBillId = 0)
        {
            try
            {

                string msg = "Settlement amount you have enter is invalid!";
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblBillEntry
                                 where b.PONumber == poNumber && b.VendorId == vendorId && b.BillId != negBillId && b.Status != "Rejected"
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        decimal? preSettAmt = query.Select(m => m.ExpenseAmount).Sum();
                        decimal? preSettTaxAmt = query.Select(m => m.DeductionAmount).Sum();
                        decimal avlAmt = (query[0].BillAmount - preSettAmt) ?? 0;
                        decimal avlTaxAmt = (query[0].BillTaxAmount - preSettTaxAmt) ?? 0;
                        if (query[0].EligibleForOffset_f == true || query[0].PartiallyEligibleForOffset_f == true)
                        {
                            if (avlAmt != expAmt)
                                msg = "Settlement expence amount you have enter is invalid!";
                            else if (avlTaxAmt != deductAmt)
                                msg = "Settlement deduction amount you have enter is invalid!";
                            else if (deductAmt == 0 && expAmt == 0)
                                msg = "PO number for this bill already settled !";
                            else
                                msg = "Valid";
                        }
                        else
                        {
                            if (expAmt == (avlAmt + avlTaxAmt) && deductAmt == 0)
                                msg = "Valid";
                        }
                    }

                }

                return msg;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "Not Valid";
            }

        }
        public static int getProjectID(int InvoiceId)
        {
            try
            {
                var projectid = 0;
                var context = new IOASDBEntities();
                var invoicequery = (from inv in context.tblProjectInvoice
                                    where inv.InvoiceId == InvoiceId
                                    select inv).FirstOrDefault();

                if (invoicequery != null)
                {
                    projectid = Convert.ToInt32(invoicequery.ProjectId);

                    return projectid;
                }
                else
                {
                    return projectid;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static int GetCodeControlAbbrId(string CodeName, string CodeValDetail, string CodeValDes = "")
        {
            try
            {
                var abbrId = 0;
                using (var context = new IOASDBEntities())
                {
                    var abbrQuery = (from cc in context.tblCodeControl
                                     where cc.CodeValDetail == CodeValDetail
                                         && cc.CodeName == CodeName
                                         && (String.IsNullOrEmpty(CodeValDes) || cc.CodeDescription == CodeValDes)
                                     select cc).FirstOrDefault();

                    if (abbrQuery != null)
                    {
                        abbrId = abbrQuery.CodeValAbbr;
                    }
                    return abbrId;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static int getProjectIdbyReceiptId(int ReceiptId)
        {
            try
            {
                var projectid = 0;
                var context = new IOASDBEntities();
                var recquery = (from rec in context.tblReceipt
                                where rec.ReceiptId == ReceiptId
                                select rec).FirstOrDefault();

                if (recquery != null)
                {
                    projectid = Convert.ToInt32(recquery.ProjectId);

                    return projectid;
                }
                else
                {
                    return projectid;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static List<MasterlistviewModel> getreceivableshead()
        {
            try
            {

                List<MasterlistviewModel> Receivableshead = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblDeductionHead
                                 join A in context.tblAccountHead on C.AccountHeadId equals A.AccountHeadId
                                 where C.TransactionTypeCode == "RCV"
                                 orderby C.DeductionHeadId
                                 select new { C, A }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Receivableshead.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.DeductionHeadId,
                                name = query[i].A.AccountHead,
                                code = query[i].A.AccountHeadCode
                            });
                        }
                    }

                }

                return Receivableshead;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getmodeofreceipt()
        {
            try
            {

                List<CodeControllistviewModel> modeofreceipt = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ModeofReceipt"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            modeofreceipt.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return modeofreceipt;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> getcurrency()
        {
            try
            {

                List<MasterlistviewModel> Currency = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCurrency
                                 orderby C.ISOCode
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Currency.Add(new MasterlistviewModel()
                            {
                                id = query[i].CurrencyID,
                                name = query[i].CurrencyUnit,
                                code = query[i].ISOCode
                            });
                        }
                    }

                }

                return Currency;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<CodeControllistviewModel> getinvoicetype()
        {
            try
            {

                List<CodeControllistviewModel> Invoicetype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "InvoiceType"
                                 orderby C.CodeValAbbr
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Invoicetype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Invoicetype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetInvoicedetails()
        {
            try
            {

                List<MasterlistviewModel> Invoicedetails = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProjectInvoiceDraft
                                 join P in context.tblProject on C.ProjectId equals P.ProjectId
                                 join user in context.tblUser on P.PIName equals user.UserId
                                 select new { C, P, user.FirstName, user.LastName, user.EMPCode }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Invoicedetails.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.InvoiceDraftId,
                                name = query[i].C.InvoiceDate + "-" + query[i].C.DescriptionofServices + "-" + query[i].FirstName + " " + query[i].LastName,
                            });
                        }
                    }
                }

                return Invoicedetails;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Invoicedetails = new List<MasterlistviewModel>();
                return Invoicedetails;
            }

        }

        public static List<MasterlistviewModel> getinvocenumber(int pId)
        {
            try
            {
                List<MasterlistviewModel> invoicenumber = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProjectInvoice
                                 where C.ProjectId == pId
                                 orderby C.InvoiceId
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            invoicenumber.Add(new MasterlistviewModel()
                            {
                                id = query[i].InvoiceId,
                                name = query[i].InvoiceNumber
                            });
                        }
                    }
                }
                return invoicenumber;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }
        }
        public static List<MasterlistviewModel> getbudgethead()
        {
            try
            {
                List<MasterlistviewModel> budgethead = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from A in context.tblBudgetHead
                                 orderby A.BudgetHeadId
                                 select A).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            budgethead.Add(new MasterlistviewModel()
                            {
                                id = query[i].BudgetHeadId,
                                name = query[i].HeadName,
                            });
                        }
                    }
                }
                return budgethead;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }
        }
        public static string getReceiptSequenceNumber()
        {
            try
            {
                var no = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblReceipt
                               orderby b.ReceiptId descending
                               select b.ReceiptNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return "RCV" + "/" + GetCurrentFinYear() + "/" + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "RCV" + "/" + GetCurrentFinYear() + "/" + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<CodeControllistviewModel> getbanktransactiontype()
        {
            try
            {

                List<CodeControllistviewModel> Transactiontype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "TransactionType"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Transactiontype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return Transactiontype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static string getreceiptnumber(int receiptid)
        {
            try
            {
                var receiptnumber = " ";
                var context = new IOASDBEntities();
                var query = (from rcv in context.tblReceipt
                             where rcv.ReceiptId == receiptid
                             select rcv).FirstOrDefault();

                if (query != null)
                {
                    receiptnumber = query.ReceiptNumber;
                    return receiptnumber;
                }
                else
                {
                    return receiptnumber;
                }

            }

            catch (Exception ex)
            {

                throw ex;

            }
        }
        public static List<CodeControllistviewModel> getreceiptstatus()
        {
            try
            {

                List<CodeControllistviewModel> receiptstatus = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ReceiptStatus"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            receiptstatus.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return receiptstatus;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static bool ValidateTravelBillStatus(int billId, string type, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == billId && m.TransactionTypeCode == type && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateJournalStatus(int journalId, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblJournal.FirstOrDefault(m => m.JournalId == journalId && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<MasterlistviewModel> GetStudentList()
        {
            try
            {

                List<MasterlistviewModel> stud = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    stud = (from C in context.vwStudentDetails
                            orderby C.FirstName
                            select new MasterlistviewModel()
                            {
                                code = C.RollNumber,
                                name = C.RollNumber + "-" + C.FirstName
                            }).ToList();

                }

                return stud;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static List<MasterlistviewModel> GetAgencyDocument()
        {

            try
            {
                List<MasterlistviewModel> Agencydoc = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var documentid = (from FD in context.tblFunctionDocument
                                      where (FD.FunctionId == 19)
                                      select FD.DocumentId).ToArray();
                    if (documentid != null)
                    {
                        var query = (from D in context.tblDocument
                                     where documentid.Contains(D.DocumentId)
                                     select new { D.DocumentId, D.DocumentName }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                Agencydoc.Add(new MasterlistviewModel()
                                {

                                    id = query[i].DocumentId,
                                    name = query[i].DocumentName
                                });
                            }
                        }
                    }
                    return Agencydoc;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Agencydoc = new List<MasterlistviewModel>();
                return Agencydoc;
            }
        }
        public static List<CodeControllistviewModel> getprojectsource()
        {
            try
            {

                List<CodeControllistviewModel> projectsource = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "ProjectSource"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            projectsource.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return projectsource;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetGstSupportingDoc()
        {
            try
            {
                List<MasterlistviewModel> Gstsupport = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from D in context.tblDocument
                                 from FD in context.tblFunctionDocument
                                 where D.DocumentId == FD.DocumentId && FD.FunctionId == 40
                                 select new { D.DocumentId, D.DocumentName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Gstsupport.Add(new MasterlistviewModel()
                            {
                                id = query[i].DocumentId,
                                name = query[i].DocumentName
                            });
                        }
                    }
                }
                return Gstsupport;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Gstsupport = new List<MasterlistviewModel>();
                return Gstsupport;
            }
        }
        public static List<MasterlistviewModel> GetVendorSupportingDoc()
        {
            try
            {
                List<MasterlistviewModel> vendorsupportdoc = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from D in context.tblDocument
                                 from FD in context.tblFunctionDocument
                                 where D.DocumentId == FD.DocumentId && FD.FunctionId == 40
                                 select new { D.DocumentId, D.DocumentName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            vendorsupportdoc.Add(new MasterlistviewModel()
                            {
                                id = query[i].DocumentId,
                                name = query[i].DocumentName
                            });
                        }
                    }
                }
                return vendorsupportdoc;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> vendorsupportdoc = new List<MasterlistviewModel>();
                return vendorsupportdoc;
            }
        }
        public static List<MasterlistviewModel> GetVendorTdsDoc()
        {
            try
            {
                List<MasterlistviewModel> tdssupport = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from D in context.tblDocument
                                 from FD in context.tblFunctionDocument
                                 where D.DocumentId == FD.DocumentId && FD.FunctionId == 40
                                 select new { D.DocumentId, D.DocumentName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            tdssupport.Add(new MasterlistviewModel()
                            {
                                id = query[i].DocumentId,
                                name = query[i].DocumentName
                            });
                        }
                    }
                }
                return tdssupport;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> tdssupport = new List<MasterlistviewModel>();
                return tdssupport;
            }
        }
        public static List<MasterlistviewModel> GetCategoryService()
        {
            try
            {
                List<MasterlistviewModel> getcategoryservice = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "DeductionCategory"
                                 select new { C.CodeValAbbr, C.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            getcategoryservice.Add(new MasterlistviewModel()
                            {

                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }

                }
                return getcategoryservice;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> getcategoryservice = new List<MasterlistviewModel>();
                return getcategoryservice;
            }
        }
        public static List<MasterlistviewModel> GetServiceTypeList()
        {
            try
            {
                List<MasterlistviewModel> getsupport = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from S in context.tblTaxMaster
                                 where S.Service_f == true
                                 orderby S.ServiceType
                                 select new { S.TaxMasterId, S.ServiceType }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            getsupport.Add(new MasterlistviewModel()
                            {
                                id = query[i].TaxMasterId,
                                name = query[i].ServiceType

                            });
                        }
                    }
                }
                return getsupport;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> getsupport = new List<MasterlistviewModel>();
                return getsupport;
            }
        }
        public static List<MasterlistviewModel> GetSupplierType()
        {
            try
            {
                List<MasterlistviewModel> suppliertype = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from S in context.tblTaxMaster
                                 where S.Service_f == false
                                 select new { S.TaxMasterId, S.ServiceType }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            suppliertype.Add(new MasterlistviewModel()
                            {
                                id = query[i].TaxMasterId,
                                name = query[i].ServiceType
                            });
                        }
                    }
                }
                return suppliertype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> suppliertype = new List<MasterlistviewModel>();
                return suppliertype;
            }
        }
        public static decimal GetVendorTDSPercentage(int vendorTDSDetailId)
        {
            try
            {
                decimal tdsPct = 0;
                using (var context = new IOASDBEntities())
                {
                    var previousPct = context.tblVendorTDSDetail.FirstOrDefault(m => m.VendorTDSDetailId == vendorTDSDetailId);
                    if (previousPct != null)
                        tdsPct = previousPct.TDSPercentage ?? 0;
                }
                return tdsPct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static List<MasterlistviewModel> GetVendorTDSList(Nullable<Int32> vendorId)
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblVendorTDSDetail
                            from T in context.tblTDSMaster
                            where b.VendorId == vendorId && b.Section == T.TdsMasterId
                            select new MasterlistviewModel()
                            {
                                id = T.TdsMasterId,
                                name = T.Section
                            }).ToList();
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static Functionviewmodel GetAccessDetail(int functionId, string username)
        {
            try
            {
                Functionviewmodel model = new Functionviewmodel();

                using (var context = new IOASDBEntities())
                {
                    model = (from ra in context.tblRoleaccess
                             join u in context.tblUser on ra.RoleId equals u.RoleId
                             where ra.FunctionId == functionId && u.UserName == username && u.Status == "Active"
                             select new Functionviewmodel()
                             {
                                 Add = ra.Add_f ?? false,
                                 Delete = ra.Delete_f ?? false,
                                 Approve = ra.Approve_f ?? false,
                                 Read = ra.Read_f ?? false
                             }).FirstOrDefault();
                }
                return model;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new Functionviewmodel();
            }

        }
        public static List<MasterlistviewModel> GetTravelADVList(int? refADVBillId = null, int? PI = null)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblTravelBill
                                 where b.Status == "Completed" && b.TransactionTypeCode == "TAD"
                                 && (PI == null || b.PI == PI)
                                 && !context.tblTravelBill.Any(m => m.RefTravelBillId == b.TravelBillId && m.TransactionTypeCode == "TST" && (refADVBillId == null || m.RefTravelBillId != refADVBillId))
                                 select new { b.BillNumber, b.TravelBillId }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].TravelBillId,
                                name = query[i].BillNumber
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static decimal GetTravellerDailyAllowance(int countryId)
        {
            try
            {

                decimal allow = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelDailyAllowance.FirstOrDefault(m => m.CountryId == countryId);

                    if (query != null)
                    {
                        allow = getExchangeRate("USD") * query.AllowanceRateInUSD ?? 0;
                    }

                }

                return Math.Round(allow);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static decimal GetTravelAdvanceValueWOClearanceAgent(int travelId)
        {
            try
            {

                decimal amt = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelPaymentBreakUpDetail.Where(m => m.TravelBillId == travelId && m.CategoryId != 3).ToList();

                    if (query.Count > 0)
                    {
                        amt = query.Sum(m => m.PaymentAmount ?? 0);
                    }

                }

                return Math.Round(amt);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static decimal GetTravelAdvanceValue(int travelId)
        {
            try
            {

                decimal amt = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.Where(m => m.TravelBillId == travelId).FirstOrDefault();

                    if (query != null)
                    {
                        amt = query.AdvanceValue ?? 0;
                    }

                }

                return amt;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static string getSBIEcardnumber(int SBIECardID)
        {
            try
            {
                var SBICardnumber = " ";
                var context = new IOASDBEntities();
                var query = (from EC in context.tblSBIECardDetails
                             where EC.SBIPrepaidCardDetailsId == SBIECardID
                             select EC).FirstOrDefault();

                if (query != null)
                {
                    SBICardnumber = query.SBIPrepaidCardNumber;
                    return SBICardnumber;
                }
                else
                {
                    return SBICardnumber;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteStudentList(string term)
        {
            try
            {

                List<AutoCompleteModel> stud = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    stud = (from C in context.vwStudentDetails
                            where string.IsNullOrEmpty(term) || C.RollNumber.Contains(term) || C.FirstName.Contains(term)
                            orderby C.FirstName
                            select new AutoCompleteModel()
                            {
                                value = C.RollNumber,
                                label = C.RollNumber + "-" + C.FirstName
                            }).ToList();

                }

                return stud;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<ProjectEnhancementModel> FreezeUnfreezeLoadProjectDetails(int ProjectId)
        {
            try
            {
                List<ProjectEnhancementModel> list = new List<ProjectEnhancementModel>();
                
                using (var context = new IOASDBEntities())
                {
                    list = (from P in context.tblProject
                                where P.ProjectId == ProjectId && P.Status == "Active"
                                
                                  select new ProjectEnhancementModel()
                                  {
                                     ProjectNumber=P.ProjectNumber,
                                     Projecttitle=P.ProjectTitle,
                                     EnhancedSanctionValue=P.SanctionValue,
                                     
                                  }).ToList();


                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
            

        }




        public static List<AutoCompleteModel> GetAutoCompleteProjectList(string term, int? type = null, int? classification = null)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    //list = (from P in context.tblProject
                    //        join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                    //        where (string.IsNullOrEmpty(term) || P.ProjectNumber.Contains(term) || U.FirstName.Contains(term))
                    //        && (type == null || type == P.ProjectType)
                    //        && (classification == null || classification == P.ProjectClassification)
                    //        && P.Status == "Active"
                    //        orderby P.ProjectNumber
                    //        select new
                    //        {
                    //            P.ProjectId,
                    //            P.ProjectNumber,
                    //            U.FirstName
                    //        })
                    //        .AsEnumerable()
                    //        .Select((x, index) => new AutoCompleteModel()
                    //        {
                    //            value = x.ProjectId.ToString(),
                    //            label = x.ProjectNumber + "-" + x.FirstName
                    //        }).ToList();

                    list = context.Database.SqlQuery<AutoCompleteModel>(
                        "GetProjectAutoCompleteList @term, @type, @classification",
                        new SqlParameter("@term", term ?? (object)DBNull.Value),
                        new SqlParameter("@type", type ?? (object)DBNull.Value),
                        new SqlParameter("@classification", classification ?? (object)DBNull.Value)
                        ).ToList();
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteProjectByBankIDList(string term, int? type = null, int? BankHeadId = 0, int? classification = null)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join U in context.vwFacultyStaffDetails on C.PIName equals U.UserId
                                 where (C.Status == "Active"
                                 && C.BankID == BankHeadId
                                 && (C.ProjectFundingCategory == 2 || C.ProjectFundingCategory == 3 || C.ProjectFundingCategory == 4))
                                 orderby C.ProjectId
                                 select new { U.FirstName, C }).ToList();
                    if (query.Count > 0)
                    {
                        list = context.Database.SqlQuery<AutoCompleteModel>("EXEC Sp_GetProjectAutoCompleteList_BankHead @term, @type, @BankHeadId, @classification",
                        new SqlParameter("@term", term),
                        new SqlParameter("@type", type ?? (object)DBNull.Value),
                        new SqlParameter("@BankHeadId", BankHeadId ?? (object)DBNull.Value),
                        new SqlParameter("@classification", classification ?? (object)DBNull.Value)
                        ).ToList();

                        return list;
                    }
                    else
                    {
                        var genlist = context.Database.SqlQuery<AutoCompleteModel>("EXEC Sp_GetProjectAutoCompleteList_BankHeadTSA @term, @type, @classification",
                        new SqlParameter("@term", term),
                        new SqlParameter("@type", type ?? (object)DBNull.Value),
                        new SqlParameter("@classification", classification ?? (object)DBNull.Value)
                        ).ToList();

                        return genlist;
                    }

                    /*if (query.Count > 0)
                    {
                        list = (from P in context.tblProject
                                join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                where (string.IsNullOrEmpty(term) || P.ProjectNumber.Contains(term) || U.FirstName.Contains(term))
                                && (type == null || type == P.ProjectType)
                                && (BankHeadId == null || BankHeadId == P.BankID)
                                && (classification == null || classification == P.ProjectClassification)
                                && P.Status == "Active"
                                orderby P.ProjectNumber
                                select new
                                {
                                    P.ProjectId,
                                    P.ProjectNumber,
                                    U.FirstName
                                })
                                                    .AsEnumerable()
                                                    .Select((x, index) => new AutoCompleteModel()
                                                    {
                                                        value = x.ProjectId.ToString(),
                                                        label = x.ProjectNumber + "-" + x.FirstName
                                                    }).ToList();
                        return list;
                    }
                    else
                    {
                        var genlist = (from P in context.tblProject
                                       join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                       where (string.IsNullOrEmpty(term) || P.ProjectNumber.Contains(term) || U.FirstName.Contains(term))
                                       && (type == null || type == P.ProjectType)
                                       && (P.ProjectFundingCategory == 1) && (P.BankID == null)
                                       && (classification == null || classification == P.ProjectClassification)
                                       && P.Status == "Active"
                                       orderby P.ProjectNumber
                                       select new
                                       {
                                           P.ProjectId,
                                           P.ProjectNumber,
                                           U.FirstName
                                       })
                             .AsEnumerable()
                             .Select((x, index) => new AutoCompleteModel()
                             {
                                 value = x.ProjectId.ToString(),
                                 label = x.ProjectNumber + "-" + x.FirstName
                             }).ToList();

                        return genlist;
                    }*/
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetACProjectStaffDetails(string term)
        {
            try
            {
                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProjectStaffDetail
                                 where string.IsNullOrEmpty(term) || C.EmployeeId.Contains(term) || C.EmployeeName.Contains(term)
                                 orderby C.EmployeeName
                                 select new { C.CastEmployeeId, C.EmployeeName, C.EmployeeId }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].CastEmployeeId.ToString(),
                                label = query[i].EmployeeId + "-" + query[i].EmployeeName
                            });
                        }
                    }
                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteInvoceNumber(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblProjectInvoice
                            where (String.IsNullOrEmpty(term) || C.InvoiceNumber.Contains(term)) && C.Status != "Completed" && C.Status != "InActive"
                            orderby C.InvoiceId
                            select new AutoCompleteModel()
                            {
                                value = C.InvoiceId.ToString(),
                                label = C.InvoiceNumber
                            }).ToList();


                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static CommitAllocationHeadDetails getAllocationValue(int ProjectId, int AllocationId, DateTime? Date = null)
        {
            CommitAllocationHeadDetails model = new CommitAllocationHeadDetails();
            try
            {
                decimal PrjAllocValue = 0;
                decimal PrjEnhanceVal = 0;
                decimal AllocForCurrYear = 0;
                //decimal closeComAmt = 0;
                using (var context = new IOASDBEntities())
                {
                    //if (tx != null)
                    //    context.Database.UseTransaction(tx);
                    var queryAlloc = (from C in context.tblProjectAllocation
                                      where C.ProjectId == ProjectId && C.AllocationHead == AllocationId
                                      && C.AllocationValue > 0
                                      select C).FirstOrDefault();
                    var queryEnhAlloc = (from m in context.tblProjectEnhancement
                                         join C in context.tblProjectEnhancementAllocation on m.ProjectEnhancementId equals C.ProjectEnhancementId
                                         where m.ProjectId == ProjectId && C.AllocationHead == AllocationId && m.Status == "Active"
                                           && C.EnhancedValue > 0
                                         select C).ToList();
                    var qryPreviousCommit = (from C in context.tblCommitment
                                             from D in context.tblCommitmentDetails
                                             where C.CommitmentId == D.CommitmentId && C.Status == "Active" && D.AllocationHeadId == AllocationId && C.ProjectId == ProjectId
                                            && (C.CRTD_TS < Date || Date == null)
                                             select D.BalanceAmount).Sum();
                    //var qryPreviousCommitClose = (from C in context.tblCommitment
                    //                              from D in context.tblCommitmentDetails
                    //                              join log in context.tblCommitmentLog on D.ComitmentDetailId equals log.CommitmentDetailID
                    //                              where C.CommitmentId == D.CommitmentId && C.Status == "Active" && D.AllocationHeadId == AllocationId && C.ProjectId == ProjectId
                    //                              && (C.CRTD_TS < Date || Date == null)
                    //                              select new { log.NewAmount, log.OldAmount }).ToList();
                    var queryOB = (from C in context.tblProjectOBDetail
                                   where C.ProjectId == ProjectId && C.HeadId == AllocationId
                                   select C).Sum(m => m.OpeningExp) ?? 0;

                    ////Project fund transfer value
                    //var Debit = (from C in context.tblProjectTransfer
                    //             from D in context.tblProjectTransferDetails
                    //             where C.ProjectTransferId == D.ProjectTransferId
                    //             where C.DebitProjectId == ProjectId && D.BudgetHeadId == AllocationId && D.TransactionType == "Debit" && C.Status == "Completed"
                    //              && (C.CRTD_TS < Date || Date == null)
                    //             select D.Amount).Sum() ?? 0;
                    //var Credit = (from C in context.tblProjectTransfer
                    //              from D in context.tblProjectTransferDetails
                    //              where C.ProjectTransferId == D.ProjectTransferId
                    //              where C.CreditProjectId == ProjectId && D.BudgetHeadId == AllocationId && D.TransactionType == "Credit" && C.Status == "Completed"
                    //              && (C.CRTD_TS < Date || Date == null)
                    //              select D.Amount).Sum() ?? 0;

                    var qryBalance = (from exp in context.vw_ProjectExpenditureReport.AsNoTracking()
                                      where exp.ProjectId == ProjectId && exp.AllocationHeadId == AllocationId
                                      && (exp.CommitmentDate < Date || Date == null)
                                      select exp).ToList();
                    decimal SpentAmount = qryBalance.Select(m => m.AmountSpent).Sum() ?? 0;

                    //if (qryPreviousCommitClose.Count > 0)
                    //{
                    //    foreach (var item in qryPreviousCommitClose)
                    //        closeComAmt = closeComAmt + (Convert.ToInt32(item.OldAmount) - Convert.ToInt32(item.NewAmount));
                    //}
                    if (queryAlloc != null)
                        PrjAllocValue = queryAlloc.AllocationValue ?? 0;
                    if (queryEnhAlloc != null)
                        PrjEnhanceVal = queryEnhAlloc.Sum(m => m.EnhancedValue) ?? 0;
                    var Amount = PrjAllocValue + PrjEnhanceVal;

                    int Year = 1;
                    var YearAlloc = (from C in context.tblProject
                                     from D in context.tblProjectAllocation
                                     where C.ProjectId == D.ProjectId
                                     where C.ProjectId == ProjectId && D.AllocationHead == AllocationId && C.IsYearWiseAllocation == true
                                     select C).FirstOrDefault();
                    if (YearAlloc != null)
                    {
                        model.IsYearWise = YearAlloc.IsYearWiseAllocation ?? false;
                        //var prjStartDate = YearAlloc.TentativeStartDate;
                        //DateTime todayDate = DateTime.Now;
                        //TimeSpan Days = Convert.ToDateTime(todayDate) - Convert.ToDateTime(prjStartDate);
                        //int TotDays = Days.Days;
                        //int curYear = DateTime.Now.Year;
                        //int days;
                        //if (DateTime.IsLeapYear(curYear))
                        //{
                        //    days = 366;
                        //}
                        //else
                        //{
                        //    days = 365;
                        //}
                        //for (int i = days; i <= TotDays; i += days)
                        //{
                        //    Year += 1;
                        //    curYear = DateTime.Now.AddDays(days).Year;
                        //    if (DateTime.IsLeapYear(curYear))
                        //    {
                        //        days = 366;
                        //    }
                        //    else
                        //    {
                        //        days = 365;
                        //    }
                        //}
                    }
                    var AllocYear = (from C in context.tblProject
                                     from D in context.tblProjectAllocation
                                     where C.ProjectId == D.ProjectId
                                     where C.ProjectId == ProjectId && D.AllocationHead == AllocationId && C.IsYearWiseAllocation == true
                                     //&& D.Year <= Year
                                     select D).ToList();
                    if (AllocYear.Count > 0)
                    {
                        AllocForCurrYear = (AllocYear.Sum(m => m.AllocationValue) ?? 0) + PrjEnhanceVal;
                        model.TotalAllocation = AllocForCurrYear;
                    }
                    else
                        model.TotalAllocation = Amount;
                    model.AllocationForCurrentYear = AllocForCurrYear;
                    model.TotalCommitmentTilDate = (qryPreviousCommit ?? 0) + SpentAmount + queryOB;

                    model.OpeningBalance = queryOB;

                    model.IsAllocation = true;
                    //if (model.IsYearWise)
                    //{
                    // model.TotalCommitForCurrentYear = model.AllocationForCurrentYear + PrjEnhanceVal - model.TotalCommitmentTilDate;// - model.OpeningBalance;
                    //}
                    //else
                    //{
                    // if (AllocationId == 28 || AllocationId == 29)
                    //   model.IsAllocation = false;
                    model.TotalCommitForCurrentYear = model.TotalAllocation - model.TotalCommitmentTilDate;// - model.OpeningBalance;
                                                                                                           //}
                    var queryAllocExists = context.tblProjectAllocation.Any(C => C.ProjectId == ProjectId && C.AllocationValue > 0);
                    var queryEnhAllocExists = (from m in context.tblProjectEnhancement
                                               join C in context.tblProjectEnhancementAllocation on m.ProjectEnhancementId equals C.ProjectEnhancementId
                                               where m.ProjectId == ProjectId && C.EnhancedValue > 0 && m.Status == "Active"
                                               select C).Any();
                    if ((PrjAllocValue == 0 && queryEnhAlloc.Count == 0 && !queryAllocExists && !queryEnhAllocExists) || !model.IsAllocation)
                    {
                        ProjectService _ps = new ProjectService();
                        var summary = _ps.getProjectSummary(ProjectId);

                        var SanctionValue = (from C in context.tblProject
                                             where C.ProjectId == ProjectId && C.Status == "Active"
                                             select C.SanctionValue).FirstOrDefault();
                        //var availCommit = (from C in context.tblCommitment
                        //                   from D in context.tblCommitmentDetails
                        //                   where C.CommitmentId == D.CommitmentId && C.Status == "Active" && C.ProjectId == ProjectId
                        //                    && (C.CRTD_TS < Date || Date == null)
                        //                   select D.BalanceAmount).Sum() ?? 0;
                        //var queryOExp = (from C in context.tblProjectOBDetail
                        //                 where C.ProjectId == ProjectId
                        //                 select C).Sum(m => m.OpeningExp) ?? 0;
                        //SpentAmount = (from exp in context.vw_ProjectExpenditureReport.AsNoTracking()
                        //               where exp.ProjectId == ProjectId
                        //                 && (exp.CommitmentDate < Date || Date == null)
                        //               select exp).Sum(m => m.AmountSpent) ?? 0;
                        model.TotalCommitmentTilDate = summary.TotalExpenditure;
                        model.SanctionedValue = SanctionValue ?? 0;
                        model.TotalCommitForCurrentYear = summary.NetBalance;
                        model.IsAllocation = false;
                    }
                    //if (AllocationId == 28 || AllocationId == 29)
                    //{
                    //    var SanctionValue = (from C in context.tblProject
                    //                         where C.ProjectId == ProjectId && C.Status == "Active"
                    //                         select C.SanctionValue).FirstOrDefault();

                    //    model.TotalCommitmentTilDate = 0;
                    //    model.SanctionedValue = SanctionValue ?? 0;
                    //    model.TotalCommitForCurrentYear = model.SanctionedValue - model.TotalCommitmentTilDate;
                    //    model.IsAllocation = false;
                    //}
                    var BudQry = context.tblBudgetHead.Where(m => m.BudgetHeadId == AllocationId).FirstOrDefault();
                    if (BudQry.IsNonValidate_f == true)
                    {
                        var SanctionValue = (from C in context.tblProject
                                             where C.ProjectId == ProjectId && C.Status == "Active"
                                             select C.SanctionValue).FirstOrDefault();

                        model.TotalCommitmentTilDate = 0;
                        model.SanctionedValue = SanctionValue ?? 0;
                        model.TotalCommitForCurrentYear = model.SanctionedValue - model.TotalCommitmentTilDate;
                        model.IsAllocation = false;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }

        }

        public static List<MasterlistviewModel> getAllocationHeadBasedOnProject(int projectID)
        {
            try
            {
                int[] UnspentHead = { 28 }; int[] Refund = { 29 };

                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    int Year = 1;
                    bool IsYearWise = false;
                    var YearAlloc = (from C in context.tblProject
                                     from D in context.tblProjectAllocation
                                     where C.ProjectId == D.ProjectId
                                     where C.ProjectId == projectID && C.IsYearWiseAllocation == true
                                     select C).FirstOrDefault();
                    if (YearAlloc != null)
                    {
                        IsYearWise = YearAlloc.IsYearWiseAllocation ?? false;
                        var prjStartDate = YearAlloc.TentativeStartDate;
                        DateTime todayDate = DateTime.Now;
                        TimeSpan Days = Convert.ToDateTime(todayDate) - Convert.ToDateTime(prjStartDate);
                        int TotDays = Days.Days;
                        int curYear = DateTime.Now.Year;
                        int days;
                        if (DateTime.IsLeapYear(curYear))
                        {
                            days = 366;
                        }
                        else
                        {
                            days = 365;
                        }
                        for (int i = days; i <= TotDays; i += days)
                        {
                            Year += 1;
                            curYear = DateTime.Now.AddDays(days).Year;
                            if (DateTime.IsLeapYear(curYear))
                            {
                                days = 366;
                            }
                            else
                            {
                                days = 365;
                            }
                        }

                        var qryBudgetHead = (from C in context.tblBudgetHead
                                             join D in context.tblProjectAllocation on C.BudgetHeadId equals D.AllocationHead
                                             join E in context.tblProject on D.ProjectId equals E.ProjectId
                                             where E.ProjectId == projectID && D.Year <= Year
                                             group C by C.BudgetHeadId into g
                                             select new { BudgetHeadId = g.Key, HeadName = g.Select(m => m.HeadName).FirstOrDefault() }).ToList();
                        if (qryBudgetHead.Count > 0)
                        {

                            for (int i = 0; i < qryBudgetHead.Count; i++)
                            {
                                List.Add(new MasterlistviewModel()
                                {
                                    id = qryBudgetHead[i].BudgetHeadId,
                                    name = qryBudgetHead[i].HeadName
                                });
                            }
                        }
                        var Unspentexists = (from bh in qryBudgetHead
                                             where
                                              bh.BudgetHeadId != 28
                                             select bh).ToList();
                        if ((Unspentexists.Count > 0))
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = 28,
                                name = "Unspent Balance"
                            });
                        }
                        var Refundexists = (from bh in qryBudgetHead
                                            where
                                           bh.BudgetHeadId != 29
                                            select bh).ToList();
                        if ((Refundexists.Count > 0))
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = 29,
                                name = "Interest Refund"
                            });
                        }

                        //

                        var InternalTransferexists = (from bh in qryBudgetHead
                                                      where
                                                       bh.BudgetHeadId != 32
                                                      select bh).ToList();
                        if ((InternalTransferexists.Count > 0))
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = 32,
                                name = "Internal Transfer"
                            });
                        }
                        var TransfertoOtherInstituteexists = (from bh in qryBudgetHead
                                                              where
                                                              bh.BudgetHeadId != 33
                                                              select bh).ToList();
                        if ((TransfertoOtherInstituteexists.Count > 0))
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = 33,
                                name = "Transfer to Other Institute"
                            });
                        }
                    }
                    else
                    {
                        //if(IsYearWise)
                        var qryBudgetHead = (from C in context.tblBudgetHead
                                             join D in context.tblProjectAllocation on C.BudgetHeadId equals D.AllocationHead
                                             join E in context.tblProject on D.ProjectId equals E.ProjectId
                                             where E.ProjectId == projectID
                                             select new { C, D, E }).ToList();
                        if (qryBudgetHead.Count > 0)
                        {
                            for (int i = 0; i < qryBudgetHead.Count; i++)
                            {
                                List.Add(new MasterlistviewModel()
                                {
                                    id = qryBudgetHead[i].C.BudgetHeadId,
                                    name = qryBudgetHead[i].C.HeadName
                                });
                            }
                            var Unspentexists = (from bh in qryBudgetHead
                                                 where
                                                     bh.C.BudgetHeadId != 28
                                                 select bh).ToList();
                            if ((Unspentexists.Count > 0))
                            {
                                List.Add(new MasterlistviewModel()
                                {
                                    id = 28,
                                    name = "Unspent Balance"
                                });
                            }
                            var Refundexists = (from bh in qryBudgetHead
                                                where
                                                     bh.C.BudgetHeadId != 29
                                                select bh).ToList();
                            if ((Refundexists.Count > 0))
                            {
                                List.Add(new MasterlistviewModel()
                                {
                                    id = 29,
                                    name = "Interest Refund"
                                });
                            }
                            var InternalTransferexists = (from bh in qryBudgetHead
                                                          where
                                                            bh.C.BudgetHeadId != 32
                                                          select bh).ToList();
                            if ((InternalTransferexists.Count > 0))
                            {
                                List.Add(new MasterlistviewModel()
                                {
                                    id = 32,
                                    name = "Internal Transfer"
                                });
                            }
                            var TransfertoOtherInstituteexists = (from bh in qryBudgetHead
                                                                  where
                                                                bh.C.BudgetHeadId != 33
                                                                  select bh).ToList();
                            if ((TransfertoOtherInstituteexists.Count > 0))
                            {
                                List.Add(new MasterlistviewModel()
                                {
                                    id = 33,
                                    name = "Transfer to Other Institute"
                                });
                            }
                        }
                        else
                        {
                            var qryAllo = (from C in context.tblBudgetHead select C).ToList();
                            if (qryAllo.Count > 0)
                            {
                                for (int i = 0; i < qryAllo.Count; i++)
                                {
                                    List.Add(new MasterlistviewModel()
                                    {
                                        id = qryAllo[i].BudgetHeadId,
                                        name = qryAllo[i].HeadName
                                    });
                                }
                            }
                        }

                    }
                    var heads = List.Select(s => s.id).ToList();
                    var queryEnh = (from C in context.tblBudgetHead
                                    join D in context.tblProjectEnhancementAllocation on C.BudgetHeadId equals D.AllocationHead
                                    join m in context.tblProjectEnhancement on D.ProjectEnhancementId equals m.ProjectEnhancementId
                                    where m.ProjectId == projectID && m.Status == "Active"
                                    && !heads.Contains(D.AllocationHead)
                                    select C).ToList();
                    if (queryEnh.Count > 0)
                    {
                        for (int i = 0; i < queryEnh.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = queryEnh[i].BudgetHeadId,
                                name = queryEnh[i].HeadName
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }
        public static string getprojectTypeName(int projectType)
        {
            try
            {

                string ProjectTypeName = "";

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Projecttype"
                                 where C.CodeValAbbr == projectType
                                 select C).FirstOrDefault();


                    if (query != null)
                    {
                        ProjectTypeName = query.CodeValDetail;
                    }

                }

                return ProjectTypeName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }

        }
        public static List<MasterlistviewModel> GetEmployeeName()
        {
            List<MasterlistviewModel> model = new List<MasterlistviewModel>();
            try
            {

                using (var context = new IOASDBEntities())
                {

                    var query = (from H in context.vwFacultyStaffDetails
                                 select new
                                 {
                                     H.FirstName,
                                     H.EmployeeId
                                 }).Distinct().ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            model.Add(new MasterlistviewModel()
                            {
                                code = query[i].EmployeeId,
                                name = query[i].EmployeeId + "-" + query[i].FirstName,
                            });
                        }
                    }

                }

                return model;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }

        }
        public static int getProjecTypeId(string projectType)
        {
            try
            {
                int PrjTypeid = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "Projecttype" && C.CodeValDetail == projectType
                                 select C).FirstOrDefault();

                    if (query != null)
                    {
                        PrjTypeid = query.CodeValAbbr;
                    }

                }

                return PrjTypeid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static List<MasterlistviewModel> GetCommitmentAction()
        {
            List<MasterlistviewModel> Commit = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var QryAction = (from C in context.tblCodeControl where C.CodeName == "CommitmentClosedReason" select C).ToList();
                    if (QryAction.Count > 0)
                    {
                        for (int k = 0; k < QryAction.Count; k++)
                        {
                            Commit.Add(new MasterlistviewModel()
                            {
                                id = QryAction[k].CodeValAbbr,
                                name = QryAction[k].CodeValDetail
                            });
                        }
                    }
                }
                return Commit;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Commit;
            }
        }
        public static string GetCommitClosedReasonById(int Reason)
        {
            try
            {
                string strReason = "";
                using (var context = new IOASDBEntities())
                {
                    var QryAction = (from C in context.tblCodeControl where C.CodeName == "CommitmentClosedReason" && C.CodeValAbbr == Reason select C.CodeValDetail).FirstOrDefault();
                    if (QryAction != null)
                    {
                        strReason = QryAction;
                    }
                }
                return strReason;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteTypeOfServiceList(string term, int? type = null)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblTaxMaster
                            where (String.IsNullOrEmpty(term) || C.ServiceType.Contains(term) || C.TaxCode.Contains(term))
                            && (type == null || (type == 1 && C.Service_f == true)
                            || (type == 2 && C.Service_f != true)
                            || type == 3)
                            orderby C.TaxCode
                            select new AutoCompleteModel()
                            {
                                value = C.TaxMasterId.ToString(),
                                label = C.TaxCode + "-" + C.ServiceType
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static ProjectDetailModel GetProjectsDetails(int ProjectId)
        {
            try
            {
                ProjectDetailModel Detail = new ProjectDetailModel();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from pro in context.tblProject
                                 where pro.ProjectId == ProjectId
                                 select new
                                 {
                                     pro.PIName,
                                     pro.PCF,
                                     pro.RMF,
                                     pro.ProjectClassification,
                                     pro.ProjectId,
                                     pro.ProjectTitle,
                                     pro.ProjectType,
                                     pro.ProjectSubType,
                                     pro.ProjectCategory,
                                     pro.SponProjectCategory,
                                     pro.ConsultancyFundingCategory,
                                     pro.SchemeName,
                                     pro.SanctionValue,
                                     pro.ActualStartDate,
                                     pro.ActuaClosingDate,
                                     pro.AcctType,
                                 }).FirstOrDefault();
                    if (Query != null)
                    {
                        int prjType = Query.ProjectType ?? 0;
                        int prjSubType = Query.ProjectSubType ?? 0;
                        int prjCatagory = Query.ProjectCategory ?? 0;
                        string sponprjCatagory = Query.SponProjectCategory ?? null;
                        int sponSchemeName = Query.SchemeName ?? 0;
                        int consfundCatagory = Query.ConsultancyFundingCategory ?? 0;
                        int sponprjctCatagory = Convert.ToInt32(sponprjCatagory);
                        Detail.ProjectId = Query.ProjectId;
                        Detail.ProjectClassification = Query.ProjectClassification;
                        Detail.ProjectTittle = Query.ProjectTitle;
                        Detail.SancationValue = Convert.ToDecimal(Query.SanctionValue);
                        Detail.SancationDate = Convert.ToDateTime(Query.ActualStartDate);
                        Detail.CloseDate = Common.GetProjectDueDate(ProjectId) ?? Convert.ToDateTime(Query.ActuaClosingDate);
                        Detail.AccType = Query.AcctType;
                        string pType = Common.getprojectTypeName(Query.ProjectType ?? 0);
                        if (Query.ProjectType == 1 && Query.ProjectSubType != 1)
                            pType += Query.SponProjectCategory == "1" ? "-PFMS" : Query.SponProjectCategory == "2" ? "-NON-PFMS" : "";
                        else if (Query.ProjectType == 1 && Query.ProjectSubType == 1)
                            pType += " - Internal";
                        Detail.ProjectType = pType;
                        Detail.CoPIs = GetCoPIs(Query.ProjectId);
                        Detail.PIName = GetPIName(Convert.ToInt32(Query.PIName));
                        Detail.PIPCF = Query.PCF;
                        Detail.PIRMF = Query.RMF;


                        //var Type = context.tblCodeControl.FirstOrDefault(m => m.CodeValAbbr == prjType && m.CodeName == "Projecttype");
                        //if (Type !=C:\Ajith\IOAS Development\IOAS\IOAS\Views\Account\Createuser.cshtml null)
                        //{
                        //    Detail.ProjectType = Type.CodeValDetail;
                        //}
                        //else
                        //{
                        //    Detail.ProjectType = "NA";
                        //}
                        //var prjSub = context.tblCodeControl.FirstOrDefault(m => m.CodeValAbbr == prjSubType && m.CodeName == "ProjectSubtype");
                        //if (prjSub != null)
                        //{
                        //    Detail.ProjectSubType = prjSub.CodeValDetail;
                        //}
                        //else
                        //{
                        //    Detail.ProjectSubType = "NA";
                        //}
                        //var prjCat = context.tblCodeControl.FirstOrDefault(m => m.CodeValAbbr == prjCatagory && m.CodeName == "CategoryofProject");
                        //if (prjCat != null)
                        //{
                        //    Detail.ProjectCategory = prjCat.CodeValDetail;
                        //}
                        //else
                        //{
                        //    Detail.ProjectCategory = "NA";
                        //}
                        //var sponprjCat = context.tblCodeControl.FirstOrDefault(m => m.CodeValAbbr == sponprjctCatagory && m.CodeName == "SponProjectCategory");
                        //if (sponprjCat != null)
                        //{
                        //    Detail.SponProjectCategory = sponprjCat.CodeValDetail;
                        //}
                        //else
                        //{
                        //    Detail.SponProjectCategory = "NA";
                        //}
                        //var sponschemeName = context.tblSchemes.FirstOrDefault(m => m.SchemeId == sponSchemeName && m.ProjectType == prjType);
                        //if (sponschemeName != null)
                        //{
                        //    Detail.SponSchemeName = sponschemeName.SchemeName;
                        //}
                        //else
                        //{
                        //    Detail.SponSchemeName = "NA";
                        //}
                        //var consFundingCat = context.tblSchemes.FirstOrDefault(m => m.SchemeId == consfundCatagory && m.ProjectType == prjType);
                        //if (consFundingCat != null)
                        //{
                        //    Detail.ConsFundingCategory = consFundingCat.SchemeName;
                        //}
                        //else
                        //{
                        //    Detail.ConsFundingCategory = "NA";
                        //}
                    }
                    return Detail;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                ProjectDetailModel Detail = new ProjectDetailModel();
                return Detail;
            }
        }
        public static DateTime GetProjectCloseDate(int projectId)
        {
            DateTime closeDate = new DateTime();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblProject.FirstOrDefault(m => m.ProjectId == projectId);
                    if (query != null)
                        closeDate = GetProjectDueDate(projectId) ?? Convert.ToDateTime(query.ActuaClosingDate);
                }
                return closeDate;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return closeDate;
            }
        }
        public static PayableListModel GetBankDetailsForTarvelAgency(int AgencyId)
        {
            PayableListModel model = new PayableListModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from b in context.tblClearanceAgentMaster
                               where b.ClearanceAgentId == AgencyId
                               select new
                               {
                                   b.BankName,
                                   b.IFSC,
                                   b.AccountNumber,
                                   b.Branch,
                                   b.PAN,
                                   b.GSTIN
                               }).FirstOrDefault();
                    if (Qry != null)
                    {
                        model.Bank = Qry.BankName;
                        model.AccNo = Qry.AccountNumber;
                        model.IFSC = Qry.IFSC;
                        model.GSTIN = Qry.GSTIN;
                        model.PAN = Qry.PAN;
                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }
        }
        public static PayableListModel GetBankDetailsForVendor(int VendorId)
        {
            PayableListModel model = new PayableListModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from b in context.tblVendorMaster
                               where b.VendorId == VendorId
                               select new
                               {
                                   b.BankName,
                                   b.IFSC,
                                   b.AccountNumber,
                                   b.Branch,
                                   b.PAN,
                                   b.GSTIN
                               }).FirstOrDefault();
                    if (Qry != null)
                    {
                        model.Bank = Qry.BankName;
                        model.AccNo = Qry.AccountNumber;
                        model.IFSC = Qry.IFSC;
                        model.GSTIN = Qry.GSTIN;
                        model.PAN = Qry.PAN;
                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }
        }
        public static bool ValidateTempAdvBillOnEdit(int tmpadvanceId, string type)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == tmpadvanceId && m.TransactionTypeCode == type && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static List<TempAdvlistviewModel> getProjectListofPI(int PIId)
        {
            try
            {

                List<TempAdvlistviewModel> Title = new List<TempAdvlistviewModel>();
                Title.Add(new TempAdvlistviewModel()
                {
                    id = 0,
                    name = "Select Any",
                });
                using (var context = new IOASDBEntities())
                {
                    if (PIId > 0)
                    {
                        var query = (from P in context.tblProject
                                     join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                     where (P.PIName == PIId && P.Status == "Active")
                                     orderby P.ProjectId
                                     select new { U.FirstName, P, U.DepartmentName }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                Title.Add(new TempAdvlistviewModel()
                                {
                                    id = query[i].P.ProjectId,
                                    name = query[i].P.ProjectNumber + "-" + query[i].P.ProjectTitle + "- " + query[i].FirstName,
                                    code = query[i].FirstName,
                                    pidepartment = query[i].DepartmentName
                                });
                            }
                        }
                        if (query.Count() == 0)
                        {
                            var piquery = (from U in context.vwFacultyStaffDetails
                                           where (U.UserId == PIId)
                                           select U).FirstOrDefault();
                            Title.Add(new TempAdvlistviewModel()
                            {
                                code = piquery.FirstName,
                                pidepartment = piquery.DepartmentName
                            });
                        }

                    }
                }

                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }


        public static List<TempAdvlistviewModel> getProjectListofPIandBank(int PIId, int BankHeadId)
        {
            try
            {

                List<TempAdvlistviewModel> Title = new List<TempAdvlistviewModel>();
                Title.Add(new TempAdvlistviewModel()
                {
                    id = 0,
                    name = "Select Any",
                });
                using (var context = new IOASDBEntities())
                {
                    if (PIId > 0)
                    {
                        var ifbankexist = (from P in context.tblProject
                                           where (P.Status == "Active" && P.BankID == BankHeadId)
                                           orderby P.ProjectId
                                           select new {  P  }).ToList();

                        if(ifbankexist.Count >0)
                        {
                            var query = (from P in context.tblProject
                                         join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                         where (P.PIName == PIId && P.Status == "Active" && P.BankID == BankHeadId)
                                         orderby P.ProjectId
                                         select new { U.FirstName, P, U.DepartmentName }).ToList();
                            if (query.Count > 0)
                            {
                                for (int i = 0; i < query.Count; i++)
                                {
                                    Title.Add(new TempAdvlistviewModel()
                                    {
                                        id = query[i].P.ProjectId,
                                        name = query[i].P.ProjectNumber + "-" + query[i].P.ProjectTitle + "- " + query[i].FirstName,
                                        code = query[i].FirstName,
                                        pidepartment = query[i].DepartmentName
                                    });
                                }
                            }
                            if (query.Count() == 0)
                            {
                                var piquery = (from U in context.vwFacultyStaffDetails
                                               where (U.UserId == PIId)
                                               select U).FirstOrDefault();
                                Title.Add(new TempAdvlistviewModel()
                                {
                                    code = piquery.FirstName,
                                    pidepartment = piquery.DepartmentName
                                });
                            }
                        }
                        else
                        {
                            var query = (from P in context.tblProject
                                         join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                         where (P.PIName == PIId && P.Status == "Active")
                                         orderby P.ProjectId
                                         select new { U.FirstName, P, U.DepartmentName }).ToList();
                            if (query.Count > 0)
                            {
                                for (int i = 0; i < query.Count; i++)
                                {
                                    Title.Add(new TempAdvlistviewModel()
                                    {
                                        id = query[i].P.ProjectId,
                                        name = query[i].P.ProjectNumber + "-" + query[i].P.ProjectTitle + "- " + query[i].FirstName,
                                        code = query[i].FirstName,
                                        pidepartment = query[i].DepartmentName
                                    });
                                }
                            }
                            if (query.Count() == 0)
                            {
                                var piquery = (from U in context.vwFacultyStaffDetails
                                               where (U.UserId == PIId)
                                               select U).FirstOrDefault();
                                Title.Add(new TempAdvlistviewModel()
                                {
                                    code = piquery.FirstName,
                                    pidepartment = piquery.DepartmentName
                                });
                            }

                        }
                    }
                }

                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }



        public static string GetStateName(int stateId)
        {
            try
            {
                string stateName = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblStateMaster.FirstOrDefault(m => m.StateId == stateId);
                    if (query != null)
                        stateName = query.StateName;
                    return stateName;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static List<TempAdvlistviewModel> getprojectadvancedetails(int ProjectId)
        {
            try
            {

                List<TempAdvlistviewModel> details = new List<TempAdvlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    if (ProjectId > 0)
                    {
                        var query = (from adv in context.tblTemporaryAdvance
                                     where (adv.ProjectId == ProjectId && adv.IsPendingSettlement_f == true)
                                     select adv).ToList();
                        var Projectquery = (from P in context.tblProject
                                            where (P.ProjectId == ProjectId && P.Status == "Active")
                                            select P).SingleOrDefault();
                        var count = query.Count();
                        for (int i = 0; i < query.Count(); i++)
                        {
                            details.Add(new TempAdvlistviewModel()
                            {
                                id = query[i].TemporaryAdvanceId,
                                name = query[i].TemporaryAdvanceNumber,
                                count = count,
                                amount = query[i].TemporaryAdvanceAmountReceived,
                            });
                        }
                    }
                }

                return details;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<MasterlistviewModel> GetMainProjectNumberList(int projectType)
        {
            try
            {
                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join U in context.vwFacultyStaffDetails on C.PIName equals U.UserId
                                 where C.Status == "Active" && C.IsSubProject != true && C.ProjectType == projectType
                                 orderby C.ProjectId
                                 select new { U.FirstName, C }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.ProjectId,
                                name = query[i].C.ProjectNumber + "-" + query[i].C.ProjectTitle + "- " + query[i].FirstName,
                            });
                        }
                    }

                }



                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }

        public static bool ValidateSummerInternshipOnEdit(int internId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSummerInternshipStudentDetails.FirstOrDefault(m => m.SummerInternshipStudentId == internId && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string getSummrinternId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "SMI/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblSummerInternshipStudentDetails
                                 where intern.SummerInternshipNumber.Contains(checkNum)
                                 orderby intern.SummerInternshipStudentId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.SummerInternshipNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static Tuple<string, bool> GetTransactionType(int groupId, int headId, string typeCode, string tSubCode)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var transTypeQuery = context.tblTransactionDefinition.FirstOrDefault(c => c.TransactionTypeCode == typeCode
                    && c.SubCode == tSubCode && c.AccountGroupId == groupId && (c.AccountHeadId == null || c.AccountHeadId == headId || c.AccountHeadId == 0));
                    if (transTypeQuery != null)
                        return Tuple.Create(transTypeQuery.TransactionType, transTypeQuery.IsJV_f ?? false);
                }

                return Tuple.Create("", false);
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create("", false);
            }
        }
        public static List<MasterlistviewModel> GetCompanyType()
        {
            try
            {
                List<MasterlistviewModel> com = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "CompanyType"
                                 orderby C.CodeValDetail
                                 select new { C.CodeValAbbr, C.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            com.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return com;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> com = new List<MasterlistviewModel>();
                return com;
            }
        }
        public static List<MasterlistviewModel> GetGovermentAgy()
        {
            try
            {
                List<MasterlistviewModel> com = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "govertmentagy"
                                 orderby C.CodeValDetail
                                 select new { C.CodeValAbbr, C.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            com.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return com;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> com = new List<MasterlistviewModel>();
                return com;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteAdhocStaffList(string term)
        {
            try
            {

                List<AutoCompleteModel> staf = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    staf = (from C in context.vwCombineStaffDetails
                            where (string.IsNullOrEmpty(term) || C.Name.Contains(term) || C.EmployeeId.Contains(term))
                            && C.Category == "AdhocStaff"
                            orderby C.Name
                            select new AutoCompleteModel()
                            {
                                value = C.ID.ToString(),
                                label = C.Name + " - " + C.ID,
                            }).ToList();

                }

                return staf;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static bool ValidateClearancePaymentOnEdit(int billId, string type)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblClearancePaymentEntry.FirstOrDefault(m => m.ClearancePaymentId == billId && m.TransactionTypeCode == type && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<MasterlistviewModel> getbankcreditaccounthead()
        {
            try
            {

                List<MasterlistviewModel> Accounthead = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblAccountHead
                                 where C.AccountGroupId == 38
                                 orderby C.AccountHeadId
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Accounthead.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountHeadId,
                                name = query[i].AccountHead,
                                code = query[i].AccountHeadCode
                            });
                        }
                    }

                }

                return Accounthead;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }


        public static List<MasterlistviewModel> getbankcreditaccountheadforproject(int id)
        {
            try
            {

                List<MasterlistviewModel> Accounthead = new List<MasterlistviewModel>();
                List<MasterlistviewModel> Accountheadlist = new List<MasterlistviewModel>();
                //Accounthead.Add(new MasterlistviewModel()
                //{
                //    id = 0,
                //    name = "Select Any",
                //});
                using (var context = new IOASDBEntities())
                {
                    var bankid = (from I in context.tblProjectInvoice
                                  join P in context.tblProject on I.ProjectId equals P.ProjectId
                                  where I.InvoiceId == id
                                  select P.BankID).FirstOrDefault();

                    var query = (from C in context.tblAccountHead
                                 where C.AccountGroupId == 38
                                 orderby C.AccountHeadId
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {

                            Accounthead.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountHeadId,
                                name = query[i].AccountHead,
                                code = query[i].AccountHeadCode
                            });
                            if (bankid != null)
                            {
                                if (bankid == query[i].AccountHeadId)
                                {

                                    MasterlistviewModel str1 = new MasterlistviewModel()
                                    {
                                        id = query[i].AccountHeadId,
                                        name = query[i].AccountHead,
                                        code = query[i].AccountHeadCode
                                    };
                                    //Accounthead.InsertRange(0,str1.id);
                                    Accounthead.Insert(0, str1);

                                }
                            }

                        }


                        Accountheadlist = Accounthead.GroupBy(x => x.id).Select(x => x.First()).ToList();

                    }

                }

                return Accountheadlist;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<CodeControllistviewModel> GetCLPTypeOfServiceList()
        {
            try
            {

                List<CodeControllistviewModel> list = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where (C.CodeName == "ClearancePaymentServiceType")
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new CodeControllistviewModel()
                            {
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeName = query[i].CodeName,
                                CodeValDetail = query[i].CodeValDetail,
                            });
                        }
                    }
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<CodeControllistviewModel> list = new List<CodeControllistviewModel>();
                return list;
            }

        }
        public static List<MasterlistviewModel> GetClearancePaymentPONumberList(Nullable<Int32> agentId, string transTypeCode = "")
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblClearancePaymentEntry
                                 where b.ClearancePaymentAgentId == agentId && b.Status == "Completed" && (transTypeCode == "" || b.TransactionTypeCode == transTypeCode)
                                 group b by b.ReferencePONumber into g
                                 select new { BillId = g.OrderByDescending(x => x.ClearancePaymentId).FirstOrDefault().ClearancePaymentId, RefPONumber = g.Key }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].BillId,
                                name = query[i].RefPONumber
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static decimal GetClearancePaymentRMNGPercentage(string poNumber, Nullable<Int32> agentId, int negBillId = 0)
        {
            try
            {

                decimal rmngPct = 0;
                using (var context = new IOASDBEntities())
                {
                    var previousPct = (from b in context.tblClearancePaymentEntry
                                       where b.ReferencePONumber == poNumber && b.ClearancePaymentAgentId == agentId && b.ClearancePaymentId != negBillId && b.Status != "Rejected"
                                       select b.AdvancePercentage ?? 0).Sum();
                    rmngPct = 100 - previousPct;

                }

                return rmngPct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static string GetCLPNewNumber(string type)
        {
            try
            {
                var no = string.Empty;
                var checkNum = type + "/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblClearancePaymentEntry
                               where (b.BillNumber.Contains(checkNum))
                               orderby b.ClearancePaymentId descending
                               select b.BillNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static Tuple<decimal, decimal> GetCPBillRMNGBalance(string poNumber, Nullable<Int32> agentId, int negBillId = 0)
        {
            try
            {

                decimal avlAmt = 0, avlTaxAmt = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblClearancePaymentEntry
                                 where b.ReferencePONumber == poNumber && b.ClearancePaymentAgentId == agentId && b.ClearancePaymentId != negBillId && b.Status != "Rejected"
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        decimal? preSettAmt = query.Select(m => m.ExpenseAmount).Sum();
                        decimal? preSettTaxAmt = query.Select(m => m.DeductionAmount).Sum();
                        avlAmt = (query[0].BillAmount - preSettAmt) ?? 0;
                        avlTaxAmt = (query[0].BillTaxAmount - preSettTaxAmt) ?? 0;
                    }

                }

                return Tuple.Create(avlAmt, avlTaxAmt);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((Decimal)0, (Decimal)0);
            }

        }
        public static List<MasterlistviewModel> GetClearanceAgentTDSList(Nullable<Int32> agentId)
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblClearanceAgentTDSDetail
                            where b.ClearanceAgentId == agentId
                            select new MasterlistviewModel()
                            {
                                id = b.ClearanceAgentTDSDetailId,
                                name = b.Section
                            }).ToList();
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static List<MasterlistviewModel> getClearanceAgent()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryProjectNo = (from C in context.tblClearanceAgentMaster
                                        select new { C.ClearanceAgentId, C.Name }).ToList();
                    if (qryProjectNo.Count > 0)
                    {
                        for (int i = 0; i < qryProjectNo.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryProjectNo[i].ClearanceAgentId,
                                name = qryProjectNo[i].Name
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                return List;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteClearanceAgent(string term)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblClearanceAgentMaster
                            where (C.Name.Contains(term) || C.ClearanceAgentCode.Contains(term))
                            && C.IsTravelAgency != true
                            orderby C.Name
                            select new AutoCompleteModel()
                            {
                                value = C.ClearanceAgentId.ToString(),
                                label = C.Name,
                                desc = C.isGstVendor.HasValue ? " HOLD GST FOR THIS VENDOR " : ""
                            }).ToList();


                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteTravelAgency(string term)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblClearanceAgentMaster
                            where (C.Name.Contains(term) || C.ClearanceAgentCode.Contains(term))
                            && C.IsTravelAgency == true && C.Status == "Active"
                            orderby C.Name
                            select new AutoCompleteModel()
                            {
                                value = C.ClearanceAgentId.ToString(),
                                label = C.Name,
                                desc = C.isGstVendor.HasValue && C.isGstVendor.Value ? "HOLD GST FOR THIS VENDOR" : ""
                            }).ToList();
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }


        public static List<MasterlistviewModel> GetClearanceAgentList(bool isTravelAgent = false)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblClearanceAgentMaster
                                 orderby C.Name
                                 where C.Status == "Active" && C.IsTravelAgency == isTravelAgent
                                 select new { C.Name, C.ClearanceAgentId }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].ClearanceAgentId,
                                name = query[i].Name,
                            });
                        }
                    }
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }

        }
        public static tblCodeControl GetCLPServiceDetail(int serviceType)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblCodeControl.FirstOrDefault(dup => dup.CodeValAbbr == serviceType && dup.CodeName == "ClearancePaymentServiceType");
                    if (query != null)
                    {
                        return query;
                    }
                    else
                        return new tblCodeControl();
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new tblCodeControl();
            }
        }

        public static List<MasterlistviewModel> GetSettlementTypeList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "SettlementType"
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }

        public static List<BillCommitmentDetailModel> GetCommitmentlistbyId(Int32[] CommitmentId)
        {
            try
            {
                List<BillCommitmentDetailModel> Commit = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {

                    Commit = (from U in context.tblCommitment
                              join P in context.tblProject on U.ProjectId equals P.ProjectId
                              join D in context.tblCommitmentDetails on U.CommitmentId equals D.CommitmentId
                              join head in context.tblBudgetHead on D.AllocationHeadId equals head.BudgetHeadId
                              orderby D.ComitmentDetailId descending
                              where CommitmentId.Contains(U.CommitmentId)
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentId = U.CommitmentId,
                                  CommitmentDetailId = D.ComitmentDetailId,
                                  CommitmentNumber = U.CommitmentNumber,
                                  HeadName = head.HeadName,
                                  ProjectId = U.ProjectId,
                                  ProjectNumber = P.ProjectNumber,
                                  BookedAmount = U.CommitmentAmount,
                                  AvailableAmount = D.BalanceAmount ?? 0,
                              }).ToList();

                }
                return Commit;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<BillCommitmentDetailModel> Commit = new List<BillCommitmentDetailModel>();
                return Commit;
            }
        }

        public static string getRecoupId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "ECR/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from recoup in context.tblSBICardRecoupment
                                 where recoup.RecoupmentNumber.Contains(checkNum)
                                 orderby recoup.RecoupmentId descending
                                 select recoup).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.RecoupmentNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getTempSettlAdvId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "TMS/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from tempadv in context.tblTempAdvanceSettlement
                                 where tempadv.TempSettlNumber.Contains(checkNum)
                                 orderby tempadv.TempAdvSettlementId descending
                                 select tempadv).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.TempSettlNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static string getTempAdvId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "TMP/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from tempadv in context.tblTemporaryAdvance
                                 where tempadv.TemporaryAdvanceNumber.Contains(checkNum)
                                 orderby tempadv.TemporaryAdvanceId descending
                                 select tempadv).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.TemporaryAdvanceNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string ValidateTempAdvforSettlement(int TempAdvId)
        {
            string msg = "Valid";
            using (var context = new IOASDBEntities())
            {
                var Query = context.tblTempAdvanceSettlement.FirstOrDefault(m => m.TemporaryAdvanceId == TempAdvId);
                if (Query != null)
                {
                    msg = "Settlement has been done already for the selected Temporary Advance. Please select another one";
                }
            }

            return msg;

        }
        public static bool ValidateTempAdvSettlementStatus(int TempAdvsettlId, string type, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTempAdvanceSettlement.FirstOrDefault(m => m.TempAdvSettlementId == TempAdvsettlId && m.TransactionTypeCode == type && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateSBICardPjctdtlsOnEdit(int ProjectId, string type)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSBIPrepaidCardProjectDetails.FirstOrDefault(m => m.ProjectId == ProjectId && m.TransactionTypeCode == type && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string ValidateSBICardPjctAddition(int ProjectId, int cardId)
        {
            string msg = "Valid";
            using (var context = new IOASDBEntities())
            {
                if (cardId != 0)
                {
                    var cardquery = context.tblSBIECardDetails.FirstOrDefault(m => m.SBIPrepaidCardDetailsId == cardId);
                    if (cardquery == null)
                    {
                        msg = "Card does not exist. Please check again";
                        return msg;
                    }
                    else if (cardquery != null)
                    {
                        var noofpjcts = cardquery.NoofProjectsIncluded;
                        if (noofpjcts >= 5)
                        {
                            msg = "Project cannot be mapped to this card since there are already 5 projects mapped. Please select another project.";
                            return msg;
                        }
                    }
                }
                if (ProjectId != 0)
                {
                    var projectquery = context.tblProject.FirstOrDefault(m => m.ProjectId == ProjectId);
                    if (projectquery != null)
                    {
                        var Query = context.tblSBIPrepaidCardProjectDetails.FirstOrDefault(m => m.ProjectId == ProjectId);
                        if (Query != null)
                        {
                            var pjctcardquery = context.tblSBIECardDetails.FirstOrDefault(m => m.SBIPrepaidCardDetailsId == Query.SBIPrepaidCardDetailsId);
                            var CardNumber = pjctcardquery.SBIPrepaidCardNumber;
                            msg = "Project has already been added to a SBI Prepaid Card - " + CardNumber + ". Please select another project";

                        }
                    }
                    else if (projectquery == null)
                    {
                        msg = "Project does not exist. Please check again";
                        return msg;
                    }
                }
            }

            return msg;

        }

        public static bool ValidateImprestOnEdit(int ImpID, string type)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblIMPUserDetails.FirstOrDefault(m => m.IMPUserDetailsId == ImpID && m.TransactionTypeCode == type && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string ValidateImprestonAddition(int PIId)
        {
            string msg = "Valid";
            using (var context = new IOASDBEntities())
            {
                if (PIId != 0)
                {
                    var cardquery = context.tblIMPUserDetails.FirstOrDefault(m => m.PIUserId == PIId);
                    if (cardquery == null)
                    {
                        msg = "Imprest Account does not exist. Please check again";
                        return msg;
                    }

                }
                //if (PIId != 0)
                //{
                //    var projectquery = context.tblProject.FirstOrDefault(m => m.PIName == PIId);
                //    if (projectquery != null)
                //    {
                //        var Query = context.tblImprestPaymentDetails.FirstOrDefault(m => m.PIId == PIId);
                //        if (Query != null)
                //        {
                //            var pjctcardquery = context.tblIMPUserDetails.FirstOrDefault(m => m.IMPUserDetailsId == Query.IMPUserDetailsId);
                //            var CardNumber = pjctcardquery.ImprestCardNumber;
                //            msg = "Project has already been added to a SBI Prepaid Card - " + CardNumber + ". Please select another project";

                //        }
                //    }
                //    else if (projectquery == null)
                //    {
                //        msg = "Project does not exist. Please check again";
                //        return msg;
                //    }
                //}
            }

            return msg;

        }
        public static bool ValidateImprestEnhanceOnEdit(int IMEID, string type)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestPaymentDetails.FirstOrDefault(m => m.ImprestPaymentDetailsId == IMEID && m.TransactionTypeCode == type && m.Status == "Open" && m.Is_ImprestEnhance == true);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static CoPiDetailsModel GetPIdetailsbyProject(int ProjectId)
        {
            try
            {
                CoPiDetailsModel Detail = new CoPiDetailsModel();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from U in context.vwFacultyStaffDetails
                                 join pro in context.tblProject on U.UserId equals pro.PIName
                                 where pro.ProjectId == ProjectId
                                 select new { U.FirstName, U.DepartmentName, U.UserId }).FirstOrDefault();
                    if (Query != null)
                    {
                        Detail.PIName = Query.FirstName;
                        Detail.PIId = Query.UserId;
                        Detail.PIDepartment = Query.DepartmentName;
                    }
                    return Detail;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                CoPiDetailsModel Detail = new CoPiDetailsModel();
                return Detail;
            }
        }
        public static List<MasterlistviewModel> getBank()
        {
            try
            {

                List<MasterlistviewModel> bank = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblIITMBankMaster
                                 orderby b.BankId
                                 select b).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            bank.Add(new MasterlistviewModel()
                            {
                                id = query[i].BankId,
                                name = query[i].BankName,
                            });
                        }
                    }

                }

                return bank;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static string getIMPRecoupId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "IMR/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from recoup in context.tblImprestRecoupment
                                 where recoup.RecoupmentNumber.Contains(checkNum)
                                 orderby recoup.RecoupmentId descending
                                 select recoup).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.RecoupmentNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ValidateImprestBillRecoupStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestBillRecoupment.FirstOrDefault(m => m.ImprestBillRecoupId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateImprestBillStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestRecoupment.FirstOrDefault(m => m.RecoupmentId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string GetImprestBillRecoupNo()
        {
            try
            {
                var no = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblImprestBillRecoupment
                               orderby b.ImprestBillRecoupId descending
                               select b.ImprestBillRecoupNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return "IBR" + "/" + GetCurrentFinYear() + "/" + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "IBR" + "/" + GetCurrentFinYear() + "/" + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string getImprestId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "IMP/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from card in context.tblIMPUserDetails
                                 where card.ImprestNumber.Contains(checkNum)
                                 orderby card.IMPUserDetailsId descending
                                 select card).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.ImprestNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getImprestEnhanceId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "IME/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from pjct in context.tblImprestPaymentDetails
                                 where pjct.Is_ImprestEnhance == true && pjct.ImprestEnhanceNumber.Contains(checkNum)
                                 orderby pjct.ImprestPaymentDetailsId descending
                                 select pjct).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.ImprestEnhanceNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                throw ex;

            }
        }
        public static bool CheckVendorIsInterState(int ID)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblVendorMaster
                                 where C.VendorId == ID
                                 select C.StateCode).FirstOrDefault();
                    if (query != null)
                    {
                        if (query.Value == 33)
                            return false;
                        else
                            return true;
                    }
                    else
                        throw new Exception();
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw new Exception();
            }
        }
        public static bool CheckClearanceAgentIsInterState(int ID)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblClearanceAgentMaster
                                 where C.ClearanceAgentId == ID
                                 select C.StateCode).FirstOrDefault();
                    if (query != null)
                    {
                        if (query.Value == 33)
                            return false;
                        else
                            return true;
                    }
                    else
                        throw new Exception();
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw new Exception();
            }
        }

        public static List<MasterlistviewModel> GetTdsList()
        {
            try
            {
                List<MasterlistviewModel> tds = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from T in context.tblTDSMaster
                                 orderby T.NatureOfIncome
                                 select new { T.Section, T.TdsMasterId }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            tds.Add(new MasterlistviewModel()
                            {
                                id = query[i].TdsMasterId,
                                name = query[i].Section
                            });
                        }

                    }
                }
                return tds;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> tds = new List<MasterlistviewModel>();
                return tds;
            }
        }
        public static string GetTdsSection(int tdsId)
        {
            string tdsSection = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTDSMaster.FirstOrDefault(m => m.TdsMasterId == tdsId);
                    if (query != null)
                    {
                        tdsSection = query.Section;
                    }
                }
                return tdsSection;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return tdsSection;
            }
        }
        public static int getInvoiceId(int financialyear, int projecttype)
        {
            try
            {
                var lastseqnum = 0;
                using (var context = new IOASDBEntities())
                {
                    var invquery = (from inv in context.tblProjectInvoice
                                    where inv.FinancialYear == financialyear && inv.ProjectType == projecttype
                                    select inv.SequenceNumber).Max();

                    int seqnum = invquery ?? 0;
                    lastseqnum = seqnum + 1;
                    return lastseqnum;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getEmployeeid(int PIid, string Category)
        {
            try
            {
                var facultycode = " ";
                var context = new IOASDBEntities();
                var query = (from user in context.vwCombineStaffDetails
                             where user.ID == PIid && user.Category == Category
                             select user).FirstOrDefault();

                if (query != null)
                {
                    facultycode = query.EmployeeId;
                    return facultycode;
                }
                else
                {
                    return facultycode;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getempid(int Id)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.vwFacultyStaffDetails.Where(M => M.UserId == Id).Select(m => m.EmployeeId).FirstOrDefault();
                    return qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidatePartTimePaymentOnEdit(int internId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblPartTimePayment.FirstOrDefault(m => m.PartTimePaymentId == internId && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<MasterlistviewModel> GetStudentDepartmentList()
        {
            try
            {
                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.vwStudentDetails
                                 select U).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                name = query[i].RollNumber,
                                code = query[i].DepartmentName,
                            });
                        }
                    }

                }

                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static string getParttimeinternId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "PTP/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblPartTimePayment
                                 where intern.PartTimePaymentNumber.Contains(checkNum)
                                 orderby intern.PartTimePaymentId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.PartTimePaymentNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static bool ValidateProjectFundTransferStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblProjectTransfer.FirstOrDefault(m => m.ProjectTransferId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateProjectDirectTransferStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblProjectDirectTransfer.FirstOrDefault(m => m.ProjectTransferId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateContraStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblContra.FirstOrDefault(m => m.ContraId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        //public static int GetFreezeAndUnFreezeData(int projectId)
        //{

        //    try
        //    {
        //        using (var context = new IOASDBEntities())
        //        {
                    
        //            var query = (from C in context.tblProjectEnhancementAllocation
        //                         where C.ProjectId == projectId && C.Status == "Active" && C.IsCurrentVersion == true
        //                         select C).FirstOrDefault();
        //            return Convert.ToInt16(query);
        //        }               
        //    }
           
        //        catch (Exception ex)
        //    {
        //        Infrastructure.IOASException.Instance.HandleMe(
        //        (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
        //        throw ex;
        //    }
        //}
        public static bool ValidateGeneralVoucherStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblGeneralVoucher.FirstOrDefault(m => m.GeneralVoucherId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateReceiptStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateHeadCreditStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblHeadCredit.FirstOrDefault(m => m.HeadCreditId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<TransactionAndTaxesModel> GetTransactionType()
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from C in context.tblTransactionTypeCode
                             orderby C.TransactionType
                             select new { C.TransactionType, C.TransactionTypeCode }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        transtype.Add(new TransactionAndTaxesModel()
                        {
                            TransactionType = query[i].TransactionType,
                            TransactionTypeId = query[i].TransactionTypeCode,
                        });
                    }
                }
            }
            return transtype;
        }
        public static List<TransactionAndTaxesModel> GetBillTransactionType()
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from C in context.vw_getPaymentBillTransactionType
                             orderby C.TransactionType
                             select new { C.TransactionType, C.TransactionTypeCode }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        transtype.Add(new TransactionAndTaxesModel()
                        {
                            TransactionType = query[i].TransactionType,
                            TransactionTypeId = query[i].TransactionTypeCode,
                        });
                    }
                }
            }
            return transtype;
        }
        public static string gettransactioncode(string typecode)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTransactionTypeCode.Where(m => m.TransactionTypeCode == typecode).Select(m => m.TransactionType).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

       
        public static List<FreezingUnFreezingModel> GetFreezeAndUnFreezeData(int projectId)
        {
            List<FreezingUnFreezingModel> FreezeData = new List<FreezingUnFreezingModel>();
            try
            {

                using (var context = new IOASDBEntities())
                {                  

                    var query = (from C in context.vw_ProjectAllocationHeadList
                                 where C.ProjectId == projectId
                                 select new {
                                     C.ProjectId,
                                     C.AllocationHead,                                                                      
                                     C.ProjectNumber,
                                     C.HeadName,
                                     C.TotalValue,
                                     C.IsFreeze,                                                                    
                                 }).ToList();
                    if (query.Count > 0)
                    {
                        var headval = query.Where(HeadList => HeadList.AllocationHead==28 || HeadList.AllocationHead == 29);
                        if (query.Count == 2 && headval.Count() == 2)
                        {
                            var queryone = (from C in context.vw_ProjectAllocationAllHeadList
                                            where C.ProjectId == projectId
                                            select new
                                            {
                                                C.ProjectId,
                                                C.BudgetHeadId,
                                                C.ProjectNumber,
                                                C.HeadName,
                                                C.TotalValue,
                                                C.IsFreeze,
                                            }).ToList();
                            if (queryone.Count > 0)

                            {

                                for (int i = 0; i < queryone.Count; i++)
                                {
                                    FreezeData.Add(new FreezingUnFreezingModel()
                                    {
                                        ProjectId = queryone[i].ProjectId ?? 0,
                                        AllocationHead = queryone[i].BudgetHeadId,
                                        ProjectNumber = queryone[i].ProjectNumber,
                                        HeadName = queryone[i].HeadName,
                                        TotalValue = 0,
                                        Freeze = Convert.ToInt32(queryone[i].IsFreeze)
                                    });
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                FreezeData.Add(new FreezingUnFreezingModel()
                                {
                                    ProjectId = query[i].ProjectId,
                                    AllocationHead = query[i].AllocationHead ?? 0,
                                    ProjectNumber = query[i].ProjectNumber,
                                    HeadName = query[i].HeadName,
                                    TotalValue = query[i].TotalValue ?? 0,
                                    Freeze = Convert.ToInt32(query[i].IsFreeze)
                                });
                            }
                        }
                    }
                   
                }
                return FreezeData;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }



        public static List<TransactionAndTaxesModel> GetSubCode()
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from C in context.tblTransactionDefinition
                             orderby C.SubCode
                             select new { C.SubCode }).Distinct().ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        transtype.Add(new TransactionAndTaxesModel()
                        {
                            SubCodeId = Convert.ToInt32(query[i].SubCode)

                        });
                    }
                }
            }
            return transtype;
        }
        public static List<TransactionAndTaxesModel> GetAccountGroupList()
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from H in context.tblAccountHead
                             join G in context.tblAccountGroup on H.AccountGroupId equals G.AccountGroupId
                             group G by G.AccountGroup into grp
                             select new
                             {
                                 AccountGroup = grp.Key,
                                 AccountGroupId = grp.Select(m => m.AccountGroupId).FirstOrDefault()
                             }).ToList();

                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        transtype.Add(new TransactionAndTaxesModel()
                        {
                            GroupId = Convert.ToInt32(query[i].AccountGroupId),
                            Group = query[i].AccountGroup,
                        });
                    }
                }
            }
            return transtype;
        }

        public static List<TransactionAndTaxesModel> GetAccountHeadList()
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from H in context.tblAccountHead
                             select new
                             {
                                 H.AccountHead,
                                 H.AccountHeadId
                             }).Distinct().ToList();

                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        transtype.Add(new TransactionAndTaxesModel()
                        {
                            HeadId = Convert.ToInt32(query[i].AccountHeadId),
                            Head = query[i].AccountHead,
                        });
                    }
                }
            }
            return transtype;
        }
        public static List<TransactionAndTaxesModel> LoadGrpWiseHeadList(int accgrp)
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            try
            {
                transtype.Add(new TransactionAndTaxesModel()
                {
                    HeadId = 0,
                    Head = "Select Head"
                });
                using (var context = new IOASDBEntities())
                {
                    if (accgrp != 0)
                    {
                        var query = (from H in context.tblAccountHead
                                     where H.AccountGroupId == accgrp
                                     select new
                                     {
                                         H.AccountHead,
                                         H.AccountHeadId
                                     }).Distinct().ToList();

                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                transtype.Add(new TransactionAndTaxesModel()
                                {
                                    HeadId = Convert.ToInt32(query[i].AccountHeadId),
                                    Head = query[i].AccountHead,
                                });
                            }
                        }
                    }
                }
                return transtype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<TransactionAndTaxesModel> LoadSubCodeList(string transtype)
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            try
            {
                model.Add(new TransactionAndTaxesModel()
                {
                    SubCodeId = 0,
                    SubCode = "Select SubCode"
                });
                using (var context = new IOASDBEntities())
                {
                    if (transtype != null)
                    {
                        var query = (from H in context.tblTransactionDefinition
                                     where H.TransactionTypeCode == transtype
                                     select new
                                     {
                                         H.SubCode
                                     }).Distinct().ToList();

                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                model.Add(new TransactionAndTaxesModel()
                                {
                                    SubCodeId = Convert.ToInt32(query[i].SubCode),
                                    SubCode = query[i].SubCode,
                                });
                            }
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<TransactionAndTaxesModel> GetTransactionDetailsList(string transaction, string subcode)
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = (from T in context.tblTransactionDefinition
                               join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                               join G in context.tblAccountGroup on H.AccountGroupId equals G.AccountGroupId
                               where (T.TransactionTypeCode == transaction && T.SubCode == subcode)
                               select new
                               {
                                   G.AccountGroup,
                                   G.AccountGroupId,
                                   H.AccountHead,
                                   H.AccountHeadId,
                                   T.TransactionType,
                                   T.IsJV_f
                               }).ToList();
                    if (qry.Count > 0)
                    {
                        for (int i = 0; i < qry.Count; i++)
                        {
                            model.Add(new TransactionAndTaxesModel()
                            {
                                GroupId = Convert.ToInt32(qry[i].AccountGroupId),
                                Group = qry[i].AccountGroup,
                                Head = qry[i].AccountHead,
                                HeadId = Convert.ToInt32(qry[i].AccountHeadId),
                                TransactionType = qry[i].TransactionType,
                                ISJV = Convert.ToBoolean(qry[i].IsJV_f)

                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                //List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            }
            return model;
        }
        public static List<TransactionAndTaxesModel> GetDeductionCategory()
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            try
            {

                using (var context = new IOASDBEntities())
                {

                    var query = (from H in context.tblCodeControl
                                 where H.CodeName == "DeductionCategory"
                                 select new
                                 {
                                     H.CodeValDetail,
                                     H.CodeValAbbr
                                 }).Distinct().ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            model.Add(new TransactionAndTaxesModel()
                            {
                                CategoryId = Convert.ToInt32(query[i].CodeValAbbr),
                                Category = query[i].CodeValDetail,
                            });
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static decimal GetAvailableAmtForCreditNote(int id, bool isEditMode)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    decimal invoiceAmt = 0;
                    decimal previousCreditNote = 0;
                    int invoiceId = 0;
                    if (!isEditMode)
                    {
                        var invquery = (from inv in context.tblProjectInvoice
                                        where inv.InvoiceId == id && inv.Status == "Active"
                                        select inv).FirstOrDefault();
                        if (invquery == null)
                            return 0;
                        invoiceAmt = invquery.TotalInvoiceValue ?? 0;
                        invoiceId = id;
                        previousCreditNote = context.tblCreditNote.Where(m => m.InvoiceId == id && m.Status != "InActive").Sum(m => m.TotalCreditAmount) ?? 0;
                    }
                    else
                    {
                        var invquery = (from cn in context.tblCreditNote
                                        join inv in context.tblProjectInvoice on cn.InvoiceId equals inv.InvoiceId
                                        where cn.CreditNoteId == id
                                        select new { inv, cn }).FirstOrDefault();
                        if (invquery == null)
                            return 0;
                        invoiceAmt = invquery.inv.TotalInvoiceValue ?? 0;
                        invoiceId = invquery.inv.InvoiceId;
                        previousCreditNote = context.tblCreditNote.Where(m => m.InvoiceId == invoiceId && m.Status != "InActive" && m.CreditNoteId != id).Sum(m => m.TotalCreditAmount) ?? 0;
                    }

                    decimal receiptAmt = context.tblReceipt.Where(r => r.InvoiceId == invoiceId && r.Status != "InActive")
                                         .Sum(m => m.ReceiptAmount) ?? 0;
                    decimal invopenreceiptAmt = context.tblInvoiceOpeningReceipts.Where(r => r.InvoiceId == invoiceId)
                                         .Sum(m => m.OpeningReceiptAmount) ?? 0;
                    decimal withOutTx = invoiceAmt - previousCreditNote - receiptAmt - invopenreceiptAmt;
                    return withOutTx;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static bool ValidateAdhocPaymentOnEdit(int adhocId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAdhocPayment.FirstOrDefault(m => m.AdhocPaymentId == adhocId && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string getAdhocPaymentId(string type)
        {
            try
            {
                string seqnum = "";
                var checkNum = type + "/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblAdhocPayment
                                 where intern.AdhocPaymentNumber.Contains(checkNum)
                                 orderby intern.AdhocPaymentId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.AdhocPaymentNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static List<MasterlistviewModel> gettranstypecode(int Paymenttype)
        {
            try
            {
                List<MasterlistviewModel> transtypcode = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "PaymentType" && C.CodeValAbbr == Paymenttype
                                 select C).FirstOrDefault();
                    if (query != null)
                    {
                        transtypcode.Add(new MasterlistviewModel()
                        {
                            id = query.CodeValAbbr,
                            name = query.CodeDescription
                        });
                    }

                }

                return transtypcode;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static List<MasterlistviewModel> GetFundingBody(int ProjectId)
        {
            List<MasterlistviewModel> List = new List<MasterlistviewModel>();
            try
            {
                List.Add(new MasterlistviewModel()
                {
                    id = 0,
                    name = "NA"
                });
                if (ProjectId > 0)
                {
                    using (var context = new IOASDBEntities())
                    {
                        var Query = (from C in context.tblProjectFundingBody where C.ProjectId == ProjectId select C.IndProjectFundingGovtBody).ToList();
                        if (Query.Count > 0)
                        {
                            for (int i = 0; i < Query.Count; i++)
                            {
                                int NonGovt = Query[i] ?? 0;
                                var qryName = (from c in context.tblCodeControl where c.CodeName == "Indfundgovtbody" && c.CodeValAbbr == NonGovt select c.CodeValDetail).FirstOrDefault();
                                if (qryName != "")
                                {
                                    List.Add(new MasterlistviewModel()
                                    {
                                        id = NonGovt,
                                        name = qryName
                                    });
                                }
                            }
                        }
                        var QueryNon = (from C in context.tblProjectFundingBody where C.ProjectId == ProjectId select C.IndProjectFundingNonGovtBody).ToList();
                        if (QueryNon.Count > 0)
                        {
                            for (int i = 0; i < QueryNon.Count; i++)
                            {
                                int NonGovt = QueryNon[i] ?? 0;
                                var qryName = (from c in context.tblCodeControl where c.CodeName == "Indfundnongovtbody" && c.CodeValAbbr == NonGovt select c.CodeValDetail).FirstOrDefault();
                                if (qryName != null)
                                {
                                    List.Add(new MasterlistviewModel()
                                    {
                                        id = NonGovt,
                                        name = qryName
                                    });
                                }
                            }
                        }

                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return List;
            }
        }
        public static string GetTypeOfServiceName(int id)
        {
            try
            {

                string name = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTaxMaster.FirstOrDefault(m => m.TaxMasterId == id);
                    if (query != null)
                    {
                        name = query.TaxCode + "-" + query.ServiceType;
                    }
                }

                return name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return string.Empty;
            }

        }
        public static bool TSTBillIsReceipt(int billId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == billId && m.TransactionTypeCode == "TST");
                    if (query != null && query.BalanceinAdvance > 0)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static List<tblEmpOtherAllowance> GetEmpOtherAllowance(string empId)
        {
            List<tblEmpOtherAllowance> List = new List<tblEmpOtherAllowance>();
            try
            {
                using (var context = new IOASDBEntities())
                {

                    List = context.tblEmpOtherAllowance.Where(m => m.EmployeeIdStr == empId && (m.IsPaid == false || m.IsPaid == null)).ToList();
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return List;
            }
        }
        public static decimal GetAccountHeadBalance(int hdId)
        {
            try
            {
                decimal bal = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblHeadOpeningBalance.FirstOrDefault(m => m.AccountHeadId == hdId && m.Status == "Active");
                    if (query != null)
                        bal = query.OpeningBalance ?? 0;
                    var querySum = context.tblBOASummary.FirstOrDefault(m => m.AccountHeadId == hdId);
                    if (querySum != null)
                        bal = bal + (querySum.Amount ?? 0);
                    //var queryBoa = (from boa in context.tblBOA
                    //                join tx in context.tblBOATransaction on boa.BOAId equals tx.BOAId
                    //                where boa.Status != "InActive" && tx.AccountHeadId == hdId
                    //                select tx).ToList();
                    //if(queryBoa.Count > 0)
                }
                return bal;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static List<MasterlistviewModel> GetTDS()
        {
            List<MasterlistviewModel> tds = new List<MasterlistviewModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from C in context.tblCodeControl
                             where (C.CodeName == "TDS")
                             orderby C.CodeValAbbr
                             select new { C.CodeValAbbr, C.CodeValDetail }).Distinct().ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        tds.Add(new MasterlistviewModel()
                        {
                            id = query[i].CodeValAbbr,
                            code = (query[i].CodeValDetail.Replace("%", "")),
                            name = query[i].CodeValDetail,

                        });
                    }
                }
            }
            return tds;
        }

        //Rajesh Vs11764 -- PI BankAccountDetails For PI Salary Process
        public static List<BankAccountMaster> getStaffBankAccountDetails(int EmployeeId, string Category , int PayFor)
        {
            try
            {
                string catvalue = "";
                switch (Category)
                {
                    case "PI":
                        catvalue = "Professor";
                        break;
                    case "Vendor Staff":
                        catvalue = "ProjectStaff";
                        break;
                    case "Institute Staff":
                        catvalue = "Staff";
                        break;
                    case "Adhoc Staff":
                        catvalue = "AdhocStaff";
                        break;
                    default:
                        catvalue = "";
                        break;
                }

                List<BankAccountMaster> bankDetails = new List<BankAccountMaster>();
                using (var context = new IOASDBEntities())
                {
                    if (Category == "PI" || Category == "Institute Staff")
                    {
                        var bankDetail = (from s in context.tblStaffBankAccount
                                          where (s.Category == catvalue && s.UserId == EmployeeId && s.PayFor== PayFor)
                                          select new { s.BankName, s.Branch, s.AccountNumber, s.IFSCCode, s.PAN }).Distinct().Take(1).ToList();
                        if (bankDetail.Count > 0)
                        {
                            for (int i = 0; i < bankDetail.Count; i++)
                            {
                                bankDetails.Add(new BankAccountMaster()
                                {
                                    BankName = bankDetail[i].BankName,
                                    Branch = bankDetail[i].Branch,
                                    AccountNumber = bankDetail[i].AccountNumber,
                                    IFSCCode = bankDetail[i].IFSCCode,
                                    PAN = bankDetail[i].PAN
                                });
                            }
                        }

                    }

                    //select s.BankName, Branch = '', AccountNumber = s.BankAccountNumber , s.IFSCCode, PAN = s.PANNo
                    //    from tblRCTOutsourcing s inner
                    //    join tblProjectStaffDetail pd on s.EmployeersID = pd.EmployeeId
                    //                      where (pd.CastEmployeeId = 2964 and s.IsActiveNow = 1)
                    else if (Category == "Vendor Staff")
                    {
                        var bankDetail = (from s in context.tblRCTOutsourcing
                                          join pd in context.tblProjectStaffDetail on s.EmployeersID equals pd.EmployeeId
                                          where pd.CastEmployeeId == EmployeeId && s.IsActiveNow == true
                                          select new { s.BankName, Branch = "", AccountNumber = s.BankAccountNumber, s.IFSCCode, PAN = s.PANNo }).Distinct().Take(1).ToList();
                        if (bankDetail.Count > 0)
                        {
                            for (int i = 0; i < bankDetail.Count; i++)
                            {
                                bankDetails.Add(new BankAccountMaster()
                                {
                                    BankName = bankDetail[i].BankName,
                                    Branch = bankDetail[i].Branch,
                                    AccountNumber = bankDetail[i].AccountNumber,
                                    IFSCCode = bankDetail[i].IFSCCode,
                                    PAN = bankDetail[i].PAN

                                });
                            }
                        }

                    }
                    else if (Category == "Adhoc Staff")
                    {
                        var bankDetail = (from s in context.tblRCTSTE
                                          join pd in context.tblProjectAdhocStaffDetails on s.EmployeersID equals pd.EmployeeId
                                          where pd.CastEmployeeId == EmployeeId && s.IsActiveNow == true
                                          select new { s.BankName, Branch = "", AccountNumber = s.BankAccountNumber, s.IFSCCode, PAN = s.PANNo }).Distinct().Take(1).ToList();


                        if (bankDetail.Count > 0)
                        {
                            for (int i = 0; i < bankDetail.Count; i++)
                            {
                                bankDetails.Add(new BankAccountMaster()
                                {
                                    BankName = bankDetail[i].BankName,
                                    Branch = bankDetail[i].Branch,
                                    AccountNumber = bankDetail[i].AccountNumber,
                                    IFSCCode = bankDetail[i].IFSCCode,
                                    PAN = bankDetail[i].PAN

                                });
                            }
                        }

                    }



                }
                return bankDetails;
            }
            catch (Exception ex)
            {
                {
                    Infrastructure.IOASException.Instance.HandleMe(
                    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                    throw ex;
                }
            }
        }


        public static List<MasterlistviewModel> GetReceivedFrom()
        {
            List<MasterlistviewModel> tds = new List<MasterlistviewModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from C in context.tblCodeControl
                             where (C.CodeName == "RequestReceivedFrom")
                             orderby C.CodeValAbbr
                             select new { C.CodeValAbbr, C.CodeValDetail }).Distinct().ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        tds.Add(new MasterlistviewModel()
                        {
                            id = query[i].CodeValAbbr,
                            name = query[i].CodeValDetail

                        });
                    }
                }
            }
            return tds;
        }
        public static bool ValidateDistributionOnEdit(int distributionId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblDistribution.FirstOrDefault(m => m.DistributionId == distributionId && m.TransactionTypeCode == "DIS" && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string getDistributionId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "DIS/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblDistribution
                                 where intern.DistributionNumber.Contains(checkNum)
                                 orderby intern.DistributionId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.DistributionNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                throw ex;

            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteProjects(string term)
        {
            try
            {
                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    //var schemequery = (from C in context.tblSchemes
                    //                   where C.SchemeCode == "IC" || C.SchemeCode == "RB" || C.SchemeCode == "RC" || C.SchemeCode == "CT"
                    //                   select C).ToList();
                    var query = (from C in context.tblProject
                                 join S in context.tblSchemes on C.ConsultancyFundingCategory equals S.SchemeId
                                 where (string.IsNullOrEmpty(term) || C.ProjectNumber.Contains(term))
                                 && C.Status == "Active"
                                 && C.ProjectType == 2 && (C.ConsultancyFundingCategory == 5 || C.ConsultancyFundingCategory == 7 || C.ConsultancyFundingCategory == 8 || C.ConsultancyFundingCategory == 24 || C.ConsultancyFundingCategory == 12)
                                 //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 //where (C.RoleId == 7)
                                 orderby C.ProjectId
                                 select new { C.ProjectNumber, C.ProjectId }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].ProjectId.ToString(),
                                label = query[i].ProjectNumber,
                            });
                        }
                    }
                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static decimal GetDistribuAmount(int ProjectId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    decimal Amount = 0;
                    var qry = context.tblDistribution.Where(m => m.ProjectId == ProjectId && m.Status == "Completed").Select(m => m.DistributionAmount).ToList();
                    if (qry != null)
                    {
                        Amount = qry.Sum() ?? 0;
                        return Amount;
                    }
                    return Amount;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                decimal Amount = 0;
                return Amount;
            }
        }
        public static List<MasterlistviewModel> getProjectidbynumber(string Projectnumber)
        {
            try
            {
                List<MasterlistviewModel> Projectid = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 where C.ProjectNumber == Projectnumber
                                 && C.Status == "Active"
                                 select new { C.ProjectTitle, C.ProjectId }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projectid.Add(new MasterlistviewModel()
                            {
                                id = query[i].ProjectId,
                                name = query[i].ProjectTitle,
                            });
                        }
                    }
                    else
                    {
                        Projectid.Add(new MasterlistviewModel()
                        {
                            id = 0,
                            name = "",
                        });
                    }
                }

                return Projectid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }

        public static List<AutoCompleteModel> GetAutoCompleteProfList(string term)
        {
            try
            {

                List<AutoCompleteModel> staf = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    staf = (from C in context.vwCombineStaffDetails
                            where (string.IsNullOrEmpty(term) || C.Name.Contains(term) || C.EmployeeId.Contains(term))
                            && C.Category == "Professor"
                            orderby C.Name
                            select new AutoCompleteModel()
                            {
                                value = C.ID.ToString(),
                                label = C.Name + " - " + C.EmployeeId
                            }).ToList();

                }

                return staf;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }

        public static List<AutoCompleteModel> GetACTandMEmpList(string term)
        {
            try
            {
                List<AutoCompleteModel> emp = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwTandM
                                 where C.EmployeeName.Contains(term) || C.EmployeeId.Contains(term)
                                 select C).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            emp.Add(new AutoCompleteModel()
                            {
                                value = query[i].EmployeeId,
                                label = query[i].EmployeeId + "-" + query[i].EmployeeName
                            });
                        }
                    }
                }

                return emp;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }

        public static List<DistributionOverheadListModel> getInstituteOHPercentage()
        {
            try
            {
                List<DistributionOverheadListModel> ohpercent = new List<DistributionOverheadListModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == "InstituteOverheadPercent"
                                 select C).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            ohpercent.Add(new DistributionOverheadListModel()
                            {
                                OverheadtypeId = query[i].CodeValAbbr,
                                Overheadtypename = query[i].CodeDescription,
                                OverheadPercentage = Convert.ToDecimal(query[i].CodeValDetail),
                            });
                        }
                    }

                }
                return ohpercent;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string gethonorid()
        {
            try
            {
                string seqnum = "";
                var checkNum = "HON/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblHonororium
                                 where intern.HonororiumNo.Contains(checkNum)
                                 orderby intern.HonororiumId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.HonororiumNo;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static List<MasterlistviewModel> GetOH()
        {
            List<MasterlistviewModel> tds = new List<MasterlistviewModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from C in context.tblCodeControl
                             where (C.CodeName == "OH")
                             orderby C.CodeValAbbr
                             select new { C.CodeValAbbr, C.CodeValDetail }).Distinct().ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        tds.Add(new MasterlistviewModel()
                        {
                            id = query[i].CodeValAbbr,
                            name = query[i].CodeValDetail

                        });
                    }
                }
            }
            return tds;
        }
        public static bool ValidateHonororiumOnEdit(int honorid)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblHonororium.FirstOrDefault(m => m.HonororiumId == honorid && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string getpayeetype(int PayeeType)
        {
            var payeename = "";
            if (PayeeType == 1)
            {
                payeename = "PI";
            }
            else if (PayeeType == 2)
            {
                payeename = "Student";
            }
            else if (PayeeType == 4)
            {
                payeename = "Institute Staff";
            }
            else if (PayeeType == 3)
            {
                payeename = "Vendor Staff";
            }
            else if (PayeeType == 5)
            {
                payeename = "Adhoc Staff";
            }
            else if (PayeeType == 6)
            {
                payeename = "Others";
            }
            return payeename;
        }
        public static string GetVWCombineStaffName(int id, string type)
        {
            var Name = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.vwCombineStaffDetails.Where(m => m.Category == type && m.ID == id).FirstOrDefault();
                    // var Id = context.vwCombineStaffDetails.Where(m => m.Category == type && m.ID == id).FirstOrDefault();
                    Name = qry.EmployeeId + "-" + qry.Name;
                    return Name;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Name;
            }
        }

        public static string GetVWCombineStaffNameByEmpCode(string code, string type)
        {
            var Name = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.vwCombineStaffDetails.Where(m => m.Category == type && m.EmployeeId == code).FirstOrDefault();
                    // var Id = context.vwCombineStaffDetails.Where(m => m.Category == type && m.ID == id).FirstOrDefault();
                    Name = qry.EmployeeId + "-" + qry.Name;
                    return Name;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Name;
            }
        }


        public static int GetVWCombineStaffIdByEmpCode(string code, string type)
        {
            int Id =0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.vwCombineStaffDetails.Where(m => m.Category == type && m.EmployeeId == code).FirstOrDefault();
                    // var Id = context.vwCombineStaffDetails.Where(m => m.Category == type && m.ID == id).FirstOrDefault();
                    Id = (int)qry.ID ;
                    return Id;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Id;
            }
        }

        public static string GetVWStudentName(string id, string type)
        {
            var Name = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.vwStudentDetails.Where(m => m.RollNumber == id).FirstOrDefault();
                    // var Id = context.vwStudentDetails.Where(m => m.RollNumber == id).FirstOrDefault();
                    Name = qry.RollNumber + "-" + qry.FirstName;
                    return Name;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Name;
            }
        }

        public static bool ApprovalForHonororium(int HonorId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblHonororium.FirstOrDefault(m => m.HonororiumId == HonorId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = LoggedInUser;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ApprovalPendingForHonororium(int HonorId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblHonororium.FirstOrDefault(m => m.HonororiumId == HonorId);
                    if (query.Status == "Approval Pending")
                    {
                        query.Status = "Approved";
                        query.UPTD_By = LoggedInUser;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getSBICardId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "ECD/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from card in context.tblSBIPrepaidCardProjectDetails
                                 where card.SBIPrepaidProjectDetailNumber.Contains(checkNum)
                                 orderby card.SBIECardProjectDetailsId descending
                                 select card).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.SBIPrepaidProjectDetailNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static List<MasterlistviewModel> GetBankAccountHeadList(bool excludingImprest = true)
        {
            try
            {
                List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    headList = (from ah in context.tblAccountHead
                                orderby ah.AccountHead
                                where (!excludingImprest || (excludingImprest == true && ah.AccountGroupId != 61))
                                && ah.Bank_f == true
                                select new MasterlistviewModel()
                                {
                                    id = ah.AccountHeadId,
                                    name = ah.AccountHead
                                }).ToList();

                }
                return headList;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }



        public static List<MasterlistviewModel> Loadbankbyproject(int ProjectId)
        {
            try
            {
                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {


                    var query = (from C in context.tblProject
                                 join cc in context.tblAccountHead on C.BankID equals cc.AccountHeadId
                                 where C.Status == "Active" && C.ProjectId == ProjectId
                                 select new {cc }).ToList();
                    var Exbankid = context.tblProject.Where(m => m.BankID != null).Select(m=>m.BankID).ToList();

                    var allbank = (from cc in context.tblAccountHead.Where(p => !Exbankid.Contains(p.AccountHeadId) && p.AccountGroupId == 38).AsEnumerable() select cc).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = query[i].cc.AccountHeadId,
                                name = query[i].cc.AccountHead,
                            });
                        }
                    }
                    else
                    {
                        for (int i = 0; i < allbank.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = allbank[i].AccountHeadId,
                                name = allbank[i].AccountHead,
                            });
                        }
                    }


                    //MasterlistviewModel str1 = new MasterlistviewModel()
                    //{
                    //    id = null,
                    //    name = "Select Any"
                    //};

                    //Title.Insert(0, str1);


                }



                return Title;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        public static List<AutoCompleteModel> GetAutoCompleteProjectStaffList(string term)
        {
            try
            {

                List<AutoCompleteModel> staf = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    staf = (from C in context.vwCombineStaffDetails
                            where (string.IsNullOrEmpty(term) || C.Name.Contains(term) || C.EmployeeId.Contains(term))
                            && C.Category == "Project Staff"
                            orderby C.Name
                            select new AutoCompleteModel()
                            {
                                value = C.ID.ToString(),
                                label = C.Name + " - " + C.EmployeeId,
                            }).ToList();

                }

                return staf;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static string getGSTOffsetid()
        {
            try
            {
                var currhoid = 0;
                string seqnum = "";
                var context = new IOASDBEntities();
                var query = (from intern in context.tblGSTOffset
                             orderby intern.GSTOffsetid descending
                             select intern).FirstOrDefault();

                if (query != null)
                {
                    var gstid = query.GSTOffsetid;
                    currhoid = gstid + 1;
                    seqnum = currhoid.ToString("D6");
                    return seqnum;
                }
                else
                {
                    return seqnum;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ApprovalForGSTOffset(int GSTOffsetId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblGSTOffset.FirstOrDefault(m => m.GSTOffsetid == GSTOffsetId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool GSTOffsetListChallan(GSTOffsetChallanDetail model,int GSTOffsetId, int LoggedInUser)
        {
            bool update = false;
            tblGSTOffsetChallonDetails challan = new tblGSTOffsetChallonDetails();
            challan.FK_GSTOffsetid = GSTOffsetId;
            challan.CIN = model.GSTOffsetCINNumber;
            challan.DepositDate = model.DepositDate;
            challan.CreatedDate = DateTime.Now;
            challan.CreateUser = LoggedInUser.ToString();
            challan.Status = "Active";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblGSTOffsetChallonDetails.Add(challan);
                    context.SaveChanges();
                    update = true;
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ApprovalPendingForGSTOffset(int GSTOffsetId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblGSTOffset.FirstOrDefault(m => m.GSTOffsetid == GSTOffsetId);
                    if (query.Status == "Approval Pending")
                    {
                        query.Status = "Approved";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ValidateGSTOffsetOnEdit(int GSTOffsetId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblGSTOffset.FirstOrDefault(m => m.GSTOffsetid == GSTOffsetId && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<MasterlistviewModel> GetFunctionStatus(int funId)
        {

            try
            {
                List<MasterlistviewModel> status = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFunctionStatus.Where(x => x.FunctionId == funId).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            status.Add(new MasterlistviewModel()
                            {
                                id = query[i].FunctionId,
                                name = query[i].Status
                            });
                        }
                    }

                }
                return status;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> status = new List<MasterlistviewModel>();
                return status;
            }
        }
        public static string GetAccountHeadName(int headId)
        {
            try
            {
                string name = "";
                using (var context = new IOASDBEntities())
                {
                    var qryAN = context.tblAccountHead.FirstOrDefault(m => m.AccountHeadId == headId);
                    if (qryAN != null)
                    {
                        name = qryAN.AccountHead;
                    }
                }
                return name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string GetAccountHeadVariable(int headId)
        {
            try
            {
                string name = "";
                using (var context = new IOASDBEntities())
                {
                    var qryAN = context.tblAccountHead.FirstOrDefault(m => m.AccountHeadId == headId);
                    if (qryAN != null)
                    {
                        name = qryAN.VariableName;
                    }
                }
                return name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static string GetNegativeBalanceNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "NBL/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblNegativeBalance
                               where b.NegativeBalanceNumber.Contains(checkNum)
                               orderby b.NegativeBalanceId descending
                               select b.NegativeBalanceNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidateNegativeBalanceStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblNegativeBalance.FirstOrDefault(m => m.NegativeBalanceId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<AutoCompleteModel> GetProjectNumber(string term, int? pType = null)
        {
            try
            {

                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.tblProject
                           join D in context.vwFacultyStaffDetails on C.PIName equals D.UserId
                           where (C.ProjectNumber.Contains(term) || D.FirstName.Contains(term))
                             && (pType == null || C.ProjectType == pType)
                             && C.Status == "Active"
                           orderby C.ProjectNumber
                           select new AutoCompleteModel()
                           {
                               value = C.ProjectId.ToString(),
                               label = C.ProjectNumber + " - " + D.FirstName
                           }).ToList();

                }

                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static FellowShipModel GetAvailableBalance(string commitmentno)
        {
            FellowShipModel fellow = new FellowShipModel();
            try
            {

                using (var context = new IOASDBEntities())
                {
                    if (commitmentno != null)
                    {
                        fellow = (from H in context.tblCommitment
                                  join D in context.tblCommitmentDetails on H.CommitmentId equals D.CommitmentId
                                  where H.CommitmentNumber == commitmentno
                                  select new FellowShipModel()
                                  {
                                      AvailableBalance = D.BalanceAmount,
                                  }).FirstOrDefault();

                    }
                }
                return fellow;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static string getFellowShipid()
        {
            try
            {
                string seqnum = "";
                var checkNum = "FSP/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblFellowShip
                                 where intern.FellowShipNumber.Contains(checkNum)
                                 orderby intern.FellowShipId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.FellowShipNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ApprovalForFellowShip(int FellowId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFellowShip.FirstOrDefault(m => m.FellowShipId == FellowId);
                    if (query.Status == "Open" || query.Status == "Revised")
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = LoggedInUser;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                    var qry = context.tblFellowShipChangeLog.Where(m => m.FellowShipId == FellowId).OrderByDescending(m => m.RevisionSeqNbr).FirstOrDefault();
                    if (qry != null)
                    {
                        qry.Status = "Approval Pending";
                        qry.UPTD_By = LoggedInUser;
                        qry.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static bool ApprovalPendingForFellowShip(int FellowId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFellowShip.FirstOrDefault(m => m.FellowShipId == FellowId);
                    if (query.Status == "Approval Pending" || query.Status == "InActive")
                    {
                        query.Status = "Active";
                        query.UPTD_By = LoggedInUser;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                    var qry = context.tblFellowShipChangeLog.Where(m => m.FellowShipId == FellowId).OrderByDescending(m => m.RevisionSeqNbr).FirstOrDefault();
                    if (qry != null)
                    {
                        qry.Status = "Active";
                        qry.UPTD_By = LoggedInUser;
                        qry.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }

                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool InActiveForFellowShip(int FellowId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFellowShip.FirstOrDefault(m => m.FellowShipId == FellowId);
                    if (query.Status == "Active")
                    {
                        query.Status = "InActive";
                        query.UPTD_By = LoggedInUser;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                    var qry = context.tblFellowShipChangeLog.Where(m => m.FellowShipId == FellowId).OrderByDescending(m => m.RevisionSeqNbr).FirstOrDefault();
                    if (qry != null)
                    {
                        qry.Status = "InActive";
                        qry.UPTD_By = LoggedInUser;
                        qry.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }

                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ValidateFellowShipOnEdit(int FellowId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFellowShip.FirstOrDefault(m => m.FellowShipId == FellowId && (m.Status == "Open"));
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string getpayeename(int Payeeid)
        {
            try
            {
                var payname = "";
                List<FellowShipModel> model = new List<FellowShipModel>();
                using (var context = new IOASDBEntities())
                {

                    var query = (from c in context.vwFacultyStaffDetails
                                 where (c.UserId == Payeeid)
                                 select new
                                 {
                                     c.FirstName
                                 }).FirstOrDefault();
                    if (query != null)
                        payname = query.FirstName;


                }
                return payname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string getTDSPaymentid()
        {
            try
            {
                string seqnum = "";
                var checkNum = "TXP/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblTDSPayment
                                 where intern.TDSPaymentNumber.Contains(checkNum)
                                 orderby intern.tblTDSPaymentId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.TDSPaymentNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getcategory(int category)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblCodeControl.Where(m => m.CodeName == "TDSPaymentCategory" && (m.CodeValAbbr == category)).Select(m => m.CodeValDetail).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string getsection(int section)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAccountHead.Where(m => m.AccountHeadId == section).Select(m => m.AccountHead).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ApprovalForTDSPayment(int TDSPaymentId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTDSPayment.FirstOrDefault(m => m.tblTDSPaymentId == TDSPaymentId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ApprovalPendingForTDSPayment(int TDSPaymentId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTDSPayment.FirstOrDefault(m => m.tblTDSPaymentId == TDSPaymentId);
                    if (query.Status == "Submit for approval")
                    {
                        query.Status = "Approved";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ValidateTDSPaymentOnEdit(int TDSPaymentId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTDSPayment.FirstOrDefault(m => m.tblTDSPaymentId == TDSPaymentId && (m.Status == "Open" || m.Status == "Approved"));
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static bool ValidateForeignRemitOnEdit(int foreignRemitId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblForeignRemittance.FirstOrDefault(m => m.ForeignRemitId == foreignRemitId && m.TransactionTypeCode == "FRM" && (m.Status == "Open" || m.Status == "Active"));
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string getForeignRemitId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "FRM/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from t in context.tblForeignRemittance
                                 where t.ForeignRemitNumber.Contains(checkNum)
                                 orderby t.ForeignRemitId descending
                                 select t).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.ForeignRemitNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static decimal getBoaTransactionAmount(int id)
        {
            try
            {
                var context = new IOASDBEntities();
                var query = context.tblBOATransaction.Where(m => m.BOATransactionId == id).Select(m => m.Amount).FirstOrDefault();
                if (query != null)
                {
                    return Convert.ToDecimal(query);
                }
                else
                {
                    return Convert.ToDecimal(query);
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static List<AutoCompleteModel> GetStaffname(string term)
        {
            List<AutoCompleteModel> ManDay = new List<AutoCompleteModel>();
            try
            {

                using (var context = new IOASDBEntities())
                {

                    ManDay = (from H in context.vwCombineStaffDetails

                              where H.Name.Contains(term) && H.Category == "Staff"
                              select new AutoCompleteModel()
                              {
                                  label = H.EmployeeId + "-" + H.Name,
                                  value = H.ID.ToString(),
                                  desc = H.DepartmentName,
                                  icon = H.DepartmentCode
                              }).ToList();



                }
                return ManDay;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static string getmandayid()
        {
            try
            {
                string seqnum = "";
                var checkNum = "MDY/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblManDay
                                 where intern.ManDayNumber.Contains(checkNum)
                                 orderby intern.ManDayId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.ManDayNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getdepname(string deptcode)
        {
            try
            {
                string dep = "";
                var context = new IOASDBEntities();
                var query = (from intern in context.vwCombineStaffDetails
                             where intern.DepartmentCode == deptcode
                             select new { intern.DepartmentName }).FirstOrDefault();

                if (query != null)
                {
                    dep = query.DepartmentName;
                    return dep;
                }
                else
                {
                    return dep;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static List<ManDayListmodel> ValidateManDay(int projid, int days, DateTime monyr, int mandayid = 0)
        {
            List<ManDayListmodel> ManDay = new List<ManDayListmodel>();
            try
            {

                using (var context = new IOASDBEntities())
                {
                    if (projid != 0)
                    {

                        var query = (from H in context.tblManDayDetails
                                     where ((H.MonthYear == monyr) && (H.StaffId == projid) && (!(H.ManDayId == mandayid) || (mandayid == 0)))
                                     select new
                                     {
                                         H.NoofDays
                                     }).ToList();

                        if (query.Count == 0)
                        {
                            ManDay.Add(new ManDayListmodel()
                            {
                                errmsgid = 1
                            });
                        }
                        if (query.Count > 0)
                        {

                            for (int i = 0; i < query.Count; i++)
                            {
                                ManDay.Add(new ManDayListmodel()
                                {
                                    NoOfDays = query[i].NoofDays
                                });
                            }




                        }

                    }
                }
                return ManDay;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static bool ApprovalForManDay(int Mandayid, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblManDay.FirstOrDefault(m => m.ManDayId == Mandayid);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ApprovalPendingForManDay(int Mandayid, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblManDay.FirstOrDefault(m => m.ManDayId == Mandayid);
                    if (query.Status == "Approval Pending")
                    {
                        query.Status = "Approved";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ValidateManDayOnEdit(int Mandayid)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblManDay.FirstOrDefault(m => m.ManDayId == Mandayid && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<MasterlistviewModel> GetAllYearMonths()
        {
            List<MasterlistviewModel> List = new List<MasterlistviewModel>();
            int Year = DateTime.Now.Year;
            for (int i = 1; i <= 12; i++)
            {
                List.Add(new MasterlistviewModel()
                {
                    id = i,
                    name = DateTimeFormatInfo.CurrentInfo.GetMonthName(i).Substring(0, 3) + " - " + Year.ToString()
                });

            }
            return List;
        }

        public static string getAgencyEmployeeName(string EmployeeID)
        {
            try
            {
                var Name = "";
                using (var context = new IOASDBEntities())
                {
                    var query = context.vwTandM.FirstOrDefault(m => m.EmployeeId == EmployeeID).EmployeeName;
                    if (query != null)
                        Name = query;
                }
                return Name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }

        public static Tuple<string, int> getAgencySalarySequenceNumber()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "SLA/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblAgencySalary
                               where (b.PaymentNo.Contains(checkNum))
                               orderby b.SqquenceNo descending
                               select b.PaymentNo).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return Tuple.Create(checkNum + seqnum.ToString("000000"), seqnum);
                    }
                    else
                    {
                        return Tuple.Create(checkNum + "000001", 1);
                    }

                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static string getAgencySalaryPaymentMonth(int agencySalaryId)
        {
            try
            {
                var month = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    month = context.tblAgencySalary.FirstOrDefault(m => m.AgencySalaryId == agencySalaryId).MonthYearStr;

                    return month;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static Decimal getAgencySalaryTotalAmount(int agencySalaryId)
        {
            try
            {
                decimal amt = 0;

                using (var context = new IOASDBEntities())
                {
                    amt = context.tblAgencyVerifiedSalary.Where(m => m.AgencySalaryId == agencySalaryId).Sum(m => m.Netsalary ?? 0);

                    return amt;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string getPaymentNo(int AgencyID)
        {
            try
            {
                string payNo = "";
                using (var context = new IOASDBEntities())
                {
                    var Month = DateTime.Now.Month;
                    var qryAgency = (from b in context.tblAgencySalary
                                     where b.AgencySalaryId == AgencyID
                                     select b).FirstOrDefault();
                    if (qryAgency != null)
                    {
                        payNo = qryAgency.PaymentNo;
                    }
                }
                return payNo;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static decimal getSumNetSalary(int AgencyID)
        {
            try
            {
                decimal Amount = 0;
                using (var context = new IOASDBEntities())
                {
                    var Month = DateTime.Now.Month;
                    var qryAmount = (from b in context.tblAgencySalary
                                     where b.AgencySalaryId == AgencyID
                                     select b.TotalAmount).FirstOrDefault();
                    if (qryAmount != null || qryAmount != 0)
                    {
                        Amount = qryAmount ?? 0;
                    }
                }
                return Amount;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static string GetFinancialYear(int FinYear)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.tblFinYear.Where(m => m.FinYearId == FinYear).Select(m => m.Year).FirstOrDefault();
                    return qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static int GetFinancialYearId(string FinYear)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.tblFinYear.Where(m => m.Year == FinYear).Select(m => m.FinYearId).FirstOrDefault();
                    return qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<MasterlistviewModel> GetBankAccount()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    int[] id = { 38, 61 };
                    List = (from C in context.tblAccountHead
                            where id.Contains(C.AccountGroupId ?? 0)
                            orderby C.AccountHeadId
                            select new MasterlistviewModel()
                            {
                                id = C.AccountHeadId,
                                name = C.AccountHead
                            }).ToList();
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }
        }
        public static string GetBankName(int BankId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.tblAccountHead.Where(m => m.AccountHeadId == BankId).Select(m => m.AccountHead).FirstOrDefault();
                    return qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewOHPNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "OHP/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblOverheadsPosting
                               where (b.OverheadsPostingNumber.Contains(checkNum))
                               orderby b.OverheadsPostingId descending
                               select b.OverheadsPostingNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<MasterlistviewModel> GetCommitmentNumberList(int Projectid)
        {
            try
            {

                List<MasterlistviewModel> comit = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCommitment
                                 where C.ProjectId == Projectid
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            comit.Add(new MasterlistviewModel()
                            {
                                id = query[i].CommitmentId,
                                name = query[i].CommitmentNumber,
                            });
                        }
                    }
                }
                return comit;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> comit = new List<MasterlistviewModel>();
                return comit;
            }

        }

        public static List<MasterlistviewModel> GetOHPostingBankAccountGroup()
        {
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    List = (from C in context.tblAccountGroup
                            where C.AccountGroupId == 38
                            orderby C.AccountGroup
                            select new MasterlistviewModel()
                            {
                                id = C.AccountGroupId,
                                name = C.AccountGroup
                            }).ToList();
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }
        }
        public static string GetNewReceiptNumber(string type = "RCV")
        {
            try
            {
                var srbNum = string.Empty;
                var checkNum = type + "/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from r in context.tblReceipt
                               where (r.ReceiptNumber.Contains(checkNum))
                               orderby r.ReceiptId descending
                               select r.ReceiptNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewHeadCreditNumber()
        {
            try
            {
                var srbNum = string.Empty;
                var checkNum = "HCR/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from r in context.tblHeadCredit
                               where (r.HeadCreditNumber.Contains(checkNum))
                               orderby r.HeadCreditId descending
                               select r.HeadCreditNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<MasterlistviewModel> GetBankList(int Classificationcode, int projecttype = 0, int projectscheme = 0, string category = null)
        {
            try
            {
                List<MasterlistviewModel> pjct = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblBankAccountMapping
                                 where U.ClassificationCode == Classificationcode && (U.ProjectType == projecttype || projecttype == 0)
                                 && (U.ProjectScheme == projectscheme || projectscheme == 0) && (U.CategoryName == category || category == null || category == "")
                                 select U).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            pjct.Add(new MasterlistviewModel()
                            {
                                id = query[i].BankAccountId,
                                name = query[i].BankName
                            });
                        }
                    }

                }
                return pjct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                return User;
            }
        }
        public static string GetNewDOPNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "DOP/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblPCFDistribution
                               where (b.ReferenceNumber.Contains(checkNum))
                               orderby b.Id descending
                               select b.ReferenceNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<MasterlistviewModel> GetPaymentNumberListbyType(int paymenttype)
        {
            try
            {

                List<MasterlistviewModel> Numberlist = new List<MasterlistviewModel>();
                Numberlist.Add(new MasterlistviewModel()
                {
                    id = null,
                    name = "Select Any"
                });
                using (var context = new IOASDBEntities())
                {
                    if (paymenttype == 1)
                    {
                        var query = (from C in context.tblDistribution
                                     orderby C.DistributionId
                                     select C).ToList();
                        for (int i = 0; i < query.Count(); i++)
                        {
                            Numberlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].DistributionId,
                                name = query[i].DistributionNumber,
                            });
                        }
                    }
                    if (paymenttype == 2)
                    {
                        var query = (from C in context.tblHonororium
                                     orderby C.HonororiumId
                                     select C).ToList();
                        for (int i = 0; i < query.Count(); i++)
                        {
                            Numberlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].HonororiumId,
                                name = query[i].HonororiumNo,
                            });
                        }
                    }
                    if (paymenttype == 3)
                    {
                        var query = (from C in context.tblReceipt
                                     join P in context.tblProject on C.ProjectId equals P.ProjectId
                                     where C.ReceiptNumber.Contains("RCV") && C.Status == "Completed" && P.ProjectType == 2
                                     orderby C.ReceiptId
                                     select C).ToList();
                        for (int i = 0; i < query.Count(); i++)
                        {
                            Numberlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].ReceiptId,
                                name = query[i].ReceiptNumber,
                            });
                        }
                    }

                }

                return Numberlist;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetAllBankList()
        {
            try
            {
                List<MasterlistviewModel> pjct = new List<MasterlistviewModel>();
                pjct.Add(new MasterlistviewModel()
                {
                    id = null,
                    name = "Select Any"
                });
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblBankAccountMapping
                                 orderby U.Id
                                 select U).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            pjct.Add(new MasterlistviewModel()
                            {
                                id = query[i].BankAccountId,
                                name = query[i].BankName
                            });
                        }
                    }

                }
                return pjct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                return User;
            }
        }
        public static Int32 GetAccountGroupIdbyAcId(int accountheadid)
        {
            try
            {
                Int32 gId = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAccountHead.FirstOrDefault(m => m.AccountHeadId == accountheadid);
                    if (query != null)
                        gId = Convert.ToInt32(query.AccountGroupId);
                    return gId;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static List<MasterlistviewModel> GetProjectNumbers()
        {
            try
            {
                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();
                Title.Add(new MasterlistviewModel()
                {
                    id = null,
                    name = "",
                });
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join U in context.vwFacultyStaffDetails on C.PIName equals U.UserId
                                 where C.Status == "Active"
                                 orderby C.ProjectId
                                 select new { U.FirstName, C }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.ProjectId,
                                name = query[i].C.ProjectNumber + "-" + query[i].C.ProjectTitle + "- " + query[i].FirstName,
                            });
                        }
                    }

                }

                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static string getinstituteclaimsid()
        {
            try
            {
                var checkNum = "RIC/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblInstituteClaims
                                 where intern.InstituteClaimsNumber.Contains(checkNum)
                                 orderby intern.InstituteClaimsId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.InstituteClaimsNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "";
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string getreceiptinstituteclaimsid()
        {
            try
            {
                var checkNum = "CRE/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblReceiptClaim
                                 where intern.ReceiptClaimsNumber.Contains(checkNum)
                                 orderby intern.ReceiptClaimsId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.ReceiptClaimsNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "";
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string GetClaimType(int id)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblCodeControl.Where(m => m.CodeName == "ClaimType" && m.CodeValAbbr == id).Select(m => m.CodeValDetail).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ApprovalForInstituteClaims(int InsClaimId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblInstituteClaims.FirstOrDefault(m => m.InstituteClaimsId == InsClaimId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ApprovalPendingForInstituteClaims(int InsClaimId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblInstituteClaims.FirstOrDefault(m => m.InstituteClaimsId == InsClaimId);
                    if (query.Status == "Approval Pending")
                    {
                        query.Status = "Active";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static decimal GetClaimValue(int Id)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblInstituteClaims.Where(m => m.InstituteClaimsId == Id).Select(m => m.ClaimAmount).FirstOrDefault();
                    return Convert.ToDecimal(query);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<MasterlistviewModel> GetProjectNumberList()
        {
            try
            {
                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join U in context.vwFacultyStaffDetails on C.PIName equals U.UserId
                                 where C.Status == "Active"
                                 orderby C.ProjectId
                                 select new { U.FirstName, C }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.ProjectId,
                                name = query[i].C.ProjectNumber + "-" + query[i].C.ProjectTitle + "- " + query[i].FirstName,
                            });
                        }
                    }

                }



                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static int GetCommitmentSequenceno()
        {
            try
            {
                int seqNo = 0;
                var checkNum = "COM/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction(IsolationLevel.ReadCommitted))
                    {
                        var num = (from b in context.tblCommitment
                                   where (b.CommitmentNumber.Contains(checkNum))
                                   select b).Max(m => m.SequenceNo) ?? 0;

                        if (num > 0)
                        {
                            seqNo = num + 1;
                        }
                        else
                        {
                            seqNo = 1;
                        }
                    }
                }
                return seqNo;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<InstituteClaims> GetComitmentNo(int projid)
        {
            List<InstituteClaims> fellow = new List<InstituteClaims>();
            try
            {
                fellow.Add(new InstituteClaims()
                {
                    ViewBagCommitNo = "Select CommitmentNumber",
                    ViewBagCommitId = 0
                });
                using (var context = new IOASDBEntities())
                {
                    if (projid != 0)
                    {
                        var query = (from H in context.tblProject
                                     join P in context.tblCommitment on H.ProjectId equals P.ProjectId
                                     join D in context.tblCommitmentDetails on P.CommitmentId equals D.CommitmentId
                                     where H.ProjectId == projid && D.BalanceAmount > 0
                                     select new
                                     {
                                         P.CommitmentNumber,
                                         P.CommitmentId

                                     }).ToList();

                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                fellow.Add(new InstituteClaims()
                                {
                                    ViewBagCommitNo = query[i].CommitmentNumber,
                                    ViewBagCommitId = query[i].CommitmentId
                                });
                            }
                        }
                    }
                }
                return fellow;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static decimal GetSpendBalance(int commitmentid)
        {
            InstituteClaims fellow = new InstituteClaims();
            try
            {
                decimal AmountSpend = 0;
                using (var context = new IOASDBEntities())
                {
                    if (commitmentid > 0)
                    {
                        var qry = (from H in context.vwCommitmentSpentBalance
                                   where H.CommitmentId == commitmentid
                                   select new
                                   {
                                       H.AmountSpent,
                                   }).ToList();
                        AmountSpend = qry.Select(m => m.AmountSpent).Sum() ?? 0;

                    }
                }
                return AmountSpend;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }

        public static string GetFellowshipSalaryId()
        {
            try
            {
                var checkNum = "FSS/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblFellowshipSalary
                                 where intern.FellowshipSalaryNumber.Contains(checkNum)
                                 orderby intern.FellowshipSalaryId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.FellowshipSalaryNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "";
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ApprovalForFellowshipSalary(int FellowShipSalId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFellowshipSalary.FirstOrDefault(m => m.FellowshipSalaryId == FellowShipSalId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static int GetCommitment(string Commitno)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.tblCommitment.Where(m => m.CommitmentNumber == Commitno).Select(m => m.CommitmentId).FirstOrDefault();
                    return qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetCodeControlName(int id, string codeName)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblCodeControl.Where(m => m.CodeName == codeName && m.CodeValAbbr == id).Select(m => m.CodeValDetail).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetCodeControlDes(int id, string codeName)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblCodeControl.Where(m => m.CodeName == codeName && m.CodeValAbbr == id).Select(m => m.CodeDescription).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetCommonHeadCode(int headId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblCommonHeads.Where(m => m.HeadId == headId && m.Status != "InActive").Select(m => m.Code).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetCommonHeadName(int headId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblCommonHeads.Where(m => m.HeadId == headId && m.Status != "InActive").Select(m => m.Head).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetSubLeadgerType(int id)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {

                    var qry = context.tblCodeControl.Where(m => m.CodeName == "SubLedgerType" && m.CodeValAbbr == id).Select(m => m.CodeValDetail).FirstOrDefault();
                    return qry;
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string GetStaffandPiName(int userid, int id)
        {
            try
            {
                var Name = "";
                var Category = "";
                if (id == 3)
                {
                    Category = "Professor";
                }
                else if (id == 7) { Category = "Staff"; }
                using (var context = new IOASDBEntities())
                {
                    var qry = context.vwCombineStaffDetails.Where(m => m.ID == userid && m.Category == Category).Select(m => m.ID + "-" + m.Name).FirstOrDefault();
                    return qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetInstituteSalaryId()
        {
            try
            {
                var checkNum = "IMS/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var query = (from intern in context.tblInstituteSalaryPayment
                                 where intern.InstituteSalaryPaymentNumber.Contains(checkNum)
                                 orderby intern.InstituteSalaryPaymentId descending
                                 select intern).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.InstituteSalaryPaymentNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "";
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static string GetBudgetHeadName(int allocationid)
        {
            try
            {
                string headname = "";
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBudgetHead.Where(B => B.BudgetHeadId == allocationid).Select(B => B).FirstOrDefault();
                    if (query != null)
                    {
                        headname = query.HeadName;
                    }
                }
                return headname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                string headname = "";
                return headname;
            }
        }
        public static List<AutoCompleteModel> GetAutoMainProjectNumberList(string term, int type)
        {
            try
            {
                List<AutoCompleteModel> Title = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join U in context.vwFacultyStaffDetails on C.PIName equals U.UserId
                                 where C.Status == "Active" && C.IsSubProject != true && C.ProjectType == type
                                 && C.ProjectNumber.Contains(term)
                                 orderby C.ProjectId
                                 select new { U.FirstName, C }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new AutoCompleteModel()
                            {
                                value = query[i].C.ProjectId.ToString(),
                                label = query[i].C.ProjectNumber + "-" + query[i].C.ProjectTitle + "- " + query[i].FirstName,
                            });
                        }
                    }

                }



                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<MasterlistviewModel> GetBankAccountNumberList(int Classificationcode, int projecttype = 0, int projectscheme = 0, string category = null, int BankID = 0)
        {
            try
            {
                List<MasterlistviewModel> bank = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblImportPaymentBankMapping
                                 where U.ClassificationCode == Classificationcode && (U.ProjectType == projecttype)
                                 && (U.ProjectScheme == projectscheme) && (U.CategoryName == category || category == null || category == "") && (U.BankAccountId == BankID || BankID == 0)
                                 select U).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            bank.Add(new MasterlistviewModel()
                            {
                                id = query[i].BankAccountId,
                                name = query[i].BankAccountNumber
                            });
                        }
                    }
                }
                return bank;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> bank = new List<MasterlistviewModel>();
                return bank;
            }
        }
        public static List<AutoCompleteModel> GetUserName(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblUser
                                 where string.IsNullOrEmpty(term) || C.FirstName.Contains(term) || C.LastName.Contains(term) || C.UserName.Contains(term)
                                 orderby C.UserId
                                 select new { C.FirstName, C.LastName, C.UserName, C.UserId }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].UserId.ToString(),
                                label = query[i].FirstName + " " + query[i].LastName + "-" + query[i].UserName
                            });
                        }
                    }
                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<AutoCompleteModel> listWF = new List<AutoCompleteModel>();
                return listWF;
            }

        }

        public static bool GetUserIdBasedOnRole(int id = 0)
        {
            bool value = false;
            try
            {
                using (var Context = new IOASDBEntities())
                {
                    int[] Role = { 1, 2, 3, 4, 5, 6, 7 };
                    var qry = (from C in Context.tblUser
                               where Role.Contains(C.RoleId ?? 0)
                               select C.UserId
                               ).ToArray();
                    if (qry.Contains(id))
                    {
                        value = true;
                    }
                    return value;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return value;
            }
        }
        public static List<MasterlistviewModel> GetOHProjectNumberList(int Classificationid)
        {
            try
            {
                List<MasterlistviewModel> pjct = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblProject
                                 where (U.ProjectClassification == Classificationid)
                                 select new { U.ProjectId, U.ProjectNumber }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            pjct.Add(new MasterlistviewModel()
                            {
                                id = query[i].ProjectId,
                                name = query[i].ProjectNumber
                            });
                        }
                    }

                }
                return pjct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                return User;
            }
        }
        public static bool GetApproverBasedonRole(int RoleId, int FunctionId)
        {
            bool value = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.tblRoleaccess.Where(m => m.RoleId == RoleId && m.FunctionId == FunctionId).FirstOrDefault();
                    if (qry != null)
                    {
                        if (qry.Approve_f == true)
                        {
                            value = true;
                        }
                    }
                }
                return value;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return value;
            }
        }
        public static List<MasterlistviewModel> GetForgnCommitmentNumberList(int Projectid)
        {
            try
            {

                List<MasterlistviewModel> comit = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCommitment
                                 join D in context.tblCommitmentDetails on C.CommitmentId equals D.CommitmentId
                                 where C.ProjectId == Projectid && C.Status == "Active"
                                 && D.BalanceAmount > 0 && C.CommitmentType == 5
                                 select C).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            comit.Add(new MasterlistviewModel()
                            {
                                id = query[i].CommitmentId,
                                name = query[i].CommitmentNumber,
                            });
                        }
                    }
                }
                return comit;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> comit = new List<MasterlistviewModel>();
                return comit;
            }

        }
        public static string getLCDraftId()
        {
            try
            {
                var finyear = GetCurrentFinYearId();
                var checkNum = "LCO/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from t in context.tblLCDraftDetails
                                 where t.FinancialYear == finyear && t.LCReferenceNumber.Contains(checkNum)
                                 select t.SequenceNumber).Max();

                    if (query != null)
                    {
                        var seqnum = Convert.ToInt32(query);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "";
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ValidateLCOnEdit(int LCDraftId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCDraftDetails.FirstOrDefault(m => m.Id == LCDraftId && m.TransactionTypeCode == "LCO" && m.Status == "Draft LC");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateLCEstablishOnEdit(int LCDraftId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCDraftDetails.FirstOrDefault(m => m.Id == LCDraftId && m.TransactionTypeCode == "LCO" && m.Status == "Establish LC Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static BankAccountModel GetBankAccountNumber(int BankId)
        {
            try
            {
                BankAccountModel Detail = new BankAccountModel();

                using (var context = new IOASDBEntities())
                {
                    var bank = (from P in context.tblBankAccountMapping
                                where P.BankAccountId == BankId
                                select P).FirstOrDefault();
                    if (bank != null)
                    {
                        Detail.BankAccountNumber = bank.BankAccountNumber;
                    }

                    return Detail;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                BankAccountModel Detail = new BankAccountModel();
                return Detail;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteLCNumberList(string term, int? type = null, int? classification = null)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {

                    list = (from P in context.tblLCDraftDetails
                            where (string.IsNullOrEmpty(term) || P.DraftLCNumber.Contains(term) || P.PONumber.Contains(term))
                             && (P.Status == "Established" || P.Status == "LC Amended")
                            select new AutoCompleteModel()
                            {
                                value = P.Id.ToString(),
                                label = P.DraftLCNumber + "-" + P.PONumber
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }

        public static bool ValidateLCAmmendmentOnEdit(int LCAmmendId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCAmmendment.FirstOrDefault(m => m.Id == LCAmmendId && m.TransactionTypeCode == "LCA" && m.Status != "InActive");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateLCRetirementOnEdit(int LCRetirementId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCRetirement.FirstOrDefault(m => m.Id == LCRetirementId && m.TransactionTypeCode == "LCR" && m.Status == "Retirement Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<AutoCompleteModel> GetRetireAutoCompleteLCNumberList(string term, int? type = null, int? classification = null)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {

                    list = (from P in context.tblLCDraftDetails
                            where (string.IsNullOrEmpty(term) || P.DraftLCNumber.Contains(term) || P.PONumber.Contains(term))
                             && (P.Status == "LC Amended" || P.Status == "Established" || P.Status == "Retirement Open")
                            select new AutoCompleteModel()
                            {
                                value = P.Id.ToString(),
                                label = P.DraftLCNumber + "-" + P.PONumber
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static Tuple<int, int> GetFRMCommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblForeignRemitCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.ForeignRemitId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string getLCRetireId()
        {
            try
            {
                var finyear = GetCurrentFinYearId();
                var checkNum = "LCR/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from t in context.tblLCRetirement
                                 where t.FinancialYear == finyear && t.ReferenceNumber.Contains(checkNum)
                                 select t.SequenceNumber).Max();

                    if (query != null)
                    {
                        var seqnum = Convert.ToInt32(query);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "";
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static bool ValidateFinalLCRetirementOnEdit(int LCRetirementId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCRetirement.FirstOrDefault(m => m.Id == LCRetirementId && m.TransactionTypeCode == "LCR" && m.Status == "Final Retirement Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string GetUserNameBasedonId(int UserId)
        {

            var context = new IOASDBEntities();
            var query = (from U in context.tblUser
                         where U.UserId == UserId && U.Status == "Active"
                         select U).FirstOrDefault();
            var Username = "";
            if (query != null)
            {
                Username = query.UserName + " - " + query.FirstName + " " + query.LastName;
            }


            return Username;

        }
        public static PayableListModel GetBankDetailsFromStaffBankAccount(int id, string type)
        {
            PayableListModel model = new PayableListModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.tblStaffBankAccount.Where(H => H.UserId == id && H.Category == type).FirstOrDefault();
                    if (Qry != null)
                    {
                        model.Name = Qry.Name;
                        model.Bank = Qry.BankName;
                        model.AccNo = Qry.AccountNumber;
                        model.IFSC = Qry.IFSCCode;
                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }
        }
        public static PayableListModel GetBankDetailsForStudent(string Roll, string typecode, int refid)
        {
            PayableListModel model = new PayableListModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from a in context.tblPayment
                               join b in context.tblPaymentPayee on a.PaymentId equals b.PaymentId
                               where a.TransactionTypeCode == typecode && a.ReferenceId == refid
                               && (b.StudentRoll == Roll)
                               select new
                               {
                                   b.PayeeBank,
                                   b.IFSC,
                                   b.AccountNumber,
                                   b.Branch
                               }).FirstOrDefault();
                    if (Qry != null)
                    {
                        model.Bank = Qry.PayeeBank;
                        model.AccNo = Qry.AccountNumber;
                        model.IFSC = Qry.IFSC;
                    }
                    var Qry2 = context.tblStaffBankAccount.Where(H => H.EmployeeId == Roll && H.Category == "Student").FirstOrDefault();
                    if (Qry2 != null)
                    {
                        model.Name = Qry2.Name;
                        model.Bank = Qry2.BankName;
                        model.AccNo = Qry2.AccountNumber;
                        model.IFSC = Qry2.IFSCCode;
                    }
                    return model;
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }
        }
        public static PayableListModel GetBankDetailsFromPayment(string typecode, int refid, int id, string type, string name)
        {
            PayableListModel model = new PayableListModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from a in context.tblPayment
                               join b in context.tblPaymentPayee on a.PaymentId equals b.PaymentId
                               where a.TransactionTypeCode == typecode && a.ReferenceId == refid
                               && (b.PayeeId == id || b.PayeeId == 0 || b.PayeeId == null) && (b.PayeeType == type || String.IsNullOrEmpty(b.PayeeType)) && (b.PayeeName == name || String.IsNullOrEmpty(name))
                               && (b.PayeeId == id || b.PayeeName == name)
                               select new
                               {
                                   b.PayeeBank,
                                   b.IFSC,
                                   b.AccountNumber,
                                   b.Branch
                               }).FirstOrDefault();
                    if (Qry != null)
                    {
                        model.Bank = Qry.PayeeBank;
                        model.AccNo = Qry.AccountNumber;
                        model.IFSC = Qry.IFSC;
                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }
        }
        public static bool UpdateExternalInvoice(int invoiceId, bool statusOnly = false)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (statusOnly)
                    {
                        var query = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == invoiceId);
                        using (var extContext = new IOASExternal.DataModel.IOASExternalEntities())
                        {
                            var extQuery = extContext.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == query.ExternalRefId);
                            if (query != null && extQuery != null)
                            {
                                extQuery.Status = query.Status;
                                extQuery.UpdtUserId = query.UpdtUserId;
                                extQuery.UpdtTS = query.UpdtTS;
                                context.SaveChanges();
                                return true;
                            }
                            else
                                return false;
                        }
                    }
                    else
                    {
                        var query = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == invoiceId);
                        var taxQuery = context.tblInvoiceTaxDetails.FirstOrDefault(m => m.InvoiceId == invoiceId);
                        if (query != null && taxQuery != null)
                        {
                            using (var extContext = new IOASExternal.DataModel.IOASExternalEntities())
                            {
                                var extQuery = extContext.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == query.ExternalRefId);
                                var extTaxQuery = extContext.tblInvoiceTaxDetails.FirstOrDefault(m => m.InvoiceId == query.ExternalRefId);
                                if (extQuery != null && extTaxQuery != null)
                                {

                                    extQuery.UpdtUserId = query.UpdtUserId;
                                    extQuery.UpdtTS = query.UpdtTS;
                                    extQuery.PONumber = query.PONumber;
                                    extQuery.InvoiceType = query.InvoiceType;
                                    extQuery.InvoiceDate = query.InvoiceDate;
                                    //extQuery.ProjectId = query.ProjectId;
                                    extQuery.Status = query.Status;
                                    //extQuery.PIId = query.PIId;
                                    extQuery.ReverseCharge = query.ReverseCharge;
                                    extQuery.TaxCode = query.TaxCode;
                                    extQuery.AgencyId = query.AgencyId;
                                    extQuery.ServiceType = query.ServiceType;
                                    extQuery.DescriptionofServices = query.DescriptionofServices;
                                    extQuery.CommunicationAddress = query.CommunicationAddress;
                                    extQuery.AgencyContactPersonEmail = query.AgencyContactPersonEmail;
                                    extQuery.AgencyContactPersonName = query.AgencyContactPersonName;
                                    extQuery.AgencyContactPersonNumber = query.AgencyContactPersonNumber;
                                    extQuery.AgencyDistrict = query.AgencyDistrict;
                                    extQuery.AgencyPincode = query.AgencyPincode;
                                    extQuery.AgencyRegTAN = query.AgencyRegTAN;
                                    extQuery.AgencyCountry = query.AgencyCountry;
                                    extQuery.TaxableValue = query.TaxableValue;
                                    extQuery.CurrencyCode = query.CurrencyCode;
                                    extQuery.CurrencyId = query.CurrencyId;
                                    extQuery.InvoiceValueinForeignCurrency = query.InvoiceValueinForeignCurrency;
                                    extQuery.InstalmentNumber = query.InstalmentNumber;
                                    extQuery.InstalmentYear = query.InstalmentYear;
                                    extQuery.TotalInvoiceValue = query.TotalInvoiceValue;
                                    extQuery.TotalInvoiceValueinWords = query.TotalInvoiceValueinWords;
                                    extQuery.Bank = query.Bank;
                                    extQuery.BankAccountNumber = query.BankAccountNumber;
                                    extQuery.AgencyRegName = query.AgencyRegName;
                                    extQuery.AgencyRegState = query.AgencyRegState;
                                    extQuery.AgencyRegStateCode = query.AgencyRegStateCode;
                                    extQuery.AgencyRegGSTIN = query.AgencyRegGSTIN;
                                    extQuery.AgencyRegPAN = query.AgencyRegPAN;
                                    extQuery.CurrencyCode = query.CurrencyCode;
                                    extQuery.CurrencyId = query.CurrencyId;
                                    extQuery.InvoiceValueinForeignCurrency = query.InvoiceValueinForeignCurrency;
                                    extQuery.IndianSEZTaxCategory = query.IndianSEZTaxCategory;
                                    extQuery.ForeignAgencyPlace = query.ForeignAgencyPlace;

                                    extTaxQuery.CGSTRate = taxQuery.CGSTRate;
                                    extTaxQuery.CGSTAmount = taxQuery.CGSTAmount;
                                    extTaxQuery.SGSTRate = taxQuery.SGSTRate;
                                    extTaxQuery.SGSTAmount = taxQuery.SGSTAmount;
                                    extTaxQuery.IGSTRate = taxQuery.IGSTRate;
                                    extTaxQuery.IGSTAmount = taxQuery.IGSTAmount;
                                    extTaxQuery.CrtdTS = taxQuery.CrtdTS;
                                    extTaxQuery.CrtdUserId = taxQuery.CrtdUserId;
                                    extTaxQuery.TotalTaxValue = taxQuery.TotalTaxValue;

                                    extContext.SaveChanges();
                                    return true;
                                }
                                else
                                    return false;

                            }
                        }
                        else
                            return false;
                    }
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public static string GetAllocationHead(int HeadId)
        {
            var Head = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    Head = context.tblBudgetHead.Where(m => m.BudgetHeadId == HeadId).Select(m => m.HeadName).FirstOrDefault();
                    return Head;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Head;
            }
        }

        public static List<MasterlistviewModel> GetBankCategory()
        {
            try
            {
                List<MasterlistviewModel> code = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblCodeControl
                                 where c.CodeName == "BankAccountCategory"
                                 select new { c.CodeValAbbr, c.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            code.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return code;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> code = new List<MasterlistviewModel>();
                return code;
            }
        }
        public static List<MasterlistviewModel> GetBankName()
        {

            try
            {
                List<MasterlistviewModel> bankcode = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblCodeControl
                                 where c.CodeName == "EmpolyeeBankName"
                                 select new { c.CodeValAbbr, c.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            bankcode.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                    return bankcode;
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> bankcode = new List<MasterlistviewModel>();
                return bankcode;
            }
        }
        public static List<string> GetCCList(int bankId, string typeCode, string refNo)
        {
            try
            {
                List<string> cc = new List<string>();
                string ccMail = WebConfigurationManager.AppSettings["defaultCCMail"];
                cc.Add(ccMail);
                if (bankId == 20)
                    cc.Add(WebConfigurationManager.AppSettings["NONPFMSMail"]);
                else if (bankId == 146)
                    cc.Add(WebConfigurationManager.AppSettings["ICSROHMail"]);
                else if (bankId == 147)
                    cc.Add(WebConfigurationManager.AppSettings["RFMail"]);
                else if (bankId == 148)
                {
                    cc.Add(WebConfigurationManager.AppSettings["PFMSMail"]);
                    //Commented by Nandhini for #7810
                    //  cc.Add(WebConfigurationManager.AppSettings["SecondaryPFMSMail"]);
                }
                else if (bankId == 149)
                    cc.Add(WebConfigurationManager.AppSettings["ConsMail"]);
                else if (bankId == 150)
                    cc.Add(WebConfigurationManager.AppSettings["ImportMail"]);
                else if (bankId == 151)
                    cc.Add(WebConfigurationManager.AppSettings["PCFMail"]);
                else if (bankId == 152)
                    cc.Add(WebConfigurationManager.AppSettings["RMFMail"]);
                if (typeCode == "TAD" || typeCode == "DTV" || typeCode == "TST")
                    cc.Add(WebConfigurationManager.AppSettings["TravelMail"]);
                if (typeCode == "CLV")
                {
                    cc.Add(WebConfigurationManager.AppSettings["CPLMail"]);
                    cc.Add(WebConfigurationManager.AppSettings["PurchaseDeptMail"]);
                }
                if (typeCode != "SLA")
                {
                    using (var context = new IOASDBEntities())
                    {
                        //var query = (from exp in context.vw_ProjectExpenditureReport.AsNoTracking()
                        //             join p in context.tblProject on exp.ProjectId equals p.ProjectId
                        //             join U in context.vwFacultyStaffDetails on p.PIName equals U.UserId
                        //             where exp.BillNumber == refNo
                        //             group U by U.Email into g
                        //             select new { Email = g.Key }).ToList();

                        /* Payment Process Mail issue */
                        var query = (from bcd in context.tblBOACommitmentDetail
                                     join cd in context.tblCommitmentDetails on bcd.CommitmentDetailId equals cd.ComitmentDetailId
                                     join c in context.tblCommitment on cd.CommitmentId equals c.CommitmentId
                                     join p in context.tblProject on c.ProjectId equals p.ProjectId
                                     join U in context.vwFacultyStaffDetails on p.PIName equals U.UserId
                                     where bcd.ReferenceNumber == refNo
                                     group U by U.Email into g
                                     select new { Email = g.Key }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                cc.Add(query[i].Email);
                            }
                        }

                    }
                }
                return cc;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<string>();
            }
        }

        public static Tuple<string, string> GetSenderDetail(int subLedgerId, int userId, string enrollNo)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string Email = "icsrpayments@ioas.iitm.ac.in";
                    var query = (from sl in context.vw_Subleadgers
                                 .AsNoTracking()
                                 where (sl.SubLeadgerType == subLedgerId && sl.ID == userId && subLedgerId != 4)
                                 ||
                                 (subLedgerId == 4 && sl.EmployeeId == enrollNo)
                                 select sl).FirstOrDefault();
                    if (query != null)
                    {
                        if (query.Email != "" && query.Email != null)
                            Email = query.Email;
                        return Tuple.Create(query.Name, Email);
                    }
                    else
                        return Tuple.Create(string.Empty, string.Empty);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create(string.Empty, string.Empty);
            }
        }

        public static List<MasterlistviewModel> GetProjectNumberList(int? PIId, int Classificationid)
        {
            try
            {
                List<MasterlistviewModel> pjct = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblProject
                                 where ((U.PIName == PIId || PIId == 0) && U.ProjectClassification == Classificationid) && U.Status != "InActive" && U.Status != "Rejected"
                                 select new { U.ProjectId, U.ProjectNumber }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            pjct.Add(new MasterlistviewModel()
                            {
                                id = query[i].ProjectId,
                                name = query[i].ProjectNumber
                            });
                        }
                    }

                }
                return pjct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                return User;
            }
        }
        public static List<MasterlistviewModel> GetDDFProjectNumberList(string PIDepartment)
        {
            try
            {
                List<MasterlistviewModel> pjct = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblDDFMapping
                                 where (U.DepartmentName == PIDepartment)
                                 select U).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            pjct.Add(new MasterlistviewModel()
                            {
                                id = query[i].Id,
                                name = query[i].ProjectNumber
                            });
                        }
                    }

                }
                return pjct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                return User;
            }
        }

        public static int getDDFProjectid(int projectid)
        {
            try
            {
                var ddfprojectid = 0;
                var finyear = GetCurrentFinYearId();
                var context = new IOASDBEntities();
                var query = (from p in context.tblDDFMapping
                             join det in context.tblProject on p.ProjectNumber equals det.ProjectNumber
                             where p.Id == projectid
                             select new { p, det }).FirstOrDefault();

                ddfprojectid = query.det.ProjectId;
                return ddfprojectid;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                throw ex;

            }
        }
        public static int GetProjectId(string pNo)
        {
            var projectId = 0;
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = context.tblProject.Where(m => m.ProjectNumber == pNo && m.Status == "Active").FirstOrDefault();
                    if (query != null)
                        projectId = query.ProjectId;
                }
                return projectId;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return projectId;
            }
        }

        public static int GetPayBill(string empId)
        {
            var paybill = 0;
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = context.VWOngoing.Where(m => m.FileNo == empId).Select(m => m.paybill).FirstOrDefault();
                    if (query != null)
                        paybill = Convert.ToInt32(query);
                }
                return paybill;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return paybill;
            }
        }
        public static string GetOHPaymentId()
        {
            try
            {
                var currhoid = 0;
                string seqnum = "";
                var context = new IOASDBEntities();
                var query = (from intern in context.tblOverHeadPaymentProcess
                             orderby intern.OverHeadPaymentProcessId descending
                             select intern).FirstOrDefault();
                if (query != null)
                {
                    var tdsid = query.OverHeadPaymentProcessId;
                    currhoid = tdsid + 1;
                    seqnum = currhoid.ToString("D6");
                    return seqnum;
                }
                else
                {
                    return seqnum;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        //public static List<AutoCompleteModel> GetAutoCompleteAdhocStaffList(string term)
        //{
        //    try
        //    {

        //        List<AutoCompleteModel> staf = new List<AutoCompleteModel>();

        //        using (var context = new IOASDBEntities())
        //        {
        //            staf = (from C in context.VWOngoing
        //                    where (string.IsNullOrEmpty(term) || C.NAME.Contains(term) || C.FileNo.Contains(term))
        //                    // && C.Category == "AdhocStaff"
        //                    orderby C.NAME
        //                    select new AutoCompleteModel()
        //                    {
        //                        value = C.FileNo.ToString(),
        //                        label = C.NAME + " - " + C.FileNo,
        //                    }).ToList();

        //        }

        //        return staf;
        //    }
        //    catch (Exception ex)
        //    {
        //        return new List<AutoCompleteModel>();
        //    }

        //}
        public static List<string> GetImportPaymentCCList()
        {
            try
            {
                List<string> cc = new List<string>();
                string ccMail = WebConfigurationManager.AppSettings["PurchaseDeptMail"];
                cc.Add(ccMail);
                cc.Add(WebConfigurationManager.AppSettings["ImportPaymentMail"]);
                cc.Add(WebConfigurationManager.AppSettings["AccountsDA"]);
                return cc;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<string>();
            }
        }
        public static bool ApprovalForReversalOH(int OHReversalId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblOHReversal.FirstOrDefault(m => m.OHReversalId == OHReversalId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_BY = LoggedInUser;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        //    public static string ValidateCommitment(int projectId, int headId, decimal amount)
        //    {
        //        try
        //        {
        //            string validationMsg = "Valid";
        //            var allocData = getAllocationValue(projectId, headId);
        //            ProjectService _cs = new ProjectService();
        //            var projectData = _cs.getProjectSummary(projectId);
        //            if (amount <= 0)
        //                return "Something went wrong. Please contact our support.";
        //            if (amount > projectData.NetBalance)
        //                return "Total commitment value cannot be above net balance";
        //            if (allocData.IsAllocation && !projectData.AllocationNR_f)
        //            {
        //                if (allocData.IsYearWise)
        //                {

        //                    if (amount > allocData.AllocationForCurrentYear)
        //                        return "Total commitment value cannot be above allocation value for current year";
        //                    else if (amount > allocData.TotalCommitForCurrentYear)
        //                        return "Balance commitment allowed for this year " + allocData.TotalCommitForCurrentYear + "(INR)";

        //                }
        //                else
        //                {

        //                    if (amount > allocData.TotalAllocation)
        //                        return "Total commitment value cannot be above total allocation value ";
        //                    else if (amount > allocData.TotalCommitForCurrentYear)
        //                        return "Balance commitment allowed for this year " + allocData.TotalCommitForCurrentYear + "(INR)";

        //                }
        //            }
        //            else if (!projectData.AllocationNR_f)
        //            {
        //                if (amount > projectData.SanctionedValue)
        //                    return "Total commitment value cannot be above sanctioned value";
        //                else if (amount > allocData.TotalCommitForCurrentYear)
        //                    return "Balance commitment allowed for this year " + allocData.TotalCommitForCurrentYear + "(INR)";
        //            }
        //            return validationMsg;
        //        }
        //        catch (Exception ex)
        //        {
        //            Infrastructure.IOASException.Instance.HandleMe(
        //(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
        //            return "Something went wrong. Please contact our support.";
        //        }
        //    }

        public static string ValidateCommitment(int projectId, int headId, decimal amount)
        {
            try
            {
                string validationMsg = "Valid";
                var allocData = getAllocationValue(projectId, headId);
                ProjectService _cs = new ProjectService();
                //var projectData = _cs.getProjectSummary(projectId);

                var ProjectSummary = _cs.getProjectSummaryDetails(projectId);

                if (amount <= 0)
                    return "Something went wrong. Please contact our support.";
                if (amount > ProjectSummary.PrjSummary.NetBalance)
                    return "Total commitment value cannot be above net balance";

                if (ProjectSummary.PrjSummary.NetBalance >= amount)
                {
                    if (allocData.IsAllocation)
                    {
                        if ((ProjectSummary.HeadWise.Sum(m => m.Amount)) > 0)
                        {
                            if ((ProjectSummary.HeadWise.Where(m => m.AllocationId == headId).Sum(m => m.Available)) >= amount)
                                return validationMsg;
                            else
                                return "Total commitment value cannot be above total allocation value ";
                        }
                        else
                            return validationMsg;

                    }
                    else
                        return validationMsg;

                }
                else
                    return "Total commitment value cannot be above net balance";

                //if (allocData.IsAllocation && !projectData.AllocationNR_f)
                //{
                //    if (allocData.IsYearWise)
                //    {

                //        if (amount > allocData.AllocationForCurrentYear)
                //            return "Total commitment value cannot be above allocation value for current year";
                //        else if (amount > allocData.TotalCommitForCurrentYear)
                //            return "Balance commitment allowed for this year " + allocData.TotalCommitForCurrentYear + "(INR)";

                //    }
                //    else
                //    {

                //        if (amount > allocData.TotalAllocation)
                //            return "Total commitment value cannot be above total allocation value ";
                //        else if (amount > allocData.TotalCommitForCurrentYear)
                //            return "Balance commitment allowed for this year " + allocData.TotalCommitForCurrentYear + "(INR)";

                //    }
                //}
                //else if (!projectData.AllocationNR_f)
                //{
                //    if (amount > projectData.SanctionedValue)
                //        return "Total commitment value cannot be above sanctioned value";
                //    else if (amount > allocData.TotalCommitForCurrentYear)
                //        return "Balance commitment allowed for this year " + allocData.TotalCommitForCurrentYear + "(INR)";
                //}
                // return validationMsg;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "Something went wrong. Please contact our support.";
            }
        }

        public static string GetOHReversalId()
        {
            try
            {
                var checkNum = "OHAR/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from intern in context.tblOHReversal
                               where intern.OHReversalNumber.Contains(checkNum)
                               orderby intern.OHReversalId descending
                               select intern.OHReversalNumber).FirstOrDefault();
                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        int seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static List<MasterlistviewModel> GetReceiptList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from oh in context.tblReceiptOverheadBreakup
                            join R in context.tblReceipt on oh.ReceiptId equals R.ReceiptId
                            join P in context.tblProject on R.ProjectId equals P.ProjectId
                            where R.Status == "Completed" && (oh.IsPosted_f == false || oh.IsPosted_f == null) && !context.tblOverheadsPostingDetails.Any(m => m.ReceiptId == R.ReceiptId)
                            && P.ProjectType == 1
                            orderby R.ReceiptNumber
                            group R by R.ReceiptId into g
                            select new
                            {
                                ReceiptId = g.Key,
                                ReceiptNumber = g.Select(m => m.ReceiptNumber).FirstOrDefault()
                            })
                            .AsEnumerable()
                            .Select((x, index) => new MasterlistviewModel()
                            {
                                id = x.ReceiptId,
                                name = x.ReceiptNumber
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }

        public static List<MasterlistviewModel> GetReceiptNumberList(int? OHId = 0)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {                 
                        list = (from oh in context.tblReceiptOverheadBreakup
                                join R in context.tblReceipt on oh.ReceiptId equals R.ReceiptId
                                join P in context.tblProject on R.ProjectId equals P.ProjectId
                                where R.Status == "Completed" && (oh.IsPosted_f == false || oh.IsPosted_f == null) //&& !context.tblOverheadsPostingDetails.Any(m => m.ReceiptId == R.ReceiptId)
                                && P.ProjectType == 1
                                orderby R.ReceiptNumber
                                group R by R.ReceiptId into g
                                select new
                                {
                                    ReceiptId = g.Key,
                                    ReceiptNumber = g.Select(m => m.ReceiptNumber).FirstOrDefault()
                                })
                                .AsEnumerable()
                                .Select((x, index) => new MasterlistviewModel()
                                {
                                //id = x.ReceiptId,
                                name = x.ReceiptNumber,
                                    id = x.ReceiptId
                                }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static List<MasterlistviewModel> GetInvoiceNoList(string RefNo)
        {
            List<MasterlistviewModel> model = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    model = (from C in context.vw_GSTCredit
                             where C.RefNumber == RefNo
                             select new MasterlistviewModel()
                             {
                                 name = C.InvoiceNumber
                             }).ToList();
                    return model;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }
        }
        public static List<MasterlistviewModel> GetOHPAutoCompleteProjectList(int? OHId = 0)
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    if (OHId > 0)
                    {
                        list = (from oh in context.tblReceiptOverheadBreakup
                                join R in context.tblReceipt on oh.ReceiptId equals R.ReceiptId
                                join P in context.tblProject on R.ProjectId equals P.ProjectId
                                join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                where P.ProjectType == 1 && P.Status == "Active" && (oh.IsPosted_f == false || oh.IsPosted_f == null) && (context.tblOverheadsPostingDetails.Any(m => m.ProjectId == P.ProjectId) && context.tblOverheadsPosting.Any(m=>m.Status=="Open"))
                                orderby P.ProjectNumber
                                group new { P.ProjectId, P.ProjectNumber, U.FirstName,R.ReceiptNumber } by P.ProjectId into g
                                select new
                                {
                                    ProjectId = g.Key,
                                    ProjectNumber = g.Select(m => m.ProjectNumber).FirstOrDefault(),
                                    PIName = g.Select(m => m.FirstName).FirstOrDefault()
                                })
                                .AsEnumerable()
                                .Select((x, index) => new MasterlistviewModel()
                                {
                                    id = x.ProjectId,
                                    name = x.ProjectNumber + " - " + x.PIName,
                                }).ToList();
                    }
                    else
                    {
                        list = (from oh in context.tblReceiptOverheadBreakup
                                join R in context.tblReceipt on oh.ReceiptId equals R.ReceiptId
                                join P in context.tblProject on R.ProjectId equals P.ProjectId
                                join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                where P.ProjectType == 1 && P.Status == "Active" && (oh.IsPosted_f == false || oh.IsPosted_f == null) //&& !context.tblOverheadsPostingDetails.Any(m => m.ProjectId == P.ProjectId)
                                orderby P.ProjectNumber
                                group new { P.ProjectId, P.ProjectNumber, U.FirstName } by P.ProjectId into g
                                select new
                                {
                                    ProjectId = g.Key,
                                    ProjectNumber = g.Select(m => m.ProjectNumber).FirstOrDefault(),
                                    PIName = g.Select(m => m.FirstName).FirstOrDefault()
                                })
                            .AsEnumerable()
                            .Select((x, index) => new MasterlistviewModel()
                            {
                                id = x.ProjectId,
                                name = x.ProjectNumber + " - " + x.PIName
                            }).ToList();
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static List<FellowShipModel> GetCommitmentNo(int projid)
        {
            List<FellowShipModel> fellow = new List<FellowShipModel>();
            try
            {
                fellow.Add(new FellowShipModel()
                {
                    ViewBagCommitNo = "Select CommitmentNumber"
                });
                using (var context = new IOASDBEntities())
                {
                    if (projid != 0)
                    {
                        var query = (from H in context.tblProject
                                     join P in context.tblCommitment on H.ProjectId equals P.ProjectId
                                     join D in context.tblCommitmentDetails on P.CommitmentId equals D.CommitmentId
                                     where H.ProjectId == projid && D.BalanceAmount > 0 && P.Status == "Active"
                                     select new
                                     {
                                         P.CommitmentNumber,


                                     }).ToList();

                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                fellow.Add(new FellowShipModel()
                                {
                                    ViewBagCommitNo = query[i].CommitmentNumber,
                                });
                            }
                        }
                    }
                }
                return fellow;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<AutoCompleteModel> GetDISAutoCompleteAdhocStaffWithDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    bool value = true;
                    foreach (char c in term)
                    {
                        if (c < '0' || c > '9')
                        {
                            value = false;
                        }
                    }
                    if (value == true)
                    {
                        int userid = Convert.ToInt32(term);
                        var query = (from C in context.vwCombineStaffDetails
                                     where string.IsNullOrEmpty(term) || C.ID == userid || C.Name.Contains(term)
                                     //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                     //where (C.RoleId == 7)
                                     where C.Category == "AdhocStaff"
                                     orderby C.Name
                                     select new { C.ID, C.Name, C.EmployeeId }).ToList();


                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                PI.Add(new AutoCompleteModel()
                                {
                                    value = query[i].ID.ToString(),
                                    label = query[i].EmployeeId + "-" + query[i].Name,
                                });
                            }
                        }
                    }
                    else if (value == false)
                    {
                        var query = (from C in context.vwCombineStaffDetails
                                     where string.IsNullOrEmpty(term) || C.Name.Contains(term)
                                     //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                     //where (C.RoleId == 7)
                                     where C.Category == "AdhocStaff"
                                     orderby C.Name
                                     select new { C.ID, C.Name, C.EmployeeId }).ToList();


                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                PI.Add(new AutoCompleteModel()
                                {
                                    value = query[i].ID.ToString(),
                                    label = query[i].EmployeeId + "-" + query[i].Name,
                                });
                            }
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteStaffList(string term)
        {
            try
            {

                List<AutoCompleteModel> staf = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    bool value = true;
                    foreach (char c in term)
                    {
                        if (c < '0' || c > '9')
                        {
                            value = false;
                        }
                    }
                    if (value == true)
                    {
                        int userid = Convert.ToInt32(term);
                        staf = (from C in context.vwCombineStaffDetails
                                where (string.IsNullOrEmpty(term) || C.Name.Contains(term) || C.ID == userid)
                                && C.Category == "Staff"
                                orderby C.Name
                                select new AutoCompleteModel()
                                {
                                    value = C.ID.ToString(),
                                    label = C.Name + " - " + C.ID,
                                }).ToList();
                    }
                    else
                    {
                        staf = (from C in context.vwCombineStaffDetails
                                where (string.IsNullOrEmpty(term) || C.Name.Contains(term))
                                && C.Category == "Staff"
                                orderby C.Name
                                select new AutoCompleteModel()
                                {
                                    value = C.ID.ToString(),
                                    label = C.Name + " - " + C.ID,
                                }).ToList();
                    }


                }

                return staf;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }

        public static decimal GetCommitmentBalance(string commitmentNo)
        {
            try
            {
                decimal bal = 0;
                using (var context = new IOASDBEntities())
                {
                    var qry = context.tblCommitment.FirstOrDefault(m => m.CommitmentNumber == commitmentNo);
                    if (qry != null)
                        bal = qry.CommitmentBalance ?? 0;
                }
                return bal;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }

        }
        public static List<AutoCompleteModel> GetAllProjectNumber(string term)
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.tblProject
                           where C.ProjectNumber.Contains(term) && C.Status != "InActive"
                           orderby C.ProjectNumber
                           select new AutoCompleteModel()
                           {
                               value = C.ProjectId.ToString(),
                               label = C.ProjectNumber
                           }).ToList();

                }

                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static string GetCurrentProjectStatus(int ProjectId)
        {
            var Data = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.tblProject.Where(m => m.ProjectId == ProjectId).Select(m => m.Status).FirstOrDefault();
                    return Data = Qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Data;
            }
        }
        public static List<AutoCompleteModel> GetAllFinancial()
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.tblFinYear
                           orderby C.EndDate descending
                           select new AutoCompleteModel()
                           {
                               value = C.FinYearId.ToString(),
                               label = C.Year
                           }).ToList();
                }
                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public Tuple<string, string, string> GetCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblBillEntry.Where(m => m.BillNumber == RefNumber).FirstOrDefault();
                    var TransCode = BillDate.TransactionTypeCode;
                    int RefId = BillDate.BillId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetTravelCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblTravelBill.Where(m => m.BillNumber == RefNumber).FirstOrDefault();
                    var TransCode = BillDate.TransactionTypeCode;
                    int RefId = BillDate.TravelBillId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetCLPCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblClearancePaymentEntry.Where(m => m.BillNumber == RefNumber).FirstOrDefault();
                    var TransCode = BillDate.TransactionTypeCode;
                    int RefId = BillDate.ClearancePaymentId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetLCCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblLCRetirement.Where(m => m.ReferenceNumber == RefNumber).FirstOrDefault();
                    var TransCode = "HON";
                    int RefId = BillDate.LCOpeningId ?? 0;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public Tuple<string, string, string> GetHonorCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblHonororium.Where(m => m.HonororiumNo == RefNumber).FirstOrDefault();
                    var TransCode = "HON";
                    int RefId = BillDate.HonororiumId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetReimbursCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblAdhocPayment.Where(m => m.AdhocPaymentNumber == RefNumber).FirstOrDefault();
                    var TransCode = "REM";
                    int RefId = BillDate.AdhocPaymentId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetGVRCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblGeneralVoucher.Where(m => m.VoucherNumber == RefNumber).FirstOrDefault();
                    string ComDate = "NA";
                    var TransCode = "GVR";
                    int RefId = BillDate.GeneralVoucherId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).Select(m => m.CRTD_TS).FirstOrDefault();
                    if (CommDate != null)
                        ComDate = string.Format("{0:dd-MMM-yyyy}", CommDate);
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), ComDate);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetReceiptCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblReceipt.Where(m => m.ReceiptNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CrtdTS), "");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetInvoiceCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), "", "");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public static string GetBillRemarks(int refId, string txTypeCode)
        {
            var remarks = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string[] arrPOTxTypeCode = { "PTV", "PTM", "STM", "ADV", "STV" };
                    string[] arrTravelTxTypeCode = { "TAD", "DTV", "TST" };
                    if (arrPOTxTypeCode.Contains(txTypeCode))
                    {
                        var Qry = context.tblBillEntry.FirstOrDefault(m => m.BillId == refId);
                        if (Qry != null)
                            remarks = Qry.Remarks;
                    }
                    else if (arrTravelTxTypeCode.Contains(txTypeCode))
                    {
                        var Qry = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == refId);
                        if (Qry != null)
                            remarks = Qry.Remarks;
                    }
                    return remarks;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return remarks;
            }
        }
        public static List<MasterlistviewModel> GetTravelDetails()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblCodeControl
                                 where c.CodeName == "Travelfunctiontype"
                                 select new { c.CodeValAbbr, c.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }
        }
        public static List<AutoCompleteModel> GettravelBillNo(string term)
        {
            try
            {
                List<AutoCompleteModel> billno = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    billno = (from tb in context.tblTravelBill
                              where tb.BillNumber.Contains(term) && tb.Status != "InActive"
                              orderby tb.TravelBillId
                              select new AutoCompleteModel()
                              {
                                  value = tb.BillNumber,
                                  label = tb.BillNumber
                              }).ToList();
                }
                return billno;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }

        public static List<TDSPaymentModel> GetSection()
        {
            List<TDSPaymentModel> tds = new List<TDSPaymentModel>();
            try
            {
                tds.Add(new TDSPaymentModel()
                {
                    HeadId = 0,
                    Head = "Select Section"
                });
                using (var context = new IOASDBEntities())
                {
                    int[] id = { 15 };
                    var query = (from H in context.tblAccountHead
                                 where H.AccountGroupId == 15
                                 select new
                                 {
                                     H.AccountHead,
                                     H.AccountHeadId
                                 }).Distinct().ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            tds.Add(new TDSPaymentModel()
                            {
                                HeadId = Convert.ToInt32(query[i].AccountHeadId),
                                Head = query[i].AccountHead,
                            });
                        }
                    }

                }
                return tds;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static List<MasterlistviewModel> GetProjectNumberListbyId(int projectid)
        {
            try
            {
                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join U in context.vwFacultyStaffDetails on C.PIName equals U.UserId
                                 where C.Status == "Active" && C.ProjectId == projectid
                                 orderby C.ProjectId
                                 select new { U.FirstName, C }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.ProjectId,
                                name = query[i].C.ProjectNumber + "-" + query[i].C.ProjectTitle + "- " + query[i].FirstName,
                            });
                        }
                    }

                }



                return Title;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static string getImprestcardnumber(int ImprestCardID)
        {
            try
            {
                var Cardnumber = " ";
                var context = new IOASDBEntities();
                var query = (from EC in context.tblIMPUserDetails
                             where EC.IMPUserDetailsId == ImprestCardID
                             select EC).FirstOrDefault();

                if (query != null)
                {
                    Cardnumber = query.ImprestACNumber;
                    return Cardnumber;
                }
                else
                {
                    return Cardnumber;
                }

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }

        public static List<MasterlistviewModel> getLabCodeProjectList()
        {
            try
            {

                List<MasterlistviewModel> department = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from p in context.tblProject
                                 orderby p.ProjectId
                                 where p.ProjectClassification == 7
                                 select p).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            department.Add(new MasterlistviewModel()
                            {
                                name = query[i].ProjectNumber,
                                id = query[i].ProjectId
                            });
                        }
                    }


                }

                return department;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<string> GetReceiptMailCCList()
        {
            try
            {
                List<string> cc = new List<string>();
                string ccMail = WebConfigurationManager.AppSettings["ReceiptCCMail"];
                string cc1Mail = WebConfigurationManager.AppSettings["defaultCCMail"];
                cc.Add(ccMail);
                cc.Add(cc1Mail);

                return cc;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
       (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<string>();
            }
        }

        public static Tuple<int, decimal> GetBillTDSDetial(int billId)
        {
            decimal tdsAmt = 0;
            int tdsSection = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblBillTDSDetail
                                 where b.BillId == billId && b.Status == "Active"
                                 select b).FirstOrDefault();
                    if (query != null)
                    {
                        tdsAmt = query.TDSBasicAmt ?? 0;
                        tdsSection = query.VendorTDSDetailId ?? 0;
                    }

                }

                return Tuple.Create(tdsSection, tdsAmt);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create(tdsSection, tdsAmt);
            }

        }

        public static List<AutoCompleteModel> LoadAutoCompleteVendor(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblVendorMaster
                            where (C.Name.Contains(term) || C.VendorCode.Contains(term))
                            && C.Status != "InActive"
                            orderby C.Name
                            select new AutoCompleteModel()
                            {
                                value = C.Name.ToString().TrimEnd(),
                                label = C.Name.TrimEnd()
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteVendor(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblVendorMaster
                            where (C.Name.Contains(term) || C.VendorCode.Contains(term))
                            && C.Status != "InActive"
                            orderby C.Name
                            select new AutoCompleteModel()
                            {
                                value = C.VendorId.ToString(),
                                label = C.Name,
                                desc = C.isGstVendor.HasValue && C.isGstVendor.Value ? "HOLD GST FOR THIS VENDOR" : ""
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public Tuple<string, string, string> GetPDTCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblProjectDirectTransfer.Where(m => m.TransferNumber == RefNumber).FirstOrDefault();
                    var TransCode = "PDT";
                    int RefId = BillDate.ProjectTransferId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public static string GetSBICardBillRecoupNo()
        {
            try
            {
                var no = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblSBICardBillRecoupment
                               orderby b.SBICardBillRecoupId descending
                               select b.SBICardBillRecoupNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return "ECBR" + "/" + GetCurrentFinYear() + "/" + seqnum.ToString("000000");
                    }
                    else
                    {
                        return "ECBR" + "/" + GetCurrentFinYear() + "/" + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidateSBICardBillRecoupStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSBICardBillRecoupment.FirstOrDefault(m => m.SBICardBillRecoupId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateSBICardBillStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSBICardRecoupment.FirstOrDefault(m => m.RecoupmentId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string GetProjectTypeForBill(int ProjectId)
        {
            string ProjType = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.tblProject.Where(m => m.ProjectId == ProjectId).FirstOrDefault();
                    if (Qry != null)
                    {
                        if (Qry.ProjectType == 1 && Qry.SponProjectCategory == "1")
                            ProjType = "PFMS";
                        else if (Qry.ProjectType == 1 && Qry.SponProjectCategory == "2")
                            ProjType = "Non-PFMS";
                        else if (Qry.ProjectClassification == 2)
                            ProjType = "PCF";
                        else if (Qry.ProjectClassification == 3)
                            ProjType = "RMF";
                        else if (Qry.ProjectType == 2 && (Qry.ProjectClassification != 2 || Qry.ProjectClassification != 3))
                            ProjType = "Cons";

                        else if (Qry.ProjectType == 1)
                            ProjType = "Spon";
                    }
                    return ProjType;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return ProjType;
            }
        }

        public static string GetProjNoFromBOA(int Boaid)
        {
            var ProjNo = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from c in context.tblBOAExpenditureDetail
                               join d in context.tblProject on c.ProjectId equals d.ProjectId
                               where c.BOAId == Boaid
                               select d.ProjectNumber).ToList();
                    if (Qry != null)
                    {
                        for (int i = 0; i < Qry.Count; i++)
                        {
                            if (Qry.Count == i + 1)
                                ProjNo += Qry[i];
                            else
                                ProjNo += Qry[i] + ", ";
                        }
                    }
                    return ProjNo;
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return ProjNo;
            }

        }
        public static string GetProjNoFromInvoice(string Typecode, string RefNumber)
        {
            string ProjNo = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (Typecode == "INV")
                    {
                        ProjNo = (from c in context.tblProjectInvoice
                                  join d in context.tblProject on c.ProjectId equals d.ProjectId
                                  where c.InvoiceNumber == RefNumber
                                  select d.ProjectNumber).FirstOrDefault();
                    }
                    else
                    {
                        ProjNo = (from c in context.tblCreditNote
                                  join e in context.tblProjectInvoice on c.InvoiceId equals e.InvoiceId
                                  join d in context.tblProject on e.ProjectId equals d.ProjectId
                                  where c.CreditNoteNumber == RefNumber
                                  select d.ProjectNumber).FirstOrDefault();
                    }
                    return ProjNo;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return ProjNo;
            }
        }
        public static Tuple<DateTime, DateTime> GetFinPeriod(int finId)
        {
            DateTime startDate = new DateTime();
            DateTime endDate = new DateTime();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFinYear.FirstOrDefault(m => m.FinYearId == finId);
                    if (query != null)
                    {
                        startDate = Convert.ToDateTime(query.StartDate);
                        endDate = Convert.ToDateTime(query.EndDate.Value.AddDays(1).AddTicks(-2));
                    }
                }
                return Tuple.Create(startDate, endDate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create(startDate, endDate);
            }

        }
        public static List<MasterlistviewModel> GetUCTemplateList()
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from p in context.tblUCTemplate
                                 where p.Status == "Active"
                                 select p).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                name = query[i].TemplateName,
                                id = query[i].UCTemplateId
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return list;
            }

        }
        public Tuple<string, string, string> GetContraCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblContra.Where(m => m.ContraNumber == RefNumber).FirstOrDefault();

                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public Tuple<string, string, string> GetFRMCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblForeignRemittance.Where(m => m.ForeignRemitNumber == RefNumber).FirstOrDefault();
                    var TransCode = BillDate.TransactionTypeCode;
                    int RefId = BillDate.ForeignRemitId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetImprestCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblImprestRecoupment.Where(m => m.RecoupmentNumber == RefNumber).FirstOrDefault();
                    var TransCode = "IMR";
                    int RefId = BillDate.RecoupmentId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetPFTCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblProjectTransfer.Where(m => m.TransferNumber == RefNumber).OrderByDescending(m => m.ProjectTransferId).Select(m => m.CRTD_TS).FirstOrDefault();
                    var BillDate = context.tblProjectTransfer.Where(m => m.TransferNumber == RefNumber).FirstOrDefault();
                    //var TransCode = "IMR";
                    //int RefId = BillDate.ProjectTransferId;
                    //var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), "NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public static List<AutoCompleteModel> GetAllReferenceNumber(string[] TypeCode, string term)
        {
            try

            {
                var FinYear = "/" + GetCurrentFinYear() + "/";
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    if (TypeCode.Contains("PFT"))
                    {
                        pro = (from C in context.tblBOAExpenditureDetail
                               where TypeCode.Contains(C.TransactionTypeCode ?? "")
                               && C.ReferenceNumber.Contains(term)
                               && C.ReferenceNumber.Contains(FinYear)
                               orderby C.BOAId descending
                               group C by C.ReferenceNumber into g
                               select new AutoCompleteModel
                               {
                                   value = g.Key,
                                   label = g.Key
                               }).ToList();
                    }
                    else
                    {
                        pro = (from C in context.tblBOA
                               where C.Status == "Posted" && TypeCode.Contains(C.RefTransactionCode ?? "")
                               && C.RefNumber.Contains(term)
                               && C.RefNumber.Contains(FinYear)
                               orderby C.BOAId descending
                               select new AutoCompleteModel()
                               {
                                   value = C.RefNumber.ToString(),
                                   label = C.RefNumber
                               }).ToList();
                    }

                }
                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static string GetDevelopmentMessage()
        {
            try
            {
                string Isdeploy = "";
                using (var context = new IOASDBEntities())
                {


                    var query = (from d in context.tblDeployment where d.DeploymentStatus == "Active" select d.DeploymentMessenge).FirstOrDefault();


                    if (query != null)
                    {
                        Isdeploy = query;
                    }

                    return Isdeploy;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }



        public static List<AutoCompleteModel> GetAllPostedReferenceNumber(string term)
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {

                    pro = (from C in context.tblBOA
                           where C.Status == "Posted"
                           && C.RefNumber.Contains(term)
                           orderby C.RefNumber descending
                           group C by C.RefNumber into g
                           select new AutoCompleteModel()
                           {
                               value = g.Key,
                               label = g.Key
                           }).ToList();

                }
                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static List<MasterlistviewModel> GetBankAccounttype()
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from A in context.tblCodeControl
                                 where A.CodeName == "BankAccountType"
                                 select new { A.CodeValAbbr, A.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }
        }
        public static List<MasterlistviewModel> GetAccountNumber(int acctype)
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblAccountWiseBank
                                 where b.AccountType == acctype
                                 orderby b.AccountBankId descending
                                 select new { b.AccountBankId, b.AccountNumber, b.BankName, b.AccountName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountBankId,
                                name = query[i].AccountNumber + "-" + query[i].BankName + "-" + query[i].AccountName
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }
        }
        public static string GetBankAccount(int bankaccountid)
        {
            string bankname = string.Empty;
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAccountWiseBank.Where(m => m.AccountBankId == bankaccountid).FirstOrDefault();
                    if (query != null)
                    {
                        bankname = query.AccountNumber + "-" + query.BankName + "-" + query.AccountName;
                    }
                }
                return bankname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return bankname;
            }
        }
        public static bool ValidateFixeddepositOnEdit(int Fixeddepositid)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFixedDeposit.FirstOrDefault(m => m.FixedDepositId == Fixeddepositid && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static string GetCodeControlnameCommon(int codeval, string codename)
        {
            try
            {
                string Codedetails = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblCodeControl
                                 where c.CodeValAbbr == codeval && c.CodeName == codename
                                 select c.CodeValDetail).FirstOrDefault();
                    if (query != null)
                    {
                        Codedetails = query;
                    }
                }
                return Codedetails;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                string Codedetails = string.Empty;
                return Codedetails;
            }
        }

        public static string GetCodeControlnameTDS(string codeval, string codename)
        {
            try
            {
                string Codedetails = string.Empty;
                codeval = codeval + "%";
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblCodeControl
                                 where c.CodeValDetail == codeval && c.CodeName == codename
                                 select c.CodeValDetail).FirstOrDefault();
                    if (query != null)
                    {
                        Codedetails = query;
                    }
                }
                return Codedetails.Replace("%","");
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                string Codedetails = string.Empty;
                return Codedetails;
            }
        }

        public static bool ValidateBRSOnEdit(int brsId, string status = "")
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    if (!String.IsNullOrEmpty(status))
                    {
                        var query = context.tblBRS.FirstOrDefault(m => m.BRSId == brsId && m.Status == status);
                        if (query != null)
                            isValid = true;
                    }
                    else
                    {
                        var query = context.tblBRS.FirstOrDefault(m => m.BRSId == brsId && (m.Status == "Open" || m.Status == "Init"));
                        if (query != null)
                            isValid = true;
                    }
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ApprovalForFixedDeposit(int FixedDepositid, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFixedDeposit.FirstOrDefault(m => m.FixedDepositId == FixedDepositid);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return update;
            }
        }


        public static List<AutoCompleteModel> GetAutoCompleteFixedDepositNumber(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from F in context.tblFixedDeposit
                            where F.FDNumber.Contains(term) && F.Status == "Closed"
                            && F.IsClosed == false
                            orderby F.FDNumber
                            select new AutoCompleteModel()
                            {
                                label = F.FDNumber,
                                value = F.FixedDepositId.ToString()
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static bool ValidateFixeddepositOnClose(int Fixeddepositid)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFixedDeposit.FirstOrDefault(m => m.FixedDepositId == Fixeddepositid && m.Status == "Active" && m.IsClosed == false);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateFixeddepositOnCloseedit(int FixeddepositclosedId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFixedDepositClosed.FirstOrDefault(m => m.FixedDepositClosedId == FixeddepositclosedId && m.Status == "Open");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ApprovalForFixedDepositclose(int FixeddepositclosedId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {

                    var query = context.tblFixedDepositClosed.FirstOrDefault(m => m.FixedDepositClosedId == FixeddepositclosedId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Approval Pending";
                        query.UPDT_By = LoggedInUser;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return update;
            }
        }

        public static string GetName(int Category = 0, int PayeeId = 0)
        {
            string Name = "";
            string Type = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (Category == 3)
                        Type = "Professor";
                    if (Category == 7)
                        Type = "Staff";
                    if (Category == 9)
                        Type = "Project Staff";
                    if (Category == 10)
                        Type = "AdhocStaff";
                    var Qry = (from C in context.vwCombineStaffDetails
                               where C.Category == Type && C.ID == PayeeId
                               orderby C.Name
                               select C).FirstOrDefault();
                    if (Qry != null)
                        Name = Qry.EmployeeId + "-" + (Qry.PaybillNo == null ? Convert.ToString(Qry.ID) : Qry.PaybillNo) + "-" + Qry.Name;

                    return Name;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Name;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompletePIWithDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwFacultyStaffDetails
                                 where string.IsNullOrEmpty(term) || C.EmployeeId.Contains(term) || C.FirstName.Contains(term) || C.PaybillNo.Contains(term)
                                 //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 //where (C.RoleId == 7)
                                 orderby C.FirstName
                                 select new { C.UserId, C.FirstName, C.EmployeeId, C.PaybillNo, C.DepartmentCode }).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].UserId.ToString(),
                                label = query[i].EmployeeId + "-" + query[i].FirstName + "-" + query[i].DepartmentCode + "-" + query[i].PaybillNo,
                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteFacultyDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblProjectStaffDetail
                                 select new AutoCompleteModel()
                                 {
                                     value = b.CastEmployeeId.ToString(),
                                     label = b.EmployeeId + "-" + b.EmployeeName
                                 })
                                 .Concat(from b in context.tblProjectAdhocStaffDetails
                                         select new AutoCompleteModel()
                                         {
                                             value = b.CastEmployeeId.ToString(),
                                             label = b.CastEmployeeId.ToString() + "-" + b.EmployeeName + "-" + b.DepartmentCode
                                         });
                    var predicate = PredicateBuilder.BaseAnd<AutoCompleteModel>();
                    predicate = predicate.And(d => d.label.Contains(term));
                    PI = query.Where(predicate).OrderByDescending(m => m.label).ToList();
                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteTandMWithDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwCombineStaffDetails
                                 where string.IsNullOrEmpty(term) || C.EmployeeId.Contains(term) || C.Name.Contains(term) || C.PaybillNo.Contains(term)
                                 //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 //where (C.RoleId == 7)

                                 //#7349 Changes done to restrict duplicate IDs by IC36775 18/10/2022
                                 //#7349  Reverting the changes  by IC36775 28/11/2022
                                 where C.Category == "Project Staff"
                                 orderby C.Name
                                 select new { C.ID, C.Name, C.EmployeeId, C.PaybillNo }).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].ID.ToString(),
                                label = query[i].EmployeeId + "-" + query[i].Name + "-" + query[i].EmployeeId,
                                //#7349 Changes done to restrict duplicate IDs by IC36775 18/10/2022
                                //#7349  Reverting the changes  by IC36775 28/11/2022

                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteAdhocStaffWithDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwCombineStaffDetails
                                 where string.IsNullOrEmpty(term) || C.EmployeeId.Contains(term) || C.Name.Contains(term) || C.PaybillNo.Contains(term)
                                 //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 //where (C.RoleId == 7)

                                 //#7349 Changes done to restrict duplicate IDs by IC36775 18/10/2022
                                 //#7349  Reverting the changes  by IC36775 28/11/2022

                                 where C.Category == "AdhocStaff"
                                 orderby C.Name
                                 select new { C.ID, C.Name, C.EmployeeId, C.PaybillNo }).ToList();


                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].ID.ToString(),
                                label = query[i].ID + "-" + query[i].Name + "-" + query[i].EmployeeId,
                                //#7349 Changes done to restrict duplicate IDs by IC36775 18/10/2022
                                //#7349  Reverting the changes  by IC36775 28/11/2022

                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteInstituteStaffWithDetails(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwCombineStaffDetails
                                 where string.IsNullOrEmpty(term) || C.EmployeeId.Contains(term) || C.Name.Contains(term) || C.PaybillNo.Contains(term)
                                 //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 //where (C.RoleId == 7)
                                 where C.Category == "Staff"
                                 orderby C.Name
                                 select new { C.ID, C.Name, C.EmployeeId, C.PaybillNo }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].ID.ToString(),
                                label = query[i].ID + "-" + query[i].Name + "-" + query[i].EmployeeId,
                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }

        public static string GetSchemeCodeForBill(int ProjectId)
        {
            string SchemeCode = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from C in context.tblProject
                               join D in context.tblSponsoredSchemes on C.SchemeCode equals D.SponsoredSchemesId
                               where C.ProjectId == ProjectId
                               select new { D.SchemeCode }).FirstOrDefault();
                    if (Qry != null)
                    {
                        SchemeCode = Qry.SchemeCode.Split('-').Last();
                    }
                    return SchemeCode;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return SchemeCode;
            }
        }

        public static List<PaymentNotificationInvDetailModel> GetPaymentInvDetails(string refNumber)
        {
            List<PaymentNotificationInvDetailModel> det = new List<PaymentNotificationInvDetailModel>();
            try
            {

                using (var context = new IOASDBEntities())
                {

                    CultureInfo Indian = new CultureInfo("hi-IN");
                    det = (from b in context.vw_ITC
                           where b.RefNumber == refNumber
                           select new { b.InvoiceNumber, b.InvoiceDate, b.Amount, b.TaxAmount })
                       .AsEnumerable()
                                              .Select((x) => new PaymentNotificationInvDetailModel()
                                              {
                                                  invoiceNumber = x.InvoiceNumber,
                                                  invoiceAmount = String.Format(Indian, "{0:N}", Convert.ToDecimal(x.Amount) + Convert.ToDecimal(x.TaxAmount)),
                                                  invoiceDate = String.Format("{0:dd-MM-yyyy}", x.InvoiceDate),
                                                  invAmount = Convert.ToDecimal(x.Amount) + Convert.ToDecimal(x.TaxAmount)
                                              }).ToList();
                }

                return det;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return det;
            }

        }

        public Tuple<string, string, string> GetPTPCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblPartTimePayment.Where(m => m.PartTimePaymentNumber == RefNumber).FirstOrDefault();
                    var TransCode = "PTP";
                    int RefId = BillDate.PartTimePaymentId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetSMICurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblSummerInternshipStudentDetails.Where(m => m.SummerInternshipNumber == RefNumber).FirstOrDefault();
                    var TransCode = "SMI";
                    int RefId = BillDate.SummerInternshipStudentId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetImprestRecoupCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblImprestBillRecoupment.Where(m => m.ImprestBillRecoupNumber == RefNumber).FirstOrDefault();
                    var TransCode = "IBR";
                    int RefId = BillDate.ImprestBillRecoupId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteGSTIN(string term)
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.vw_GSTCredit
                           where C.GSTIN.Contains(term)
                           orderby C.Id descending
                           group C by C.GSTIN into g
                           select new AutoCompleteModel
                           {
                               value = g.Key,
                               label = g.Key
                           }).ToList();


                }
                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteInvoiceNo(string term)
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.vw_GSTCredit
                           where C.InvoiceNumber.Contains(term)
                           orderby C.Id descending
                           group C by C.InvoiceNumber into g
                           select new AutoCompleteModel
                           {
                               value = g.Key,
                               label = g.Key
                           }).ToList();


                }
                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteRefNo(string term)
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.vw_GSTCredit
                           where C.RefNumber.Contains(term)
                           orderby C.Id descending
                           group C by C.RefNumber into g
                           select new AutoCompleteModel
                           {
                               value = g.Key,
                               label = g.Key
                           }).ToList();


                }
                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static string GetContractorBillNo()
        {
            try
            {
                string RefNo = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    int num = (from b in context.tblContractorBill
                               select b).Max(m => m.SequenceNo) ?? 0;

                    if (num > 0)
                    {

                        num += 1;
                        return "CON/" + GetCurrentFinYear() + "/" + num.ToString("00000");
                    }
                    else
                    {
                        return "CON/" + GetCurrentFinYear() + "/" + "00001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetContingentBillNo()
        {
            try
            {
                string RefNo = string.Empty;

                using (var context = new IOASDBEntities())
                {
                    int num = (from b in context.tblContingentBill
                               select b).Max(m => m.SequenceNo) ?? 0;

                    if (num > 0)
                    {

                        num += 1;
                        return "CNG/" + GetCurrentFinYear() + "/" + num.ToString("00000");
                    }
                    else
                    {
                        return "CNG/" + GetCurrentFinYear() + "/" + "00001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static int GetContractorBillSequenceno()
        {
            try
            {
                int seqNo = 0;

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblContractorBill
                               select b).Max(m => m.SequenceNo) ?? 0;

                    if (num > 0)
                    {
                        seqNo = num + 1;
                    }
                    else
                    {
                        seqNo = 1;
                    }
                }
                return seqNo;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static int GetContingentBillSequenceno()
        {
            try
            {
                int seqNo = 0;

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblContingentBill
                               select b).Max(m => m.SequenceNo) ?? 0;

                    if (num > 0)
                    {
                        seqNo = num + 1;
                    }
                    else
                    {
                        seqNo = 1;
                    }
                }
                return seqNo;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static List<MasterlistviewModel> GetEucoProjectNumberList(string labcode)
        {
            try
            {
                List<MasterlistviewModel> pjct = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblProject
                                 where (U.ProjectNumber == labcode)
                                 select new { U.ProjectId, U.ProjectNumber }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            pjct.Add(new MasterlistviewModel()
                            {
                                id = query[i].ProjectId,
                                name = query[i].ProjectNumber
                            });
                        }
                    }

                }
                return pjct;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> User = new List<MasterlistviewModel>();
                return User;
            }
        }

        public static SqlConnection getConnectionforreports()
        {
            return new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionStringReport"].ToString());
        }

        public static SqlConnection getConnection()
        {
            return new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
        }

        public Tuple<string, string, string> GetDOPCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblPCFDistribution.Where(m => m.ReferenceNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetOHARCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string ComDate = "NA";
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblOHReversal.Where(m => m.OHReversalNumber == RefNumber).FirstOrDefault();
                    var TransCode = "OHAR";
                    int RefId = BillDate.OHReversalId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).Select(m => m.CRTD_TS).FirstOrDefault();
                    if (CommDate != null)
                        ComDate = string.Format("{0:dd-MMM-yyyy}", CommDate);
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), ComDate);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteReferenceNumber(string term, string type)
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    if (type == "STM" || type == "ADV" || type == "PTM")
                    {
                        pro = (from C in context.tblBillEntry
                               where C.BillNumber.Contains(term) && C.Status != "InActive" && C.TransactionTypeCode == type
                               orderby C.BillNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.BillNumber,
                                   label = C.BillNumber
                               }).ToList();
                    }
                    else if (type == "GVR")
                    {
                        pro = (from C in context.tblGeneralVoucher
                               where C.VoucherNumber.Contains(term) && C.Status != "InActive"
                               orderby C.VoucherNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.VoucherNumber,
                                   label = C.VoucherNumber
                               }).ToList();
                    }
                    else if (type == "CLP")
                    {
                        pro = (from C in context.tblClearancePaymentEntry
                               where C.BillNumber.Contains(term) && C.Status != "InActive"
                               orderby C.BillNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.BillNumber,
                                   label = C.BillNumber
                               }).ToList();
                    }
                    else if (type == "DTV" || type == "TAD" || type == "TST")
                    {
                        pro = (from C in context.tblTravelBill
                               where C.BillNumber.Contains(term) && C.Status != "InActive" && C.TransactionTypeCode == type
                               orderby C.BillNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.BillNumber,
                                   label = C.BillNumber
                               }).ToList();
                    }
                    else if (type == "PTP")
                    {
                        pro = (from C in context.tblPartTimePayment
                               where C.PartTimePaymentNumber.Contains(term) && C.Status != "InActive"
                               orderby C.PartTimePaymentNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.PartTimePaymentNumber,
                                   label = C.PartTimePaymentNumber
                               }).ToList();
                    }
                    else if (type == "REM")
                    {
                        pro = (from C in context.tblAdhocPayment
                               where C.AdhocPaymentNumber.Contains(term) && C.Status != "InActive"
                               orderby C.AdhocPaymentNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.AdhocPaymentNumber,
                                   label = C.AdhocPaymentNumber
                               }).ToList();
                    }
                    else if (type == "PDT")
                    {
                        pro = (from C in context.tblProjectDirectTransfer
                               where C.TransferNumber.Contains(term) && C.Status != "InActive"
                               orderby C.TransferNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.TransferNumber,
                                   label = C.TransferNumber
                               }).ToList();
                    }
                    else if (type == "PFT")
                    {
                        pro = (from C in context.tblProjectTransfer
                               where C.TransferNumber.Contains(term) && C.Status != "InActive"
                               orderby C.TransferNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.TransferNumber,
                                   label = C.TransferNumber
                               }).ToList();
                    }
                    else if (type == "FRM")
                    {
                        pro = (from C in context.tblForeignRemittance
                               where C.ForeignRemitNumber.Contains(term) && C.Status != "InActive"
                               orderby C.ForeignRemitNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.ForeignRemitNumber,
                                   label = C.ForeignRemitNumber
                               }).ToList();
                    }
                    else if (type == "CTR")
                    {
                        pro = (from C in context.tblContra
                               where C.ContraNumber.Contains(term) && C.Status != "InActive"
                               orderby C.ContraNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.ContraNumber,
                                   label = C.ContraNumber
                               }).ToList();
                    }
                    else if (type == "OHAR")
                    {
                        pro = (from C in context.tblOHReversal
                               where C.OHReversalNumber.Contains(term) && C.Status != "InActive"
                               orderby C.OHReversalNumber descending
                               select new AutoCompleteModel
                               {
                                   value = C.OHReversalNumber,
                                   label = C.OHReversalNumber
                               }).ToList();
                    }

                }
                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static List<CodeControllistviewModel> GetInActiveFunList()
        {
            try
            {

                List<CodeControllistviewModel> list = new List<CodeControllistviewModel>();
                int[] Arr = { 1, 2, 6, 9, 1031, 1039, 1040, 1036, 1034, 1030, 1025, 18, 1046, 1047, 1048 };
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblTransactionTypeCode
                                 where Arr.Contains(C.TransactionTypeCodeId)
                                 select C).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].TransactionType,
                                CodeValDetail = query[i].TransactionTypeCode
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<CodeControllistviewModel>();
            }

        }

        public static string GetAgencyName(int agyid, bool nameOnly = false)
        {
            try
            {
                string Agencyname = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = (from a in context.tblAgencyMaster
                                 where a.AgencyId == agyid
                                 select a).FirstOrDefault();
                    if (query != null)
                        Agencyname = nameOnly ? query.AgencyName : query.AgencyCode + "-" + query.AgencyName;
                }
                return Agencyname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                string Agencyname = string.Empty;
                return Agencyname;
            }
        }
        public Tuple<string, string, string> GetDISCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string BDate = "NA";
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblDistribution.Where(m => m.DistributionNumber == RefNumber).FirstOrDefault();
                    var TransCode = "DIS";
                    int RefId = BillDate.DistributionId;
                    var CommDate = context.tblCommitmentLog.Where(m => m.TransactionTypeCode == TransCode && m.RefId == RefId && m.IsCurrentVersion_f == true).FirstOrDefault();
                    if (BoaDate != null)
                        BDate = string.Format("{0:dd-MMM-yyyy}", BoaDate);
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), string.Format("{0:dd-MMM-yyyy}", CommDate.CRTD_TS));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public static List<MasterlistviewModel> GetAccGroupforAdminVoucher()
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblAccountGroup
                                 where b.AccountGroupId == 18
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountGroupId,
                                name = query[i].AccountGroup
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }
        }
        public static List<MasterlistviewModel> GetAccHeadforAdminVoucher()
        {
            try
            {
                int[] ID = { 348, 347, 302, 299, 138 };
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblAccountHead
                                 where ID.Contains(b.AccountHeadId)
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountHeadId,
                                name = query[i].AccountHead
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }
        }
        public static string GetNewAdminVoucherNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "AVO/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblAdminVoucher
                               where b.AdminVoucherNumber.Contains(checkNum)
                               orderby b.AdminVoucherId descending
                               select b.AdminVoucherNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetVendorbankCountry(int bankcountryid)
        {
            try
            {
                string bankname = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var bankcountry = context.tblCountries.Where(x => x.countryID == bankcountryid).Select(x => x.countryName).FirstOrDefault();
                    if (bankcountry != null)
                        bankname = bankcountry;
                }
                return bankname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                string bankname = string.Empty;
                return bankname;
            }
        }
        public static bool GetPaymentProcessStatus(string number)
        {
            bool flowstatus = false;
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var paymentflow = context.tblPayment.Where(x => x.ReferenceNumber == number && x.Status == "Payment Processed").FirstOrDefault();
                    if (paymentflow != null)
                    {
                        flowstatus = true;
                    }
                    return flowstatus;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return flowstatus;
            }
        }
        public static int GetProcessGuidelineId(int Fid, string type, decimal amount)
        {
            int pgId = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var pcc = context.tblProcessCodeControl.FirstOrDefault(m => m.FunctionId == Fid && m.Type == type && m.MinimumValue <= amount && m.MaximumValue >= amount && m.Status == "Active");
                    if (pcc != null)
                    {
                        pgId = pcc.FlowId ?? 0;

                    }

                }
                return pgId;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return pgId;
            }
        }
        public Tuple<string, string, string> GetFDCCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblFixedDepositClosed.Where(m => m.FixedDepositClosedNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), "NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetFDTCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblFixedDeposit.Where(m => m.FixedDepositNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), "NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public Tuple<string, string, string> GetGOFCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblGSTOffset.Where(m => m.GSTOffsetNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), "NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }


        public Tuple<string, string, string> GetTdsPaymentCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblTDSPayment.Where(m => m.TDSPaymentNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), "NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        public static bool ValidateParttimepaymentStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblPartTimePayment.FirstOrDefault(m => m.PartTimePaymentId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateImprestEnhanceStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestPaymentDetails.FirstOrDefault(m => m.ImprestPaymentDetailsId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateSBICardStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSBIPrepaidCardProjectDetails.FirstOrDefault(m => m.SBIECardProjectDetailsId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }


        public static Tuple<int, int> GetECRCommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblSBIECardPrjctCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.RecoupmentId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidateSummerInternshipStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSummerInternshipStudentDetails.FirstOrDefault(m => m.SummerInternshipStudentId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static Tuple<int, int> GetSMICommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblSummrInternCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.SummerInternId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidateImprestPaymentStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblIMPUserDetails.FirstOrDefault(m => m.IMPUserDetailsId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateImprestBillBookingStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestRecoupment.FirstOrDefault(m => m.RecoupmentId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static Tuple<int, int> GetIMRCommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblSummrInternCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.SummerInternId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static Tuple<int, int> GetPTPCommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblPartTimePaymentCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.PartTimePaymentId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidateTempAdvStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static Tuple<int, int> GetLCOCommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblLCCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.LCDraftId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidateLCOpeningStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCDraftDetails.FirstOrDefault(m => m.Id == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateLCAmmendmentStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCAmmendment.FirstOrDefault(m => m.Id == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static Tuple<int, int> GetLCACommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblLCAmmendmentCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.LCAmmendmentId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool ValidateLCRetirementStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblLCRetirement.FirstOrDefault(m => m.Id == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static Tuple<int, int> GetLCRCommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblLCRetirementCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.LCRetirementId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                    }
                }
                return Tuple.Create(type, sponCate);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static Tuple<int, int, int> GetTMPCommitmentProjectDetail(int BillId)
        {
            try
            {
                int type = 0;
                int sponCate = 0;
                int classifCode = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblTempAdvCommitmentDetail
                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                 where c.TempAdvId == BillId && c.Status == "Active"
                                 select p).FirstOrDefault();

                    if (query != null)
                    {
                        type = query.ProjectType ?? 0;
                        sponCate = Convert.ToInt32(query.SponProjectCategory);
                        classifCode = Convert.ToInt32(query.ProjectClassification);
                    }
                }
                return Tuple.Create(type, sponCate, classifCode);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public Tuple<string, string, string> GetOHPCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblOverheadsPosting.Where(m => m.OverheadsPostingNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }
        //  public static bool CheckSalaryProcessed(int paybill, string monthYear, int typeOfPay)
        //  {
        //      try
        //      {
        //          bool isValid = false;
        //          using (var context = new IOASDBEntities())
        //          {
        //              isValid = (from sp in context.tblSalaryPayment
        //                         join ph in context.tblSalaryPaymentHead on sp.PaymentHeadId equals ph.PaymentHeadId
        //                         where ph.PaymentMonthYear == monthYear && sp.PayBill == paybill && ph.TypeOfPayBill == typeOfPay
        //                         select sp).Any();
        //          }
        //          return isValid;
        //      }
        //      catch (Exception ex)
        //      {
        //          Infrastructure.IOASException.Instance.HandleMe(
        //(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
        //          return false;
        //      }
        //  }
        public static bool CheckSalaryProcessed(string paybill, string monthYear, int typeOfPay)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    isValid = (from sp in context.tblSalaryPayment
                               join ph in context.tblSalaryPaymentHead on sp.PaymentHeadId equals ph.PaymentHeadId
                               where ph.PaymentMonthYear == monthYear && sp.PayBill == paybill && ph.TypeOfPayBill == typeOfPay
                               select sp).Any();
                }
                return isValid;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public static Tuple<bool, decimal> GetMainSalaryOtherOrderDetail(string paybill, string fileNo)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from sp in context.vwMainSalary
                                 where sp.FileNo != fileNo && sp.paybill == paybill
                                 select sp).ToList();
                    if (query.Count > 0)
                    {
                        decimal basic = query.Sum(m => m.currentPay) ?? 0;
                        decimal hra = query.Sum(m => m.currentHra) ?? 0;
                        decimal ma = query.Sum(m => m.currentMedical) ?? 0;
                        decimal misc_rec = query.Sum(m => m.totalRecovery) ?? 0;
                        decimal misc_pay = query.Sum(m => m.totalMiscPay) ?? 0;
                        decimal lop = query.Sum(m => m.currentLOP) ?? 0;
                        decimal taxable = basic + hra + ma + misc_pay - misc_rec - lop;
                        return Tuple.Create(true, (decimal)taxable);
                    }
                }
                return Tuple.Create(false, (decimal)0);
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create(false, (decimal)0);
            }
        }
        public static int CalculateAge(DateTime DOB)
        {
            TimeSpan ts = DateTime.Now - DOB;
            return Convert.ToInt32(ts.Days / 365.25);
        }
        public static bool IsUAYProject(int projectId)
        {
            try
            {
                bool isUAY = false;
                using (var context = new IOASDBEntities())
                {
                    isUAY = context.tblProject.Any(m => m.ProjectId == projectId && m.ProjectNumber.Contains("MUAY"));

                }
                return isUAY;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static string GetMinistryName(int minid)
        {
            string MinistryName = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblMinistryMaster
                                 where c.MinistryId == minid
                                 select c.MinistryName).FirstOrDefault();
                    if (query != null)
                    {
                        MinistryName = query;
                    }
                }
                return MinistryName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return MinistryName;
            }
        }

        public static string GetCurrencyName(int currencyId)
        {
            string CurrencyName = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblCurrency
                                 where c.CurrencyID == currencyId
                                 select c.CurrencyUnit).FirstOrDefault();
                    if (query != null)
                    {
                        CurrencyName = query;
                    }
                }
                return CurrencyName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return CurrencyName;
            }
        }

        public static string GetPaymentType(int codeid, string codename, string codedes = "")
        {
            string codevaldetails = "";
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblCodeControl
                                 where cc.CodeValAbbr == codeid && cc.CodeName == codename && (String.IsNullOrEmpty(codedes) || cc.CodeDescription == codedes)
                                 select cc.CodeValDetail).FirstOrDefault();
                    if (query != null)
                    {
                        codevaldetails = query;
                    }
                }
                return codevaldetails;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return codevaldetails;
            }
        }
        public static List<MasterlistviewModel> GetAutoCompleteReceiptNo(int?OHId=0,int? ProjectId = null)
        {
            try
            {

                List<MasterlistviewModel> listWF = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                    if (OHId > 0)
                    {
                        listWF = (from oh in context.tblReceiptOverheadBreakup
                                join R in context.tblReceipt on oh.ReceiptId equals R.ReceiptId
                                join P in context.tblProject on R.ProjectId equals P.ProjectId
                                join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                where P.ProjectType == 1 && P.Status == "Active" && (oh.IsPosted_f == false || oh.IsPosted_f == null) && (context.tblOverheadsPostingDetails.Any(m => m.ProjectId == P.ProjectId) && context.tblOverheadsPosting.Any(m => m.Status == "Open"))
                                orderby P.ProjectNumber
                                group new { R.ProjectId , R.ReceiptNumber } by P.ProjectId into g
                                select new MasterlistviewModel
                                {
                                    id = g.Key,
                                    name = g.Select(m => m.ReceiptNumber).FirstOrDefault(),                                    
                                }).ToList();

                    }
                    else
                    {
                           listWF = (from C in context.tblReceipt
                              where C.ProjectId == ProjectId && C.Status == "Completed"
                              orderby C.ReceiptNumber
                              select new MasterlistviewModel()
                              {
                                  id = C.ReceiptId,
                                  name = C.ReceiptNumber
                              }).ToList();                                                                          
                     }
                return listWF;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> listWF = new List<MasterlistviewModel>();
                return listWF;
            }

        }
        public static string GetNewForm3CNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "F3C/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblForm3c
                               where b.VoucherNumber.Contains(checkNum)
                               orderby b.Form3cId descending
                               select b.VoucherNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static decimal GetLeadgerBalance(int AccountHeadId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (AccountHeadId > 0)
                    {
                        decimal Dr = context.vw_LeadgerBalance.Where(m => m.AccountHeadId == AccountHeadId && m.TransactionType == "Debit").Sum(m => m.Amount) ?? 0;
                        decimal Cr = context.vw_LeadgerBalance.Where(m => m.AccountHeadId == AccountHeadId && m.TransactionType == "Credit").Sum(m => m.Amount) ?? 0;
                        return (Cr - Dr);
                    }
                    else
                        return 0;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static bool ValidateForeignRemitOnBillEntryEdit(int foreignRemitId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblForeignRemittance.FirstOrDefault(m => m.ForeignRemitId == foreignRemitId && m.TransactionTypeCode == "FRM" && m.Status == "Pending Bill of Entry");
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<AutoCompleteModel> GetAlloHeadForAnnAccounts()
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblBudgetHead
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new AutoCompleteModel()
                            {
                                value = query[i].AlloName,
                                label = query[i].HeadName
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                return list;
            }
        }
        public static List<AutoCompleteModel> GetExpHeadForAnnAccounts()
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from b in context.tblBudgetHead
                                 select b).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new AutoCompleteModel()
                            {
                                value = query[i].ExpName,
                                label = query[i].HeadName
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                return list;
            }
        }
        public static List<AutoCompleteModel> GetDepartmentList()
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblProject
                                 join d in context.tblFacultyDetail on c.PIDepartment equals d.DepartmentCode
                                 where !String.IsNullOrEmpty(d.DepartmentCode) && !String.IsNullOrEmpty(d.DepartmentName) && !String.IsNullOrEmpty(c.PIDepartment)
                                 select new { c.PIDepartment, d.DepartmentName }).Distinct().ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new AutoCompleteModel()
                            {
                                value = query[i].PIDepartment,
                                label = query[i].DepartmentName
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                return list;
            }
        }
        public static string GetNewGSTOffsetNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "GOF/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblGSTOffset
                               where b.GSTOffsetNumber.Contains(checkNum)
                               orderby b.GSTOffsetid descending
                               select b.GSTOffsetNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static string GetNewOverheadPaymentProcessNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "OH/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblOverHeadPaymentProcess
                               where b.RefNo.Contains(checkNum)
                               orderby b.OverHeadPaymentProcessId descending
                               select b.RefNo).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static bool IsInUcCommitment(int cId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = (from uc in context.tblUCHead
                                 join c in context.tblUCCommitmentDetail on uc.UCId equals c.UCId
                                 where uc.TypeofUC == 1 && c.CommitmentId == cId && uc.Status != "InActive"
                                 select c.CommitmentId).FirstOrDefault();
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static Tuple<string, string, int, int, int> GetInvoiceDoc(DateTime FromDate, DateTime ToDate)
        {
            try
            {
                ToDate = ToDate.AddDays(1).AddTicks(-2);
                using (var context = new IOASDBEntities())
                {
                    var FirstQry = context.tblProjectInvoice.Where(b => b.InvoiceDate >= FromDate && b.InvoiceDate <= ToDate && b.Status != "InActive").OrderBy(m => m.InvoiceDate).FirstOrDefault();
                    var LastQry = context.tblProjectInvoice.Where(b => b.InvoiceDate >= FromDate && b.InvoiceDate <= ToDate && b.Status != "InActive").OrderByDescending(m => m.InvoiceDate).FirstOrDefault();
                    int activecount = context.tblProjectInvoice.Where(b => b.InvoiceDate >= FromDate && b.InvoiceDate <= ToDate && b.Status != "InActive").ToList().Count();
                    int inactivecount = context.tblProjectInvoice.Where(b => b.InvoiceDate >= FromDate && b.InvoiceDate <= ToDate && (b.Status == "InActive" || b.TotalInvoiceValue == 0)).ToList().Count();
                    int count = activecount + inactivecount;
                    return Tuple.Create(FirstQry.InvoiceNumber, LastQry.InvoiceNumber, activecount, inactivecount, count);

                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (int)0, (int)0, (int)0);
            }
        }
        public static Tuple<string, string, int, int, int> GetCreditnoteDoc(DateTime FromDate, DateTime ToDate)
        {
            try
            {
                ToDate = ToDate.AddDays(1).AddTicks(-2);
                using (var context = new IOASDBEntities())
                {
                    var FirstQry = context.tblCreditNote.Where(b => b.CRTD_TS >= FromDate && b.CRTD_TS <= ToDate && b.Status == "Completed").OrderBy(m => m.CRTD_TS).FirstOrDefault();
                    var LastQry = context.tblCreditNote.Where(b => b.CRTD_TS >= FromDate && b.CRTD_TS <= ToDate && b.Status == "Completed").OrderByDescending(m => m.CRTD_TS).FirstOrDefault();
                    int activecount = context.tblCreditNote.Where(b => b.CRTD_TS >= FromDate && b.CRTD_TS <= ToDate && b.Status == "Completed").ToList().Count();
                    int inactivecount = context.tblCreditNote.Where(b => b.CRTD_TS >= FromDate && b.CRTD_TS <= ToDate && (b.Status == "InActive")).ToList().Count();
                    int count = activecount + inactivecount;
                    return Tuple.Create(FirstQry.CreditNoteNumber, LastQry.CreditNoteNumber, activecount, inactivecount, count);

                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (int)0, (int)0, (int)0);
            }
        }

        public static string GetReportName(int rId)
        {
            string name = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblDynamicReports.FirstOrDefault(m => m.ReportID == rId);
                    if (query != null)
                    {
                        name = query.ReportName;
                    }
                }
                return name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return name;
            }
        }
        public static List<ProjectExpDateModel> GetProjectExpYear(int ProjectId)
        {
            try
            {

                List<ProjectExpDateModel> listWF = new List<ProjectExpDateModel>();
                int Year = 0;
                using (var context = new IOASDBEntities())
                {
                    var pQuery = context.tblProject.FirstOrDefault(m => m.ProjectId == ProjectId);
                    if (pQuery != null)
                    {
                        var sDate = pQuery.TentativeStartDate;
                        var extDate = GetProjectDueDate(ProjectId);
                        var eDate = extDate == null ? pQuery.TentativeCloseDate : extDate;
                        if (eDate != null && sDate != null)
                        {
                            var dt3 = eDate.Value.Year - sDate.Value.Year;
                            Year = dt3;
                        }
                        if (Year > 0)
                        {
                            for (int i = 0; i < Year; i++)
                            {
                                listWF.Add(new ProjectExpDateModel()
                                {
                                    Id = i,
                                    label = "Year " + (i + 1),
                                    FromDate = new DateTime((sDate.Value.Year) + i, sDate.Value.Month, sDate.Value.Day),
                                    ToDate = new DateTime((sDate.Value.Year) + i + 1, eDate.Value.Month, eDate.Value.Day),
                                });
                            }
                        }
                        else if (eDate.Value.Year == sDate.Value.Year)
                        {
                            listWF.Add(new ProjectExpDateModel()
                            {
                                Id = 0,
                                label = "Year " + 1,
                                FromDate = new DateTime((sDate.Value.Year), sDate.Value.Month, sDate.Value.Day),
                                ToDate = new DateTime((eDate.Value.Year), eDate.Value.Month, eDate.Value.Day),
                            });

                        }
                    }

                }
                return listWF;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<ProjectExpDateModel> listWF = new List<ProjectExpDateModel>();
                return listWF;
            }

        }

        public static decimal GetTotalReceiptAmount(int pId, int rId = 0)
        {
            try
            {
                decimal recAmt = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblReceipt.Where(r => r.ProjectId == pId && r.ReceiptId != rId && r.CategoryId != 16 && r.Status != "InActive").ToList();
                    recAmt = query.Sum(m => m.ReceiptAmount) ?? 0;
                    decimal cgst = query.Sum(m => m.CGST) ?? 0;
                    decimal sgst = query.Sum(m => m.SGST) ?? 0;
                    decimal igst = query.Sum(m => m.IGST) ?? 0;
                    recAmt = recAmt - cgst - sgst - igst;
                    decimal obRec = context.tblReceiptOB.Where(m => m.ProjectId == pId).Sum(m => m.ReceiptOpeningBalExclInterest) ?? 0;
                    recAmt += obRec;
                    return recAmt;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return 0;
            }
        }
        public static bool ValidateNegativeBalance(int pId, decimal amt, int negId = 0)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    //var pId = (from U in context.tblNegativeBalance
                    //                   where U.NegativeBalanceId == negId
                    //           select U).FirstOrDefault().ProjectId.GetValueOrDefault(0);
                    decimal sancVal = GetSanctionValue(pId);
                    var query = context.tblReceipt.Where(r => r.ProjectId == pId && r.CategoryId != 16 && r.Status == "Completed").ToList();
                    decimal recAmt = query.Sum(m => m.ReceiptAmount) ?? 0;
                    decimal cgst = query.Sum(m => m.CGST) ?? 0;
                    decimal sgst = query.Sum(m => m.SGST) ?? 0;
                    decimal igst = query.Sum(m => m.IGST) ?? 0;
                    recAmt = recAmt - cgst - sgst - igst;
                    decimal obRec = context.tblReceiptOB.Where(m => m.ProjectId == pId).Sum(m => m.ReceiptOpeningBalExclInterest) ?? 0;
                    recAmt += obRec;
                    decimal negBal = (from U in context.tblNegativeBalance
                                      where U.ProjectId == pId && U.NegativeBalanceId != negId && U.Status != "InActive" && U.Status != "Rejected"
                                      select U).Sum(m => m.NegativeBalanceAmount) ?? 0;
                    decimal ttlAmt = recAmt + negBal + amt;
                    if (sancVal < ttlAmt)
                        return false;
                    else
                        return true;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static string GetCurrentProposalStatus(int ProposalId)
        {
            var Data = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.tblProposal.Where(m => m.ProposalId == ProposalId).Select(m => m.Status).FirstOrDefault();
                    return Data = Qry;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Data;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteAgency(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblAgencyMaster
                            where (C.AgencyName.Contains(term) || C.AgencyCode.Contains(term))
                            && C.Status != "InActive"
                            orderby C.AgencyName
                            select new AutoCompleteModel()
                            {
                                value = C.AgencyId.ToString(),
                                label = C.AgencyCode + "-" + C.AgencyName + "-" + C.GSTIN
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }


        public static List<AutoCompleteModel> GetAllProposalNumber(string term)
        {
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.tblProposal
                           where C.ProposalNumber.Contains(term) && C.Status != "InActive" && C.Status != "Project Open"
                           orderby C.ProposalNumber
                           select new AutoCompleteModel()
                           {
                               value = C.ProposalId.ToString(),
                               label = C.ProposalNumber
                           }).ToList();

                }

                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }

        public static List<AutoCompleteModel> GetAutoCompleteAgency(string term, int? type)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    if (type == 1)
                    {
                        list = (from C in context.tblAgencyMaster
                                where (C.AgencyName.Contains(term) || C.AgencyCode.Contains(term))
                                && C.Status != "InActive"
                                && C.AgencyId != 3210
                                orderby C.AgencyName
                                select new AutoCompleteModel()
                                {
                                    value = C.AgencyName.ToString(),
                                    label = C.AgencyName
                                }).ToList();
                    }

                    else
                    {
                        list = (from C in context.tblAgencyMaster
                                where (C.AgencyName.Contains(term) || C.AgencyCode.Contains(term))
                                && C.Status != "InActive"
                                 && C.AgencyId != 3210
                                orderby C.AgencyName
                                select new AutoCompleteModel()
                                {
                                    value = C.AgencyId.ToString(),
                                    label = C.AgencyCode + "-" + C.AgencyName + "-" + C.GSTIN
                                }).ToList();
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteScheme(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.vw_ProjectSchemes
                            where (C.ProjectSchemeCode.Contains(term) || C.SchemeCode.Contains(term))

                            orderby C.ProjectSchemeCode
                            select new AutoCompleteModel()
                            {
                                value = C.ProjectSchemeCode.ToString(),
                                label = C.SchemeCode
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public Tuple<string, string, string> GetAVOCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblAdminVoucher.Where(m => m.AdminVoucherNumber == RefNumber).FirstOrDefault();

                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public Tuple<string, string, string> GetIMECurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblImprestPaymentDetails.Where(m => m.ImprestEnhanceNumber == RefNumber).FirstOrDefault();

                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CrtdTS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public Tuple<string, string, string> GetIMPCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblIMPUserDetails.Where(m => m.ImprestNumber == RefNumber).FirstOrDefault();

                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CrtdTS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public Tuple<string, string, string> GetIMCCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblImprestClose.Where(m => m.ImprestCloseNumber == RefNumber).FirstOrDefault();

                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public static string GetDirectoryName(string path)
        {
            path = path.TrimEnd('/');
            return path.Substring(path.LastIndexOf("/") + 1);
        }
        public static string ToRoman(int number)
        {
            if ((number < 0) || (number > 3999)) throw new ArgumentOutOfRangeException("insert value betwheen 1 and 3999");
            if (number < 1) return string.Empty;
            if (number >= 1000) return "M" + ToRoman(number - 1000);
            if (number >= 900) return "CM" + ToRoman(number - 900);
            if (number >= 500) return "D" + ToRoman(number - 500);
            if (number >= 400) return "CD" + ToRoman(number - 400);
            if (number >= 100) return "C" + ToRoman(number - 100);
            if (number >= 90) return "XC" + ToRoman(number - 90);
            if (number >= 50) return "L" + ToRoman(number - 50);
            if (number >= 40) return "XL" + ToRoman(number - 40);
            if (number >= 10) return "X" + ToRoman(number - 10);
            if (number >= 9) return "IX" + ToRoman(number - 9);
            if (number >= 5) return "V" + ToRoman(number - 5);
            if (number >= 4) return "IV" + ToRoman(number - 4);
            if (number >= 1) return "I" + ToRoman(number - 1);
            throw new ArgumentOutOfRangeException("something bad happened");
        }
        public static string Ordinal(int num)
        {
            string number = num.ToString();
            if (number.EndsWith("11")) return number + "th";
            if (number.EndsWith("12")) return number + "th";
            if (number.EndsWith("13")) return number + "th";
            if (number.EndsWith("1")) return number + "st";
            if (number.EndsWith("2")) return number + "nd";
            if (number.EndsWith("3")) return number + "rd";
            return number + "th";
        }
        public static string GetCapitalAlphabets(int index)
        {
            const string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

            var value = "";

            if (index >= letters.Length)
                value += letters[index / letters.Length - 1];

            value += letters[index % letters.Length];

            return value;
        }
        public static string GetSmallAlphabets(int index)
        {
            const string letters = "abcdefghijklmnopqrstuvwxyz";
            var value = "";

            if (index >= letters.Length)
                value += letters[index / letters.Length - 1];

            value += letters[index % letters.Length];

            return value;
        }
        public static string GetVendorName(int vendorid)
        {
            string name = "";
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = (from v in context.tblVendorMaster
                                 where v.VendorId == vendorid
                                 select v.Name).FirstOrDefault();
                    if (query != null)
                    {
                        name = query;

                    }

                }
                return name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return name;
            }
        }
        public static string GetPanNumber(int vendorid)
        {
            string pannumber = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from v in context.tblVendorMaster
                                 where v.VendorId == vendorid
                                 select v.PAN).FirstOrDefault();
                    if (query != null)
                    {
                        pannumber = query;
                    }
                }
                return pannumber;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return pannumber;
            }
        }
        public static string GetGstNumber(int vendorid)
        {
            string gstin = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblVendorMaster
                                 where c.VendorId == vendorid
                                 select c.GSTIN).FirstOrDefault();
                    if (query != null)
                    {
                        gstin = query;
                    }
                }
                return gstin;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return gstin;
            }
        }
        public static string GetAddress(int vendorid)
        {
            string address = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblVendorMaster
                                 where c.VendorId == vendorid
                                 select c.Address).FirstOrDefault();
                    if (query != null)
                    {
                        address = query;
                    }
                }
                return address;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return address;
            }

        }

        public static string GetBankHeadName(int bankhead)
        {
            var headname = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from A in context.tblAccountHead
                                 where A.AccountHeadId == bankhead
                                 select A.AccountHead).FirstOrDefault();
                    if (query != null)
                    {
                        headname = query;
                    }
                }
                return headname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return headname;
            }
        }
        public static string GetPIName(int userid)
        {
            string PIname = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from vw in context.vwFacultyStaffDetails
                                 where vw.UserId == userid
                                 select new { vw.FirstName, vw.EmployeeId }).FirstOrDefault();
                    if (query != null)
                    {
                        PIname = query.EmployeeId + "-" + query.FirstName;
                    }
                }
                return PIname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return PIname;
            }
        }
        public static string GetImpBankName(int bankId)
        {
            try
            {
                string PIBankname = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var bankname = context.tblIITMBankMaster.Where(x => x.BankId == bankId).Select(x => x.BankName).FirstOrDefault();
                    if (bankname != null)
                        PIBankname = bankname;
                }
                return PIBankname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                string PIBankname = string.Empty;
                return PIBankname;
            }
        }
        public static string GetProjectNameandNumber(int Projid)
        {
            string projectName = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from p in context.tblProject
                                 where p.ProjectId == Projid
                                 select new { p.ProjectNumber, p.ProjectTitle }).FirstOrDefault();
                    if (query != null)
                    {
                        projectName = query.ProjectNumber + "-" + query.ProjectTitle;
                    }
                }
                return projectName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return projectName;
            }
        }
        public static string GetCleancenceAgentname(int clrAgentId)
        {
            try
            {
                string Agencyname = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblClearanceAgentMaster.Where(x => x.ClearanceAgentId == clrAgentId).Select(x => x.Name).FirstOrDefault();
                    if (query != null)
                        Agencyname = query;
                }
                return Agencyname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                string Agencyname = string.Empty;
                return Agencyname;
            }
        }

        public static List<AutoCompleteModel> GetAllPostedReferenceNumber(string term, bool type = false)
        {
            string[] TypeCode = { "STV", "GVR", "CLV", "DTV", "PTM", "IMR" };
            try
            {
                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {

                    if (type == true)
                    {
                        pro = (from C in context.tblBOA
                               where C.Status == "Posted"
                               && C.RefNumber.Contains(term)
                               && TypeCode.Contains(C.TransactionTypeCode)
                               && !context.tblHeadCredit.Any(m => m.BillReferenceNumber == C.RefNumber && m.Status != "InActive")
                               orderby C.RefNumber descending
                               group C by C.RefNumber into g
                               select new AutoCompleteModel()
                               {
                                   value = g.Key,
                                   label = g.Key
                               }).ToList();
                    }
                    else
                    {
                        pro = (from C in context.tblBOA
                               where C.Status == "Posted"
                               && C.RefNumber.Contains(term)
                               orderby C.RefNumber descending
                               group C by C.RefNumber into g
                               select new AutoCompleteModel()
                               {
                                   value = g.Key,
                                   label = g.Key
                               }).Concat(from C in context.tblBOAExpenditureDetail
                                         where C.TransactionTypeCode == "PFT"
                                         && C.ReferenceNumber.Contains(term)
                                         orderby C.BOAId descending
                                         group C by C.ReferenceNumber into g
                                         select new AutoCompleteModel
                                         {
                                             value = g.Key,
                                             label = g.Key
                                         }).ToList();
                    }

                }
                return pro;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        public static string GetPINameOnly(int userid)
        {
            string PIname = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from vw in context.vwFacultyStaffDetails
                                 where vw.UserId == userid
                                 select new { vw.FirstName, vw.EmployeeId }).FirstOrDefault();
                    if (query != null)
                    {
                        PIname = query.FirstName;
                    }
                }
                return PIname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return PIname;
            }
        }
        public Tuple<string, string, string> GetHCRCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblHeadCredit.Where(m => m.HeadCreditNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CrtdTS), (string)"NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteAccountHead(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblAccountHead
                            where C.AccountHead.Contains(term)
                            orderby C.AccountHeadId
                            select new AutoCompleteModel()
                            {
                                value = C.AccountHeadId.ToString(),
                                label = C.AccountHead
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteBankAccountHead(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblAccountHead
                            where C.AccountHead.Contains(term) && (C.AccountGroupId == 38 || C.AccountGroupId == 61)
                            orderby C.AccountHeadId
                            select new AutoCompleteModel()
                            {
                                value = C.AccountHeadId.ToString(),
                                label = C.AccountHead
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }

        public static Tuple<string, string> DateModificationRange(string RefNo)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string[] words = RefNo.Split('/');
                    string FinYear = words[1];
                    var FinQry = context.tblFinYear.Where(m => m.Year == FinYear).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MM-yyyy}", FinQry.StartDate), string.Format("{0:dd-MM-yyyy}", FinQry.EndDate));
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA");
            }
        }


        public static List<MasterlistviewModel> GetICSROHledger(bool Credit_f, bool ICSR_f)
        {
            List<MasterlistviewModel> led = new List<MasterlistviewModel>();
            try
            {

                using (var context = new IOASDBEntities())
                {
                    int GrpId = 0;
                    int HedId = 0;
                    int[] GrpArr = { 29, 30, 31, 32, 64, 65 };
                    int[] GrpArr2 = { };

                    //if (Credit_f == false && ICSR_f == true)
                    //{
                    //    var query1 = (from H in context.tblAccountHead
                    //                  join G in context.tblAccountGroup on H.AccountGroupId equals G.AccountGroupId
                    //                  join T in context.tblAccountType on G.AccountType equals T.AccountTypeId
                    //                  where T.AccountTypeId == 2
                    //                  select new
                    //                  {
                    //                      H.AccountHead,
                    //                      H.AccountHeadId
                    //                  }).Distinct().ToList();

                    //    if (query1.Count > 0)
                    //    {
                    //        for (int i = 0; i < query1.Count; i++)
                    //        {
                    //            led.Add(new MasterlistviewModel()
                    //            {
                    //                id = query1[i].AccountHeadId,
                    //                name = query1[i].AccountHead,
                    //            });
                    //        }
                    //    }
                    //    return led;
                    //}
                    //else if (Credit_f == false && ICSR_f == false)
                    //{
                    //    GrpId = 21;
                    //    HedId = 388;
                    //}
                    //else if (Credit_f == true && ICSR_f == true)
                    //{
                    //    var query1 = (from H in context.tblAccountHead
                    //                  where (GrpArr.Contains(H.AccountGroupId ?? 0))
                    //                  && (HedId == 0 || H.AccountHeadId == HedId)
                    //                  select new
                    //                  {
                    //                      H.AccountHead,
                    //                      H.AccountHeadId
                    //                  }).Distinct().ToList();

                    //    if (query1.Count > 0)
                    //    {
                    //        for (int i = 0; i < query1.Count; i++)
                    //        {
                    //            led.Add(new MasterlistviewModel()
                    //            {
                    //                id = query1[i].AccountHeadId,
                    //                name = query1[i].AccountHead,
                    //            });
                    //        }
                    //    }
                    //    return led;
                    //}
                    //else if (Credit_f == true && ICSR_f == false)
                    //{
                    //    GrpId = 33;
                    //    HedId = 387;
                    //}


                    if (Credit_f == false)
                    {
                        GrpId = 21;
                        HedId = 388;
                    }
                    if (Credit_f == true)
                    {
                        GrpId = 33;
                        HedId = 387;
                    }
                    var query = (from H in context.tblAccountHead
                                 where (H.AccountGroupId == GrpId)
                                 && (HedId == 0 || H.AccountHeadId == HedId)
                                 select new
                                 {
                                     H.AccountHead,
                                     H.AccountHeadId
                                 }).Distinct().ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            led.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountHeadId,
                                name = query[i].AccountHead,
                            });
                        }
                    }

                }
                return led;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return led;
            }

        }
        public static bool IsICSROHproj(int ProjectId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int[] Class = { 4, 6 };
                    //  if (context.tblCodeControl.Any(m => m.CodeName == "ICSROH Projects" && m.CodeValAbbr == ProjectId && m.CodeDescription == "ICSROH Projects PDT"))
                    if (context.tblProject.Any(m => Class.Contains(m.ProjectClassification ?? 0) && m.ProjectId == ProjectId))

                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static List<TransactionAndTaxesModel> GetAccountHeadListbyGroup(int AccountGroupId)
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from H in context.tblAccountHead
                             where H.AccountGroupId == AccountGroupId
                             select new
                             {
                                 H.AccountHead,
                                 H.AccountHeadId
                             }).Distinct().ToList();

                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        transtype.Add(new TransactionAndTaxesModel()
                        {
                            HeadId = Convert.ToInt32(query[i].AccountHeadId),
                            Head = query[i].AccountHead,
                        });
                    }
                }
            }
            return transtype;
        }
        public static string GetAccountGroupName(int groupId)
        {
            string accountgroupname = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var accountname = (from ac in context.tblAccountGroup
                                       where ac.AccountGroupId == groupId
                                       select ac.AccountGroup).FirstOrDefault();
                    if (accountname != null)
                    {
                        accountgroupname = accountname;
                    }
                }
                return accountgroupname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return accountgroupname;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteInvoceListForReceipt(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblProjectInvoice
                            where C.InvoiceNumber.Contains(term) && (C.Status == "Completed" || C.Status == "Active")
                            orderby C.InvoiceId
                            select new AutoCompleteModel()
                            {
                                value = C.InvoiceId.ToString(),
                                label = C.InvoiceNumber
                            }).ToList();


                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }

        public static int GetInvoiceType(int invId)
        {
            int invTypeId = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var invQry = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == invId);
                    if (invQry != null)
                    {
                        invTypeId = Convert.ToInt32(invQry.InvoiceType);

                    }

                }
                return invTypeId;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return invTypeId;
            }
        }
        public static bool ValidateNegReceipt(int pId, decimal recAmt, IOASDBEntities cntx = null)
        {
            try
            {
                ProjectService _ps = new ProjectService();
                var summary = _ps.getProjectSummary(pId, cntx);
                if (summary.NetBalance - recAmt < 0)
                {
                    return false;
                }
                else
                    return true;

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateInvoiceNegReceipt(int invoiceId, int invoiceTypeId, decimal recAmt, decimal foreignCurrencyVal, int? receiptId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var invQuery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == invoiceId && (m.Status == "Completed" || m.Status == "Active"));
                    if (invQuery != null)
                    {
                        var rcv = (from R in context.tblReceipt
                                   where R.InvoiceId == invoiceId && R.ReceiptId != receiptId && R.Status == "Completed"
                                   select R).ToList();
                        decimal preRcvamt = 0;
                        //var rcvcrnote = (from R in context.tblCreditNote
                        //                 where R.InvoiceId == model.InvoiceId && R.Status == "Completed"
                        //                 select R).ToList();
                        //var crnoteamt = rcvcrnote.Select(m => m.TotalCreditAmount).Sum() ?? 0;
                        //var exportinvrcvamt = rcv.Select(m => m.ReceiptValueinForeignCurrency).Sum();
                        //var exportinvrcvcrnoteamt = rcvcrnote.Select(m => m.InvoiceValueinForeignCurrency).Sum();
                        //var rcvbal = Convert.ToDecimal(invQuery.TotalInvoiceValue) - crnoteamt - rcvamt;
                        //if (exportinvrcvamt > 0)
                        //{
                        //    rcvbal = Convert.ToDecimal(invQuery.InvoiceValueinForeignCurrency) - exportinvrcvcrnoteamt - exportinvrcvamt;
                        //}

                        if (invoiceTypeId != 1)
                        {
                            preRcvamt = rcv.Select(m => m.ReceiptAmount).Sum() ?? 0;
                            if (preRcvamt < recAmt)
                                return false;
                        }
                        else
                        {
                            preRcvamt = rcv.Select(m => m.ReceiptValueinForeignCurrency).Sum() ?? 0;
                            if (preRcvamt < foreignCurrencyVal)
                                return false;
                        }
                        return true;
                    }
                    else
                        return true;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static Tuple<int, DateTime?> GetBRSBankAndDate(int brsId)
        {
            DateTime? nullVar = null;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBRS.FirstOrDefault(m => m.BRSId == brsId);
                    if (query != null)
                        return Tuple.Create(query.BankHeadId ?? 0, query.BOAToDate);
                    else
                        return Tuple.Create(0, nullVar);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create(0, nullVar);
            }
        }
        //  public static bool ValidatePaymentProcessStatus(int id, string status)
        //  {
        //      try
        //      {
        //          bool isValid = false;
        //          using (var context = new IOASDBEntities())
        //          {
        //              var query = context.tblBOADraft.FirstOrDefault(m => m.BOADraftId == id && m.Status == status);
        //              if (query != null)
        //                  isValid = true;
        //          }
        //          return isValid;
        //      }
        //      catch (Exception ex)
        //      {
        //          Infrastructure.IOASException.Instance.HandleMe(
        //(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
        //          return false;
        //      }
        //  }
        public static int GetInvoiceProjectId(int invId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from inv in context.tblProjectInvoice
                                 where inv.InvoiceId == invId
                                 select inv).FirstOrDefault();

                    if (query != null)
                    {
                        return Convert.ToInt32(query.ProjectId);
                    }
                    return 0;
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static PrevNegativeBalanceModel GetPrevNBLTotalByProject(int ProjectId)
        {
            try
            {
                PrevNegativeBalanceModel Detail = new PrevNegativeBalanceModel();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from U in context.tblNegativeBalance
                                 where U.ProjectId == ProjectId && U.Status != "InActive" && U.Status != "Rejected"
                                 select U).ToList();
                    if (Query.Count() > 0)
                    {
                        Detail.NegBalance = Query.Sum(m => m.NegativeBalanceAmount) ?? 0;
                    }
                    return Detail;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                PrevNegativeBalanceModel Detail = new PrevNegativeBalanceModel();
                return Detail;
            }
        }
        public static string getImprestCloseId()
        {
            try
            {
                string seqnum = "";
                var checkNum = "IMC/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from card in context.tblImprestClose
                                 where card.ImprestCloseNumber.Contains(checkNum)
                                 orderby card.ImprestCloseId descending
                                 select card).FirstOrDefault();

                    if (query != null)
                    {
                        var num = query.ImprestCloseNumber;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static string ValidateImprestClose(int ImpId)
        {

            try
            {
                using (var context = new IOASDBEntities())
                {
                    string[] Status = { "Completed", "Rejected", "InActive" };
                    var Qry = context.tblImprestRecoupment.Where(m => !Status.Contains(m.Status) && m.ImprestUserDetailsId == ImpId).ToList();
                    var RecQry = (from a in context.tblImprestRecoupment
                                  join b in context.tblImprestBillRecoupment on a.RecoupmentId equals b.ImprestBillId
                                  where b.Status != "Completed" && b.Status != "InActive" && a.ImprestUserDetailsId == ImpId
                                  select b).ToList();
                    if (Qry.Count > 0 || RecQry.Count > 0)
                        return "Some Transactions pending (Bill Booking,Recoupment)";
                    else
                        return "valid";
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "Something went wrong please contact administrator.";
            }
        }
        public static List<WFProposalModel> GetWFProposal(int userid)
        {

            try
            {
                CultureInfo Indian = new CultureInfo("hi-IN");
                List<WFProposalModel> model = new List<WFProposalModel>();
                string[] WfArr;
                int[] SteArr;
                int[] OsgArr;
                var IOAScontext = new IOASDBEntities();
                using (var context = new IOASDBEntities())
                {
                    WfArr = context.tblWorkFlowlog.Where(m => (m.WFreferencetype == "Proposal" || m.WFreferencetype == null) && m.IsDelete_f == true).Select(m => m.WFreferencenbr).ToArray();
                    SteArr = context.tblWorkFlowlog.Where(m => m.WFreferencetype == "ShortTermAppointment").Select(m => m.Referenceid ?? 0).ToArray();
                    OsgArr = context.tblWorkFlowlog.Where(m => m.WFreferencetype == "OutsourcingAppointment").Select(m => m.Referenceid ?? 0).ToArray();
                }
                using (var context = new IOASWorkFlowEntities1())
                {
                    var RoleId = Common.GetRoleIdByUserId(userid);
                    if ((RoleId == 2) || (RoleId == 1))
                    {
                        var Qry = (from a in context.tblProposal
                                   join c in context.AgencyMaster on a.SponsoringAgency equals c.AgencyId
                                   orderby a.ProposalId descending
                                   where a.WorkflowStatus != true
                                   && !WfArr.Contains(a.WorkflowNumber)
                                   select new { a.PI, a.ProposalId, a.WorkflowNumber, a.Inputdate, c.AgencyName, a.ProjectType, a.BasicValue }).ToList();
                        if (Qry.Count > 0)
                        {
                            for (int i = 0; i < Qry.Count; i++)
                            {
                                int Piid = Qry[i].PI ?? 0;
                                model.Add(new WFProposalModel()
                                {
                                    ActionLink = "/Proposal/CreateProposal?ID=0&WFproposalid=" + Qry[i].ProposalId,
                                    WFProposalNo = Qry[i].WorkflowNumber,
                                    PIName = Common.GetPIName(Piid),
                                    Agency = Qry[i].AgencyName,
                                    Type = Qry[i].ProjectType == 1 ? "Sponser" : "Cons",
                                    Value = String.Format(Indian, "{0:N}", Qry[i].BasicValue),
                                    Date = String.Format("{0:dd-MMM-yyyy}", Qry[i].Inputdate),
                                    WFid = Qry[i].ProposalId
                                });
                            }

                        }
                    }

                    if (RoleId == 102 || RoleId == 103 || RoleId == 104 || RoleId == 104 || RoleId == 105 || RoleId == 106)
                    {
                        var Qry = (from a in context.tblRCTSTE
                                   orderby a.STEID descending
                                   where !SteArr.Contains(a.STEID)
                                   select new { a.ProjectNumber, a.STEID, a.CrtdTs }).ToList();
                        if (Qry.Count > 0)
                        {
                            for (int i = 0; i < Qry.Count; i++)
                            {
                                string ProjectNumber = Qry[i].ProjectNumber;
                                int Piid = IOAScontext.tblProject.Where(x => x.ProjectNumber == ProjectNumber).Select(x => x.PIName).FirstOrDefault() ?? 0;
                                model.Add(new WFProposalModel()
                                {
                                    ActionLink = "/Requirement/STEJunior?STEID=0&WFid=" + Qry[i].STEID,
                                    WFProposalNo = "WF_RCT_STE_" + Qry[i].STEID,
                                    PIName = Common.GetPIName(Piid),
                                    Agency = "",
                                    Type = "ShortTermAppointment",
                                    Value = "",
                                    Date = String.Format("{0:dd-MMM-yyyy}", Qry[i].CrtdTs),
                                    WFid = Qry[i].STEID
                                });
                            }

                        }
                    }
                    if (RoleId == 107 || RoleId == 108 || RoleId == 109)
                    {
                        var Qry = (from a in context.tblRCTOutsourcing
                                   orderby a.OSGID descending
                                   where !OsgArr.Contains(a.OSGID)
                                   select new { a.ProjectNumber, a.OSGID, a.CrtdTs }).ToList();
                        if (Qry.Count > 0)
                        {
                            for (int i = 0; i < Qry.Count; i++)
                            {
                                string ProjectNumber = Qry[i].ProjectNumber;
                                int Piid = IOAScontext.tblProject.Where(x => x.ProjectNumber == ProjectNumber).Select(x => x.PIName).FirstOrDefault() ?? 0;
                                model.Add(new WFProposalModel()
                                {
                                    ActionLink = "/Requirement/Outsourcing?OSGID=0&WFid=" + Qry[i].OSGID,
                                    WFProposalNo = "WF_RCT_OSG_" + Qry[i].OSGID,
                                    PIName = Common.GetPIName(Piid),
                                    Agency = "",
                                    Type = "OutsourcingAppointment",
                                    Value = "",
                                    Date = String.Format("{0:dd-MMM-yyyy}", Qry[i].CrtdTs),
                                    WFid = Qry[i].OSGID
                                });
                            }

                        }
                    }
                }
                IOAScontext.Dispose();
                return model;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<WFProposalModel> model = new List<WFProposalModel>();
                return model;
            }
        }
        public static List<MasterlistviewModel> GetAccountGroupBasedonUser(int userid)
        {
            try
            {
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    if (Common.GetRoleIdByUserId(userid) == 5)
                    {
                        var query = (from A in context.tblAccountGroup
                                     where A.Status == "Active"
                                     orderby A.AccountGroup
                                     select new { A.AccountGroupId, A.AccountGroup, A.AccountGroupCode }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                Acctlist.Add(new MasterlistviewModel()
                                {

                                    id = query[i].AccountGroupId,
                                    name = query[i].AccountGroup + '-' + query[i].AccountGroupCode
                                });
                            }
                        }
                    }
                    else
                    {
                        var query = (from A in context.tblAccountGroup
                                     where A.Status == "Active" && A.AccountGroupId == 61
                                     orderby A.AccountGroup
                                     select new { A.AccountGroupId, A.AccountGroup, A.AccountGroupCode }).ToList();
                        if (query.Count > 0)
                        {
                            for (int i = 0; i < query.Count; i++)
                            {
                                Acctlist.Add(new MasterlistviewModel()
                                {

                                    id = query[i].AccountGroupId,
                                    name = query[i].AccountGroup + '-' + query[i].AccountGroupCode
                                });
                            }
                        }
                    }
                    return Acctlist;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                return Acctlist;
            }
        }
        public static MasterlistviewModel GetWFProposalNo(int Id, string Type = null)
        {
            MasterlistviewModel Model = new MasterlistviewModel();
            try
            {
                using (var context = new IOASWorkFlowEntities1())
                {
                    if (!string.IsNullOrEmpty(Type))
                    {
                        if (Type == "ShortTermAppointment")
                        {
                            Model.id = Id;
                            Model.name = "WF_RCT_STE_" + Id;
                        }

                        if (Type == "OutsourcingAppointment")
                        {
                            Model.id = Id;
                            Model.name = "WF_RCT_OSG_" + Id;
                        }
                    }
                    else
                    {
                        var Qry = context.tblProposal.Where(m => m.ProposalId == Id).FirstOrDefault();
                        if (Qry != null)
                        {
                            Model.id = Qry.ProposalId;
                            Model.name = Qry.WorkflowNumber;
                        }
                    }
                    return Model;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Model;
            }

        }
        public static bool IsDeleteWFProposal(int Id, int LoginUserid, string Type = null)
        {
            try
            {
                string WfNo = "";
                using (var context = new IOASDBEntities())
                {
                    WfNo = Common.GetWFProposalNo(Id, Type).name;
                    tblWorkFlowlog log = new tblWorkFlowlog();
                    log.WFreferencenbr = WfNo;
                    log.Referenceid = Id;
                    log.WFreferencetype = Type;
                    log.CRTD_TS = DateTime.Now;
                    log.CRTD_BY = LoginUserid;
                    log.IsDelete_f = true;
                    context.tblWorkFlowlog.Add(log);
                    context.SaveChanges();

                }
                //using (var WFcontext =new IOASWorkFlowEntities1())
                //{
                //    var WFQry= WFcontext.tblProposal.Where(m => m.WorkflowNumber == WfNo).FirstOrDefault();
                //    if (WFQry!=null)
                //    {
                //        WFQry.IsDeleted = true;
                //        WFcontext.SaveChanges();
                //    }
                //}
                return true;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }

        }
        public static Tuple<string, string> GetTXPtransactionDetail(int BankHead, int ITtds)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string Bank = ""; string TDS = "";
                    var Bankquery = context.tblAccountHead.FirstOrDefault(m => m.AccountHeadId == BankHead);
                    if (Bankquery != null)
                        Bank = Bankquery.AccountHead;
                    var TDSquery = context.tblAccountHead.FirstOrDefault(m => m.AccountHeadId == ITtds);
                    if (TDSquery != null)
                        TDS = TDSquery.AccountHead;
                    return Tuple.Create(Bank, TDS);

                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create("", "");

            }
        }
        public static string GetPayBillNo(int userid)
        {
            var paybill = "";
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = context.vwCombineStaffDetails.Where(m => m.ID == userid).Select(m => m.PaybillNo).FirstOrDefault();
                    if (query != null)
                        paybill = query;
                }
                return paybill;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return paybill;
            }
        }
        public static decimal GetTDSPercentage(int Id)
        {
            decimal Per = 0;
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAccountHead.Where(m => m.AccountHeadId == Id).Select(m => m.VariableName).FirstOrDefault();
                    if (query != null)
                    {
                        string stringCutted = query.Split('_').Last();
                        Per = Convert.ToDecimal(stringCutted);
                    }
                }
                return Per;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Per;
            }
        }
        public static SqlConnection getExternalConnection()
        {
            return new SqlConnection(ConfigurationManager.ConnectionStrings["ExternalConnectionString"].ToString());
        }
        public static bool ValidatePaymentProcessStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBOADraft.FirstOrDefault(m => m.BOADraftId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public static CommonProjectSearchModel GetCommonProjectSearch(string TypeCode, int RefId, bool inv_f, bool commit_f, bool project_f)
        {
            CommonProjectSearchModel model = new CommonProjectSearchModel();
            List<CommonProjectListSearchModel> Project = new List<CommonProjectListSearchModel>();
            List<CommonProjectListSearchModel> Commitment = new List<CommonProjectListSearchModel>();
            List<CommonInvoiceListSearchModel> Invoice = new List<CommonInvoiceListSearchModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (TypeCode == "CLP")
                    {
                        if (inv_f == true)
                        {
                            var invQry = context.tblClearancePaymentInvoiceDetail.Where(m => m.ClearancePaymentId == RefId && m.InvoiceNumber != null).ToList();
                            var Qry = context.tblClearancePaymentEntry.Where(m => m.ClearancePaymentId == RefId && m.InvoiceNumber != null).FirstOrDefault();

                            if (invQry.Count > 0)
                            {
                                for (int i = 0; i < invQry.Count; i++)
                                {
                                    Invoice.Add(new CommonInvoiceListSearchModel()
                                    {
                                        InvoiceNumber = invQry[i].InvoiceNumber,
                                        InvoiceAmount = invQry[i].Amount ?? 0,
                                        Date = invQry[i].InvoiceDate != null ? String.Format("{0:dd-MMMM-yyyy}", invQry[i].InvoiceDate) : "NA"
                                    });
                                }

                            }
                            Invoice.Add(new CommonInvoiceListSearchModel()
                            {
                                InvoiceNumber = Qry.InvoiceNumber,
                                InvoiceAmount = 0,
                                Date = "NA"
                            });
                            model.Invoice = Invoice;
                        }

                        if (project_f == true || commit_f == true)
                        {
                            var ProjQry = (from a in context.tblClearancePaymentEntry
                                           join b in context.tblClearancePaymentCommitmentDetail on a.ClearancePaymentId equals b.ClearancePaymentId
                                           join c in context.tblCommitmentDetails on b.CommitmentDetailId equals c.ComitmentDetailId
                                           join d in context.tblCommitment on c.CommitmentId equals d.CommitmentId
                                           join e in context.tblProject on d.ProjectId equals e.ProjectId
                                           join f in context.tblBudgetHead on c.AllocationHeadId equals f.BudgetHeadId
                                           where a.Status != "InActive" && a.ClearancePaymentId == RefId
                                           select new { d.CommitmentNumber, f.HeadName, e.ProjectNumber, b.PaymentAmount }).ToList();

                            if (ProjQry.Count > 0)
                            {
                                for (int i = 0; i < ProjQry.Count; i++)
                                {
                                    Project.Add(new CommonProjectListSearchModel()
                                    {
                                        ProjectNumber = ProjQry[i].ProjectNumber,
                                        CommitmentNumber = ProjQry[i].CommitmentNumber,
                                        AllocationHead = ProjQry[i].HeadName,
                                        Amount = ProjQry[i].PaymentAmount ?? 0,
                                    });
                                }
                            }
                            model.Project = Project;
                            model.Commitment = Project;
                        }

                    }
                    else if (TypeCode == "FRM")
                    {
                        if (project_f == true || commit_f == true)
                        {
                            var ProjQry = (from a in context.tblForeignRemittance
                                           join b in context.tblForeignRemitCommitmentDetail on a.ForeignRemitId equals b.ForeignRemitId
                                           join c in context.tblCommitmentDetails on b.CommitmentDetailId equals c.ComitmentDetailId
                                           join d in context.tblCommitment on c.CommitmentId equals d.CommitmentId
                                           join e in context.tblProject on d.ProjectId equals e.ProjectId
                                           join f in context.tblBudgetHead on c.AllocationHeadId equals f.BudgetHeadId
                                           where a.Status != "InActive" && a.ForeignRemitId == RefId
                                           select new { d.CommitmentNumber, f.HeadName, e.ProjectNumber, b.PaymentAmount }).ToList();

                            if (ProjQry.Count > 0)
                            {
                                for (int i = 0; i < ProjQry.Count; i++)
                                {
                                    Project.Add(new CommonProjectListSearchModel()
                                    {
                                        ProjectNumber = ProjQry[i].ProjectNumber,
                                        CommitmentNumber = ProjQry[i].CommitmentNumber,
                                        AllocationHead = ProjQry[i].HeadName,
                                        Amount = ProjQry[i].PaymentAmount ?? 0,
                                    });
                                }
                            }
                            model.Project = Project;
                            model.Commitment = Project;
                        }

                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                return model;
            }
        }
        public static decimal GetBRSCashBookOB(DateTime asOn, int bankId, int brsId = 0)
        {
            decimal OBAmt = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var queryBOA = (from d in context.tblBOAPaymentDetail
                                    join m in context.tblBOA on d.BOAId equals m.BOAId
                                    where m.PostedDate <= asOn && d.BankHeadID == bankId
                                    && m.Status != "InActive"
                                    && (m.PaymentProcess_f == false || m.PaymentProcess_f == null)
                                    select d).ToList();
                    var OB = (from c in context.tblHeadOpeningBalance
                              where c.AccountHeadId == bankId
                              select c).FirstOrDefault();
                    decimal drAmt = queryBOA.Where(m => m.TransactionType == "Debit").Sum(m => m.Amount) ?? 0;
                    decimal crAmt = queryBOA.Where(m => m.TransactionType == "Credit").Sum(m => m.Amount) ?? 0;
                    if (OB != null && OB.TransactionType == "Credit")
                    {

                        OBAmt = drAmt - crAmt - Convert.ToDecimal(OB.OpeningBalance);

                    }
                    else if (OB != null && OB.TransactionType == "Debit")
                    {
                        OBAmt = Convert.ToDecimal(OB.OpeningBalance) + drAmt - crAmt;
                    }
                    else
                    {
                        OBAmt = drAmt - crAmt;
                    }
                    if (brsId > 0)
                    {
                        var queryBrs = context.tblBRS.FirstOrDefault(m => m.BRSId == brsId);
                        if (queryBrs != null)
                        {
                            queryBrs.CashBookOB = OBAmt;
                            context.SaveChanges();
                        }
                    }
                }
                return OBAmt;
            }
            catch (Exception ex)
            {
                return OBAmt;
            }
        }
        public static string GetReceiptDesc(string receiptNo)
        {
            try
            {
                var des = "";
                using (var context = new IOASDBEntities())
                {
                    var recquery = (from rec in context.tblReceipt
                                    where rec.ReceiptNumber == receiptNo && rec.Status != "InActive"
                                    select rec).FirstOrDefault();

                    if (recquery != null)
                    {
                        des = recquery.Description;
                    }
                    return des;
                }
            }

            catch (Exception ex)
            {

                throw ex;

            }
        }
        public static List<MasterlistviewModel> GetCommonHeadList(int categoryId, int groupId, bool? common_F = null)
        {
            try
            {
                List<MasterlistviewModel> roleList = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    roleList = (from h in context.tblCommonHeads
                                where h.CategoryId == categoryId && h.Status != "InActive"
                                && h.GroupId == groupId && (common_F == null || h.Common_f == common_F)
                                select new MasterlistviewModel()
                                {
                                    id = h.HeadId,
                                    name = h.Head
                                }).ToList();

                }
                return roleList;
            }
            catch (Exception ex)
            {
                return new List<MasterlistviewModel>();
            }
        }
        public static bool ValidateFellowshipsalaryStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFellowshipSalary.FirstOrDefault(m => m.FellowshipSalaryId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateMandayStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblManDay.FirstOrDefault(m => m.ManDayId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateAdminvoucherStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAdminVoucher.FirstOrDefault(m => m.AdminVoucherId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateTDSPaymentStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTDSPayment.FirstOrDefault(m => m.tblTDSPaymentId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static bool OverheadsStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblOverheadsPosting.FirstOrDefault(m => m.OverheadsPostingId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static bool ValidateOHAddRevStatus(int id, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblOHReversal.FirstOrDefault(m => m.OHReversalId == id && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }
        public static int CalculateAge(DateTime DOB, DateTime toDate)
        {
            TimeSpan ts = toDate - DOB;
            return Convert.ToInt32(ts.Days / 365.25);
        }
        public static DateTime GetMonthLastDate(string MonthYear)
        {
            try
            {
                DateTime lastDate = DateTime.Now;
                string[] dt = MonthYear.Split('-');
                if (dt.Length > 0)
                {
                    int month = DateTime.ParseExact(dt[0].Trim().ToString(), "MMM", CultureInfo.CurrentCulture).Month;
                    int year = Convert.ToInt32(dt[1].Trim());
                    lastDate = new DateTime(year, month,
                                    DateTime.DaysInMonth(year, month));
                }
                return lastDate;
            }
            catch (Exception ex)
            {
                return DateTime.Now;
            }
        }
        public static DateTime GetMonthFirstDate(string MonthYear)
        {
            try
            {
                DateTime firstDate = DateTime.Now;
                string[] dt = MonthYear.Split('-');
                if (dt.Length > 0)
                {
                    int month = DateTime.ParseExact(dt[0].Trim().ToString(), "MMM", CultureInfo.CurrentCulture).Month;
                    int year = Convert.ToInt32(dt[1].Trim());
                    firstDate = new DateTime(year, month, 1);
                }
                return firstDate;
            }
            catch (Exception ex)
            {
                return DateTime.Now;
            }
        }

        //public static Tuple<bool, decimal> GetMainSalaryOtherOrderDetail(int paybill, string fileNo)
        //{
        //    try
        //    {
        //        using (var context = new IOASDBEntities())
        //        {
        //            string strPayBill = paybill.ToString();
        //            decimal taxable = 0;
        //            var query = (from sp in context.vwMainSalary
        //                         where sp.FileNo != fileNo && sp.paybill == strPayBill
        //                         select sp).ToList();
        //            taxable = context.tblEmpOtherIncome.Where(m => m.EmpId == paybill).Sum(m => m.Amount) ?? 0;
        //            if (query.Count > 0)
        //            {
        //                decimal basic = query.Sum(m => m.currentPay) ?? 0;
        //                decimal hra = query.Sum(m => m.currentHra) ?? 0;
        //                decimal ma = query.Sum(m => m.currentMedical) ?? 0;
        //                decimal misc_rec = query.Sum(m => m.totalRecovery) ?? 0;
        //                decimal misc_pay = query.Sum(m => m.totalMiscPay) ?? 0;
        //                decimal lop = query.Sum(m => m.currentLOP) ?? 0;
        //                taxable = taxable + basic + hra + ma + misc_pay - misc_rec - lop;
        //            }
        //            return Tuple.Create(true, (decimal)taxable);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return Tuple.Create(false, (decimal)0);
        //    }
        //}

        public static bool InActiveBOA(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var queryBoa = context.tblBOA.FirstOrDefault(m => m.RefNumber == RefNumber && m.Status != "InActive");
                    if (queryBoa != null)
                    {
                        queryBoa.Status = "InActive";
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public static string GetDepartmentCode(int Userid)
        {
            string DepartmentCode = "";
            try
            {

                List<MasterlistviewModel> department = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from dept in context.vwFacultyStaffDetails
                                 where dept.UserId == Userid

                                 select dept.DepartmentCode
                                 ).FirstOrDefault();
                    DepartmentCode = query;
                    return DepartmentCode;
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return DepartmentCode;
            }

        }
        public static decimal GetAmountForBillHistoryList(int BillId)
        {
            decimal Amt = 0;
            int VendorId = 0;
            string PoNumber = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.tblBillEntry.Where(m => m.BillId == BillId).FirstOrDefault();
                    if (Qry != null)
                    {

                        if (Qry.BillType == 3 && Qry.TransactionTypeCode == "STM")
                        {
                            PoNumber = Qry.PONumber;
                            VendorId = Qry.VendorId ?? 0;
                            decimal AdvAmt = (from a in context.tblBillEntry
                                              join b in context.tblBillExpenseDetail on a.BillId equals b.BillId
                                              where a.Status != "InActive" && b.TransactionType == "Credit" && b.IsJV_f == false
                                              && a.TransactionTypeCode == "ADV" && a.VendorId == VendorId && a.PONumber == PoNumber
                                              select b.Amount).Sum(m => m.Value);
                            decimal SettAmt = (from a in context.tblBillEntry
                                               join b in context.tblBillExpenseDetail on a.BillId equals b.BillId
                                               where a.Status != "InActive" && b.TransactionType == "Credit" && b.IsJV_f == false
                                               && a.BillId == BillId
                                               select b.Amount).Sum(m => m.Value);
                            Amt = SettAmt - AdvAmt;
                        }
                        else
                            Amt = (Qry.ExpenseAmount + (Qry.DeductionAmount ?? 0)) ?? 0;
                    }
                    return Amt;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Amt;
            }
        }
        public static decimal GetPreviousInterestAmount(int ProjectId)
        {
            decimal Amt = 0;

            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.tblReceiptOB.Where(m => m.ProjectId == ProjectId).ToList();
                    if (Qry != null)
                    {
                        Amt = Qry.Select(m => m.InterestReceiptOpeningBal).Sum() ?? 0;
                    }
                    return Amt;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Amt;
            }
        }
        public static List<MasterlistviewModel> GetSponsoredTypeCategory()
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from spc in context.tblConsultancyFundingCategory
                                 join cc in context.tblCodeControl on spc.SponsoredCategory equals cc.CodeValAbbr
                                 where cc.CodeName == "SponsoredProjectCategory" && spc.ProjectType == 1 && spc.Status != "InActive"
                                 select new { spc.ConsultancyFundingCategoryId, cc.CodeValDetail, spc.ConsultancyFundingCategory }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].ConsultancyFundingCategoryId,
                                name = query[i].CodeValDetail + "-" + query[i].ConsultancyFundingCategory
                            });
                        }
                    }
                    return list;
                }
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static string GetSponsoredTypeName(int sponTypeCodeId)
        {
            string SponCategoryname = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from spc in context.tblConsultancyFundingCategory
                                 join cc in context.tblCodeControl on spc.SponsoredCategory equals cc.CodeValAbbr
                                 where cc.CodeName == "SponsoredProjectCategory" && spc.ProjectType == 1 && spc.ConsultancyFundingCategoryId == sponTypeCodeId
                                 select new { cc.CodeValDetail, spc.ConsultancyFundingCategory }).FirstOrDefault();
                    if (query != null)
                        SponCategoryname = query.CodeValDetail + "-" + query.ConsultancyFundingCategory;
                }
                return SponCategoryname;
            }
            catch (Exception ex)
            {
                return SponCategoryname;
            }
        }
        public static string GetSponsoredTypeCode(int typecode)
        {
            string SponTypeCode = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from CF in context.tblConsultancyFundingCategory
                                 where CF.ConsultancyFundingCategoryId == typecode
                                 select CF.ConsultancyFundingCategory).FirstOrDefault();
                    if (query != null)
                        SponTypeCode = query;
                }
                return SponTypeCode;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return SponTypeCode;
            }
        }
        public static List<MasterlistviewModel> GetProjectClassification()
        {
            int[] id = { 2, 3, 5, 7, 18 };
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "ProjectClassification" && !id.Contains(cc.CodeValAbbr)
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return list;
            }
        }
        public static List<MasterlistviewModel> GetReportClassification()
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "ReportClassification"
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return list;
            }
        }



        public static List<FreezeFirstLoadScreenModel> freezedAllocationHead(int ProjectId)
        {
            List<FreezeFirstLoadScreenModel> firstfreeze = new List<FreezeFirstLoadScreenModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblAllocationFreezeLog
                                 where cc.ProjectId == ProjectId && cc.IsFreeze==1
                                 select new { cc.IsFreeze }).ToList();
                   
                }
                return firstfreeze;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return firstfreeze;
            }
        }

        public static List<MasterlistviewModel> GetCodeFacaltyList(string codeName)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == codeName && (C.CodeDescription == "HOC" || C.CodeDescription == "HOLX" || C.CodeDescription == "COR")
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeDescription + "-" + query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return new List<MasterlistviewModel>();
            }

        }

        public static List<MasterlistviewModel> GetSponsoredInternalType()
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from SPI in context.tblConsultancyFundingCategory
                                 where SPI.ProjectType == 1 && SPI.SponsoredCategory == null
                                 select new { SPI.ConsultancyFundingCategoryId, SPI.ConsultancyFundingCategory }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].ConsultancyFundingCategoryId,
                                name = query[i].ConsultancyFundingCategory
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }
        }
        public static bool ApprovalForInternalProject(int ProjectId, int LoggedInUser)
        {
            bool update = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblProject.FirstOrDefault(m => m.ProjectId == ProjectId);
                    if (query.Status == "Open")
                    {
                        query.Status = "Active";
                        query.UpdatedUserId = LoggedInUser;
                        query.UpdatedTS = DateTime.Now;
                        context.SaveChanges();
                        update = true;
                    }
                }
                return update;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return update;
            }
        }
        public static List<MasterlistviewModel> GetInternalProjectClassfication()
        {
            int[] id = { 2, 3, 5, 7, 18 };
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "ProjectClassification" && id.Contains(cc.CodeValAbbr)
                                 orderby cc.CodeValDetail
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return list;
            }
        }
        public static List<MasterlistviewModel> GetInternalCodeFacaltyList(string codeName)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblCodeControl
                                 where C.CodeName == codeName && (C.CodeDescription != "COR")
                                 orderby C.CodeValAbbr
                                 select C).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeDescription + "-" + query[i].CodeValDetail
                            });
                        }
                    }

                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return new List<MasterlistviewModel>();
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteDepartment(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.vwFacultyStaffDetails
                            where (String.IsNullOrEmpty(term) || C.DepartmentName.Contains(term))
                            orderby C.DepartmentName
                            group C by C.DepartmentName into g
                            select new AutoCompleteModel()
                            {
                                value = g.Select(m => m.DepartmentCode.Trim()).FirstOrDefault(),
                                label = g.Select(m => m.DepartmentName).FirstOrDefault()
                            }).ToList();


                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return new List<AutoCompleteModel>();
            }
        }
        public static string GetConsultancyFundingType(int SchemeId)
        {
            string Consfundingname = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSchemes
                                 join cc in context.tblCodeControl on C.ConsultancyType equals cc.CodeValAbbr
                                 where (C.ProjectType == 2 && cc.CodeName == "ConsultancyType" && C.SchemeId == SchemeId)
                                 select new { C.SchemeId, C.SchemeName, cc.CodeValDetail }).FirstOrDefault();
                    if (query != null)
                        Consfundingname = query.CodeValDetail + "-" + query.SchemeName;
                }
                return Consfundingname;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return Consfundingname;
            }
        }
        public static Tuple<decimal, bool> InvoiceNegativeReceiptCalc(int invId, decimal recBankAmt)
        {
            decimal amt = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    bool isIGST = false;
                    var invQuery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == invId);
                    if (invQuery != null)
                    {
                        decimal ttlInvVal = invQuery.TotalInvoiceValue ?? 0;
                        var gstQuery = context.tblInvoiceTaxDetails.Where(m => m.InvoiceId == invId).FirstOrDefault();
                        if (gstQuery != null)
                        {
                            decimal ttlTax = Convert.ToDecimal(gstQuery.IGSTAmount) + Convert.ToDecimal(gstQuery.SGSTAmount) + Convert.ToDecimal(gstQuery.CGSTAmount);
                            if (gstQuery.IGSTAmount > 0)
                                isIGST = true;
                            amt = recBankAmt / ttlInvVal * ttlTax;
                        }
                    }
                    return Tuple.Create(amt, isIGST);
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create(amt, false);
            }
        }
        public static string GetCurrencyCode(int currencyId)
        {
            string CurrencyName = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from c in context.tblCurrency
                                 where c.CurrencyID == currencyId
                                 select c.ISOCode).FirstOrDefault();
                    if (query != null)
                    {
                        CurrencyName = query;
                    }
                }
                return CurrencyName;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe((object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return CurrencyName;
            }
        }
        public static ProjectExpReportSPprocessModel GetProjectExpSPStatus()
        {
            ProjectExpReportSPprocessModel model = new ProjectExpReportSPprocessModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblProjectWiseAllocationandExpSPprocess.OrderByDescending(m => m.SPprocessid).FirstOrDefault();
                    if (query != null)
                    {
                        model.endTime = query.UptdTS == null ? "" : String.Format("{0:dd-MM-yyyy HH:mm:ss}", query.UptdTS);
                        model.startTime = String.Format("{0:dd-MM-yyyy HH:mm:ss}", query.CrtdTS);
                        model.status = query.Status;
                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return model;
            }
        }

        public static bool ExecuteProjectExpSP(int loggedInUser)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {
                    if (context.tblProjectWiseAllocationandExpSPprocess.Any(m => m.Status == "InProgress"))
                        return false;
                    context.Database.ExecuteSqlCommand("ProjectWiseAllocationandExp @p0", loggedInUser);
                    return true;
                }

            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return false;
            }
        }
        public static bool IsBRSReconciled(int brsId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    return context.tblBRSBOADetail.Any(m => m.BRSId == brsId && m.Reconciliation_f == true);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
          (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return false;
            }
        }
        public static decimal GetBankClosingBalance(int BankId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var OB = (from c in context.tblHeadOpeningBalance
                              where c.AccountHeadId == BankId
                              select new { c }).FirstOrDefault();

                    decimal COB = 0;
                    string TranType = ""; decimal migOB = 0;
                    if (OB != null)
                    {
                        TranType = OB.c.TransactionType;
                        migOB = OB.c.OpeningBalance ?? 0;
                    }
                    if (TranType == "Credit")
                        COB = -migOB;
                    else
                        COB = migOB;


                    decimal? PayAmt = (from c in context.vw_CashBookPayment
                                       where c.BankHeadID == BankId
                                       select c.Amount).Sum() ?? 0;
                    decimal? RecAmt = (from c in context.vw_CashBookReceipt
                                       where c.BankHeadID == BankId
                                       select c.Amount).Sum() ?? 0;

                    decimal CB = 0;
                    CB = (COB + (RecAmt - PayAmt)) ?? 0;

                    return CB;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
       (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);

                return 0;

            }
        }
        public static List<MasterlistviewModel> GetReceiptListbyProjectId(int projectId,int OHId)
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    if (OHId > 0)
                    {
                        list = (from oh in context.tblReceiptOverheadBreakup
                                join R in context.tblReceipt on oh.ReceiptId equals R.ReceiptId
                                join P in context.tblProject on R.ProjectId equals P.ProjectId
                                where R.Status == "Completed" && (oh.IsPosted_f == false || oh.IsPosted_f == null)
                                //&& !context.tblOverheadsPostingDetails.Any(m => m.ReceiptId == R.ReceiptId)
                                && P.ProjectId == projectId && P.ProjectType == 1
                                orderby R.ReceiptNumber
                                group R by R.ReceiptId into g
                                select new
                                {
                                    ReceiptId = g.Key,
                                    ReceiptNumber = g.Select(m => m.ReceiptNumber).FirstOrDefault()
                                })
                               .AsEnumerable()
                               .Select((x, index) => new MasterlistviewModel()
                               {
                                   id = x.ReceiptId,
                                   name = x.ReceiptNumber
                               }).ToList();

                    }
                    else
                    {
                        list = (from oh in context.tblReceiptOverheadBreakup
                                join R in context.tblReceipt on oh.ReceiptId equals R.ReceiptId
                                join P in context.tblProject on R.ProjectId equals P.ProjectId
                                where R.Status == "Completed" && (oh.IsPosted_f == false || oh.IsPosted_f == null)
                                && !context.tblOverheadsPostingDetails.Any(m => m.ReceiptId == R.ReceiptId)
                                && P.ProjectId == projectId && P.ProjectType == 1
                                orderby R.ReceiptNumber
                                group R by R.ReceiptId into g
                                select new
                                {
                                    ReceiptId = g.Key,
                                    ReceiptNumber = g.Select(m => m.ReceiptNumber).FirstOrDefault()
                                })
                                .AsEnumerable()
                                .Select((x, index) => new MasterlistviewModel()
                                {
                                    id = x.ReceiptId,
                                    name = x.ReceiptNumber
                                }).ToList();
                    }
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }

        }
        public static List<AutoCompleteModel> GetAllProjectNumber(string term, int? pType = null)
        {
            try
            {

                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.tblProject
                           join D in context.vwFacultyStaffDetails on C.PIName equals D.UserId
                           where (C.ProjectNumber.Contains(term) || C.SanctionOrderNumber.Contains(term) || D.FirstName.Contains(term))
                             && (pType == null || C.ProjectType == pType)

                           orderby C.ProjectNumber
                           select new AutoCompleteModel()
                           {
                               value = C.ProjectId.ToString(),
                               label = C.ProjectNumber + " - " + D.FirstName
                           }).ToList();

                }

                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> PattanGetAllProjectNumber(string term, int? pType = null)
        {
            try
            {

                List<AutoCompleteModel> pro = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    pro = (from C in context.tblProject
                           join D in context.vwFacultyStaffDetails on C.PIName equals D.UserId
                           where (C.ProjectNumber.Contains(term) || C.SanctionOrderNumber.Contains(term) || D.FirstName.Contains(term))
                             && (pType == null || C.ProjectType == pType)

                           orderby C.ProjectNumber
                           select new AutoCompleteModel()
                           {
                               value = C.ProjectId.ToString(),
                               label = C.ProjectNumber
                           }).ToList();

                }

                return pro;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static List<AutoCompleteModel> LoadAutoAllVendorCodes(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {                    
                    list = (from vm in context.tblVendorMaster
                            where vm.Status != "Open"
                            && (vm.Name.Contains(term) || vm.VendorCode.Contains(term))
                            select new AutoCompleteModel()
                            { value = vm.VendorCode + " - " + vm.Name })
                        .Union
                        (from cam in context.tblClearanceAgentMaster
                         where cam.ClearanceAgentCode != "Open"
                         && (cam.Name.Contains(term) || cam.ClearanceAgentCode.Contains(term))
                         select new AutoCompleteModel()
                         { value = cam.ClearanceAgentCode + " - " + cam.Name }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }

        public static string GetCurrentVendorStatus(string vendorCode)
        {
            try
            {
                string status="";
                using (var context = new IOASDBEntities())
                {
                    var statusval  = 
                        (from vm in context.tblVendorMaster
                            where   vm.VendorCode == vendorCode
                         select new { vm.Status })
                        .Union
                        (from cam in context.tblClearanceAgentMaster
                         where cam.ClearanceAgentCode == vendorCode
                         select new  { cam.Status }).FirstOrDefault();
                    status = Convert.ToString(statusval.Status);
                }
               
                return status;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "Error";
            }

        }


        public static bool CheckIsSAIFProject(int ProjectId)
        {
            bool SAIF_f = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Query = (from pro in context.tblProject
                                 where pro.ProjectId == ProjectId
                                 select new { pro.FacultyCode, pro.FacultyDetailId }).FirstOrDefault();
                    if (Query != null && Query.FacultyDetailId == 82 && Query.FacultyCode == 2)
                    {
                        SAIF_f = true;
                    }
                    return SAIF_f;
                }
            }
            catch (Exception ex)
            {
                return SAIF_f;
            }
        }
        public static Tuple<int, string> GetImprestLedgerId(string ImprestACNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    string strBankAcc = ImprestACNumber;
                    strBankAcc = strBankAcc.Substring(strBankAcc.Length - 5);
                    var Qry = context.tblAccountHead.Where(m => m.AccountGroupId == 61 && m.AccountHead.Contains(strBankAcc)).FirstOrDefault();

                    if (Qry != null)
                        return Tuple.Create(Qry.AccountHeadId, Qry.AccountHead);
                    else
                        return Tuple.Create((int)0, (string)"");
                }
            }
            catch (Exception ex)
            {
                return Tuple.Create((int)0, (string)"");
            }
        }
        public static int ValidateReceiptOnSubmit(CreateReceiptModel model)
        {
            try
            {
                int isValid = 1;
                using (var context = new IOASDBEntities())
                {
                    int InvoiceId = model.InvoiceId ?? 0;
                    int ReceiptId = model.ReceiptID ?? 0;
                    var query = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == ReceiptId && m.Status != "InActive");
                    var invquery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == InvoiceId && m.Status != "Open" && m.Status != "InActive");
                    int ProjectId = invquery.ProjectId ?? 0;
                    var Project = context.tblProject.FirstOrDefault(m => m.ProjectId == ProjectId && m.Status != "Open" && m.Status != "InActive");
                    var projectnumber = Project.ProjectNumber;
                    var projectsanctionvalue = Project.SanctionValue;
                    if (invquery != null)
                    {
                        var rcvquery = (from R in context.tblReceipt
                                        where R.InvoiceId == InvoiceId
                                        && R.Status != "InActive"
                                        select R).ToList();
                        var rcvcrnotequery = (from R in context.tblCreditNote
                                              where R.InvoiceId == InvoiceId && R.Status == "Completed"
                                              select R).ToList();
                        var invopenreceiptquery = (from R in context.tblInvoiceOpeningReceipts
                                                   where R.InvoiceId == InvoiceId
                                                   select R).ToList();
                        var invoicetaxquery = (from I in context.tblInvoiceTaxDetails
                                               where I.InvoiceId == InvoiceId
                                               select I).FirstOrDefault();
                        var pjctinvopenrcvquery = (from R in context.tblInvoiceOpeningReceipts
                                                   join I in context.tblProjectInvoice on R.InvoiceId equals I.InvoiceId
                                                   where I.ProjectId == ProjectId
                                                   select R).ToList();
                        var pjctrcvquery = (from R in context.tblReceipt
                                            where R.ProjectId == ProjectId && R.CategoryId != 16 && R.Status != "InActive"
                                            select R).ToList();
                        var outstandinginvquery = (from I in context.vw_Oustanding
                                                   where I.ProjectId == ProjectId
                                                   select I).ToList();
                        var rcvOBquery = (from I in context.tblReceiptOB
                                          where I.ProjectId == ProjectId
                                          select I).ToList();
                        var pjctinvcrnotequery = (from R in context.tblCreditNote
                                                  join I in context.tblProjectInvoice on R.InvoiceId equals I.InvoiceId
                                                  where I.ProjectId == ProjectId
                                                  select R).ToList();

                        //var invopenrcvtaxamt = pjctinvopenrcvquery.Select(m => m.TotalTaxDeducted).Sum() ?? 0;
                        var totalrcvcount = rcvquery.Count() + invopenreceiptquery.Count();
                        var invopenrcvquerycount = invopenreceiptquery.Count();
                        var invtype = invquery.InvoiceType;
                        var pjcttype = invquery.ProjectType;

                        var totalpjctRCVcgst = pjctrcvquery.Select(m => m.CGST).Sum();
                        var totalpjctRCVsgst = pjctrcvquery.Select(m => m.SGST).Sum();
                        var totalpjctRCVigst = pjctrcvquery.Select(m => m.IGST).Sum();
                        var totalpjctRCVgst = totalpjctRCVcgst + totalpjctRCVsgst + totalpjctRCVigst;
                        var totalpjctrcv = pjctrcvquery.Select(m => m.ReceiptAmount).Sum();
                        var totalinvopenrcv = invopenreceiptquery.Select(m => m.OpeningReceiptAmount).Sum();
                        var invopenrcvamt = pjctinvopenrcvquery.Select(m => m.OpeningReceiptAmount).Sum() ?? 0;
                        var totalcrnotetaxablevalue = pjctinvcrnotequery.Select(m => m.CreditAmount).Sum() ?? 0;
                        var totaltaxablevalue = outstandinginvquery.Select(m => m.TaxableValue).Sum();
                        var ttlreceiptOpenBalexcltaxamt = rcvOBquery.Sum(m => m.ReceiptOpeningBalExclInterest) ?? 0;

                        decimal? thisinvrcvvalue = rcvquery.Sum(m => m.ReceiptAmount) ?? 0;
                        decimal? thisinvrcvcgstvalue = rcvquery.Sum(m => m.CGST) ?? 0;
                        decimal? thisinvrcvsgstvalue = rcvquery.Sum(m => m.SGST) ?? 0;
                        decimal? thisinvrcvigstvalue = rcvquery.Sum(m => m.IGST) ?? 0;
                        decimal? thisinvrcvtaxvalue = thisinvrcvcgstvalue + thisinvrcvsgstvalue + thisinvrcvigstvalue;
                        decimal? thisinvrcvvaluelesstax = thisinvrcvvalue - thisinvrcvtaxvalue + totalinvopenrcv;
                        decimal? thisinvbaltaxablevalue = invquery.TaxableValue - thisinvrcvvaluelesstax;

                        decimal? thisrcvvallesstax = model.ReceiptAmount - (model.ReceiptCGST + model.ReceiptIGST + model.ReceiptSGST);
                        //decimal? totalopeninvtaxablevalue = (totaltaxablevalue - invopenrcvamt /*+ invopenrcvtaxamt */- totalcrnotetaxablevalue - totalpjctrcv + totalpjctRCVgst) ?? 0;
                        decimal? totalopeninvtaxablevalue = outstandinginvquery.Select(m => m.TaxableOutstanding).Sum();
                        decimal? Currbalnceinsanctnval = 0;
                        decimal? totalpjctrcvamtexcltax = totalpjctrcv - totalpjctRCVgst + ttlreceiptOpenBalexcltaxamt;
                        model.Currbalnceinsanctnval = projectsanctionvalue - ((totalpjctrcv - totalpjctRCVgst) + ttlreceiptOpenBalexcltaxamt + (totalopeninvtaxablevalue - thisrcvvallesstax));

                        if (query != null)
                        {
                            thisrcvvallesstax = query.ReceiptAmount - query.CGST - query.SGST - query.IGST;
                        }
                        Currbalnceinsanctnval = projectsanctionvalue - ((totalpjctrcv - totalpjctRCVgst) + ttlreceiptOpenBalexcltaxamt + (totalopeninvtaxablevalue - thisrcvvallesstax));

                        //if (model.ReceiptID == null || model.ReceiptID == 0)
                        //{
                        //    Currbalnceinsanctnval = projectsanctionvalue - totalpjctrcv + totalpjctRCVgst - ttlreceiptOpenBalexcltaxamt - totalopeninvtaxablevalue + thisinvbaltaxablevalue;
                        //}
                        //if (model.ReceiptID > 0)
                        //{
                        //    Currbalnceinsanctnval = projectsanctionvalue - totalpjctrcv + totalpjctRCVgst - ttlreceiptOpenBalexcltaxamt - totalopeninvtaxablevalue + thisinvbaltaxablevalue + thisrcvvallesstax;
                        //}

                        if ((invtype != 1) && (model.ReceiptAmount - (model.ReceiptCGST + model.ReceiptSGST + model.ReceiptIGST)) > Currbalnceinsanctnval)
                        {
                            return -6;
                        }
                        var rcvcount = rcvquery.Count();
                        Nullable<Decimal> totalprevrcvCGST = 0;
                        Nullable<Decimal> totalprevrcvSGST = 0;
                        Nullable<Decimal> totalprevrcvIGST = 0;
                        Nullable<Decimal> totalprevrcvtax = 0;
                        Nullable<Decimal> sgstamount = 0;
                        Nullable<Decimal> cgstamount = 0;
                        Nullable<Decimal> igstamount = 0;
                        Nullable<Decimal> crnotesgstamount = 0;
                        Nullable<Decimal> crnotecgstamount = 0;
                        Nullable<Decimal> crnoteigstamount = 0;
                        Nullable<Decimal> ReceiptCGST = 0;
                        Nullable<Decimal> ReceiptSGST = 0;
                        Nullable<Decimal> ReceiptIGST = 0;
                        Nullable<Decimal> thisrcvsgstamount = 0;
                        Nullable<Decimal> thisrcvcgstamount = 0;
                        Nullable<Decimal> thisrcvigstamount = 0;
                        Nullable<Decimal> TotalcurrReceiptGST = 0;
                        sgstamount = invoicetaxquery.SGSTAmount ?? 0;
                        cgstamount = invoicetaxquery.CGSTAmount ?? 0;
                        igstamount = invoicetaxquery.IGSTAmount ?? 0;
                        crnotecgstamount = rcvcrnotequery.Select(m => m.CGST).Sum() ?? 0;
                        crnotesgstamount = rcvcrnotequery.Select(m => m.SGST).Sum() ?? 0;
                        crnoteigstamount = rcvcrnotequery.Select(m => m.IGST).Sum() ?? 0;
                        totalprevrcvCGST = rcvquery.Select(m => m.CGST).Sum() ?? 0;
                        totalprevrcvSGST = rcvquery.Select(m => m.SGST).Sum() ?? 0;
                        totalprevrcvIGST = rcvquery.Select(m => m.IGST).Sum() ?? 0;
                        totalprevrcvtax = totalprevrcvCGST + totalprevrcvSGST + totalprevrcvIGST /*+ invopenrcvtaxamt*/;
                        ReceiptCGST = model.ReceiptCGST;
                        ReceiptSGST = model.ReceiptSGST;
                        ReceiptIGST = model.ReceiptIGST;
                        if (query != null)
                        {
                            thisrcvsgstamount = query.SGST ?? 0;
                            thisrcvcgstamount = query.CGST ?? 0;
                            thisrcvigstamount = query.IGST ?? 0;
                        }
                        TotalcurrReceiptGST = ReceiptCGST + ReceiptSGST + ReceiptIGST;
                        if (totalrcvcount == 0)
                        {
                            if (ReceiptCGST > cgstamount)
                            {
                                return -1;
                            }
                            if (ReceiptSGST > sgstamount)
                            {
                                return -2;
                            }
                            if (ReceiptIGST > igstamount)
                            {
                                return -3;
                            }
                        }
                        if (invopenrcvquerycount > 0)
                        {
                            if (ReceiptCGST > 0)
                            {
                                return -1;
                            }
                            if (ReceiptSGST > 0)
                            {
                                return -2;
                            }
                            if (ReceiptIGST > 0)
                            {
                                return -3;
                            }
                        }
                        else if (invopenrcvquerycount == 0 && rcvquery.Count() > 0)
                        {
                            if ((ReceiptCGST + (totalprevrcvCGST - thisrcvcgstamount)) > cgstamount)
                            {
                                return -1;
                            }
                            if ((ReceiptSGST + (totalprevrcvSGST - thisrcvsgstamount)) > sgstamount)
                            {
                                return -2;
                            }
                            if ((ReceiptIGST + (totalprevrcvIGST - thisrcvigstamount)) > igstamount)
                            {
                                return -3;
                            }
                        }

                    }
                    else
                    {
                        return -5;
                    }
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return -4;
            }
        }
        public static int getLCDraftId(int finyear)
        {
            try
            {
                var lastseqnum = 0;
                var context = new IOASDBEntities();

                var query = (from t in context.tblLCDraftDetails
                             where t.FinancialYear == finyear
                             select t.SequenceNumber).Max();
                int seqnum = query ?? 0;
                lastseqnum = seqnum + 1;
                return lastseqnum;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static int getLCRetireId(int finyear)
        {
            try
            {
                var lastseqnum = 0;
                var context = new IOASDBEntities();

                var query = (from t in context.tblLCRetirement
                             where t.FinancialYear == finyear
                             select t.SequenceNumber).Max();
                int seqnum = query ?? 0;
                lastseqnum = seqnum + 1;
                return lastseqnum;

            }

            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;

            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteSponsoredSchemes(string term)
        {
            try
            {

                List<AutoCompleteModel> PI = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSponsoredSchemes
                                 where C.SchemeCode.Contains(term)
                                 orderby C.SchemeCode
                                 select new { C.SponsoredSchemesId, C.SchemeCode }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PI.Add(new AutoCompleteModel()
                            {
                                value = query[i].SponsoredSchemesId.ToString(),
                                label = query[i].SchemeCode,
                            });
                        }
                    }


                }

                return PI;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }

        }
        public static bool CheckIsExistsInvoiceNo(int billId, int agentId, string invNo, DateTime? InvoiceDt = null)
        {
            try
            {
                bool status = false;
                using (var context = new IOASDBEntities())
                {
                    if (billId > 0)
                    {
                        var Qry = context.tblClearancePaymentEntry.Where(m => m.ClearancePaymentId == billId).FirstOrDefault();
                        var agentTabId = Qry.ClearancePaymentAgentId ?? 0;
                        var invNo1 = Qry.InvoiceNumber ?? "";
                        var InvoiceDate1 = Qry.InvoiceDate;

                        if (agentId == agentTabId && invNo1 == invNo && InvoiceDate1 == InvoiceDt)
                        {
                            //status = context.tblClearancePaymentEntry.Any(m => m.InvoiceNumber == invNo && m.ClearancePaymentAgentId == agentTabId && m.InvoiceDate == InvoiceDt && m.ClearancePaymentId != billId);
                            status = false;

                        }
                        else
                        {
                            status = context.tblClearancePaymentEntry.Any(m => m.InvoiceNumber == invNo && m.ClearancePaymentAgentId == agentId && m.InvoiceDate == InvoiceDt && m.ClearancePaymentId != billId);
                        }
                    }
                    else
                    {
                        status = context.tblClearancePaymentEntry.Any(m => m.InvoiceNumber == invNo && m.ClearancePaymentAgentId == agentId && m.InvoiceDate == InvoiceDt && m.ClearancePaymentId != billId);
                    }

                    return status;
                    //return context.tblClearancePaymentEntry.Any(m => m.InvoiceNumber == invNo && m.ClearancePaymentAgentId == agentId && m.InvoiceDate == InvoiceDt && m.ClearancePaymentId != billId);

                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool UpdateExpDate(BOAModel model)
        {
            bool status = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (model.TransactionTypeCode == "OHAR")
                    {
                        var RecQry = context.tblOHReversal.Where(m => m.OHReversalNumber == model.RefNumber && m.Type == 2).FirstOrDefault();
                        if (RecQry != null)
                        {
                            RecQry.CRTD_TS = model.PostedDate;
                            context.SaveChanges();
                            status = true;
                            return status;
                        }
                    }
                    var queryRef = context.vw_AllBillReferenceNumber.FirstOrDefault(m => m.RefNo == model.RefNumber);
                    if (queryRef != null)
                    {
                        context.tblCommitmentLog.Where(x => x.TransactionTypeCode == queryRef.TransactionTypeCode && x.RefId == queryRef.RefId)
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.BOAId = model.BOAId;
                                    m.CRTD_TS = model.PostedDate;
                                    m.Posted_f = true;
                                });
                        context.SaveChanges();
                        status = true;
                    }
                    if (model.TransactionTypeCode == "RCV" || model.TransactionTypeCode == "RBU")
                    {
                        var RecQry = context.tblReceipt.Where(m => m.ReceiptNumber == model.RefNumber).FirstOrDefault();
                        RecQry.CrtdTS = model.PostedDate;
                        context.SaveChanges();
                        status = true;
                    }

                    if (model.TransactionTypeCode == "STV" || model.TransactionTypeCode == "PTV" || model.TransactionTypeCode == "CLV")
                    {
                        var BoaQry = context.tblBOA.Where(m => m.RefNumber == model.RefNumber && (m.TransactionTypeCode == "STM" || m.TransactionTypeCode == "PTM" || m.TransactionTypeCode == "CLP") && m.Status == "Posted").FirstOrDefault();
                        if (BoaQry != null)
                        {
                            BoaQry.PostedDate = model.PostedDate;
                            context.SaveChanges();
                        }
                    }

                }
                return status;
            }
            catch (Exception ex)
            {
                return status;
            }
        }

        public static List<MasterlistviewModel> GetReceiptNoByInvoice(int invId)
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblReceipt
                            where C.Status == "Completed"
                            && C.InvoiceId == invId
                            orderby C.ReceiptId
                            select new MasterlistviewModel()
                            {
                                id = C.ReceiptId,
                                name = C.ReceiptNumber
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }
        }
        public static string ValidateNegReceipt(int invoiceId, int negRecId, int? receiptId, int projectId)
        {
            try
            {
                string msg = "Valid";
                ProjectService _PS = new ProjectService();
                using (var context = new IOASDBEntities())
                {
                    var invQuery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == invoiceId && (m.Status == "Completed" || m.Status == "Active"));
                    if (invQuery != null)
                    {
                        var projectData = _PS.getProjectSummary(Convert.ToInt32(invQuery.ProjectId));
                        var rcv = (from R in context.tblReceipt
                                   where R.InvoiceId == invoiceId && R.ReceiptId != receiptId && R.Status == "Completed"
                                   select R).ToList();
                        decimal preRcvamt = 0;

                        var negRecQuery = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == negRecId);
                        var isExist = context.tblReceipt.Any(m => m.NegativeReceiptId == negRecId && m.ReceiptId != receiptId && m.Status != "InActive");
                        if (isExist)
                            msg = "Negative Receipt already processed.";
                        decimal taxable = Convert.ToDecimal(negRecQuery.ReceiptAmount) - Convert.ToDecimal(negRecQuery.ReceiptOverheadValue) - Convert.ToDecimal(negRecQuery.IGST) - Convert.ToDecimal(negRecQuery.SGST) - Convert.ToDecimal(negRecQuery.CGST);
                        if (invQuery.InvoiceType != 1)
                        {
                            preRcvamt = rcv.Select(m => m.ReceiptAmount).Sum() ?? 0;
                            if (preRcvamt < negRecQuery.ReceiptAmount)
                                msg = "Previous receipt amount for this invoice is lesser than negative receipt amount you enter.";
                        }
                        else
                        {
                            preRcvamt = rcv.Select(m => m.ReceiptValueinForeignCurrency).Sum() ?? 0;
                            if (preRcvamt < negRecQuery.ReceiptValueinForeignCurrency)
                                msg = "Previous receipt amount for this invoice is lesser than negative receipt amount you enter.";
                        }
                        if (invQuery.ProjectId != projectId)
                            msg = "There is missmatch between invoice project and receipt project.";
                        else if (taxable > projectData.NetBalance)
                            msg = "Negative Receipt Amount Should not be greater than NetBalance.";

                        if (!CheckIsReceiptOHPosted(negRecId))
                            msg = "Overhead not posted against this receipt.";
                        return msg;
                    }
                    else
                        return "Something went wrong please contact administrator";
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "Something went wrong please contact administrator";
            }
        }
        public static bool CheckIsReceiptOHPosted(int recId)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    isValid = (from m in context.tblOverheadsPosting
                               join d in context.tblOverheadsPostingDetails on m.OverheadsPostingId equals d.OverheadsPostingId
                               where m.Status == "Completed" && d.ReceiptId == recId
                               select d).Any();
                    if (!isValid)
                        isValid = (from m in context.tblPCFDistribution
                                   join d in context.tblConOHPReceiptLog on m.Id equals d.OHPId
                                   where m.Status == "Completed" && d.ReceiptId == recId
                                   select d).Any();
                    if (!isValid)
                    {
                        var checkohPostingzero = (from rc in context.tblReceipt
                                                  where rc.ReceiptId == recId && rc.Status == "Completed" && (rc.ReceiptOverheadValue == 0 || rc.ReceiptOverheadValue == null)
                                                  select rc).FirstOrDefault();
                        if (checkohPostingzero != null)
                            isValid = true;
                    }
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static bool ValidateProjectBalanceOnReceipt(int pId, int recId, decimal amt)
        {
            try
            {
                decimal recAmt = 0;
                decimal negBal = 0;
                //decimal? totalopeninvtaxablevalue = 0;              
                using (var context = new IOASDBEntities())
                {

                    ProjectService prjModel = new ProjectService();
                    var prjModel1 = prjModel.getProjectSummary(pId);
                    decimal sancVal = GetSanctionValue(pId);
                    var query = context.tblReceipt.Where(r => r.ProjectId == pId && r.ReceiptId != recId && r.CategoryId != 16 && (r.Status != "Rejected" && r.Status != "InActive")).ToList();
                    recAmt = query.Sum(m => m.ReceiptAmount) ?? 0;
                    decimal cgst = query.Sum(m => m.CGST) ?? 0;
                    decimal sgst = query.Sum(m => m.SGST) ?? 0;
                    decimal igst = query.Sum(m => m.IGST) ?? 0;
                    recAmt = recAmt - cgst - sgst - igst;
                    decimal obRec = context.tblReceiptOB.Where(m => m.ProjectId == pId).Sum(m => m.ReceiptOpeningBalExclInterest) ?? 0;
                    recAmt += obRec;
                    negBal = (from U in context.tblNegativeBalance
                              where U.ProjectId == pId && U.Status == "Approved"
                              select U).Sum(m => m.NegativeBalanceAmount) ?? 0;
                    decimal? totalopeninvtaxablevalue = (from I in context.vw_Oustanding
                                                         where I.ProjectId == pId
                                                         select I).Select(m => m.TaxableOutstanding).Sum();
                    decimal ttlAmt = 0;// recAmt + negBal;
                                       //if (negBal > 0 && amt < negBal)
                                       //    ttlAmt = recAmt + negBal - amt;
                                       //else if (negBal > 0 && amt >= negBal)
                                       //    ttlAmt = recAmt + amt - negBal;
                                       //var outstandInvQuery = (from I in context.vw_Oustanding.AsNoTracking()
                                       //                        where I.ProjectId == pId
                                       //                        select I).ToList();
                                       //decimal outstandInv = outstandInvQuery.Select(m => m.TaxableOutstanding).Sum() ?? 0;
                        ttlAmt = recAmt + amt + (totalopeninvtaxablevalue ?? 0);
                    //else if (isInvoiceRec && amt > 0 && recId > 0)
                    //{
                    //    var queryOld = context.tblReceipt.Where(r => r.ReceiptId == recId).FirstOrDefault();
                    //    decimal oldrecAmt = queryOld.ReceiptAmount ?? 0;
                    //    decimal oldcgst = queryOld.CGST ?? 0;
                    //    decimal oldsgst = queryOld.SGST ?? 0;
                    //    decimal oldigst = queryOld.IGST ?? 0;
                    //    oldrecAmt = oldrecAmt - oldcgst - oldsgst - oldigst;
                    //    if (amt > 0 && (outstandInv + oldrecAmt) < amt)
                    //        return false;
                    //    else if (amt < negBal)
                    //    {
                    //        ttlAmt = recAmt + (outstandInv + oldrecAmt) + amt + (negBal - amt);
                    //    }
                    //    else
                    //    {
                    //        ttlAmt = recAmt + (outstandInv + oldrecAmt) + amt + (amt - negBal);
                    //    }
                    //}
                    //else if (isInvoiceRec && amt > 0 && recId == 0)
                    //{
                    //    if (amt > 0 && outstandInv < amt)
                    //        return false;
                    //    else if (amt < negBal)
                    //    {
                    //        ttlAmt = recAmt + outstandInv + amt + (negBal - amt);
                    //    }
                    //    else
                    //    {
                    //        ttlAmt = recAmt + outstandInv + amt + (amt - negBal);
                    //    }
                    //}
                    //else if (amt < negBal && isInvoiceRec && amt > 0 && recId == 0)
                    //    ttlAmt = recAmt + outstandInv + negBal - amt;
                    //else if (isInvoiceRec && amt < 0 && recId == 0)
                    //    ttlAmt = recAmt + outstandInv + negBal + amt;
                    //else if (isInvoiceRec)
                    //    ttlAmt = recAmt + outstandInv + amt - negBal;
                    if (sancVal < ttlAmt)
                        return false;
                    else
                        return true;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        private static object getProjectSummary(int pId)
        {
            throw new NotImplementedException();
        }

        public static List<MasterlistviewModel> GetAccountGroupByAccountHead(int accountHeadId)
        {
            try
            {
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    Acctlist = (from A in context.tblAccountGroup
                                orderby A.AccountGroup
                                where context.tblAccountHead.Any(m => m.AccountHeadId == accountHeadId && m.AccountGroupId == A.AccountGroupId)
                                select new MasterlistviewModel()
                                { id = A.AccountGroupId, name = A.AccountGroup }).ToList();

                    return Acctlist;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                return Acctlist;
            }
        }
        public static List<MasterlistviewModel> GetAccountHeadListByAccountHead(int accountHeadId)
        {
            try
            {
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    Acctlist = (from A in context.tblAccountHead
                                orderby A.AccountHead
                                where context.tblAccountHead.Any(m => m.AccountHeadId == accountHeadId && m.AccountGroupId == A.AccountGroupId)
                                select new MasterlistviewModel()
                                { id = A.AccountHeadId, name = A.AccountHead }).ToList();

                    return Acctlist;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> Acctlist = new List<MasterlistviewModel>();
                return Acctlist;
            }
        }

        //public static OtherReceiptModel GetReversalReceiptLedger(int receiptId)
        //{
        //    OtherReceiptModel model = new OtherReceiptModel();
        //    List<BillExpenseDetailModel> listcr = new List<BillExpenseDetailModel>();
        //    try
        //    {
        //        using (var context = new IOASDBEntities())
        //        {
        //            var query = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == receiptId);
        //            if (query != null)
        //            {
        //                model.Bank = query.BankAccountHeadDr;
        //                model.BankAmount = query.BankAmountDr;
        //                listcr = (from d in context.tblReceiptRecivables
        //                          where d.ReceiptId == receiptId && d.ReceivabesAmount > 0 && d.Tax_f != true
        //                          select new
        //                          {
        //                              d.AccountGroupId,
        //                              d.ReceivabesAmount,
        //                              d.ReceivablesHeadId,
        //                              d.TransactionType,
        //                              d.Tax_f,
        //                          })
        //                                        .AsEnumerable()
        //                                        .Select((x) => new BillExpenseDetailModel()
        //                                        {
        //                                            AccountHeadId = x.ReceivablesHeadId,
        //                                            Amount = x.ReceivabesAmount,
        //                                            TransactionType = x.TransactionType == "Credit" ? "Debit" : "Credit",
        //                                            AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
        //                                            AccountGroupId = x.AccountGroupId,
        //                                            AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0)
        //                                        }).ToList();
        //                listcr.Add(new BillExpenseDetailModel()
        //                {
        //                    AccountHeadId = 10,
        //                    Amount = query.ReceivedAmount,
        //                    TransactionType = "Debit",
        //                    AccountGroupList = Common.GetAccountGroupByAccountHead(10),
        //                    AccountGroupId = Common.GetAccountGroupIdbyAcId(10),
        //                    AccountHeadList = Common.GetAccountHeadListByAccountHead(10)
        //                });
        //            }
        //        }
        //        model.ExpenseDetail = listcr;
        //        return model;
        //    }
        //    catch (Exception ex)
        //    {
        //        model.ExpenseDetail = listcr;
        //        return model;
        //    }
        //}
        public static OtherReceiptModel GetReversalReceiptLedger(int receiptId)
        {
            OtherReceiptModel model = new OtherReceiptModel();
            List<BillExpenseDetailModel> listcr = new List<BillExpenseDetailModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == receiptId);
                    if (query != null)
                    {
                        model.Bank = query.BankAccountHeadDr;
                        model.BankAmount = query.BankAmountDr;
                        listcr = (from d in context.tblReceiptRecivables
                                  join e in context.tblAccountHead on d.ReceivablesHeadId equals e.AccountHeadId
                                  where d.ReceiptId == receiptId && d.Tax_f != true
                                  select new
                                  {
                                      e.AccountGroupId,

                                      d.ReceivabesAmount,
                                      d.ReceivablesHeadId,
                                      d.TransactionType,
                                      d.Tax_f,
                                  })
                                                .AsEnumerable()
                                                .Select((x) => new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = x.ReceivablesHeadId,
                                                    Amount = x.ReceivabesAmount,
                                                    TransactionType = x.TransactionType == "Credit" ? "Debit" : "Credit",
                                                    AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = x.AccountGroupId,
                                                    AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0)
                                                }).ToList();
                        listcr.Add(new BillExpenseDetailModel()
                        {
                            AccountHeadId = 10,
                            Amount = query.ReceivedAmount,
                            TransactionType = "Debit",
                            AccountGroupList = Common.GetAccountGroupByAccountHead(10),
                            AccountGroupId = Common.GetAccountGroupIdbyAcId(10),
                            AccountHeadList = Common.GetAccountHeadListByAccountHead(10)
                        });
                    }
                }
                model.ExpenseDetail = listcr;
                return model;
            }
            catch (Exception ex)
            {
                model.ExpenseDetail = listcr;
                return model;
            }
        }
        public static List<AttachmentDetailModel> GetProjectDocument(int pId)
        {
            List<AttachmentDetailModel> list = new List<AttachmentDetailModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    //list = (from doc in context.tblSupportDocuments
                    //        join type in context.tblDocument on doc.DocType equals type.DocumentId
                    //        where doc.ProjectId == pId && doc.IsCurrentVersion == true
                    //        select new
                    //        {
                    //            doc.DocName,
                    //            doc.AttachmentPath,
                    //            doc.DocType
                    //        })
                    //             .AsEnumerable()
                    //             .Select((x, index) => new AttachmentDetailModel()
                    //             {
                    //                 DocumentActualName = x.DocName,
                    //                 DocumentName = x.AttachmentPath,
                    //                 DocumentPath = "~/Content/SupportDocuments",
                    //                 DocumentTypeName = Common.getDocumentTypeName(x.DocType ?? 0)
                    //             }).ToList()
                    //        .Concat(from doc in context.tblProjectEnhancement
                    //                where doc.ProjectId == pId && !String.IsNullOrEmpty(doc.AttachmentPath)
                    //                select new
                    //                {
                    //                    doc.AttachmentPath,
                    //                    doc.AttachmentName
                    //                })
                    //             .AsEnumerable()
                    //             .Select((x, index) => new AttachmentDetailModel()
                    //             {
                    //                 DocumentActualName = x.AttachmentPath.Split(new char[] { '_' }, 2)[1],
                    //                 DocumentName = x.AttachmentPath,
                    //                 DocumentPath = "~/Content/SupportDocuments",
                    //                 DocumentTypeName = x.AttachmentName
                    //             }).ToList();
                    list = (from doc in context.tblSupportDocuments
                            join type in context.tblDocument on doc.DocType equals type.DocumentId
                            where doc.ProjectId == pId && doc.IsCurrentVersion == true
                            select new AttachmentDetailModel()
                            {
                                DocumentActualName = doc.DocName,
                                DocumentName = doc.AttachmentPath,
                                DocumentPath = "~/Content/SupportDocuments",
                                DocumentTypeName = type.DocumentName
                            }).ToList();
                    var enhaData = (from doc in context.tblProjectEnhancement
                                    where doc.ProjectId == pId && !String.IsNullOrEmpty(doc.AttachmentPath)
                                    select new
                                    {
                                        doc.AttachmentPath,
                                        doc.AttachmentName
                                    })
                              .AsEnumerable()
                              .Select((x, index) => new AttachmentDetailModel()
                              {
                                  DocumentActualName = x.AttachmentPath.Split(new char[] { '_' }, 2)[1],
                                  DocumentName = x.AttachmentPath,
                                  DocumentPath = "~/Content/SupportDocuments",
                                  DocumentTypeName = x.AttachmentName
                              }).ToList();
                    list = list.Concat(enhaData).ToList();
                    return list;
                }
            }
            catch (Exception ex)
            {
                return list;
            }
        }
        public static bool updateInvoiceStatus(int invId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var rcv = (from R in context.tblReceipt
                               where R.InvoiceId == invId
                               select R).ToList();
                    var invquery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == invId);
                    var rcvcrnote = (from R in context.tblCreditNote
                                     where R.InvoiceId == invId && R.Status == "Completed"
                                     select R).ToList();
                    var rcvinvopenrcv = (from R in context.tblInvoiceOpeningReceipts
                                         where R.InvoiceId == invId
                                         select R).ToList();
                    var crnoteamt = rcvcrnote.Select(m => m.TotalCreditAmount).Sum() ?? 0;
                    var rcvamt = rcv.Select(m => m.ReceiptAmount).Sum();
                    var exportinvrcvamt = rcv.Select(m => m.ReceiptValueinForeignCurrency).Sum();
                    var exportinvrcvcrnoteamt = rcvcrnote.Select(m => m.InvoiceValueinForeignCurrency).Sum();
                    var invopenrcvamt = rcvinvopenrcv.Select(m => m.OpeningReceiptAmount).Sum();
                    var rcvbal = (invquery.TotalInvoiceValue - crnoteamt) - (rcvamt + invopenrcvamt);
                    if (exportinvrcvamt > 0)
                    {
                        rcvbal = (invquery.InvoiceValueinForeignCurrency - exportinvrcvcrnoteamt) - exportinvrcvamt;
                    }
                    if (rcvbal <= 0)
                    {
                        invquery.Status = "Completed";
                        context.SaveChanges();
                    }
                    else if (rcvbal > 0 && invquery.Status == "Completed")
                    {
                        invquery.Status = "Active";
                        context.SaveChanges();
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public static string GetAccountGroupNamebyAcId(int accountheadid)
        {
            string grp = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from g in context.tblAccountGroup
                                 join h in context.tblAccountHead on g.AccountGroupId equals h.AccountGroupId
                                 where h.AccountHeadId == accountheadid
                                 select g).FirstOrDefault();
                    if (query != null)
                        grp = query.AccountGroup;
                    return grp;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return grp;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteInvoceListForReceipt(string term, int projectId)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblProjectInvoice
                            where C.InvoiceNumber.Contains(term) && (C.Status == "Completed" || C.Status == "Active")
                            && C.ProjectId == projectId
                            orderby C.InvoiceId
                            select new AutoCompleteModel()
                            {
                                value = C.InvoiceId.ToString(),
                                label = C.InvoiceNumber
                            }).ToList();


                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
                (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static bool ValidateProjectSummary(int ProjectId, int HeadId, decimal Amount, bool OverHeadPosting_f = false, decimal NewOHamt = 0, bool Rec_f = false, decimal ReceiptAmt = 0)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    ProjectService _PS = new ProjectService();

                    var ProjectSummary = _PS.getProjectSummaryDetails(ProjectId);

                    //For Receipt OverHead like 'RCV'
                    if (Rec_f == true)
                    {
                        if (Amount > 0)
                        {
                            if (ProjectSummary.PrjSummary.ApprovedNegativeBalance > 0)
                            {
                                if (ReceiptAmt >= ProjectSummary.PrjSummary.ApprovedNegativeBalance)
                                {
                                    if ((ProjectSummary.PrjSummary.NetBalance + ReceiptAmt) - ProjectSummary.PrjSummary.ApprovedNegativeBalance >= Amount)
                                        return true;
                                    else
                                        return false;
                                }
                                else
                                {
                                    if (ProjectSummary.PrjSummary.NetBalance >= Amount)
                                        return true;
                                    else
                                        return false;
                                }
                            }
                            else
                            {

                                if ((ProjectSummary.PrjSummary.NetBalance + ReceiptAmt) >= Amount)
                                    return true;
                                else
                                    return false;
                            }
                            //if (!(((ProjectSummary.PrjSummary.NetBalance + ReceiptAmt) - ProjectSummary.PrjSummary.ApprovedNegativeBalance) >= Amount))
                            //    return false;
                        }



                        if ((ProjectSummary.HeadWise.Sum(m => m.Amount)) > 0)
                        {
                            if ((ProjectSummary.HeadWise.Where(m => m.AllocationId == HeadId).Sum(m => m.Available)) >= Amount)
                                return true;
                            else
                                return false;
                        }
                        else
                            return true;

                    }

                    //For ...Other than OverHeads
                    if (OverHeadPosting_f == false)
                    {
                        if (ProjectSummary.PrjSummary.NetBalance >= Amount)
                        {
                            if ((ProjectSummary.HeadWise.Sum(m => m.Amount)) > 0)
                            {
                                if ((ProjectSummary.HeadWise.Where(m => m.AllocationId == HeadId).Sum(m => m.Available)) >= Amount)
                                    return true;
                                else
                                    return false;
                            }
                            else
                                return true;
                        }
                        else
                            return false;
                    }


                    //For Receipts OverHead Posting like 'OHP'
                    if (OverHeadPosting_f == true)
                    {
                        if (NewOHamt == 0)
                            return true;

                        if ((ProjectSummary.PrjSummary.NetBalance + Amount) >= NewOHamt)
                        {
                            if ((ProjectSummary.HeadWise.Sum(m => m.Amount)) > 0)
                            {
                                if ((ProjectSummary.HeadWise.Where(m => m.AllocationId == HeadId).Sum(m => m.Available) + Amount) >= NewOHamt)
                                    return true;
                                else
                                    return false;
                            }
                            else
                                return true;
                        }
                        else
                            return false;

                    }


                    return false;
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
(object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static bool ValidateCloseCommitment(int CommitmentId, decimal Amt)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {

                    if (context.vw_ProjectExpenditureReport.AsNoTracking().Any(m => m.CommitmentId == CommitmentId && (m.Posted_f == false || m.Posted_f == null)))
                        return false;
                    else
                        return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static string GetNewUTRNo()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "UTR/" + GetCurrentFinYear() + "/";

                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblUTRMaster
                               where (b.UTRMasterNumber.Contains(checkNum))
                               orderby b.UTRMasterId descending
                               select b.UTRMasterNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static bool CheckUTRProcessed(int boaDraftId)
        {
            bool isProcessed = true;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    isProcessed = !(from m in context.tblBOADraft
                                    join d in context.tblBOADraftDetail on m.BOADraftId equals d.BOADraftId
                                    where m.BOADraftId == boaDraftId
                                    && !(from ud in context.tblUTRDetail
                                         join um in context.tblUTRMaster on ud.UTRMasterId equals um.UTRMasterId
                                         where um.BOADraftId == boaDraftId && um.Status == "Completed"
                                         select ud.BOADraftDetailId).ToList().Contains(d.BOADraftDetailId)
                                    select d).Any();
                }
                return isProcessed;
            }
            catch (Exception ex)
            {
                return isProcessed;
            }
        }

        public static string GetPaymentBatchNumber(int boaDraftId)
        {
            string batchNo = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBOADraft.FirstOrDefault(m => m.BOADraftId == boaDraftId);
                    if (query != null)
                        batchNo = query.TempVoucherNumber;
                }
                return batchNo;
            }
            catch (Exception ex)
            {
                return batchNo;
            }
        }
        public static List<AutoCompleteModel> GetAutoCompletePIList(string term, int? userID = null)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.vwFacultyStaffDetails
                            where (string.IsNullOrEmpty(term) || U.FirstName.Contains(term) || U.EmployeeId.Contains(term) || (U.UserId.HasValue && U.UserId.Value.ToString() == term))
                            && (userID == null || userID == U.UserId)
                            orderby U.UserId
                            select new
                            {
                                U.UserId,
                                U.EmployeeId,
                                U.FirstName
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.UserId.ToString(),
                                label = x.EmployeeId + "-" + x.FirstName
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }


        #region Recruitment      

        public static int leap(int year)
        {
            int years = 0;
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
            {
                years = 1;
            }
            return years;
        }

        public static List<MasterlistviewModel> GetQualificationList()
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblRCTQualificationList
                                 orderby cc.Qualification
                                 select new { cc.QualificationId, cc.Qualification }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].QualificationId,
                                name = query[i].Qualification
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static List<MasterlistviewModel> GetCourseList(int qualificationId)
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblRCTCourseList
                                 where cc.QualificationId == qualificationId
                                 select new { cc.CourseId, cc.CourseName }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CourseId,
                                name = query[i].CourseName
                            });
                        }
                    }
                    return list;
                }
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static List<AutoCompleteModel> GetAutoDesignationList(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTDesignation
                            where (string.IsNullOrEmpty(term) || U.DesignationCode.Contains(term))
                            orderby U.DesignationId
                            select new
                            {
                                U.DesignationCode,
                                U.DesignationId,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.DesignationId.ToString(),
                                label = x.DesignationCode
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        public static List<AutoCompleteModel> GetAutoCompleteDesignationList(string term, int TypeCode, bool isConsolidatePay)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                bool FellowshipPay = isConsolidatePay == true ? false : true;
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTDesignation
                            where ((U.DesignationCode.Contains(term) || U.Designation.Contains(term) || string.IsNullOrEmpty(term))
                            && U.TypeOfAppointment == TypeCode && U.ConsolidatedPay == isConsolidatePay
                            && U.FellowshipPay == FellowshipPay && U.RecordStatus == "Active" && U.Status == 1)
                            orderby U.DesignationId
                            select new
                            {
                                U.Designation,
                                U.DesignationId,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.DesignationId.ToString(),
                                label = x.Designation
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        public static List<AutoCompleteModel> GetAutoCompleteDesignationNameList(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTDesignation
                            where (string.IsNullOrEmpty(term) || U.Designation.Contains(term))
                            orderby U.DesignationId
                            select new
                            {
                                U.Designation,
                                U.DesignationId,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.DesignationId.ToString(),
                                label = x.Designation
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        public static List<MasterlistviewModel> getRequirementyear(int Year = 0)
        {
            try
            {
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                int year = DateTime.Now.Year;
                Year = Year > 0 ? (Year + 14) : 1970;
                for (int i = Year; i <= year; i++)
                {
                    getlistyear.Add(new MasterlistviewModel()
                    {
                        id = i,
                        name = Convert.ToString(i)
                    });
                }
                return getlistyear;
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                return getlistyear;
            }
        }

        public static List<MasterlistviewModel> getProfessionalBasedId(int id, string apptype)
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                int year = DateTime.Now.Year;
                using (var context = new IOASDBEntities())
                {
                    var Professional = (from cc in context.vw_RCTOverAllApplicationEntry
                                        where cc.ApplicationId == id && cc.Category == apptype
                                        select cc.ProfessionalType).FirstOrDefault();
                    string[] exp = new string[] { "" };
                    if (Professional == "Dr.")
                        exp = new string[] { "Dr." };
                    else if (Professional == "Ms.")
                        exp = new string[] { "Ms.", "Mrs.", "Dr." };
                    else if (Professional == "Mr.")
                        exp = new string[] { "Mr.", "Dr." };
                    else if (Professional == "Mrs.")
                        exp = new string[] { "Mrs.", "Dr." };
                    else if (Professional == "Mx.")
                        exp = new string[] { "Mx.", "Dr." };
                    var query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "RCTProfessional" && exp.Contains(cc.CodeValDetail)
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                return getlistyear;
            }
        }

        public static List<MasterlistviewModel> getRCTMarkType()
        {
            try
            {
                List<MasterlistviewModel> MarkType = new List<MasterlistviewModel>();
                MarkType.Add(new MasterlistviewModel()
                {
                    id = 1,
                    name = "Mark"
                });
                MarkType.Add(new MasterlistviewModel()
                {

                    id = 1,
                    name = "CGPA"
                });

                return MarkType;
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                return getlistyear;
            }
        }

        public static List<MasterlistviewModel> ReferenceType()
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "Source"
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            //if (i > 0)
                            //{
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                            //}
                        }
                    }
                    return list;
                }
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static List<MasterlistviewModel> AppointmentType(string typeCode)
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "STEAppointmenttype"
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    if (typeCode == "OSG")
                    {
                        query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "OSGAppointmenttype"
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    }
                    else if (typeCode == "CON")
                    {
                        query = (from cc in context.tblCodeControl
                                 where cc.CodeName == "Appointmenttype"
                                 select new { cc.CodeValAbbr, cc.CodeValDetail }).ToList();
                    }

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                    return list;
                }
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static Tuple<List<MasterlistviewModel>> GetCommittee()
        {
            try
            {
                List<MasterlistviewModel> Commitee = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from CM in context.tblRCTMember
                                 where CM.TypeOfMember == 1 && CM.Status != "InActive"
                                 && (CM.FromDate <= DateTime.Today && CM.Effectivedate >= DateTime.Today)
                                 orderby CM.MemberId
                                 select new { CM.EmployeeId, CM.EmployeeName }).Take(2).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Commitee.Add(new MasterlistviewModel()
                            {
                                id = query[i].EmployeeId,
                                name = query[i].EmployeeName
                            });
                        }
                    }
                }
                return Tuple.Create(Commitee);
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> Commitee = new List<MasterlistviewModel>();
                return Tuple.Create(Commitee);
            }
        }

        public static Tuple<int, string> GetChairPerson()
        {
            int id = 0;
            string name = string.Empty;
            try
            {
                DateTime currentdate = DateTime.Now.Date.AddDays(1).AddTicks(-2);

                using (var context = new IOASDBEntities())
                {
                    var query = (from CM in context.tblRCTMember
                                 where CM.TypeOfMember == 2 && CM.Status != "InActive"
                                 && (CM.FromDate <= DateTime.Today && CM.Effectivedate >= DateTime.Today)
                                 orderby CM.MemberId
                                 select new { CM.EmployeeId, CM.EmployeeName }).FirstOrDefault();
                    if (query != null)
                    {
                        id = query.EmployeeId ?? 0;
                        name = query.EmployeeName;
                    }
                }
                return Tuple.Create(id, name);
            }
            catch (Exception ex)
            {

                return Tuple.Create(id, name);
            }
        }

        public static string getreason(int reasonid)
        {
            try
            {
                var reason = " ";
                var context = new IOASDBEntities();
                var query = (from rcv in context.tblCodeControl
                             where rcv.CodeValAbbr == reasonid && rcv.CodeName == "CommitmentClosedReason"
                             select rcv).FirstOrDefault();

                if (query != null)
                {
                    reason = query.CodeValDetail;
                    return reason;
                }
                else
                {
                    return reason;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static string GetRequestType(int commitreqId)
        {
            try
            {
                var reqtype = "";
                var context = new IOASDBEntities();
                var query = (from rcv in context.tblRCTCommitmentRequest
                             where rcv.RecruitmentRequestId == commitreqId && rcv.Status != "InActive"
                             select rcv).FirstOrDefault();
                if (query != null)
                {
                    reqtype = query.RequestType;
                    return reqtype;
                }
                else
                {
                    return reqtype;
                }

            }

            catch (Exception ex)
            {

                throw ex;

            }
        }

        public static List<TransactionAndTaxesModel> GetViewStaffAllocation()
        {
            List<TransactionAndTaxesModel> transtype = new List<TransactionAndTaxesModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from H in context.tblAccountHead
                             join G in context.tblAccountGroup on H.AccountGroupId equals G.AccountGroupId
                             group G by G.AccountGroup into grp
                             select new
                             {
                                 AccountGroup = grp.Key,
                                 AccountGroupId = grp.Select(m => m.AccountGroupId).FirstOrDefault()
                             }).ToList();

                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        transtype.Add(new TransactionAndTaxesModel()
                        {
                            GroupId = Convert.ToInt32(query[i].AccountGroupId),
                            Group = query[i].AccountGroup,
                        });
                    }
                }
            }
            return transtype;
        }

        public static List<AutoCompleteModel> GetDesigantionList(string term)
        {
            try
            {
                List<AutoCompleteModel> listdata = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from ds in context.tblRCTDesignation
                                 where ds.RecordStatus == "Active" && (ds.Designation.Contains(term) || ds.DesignationCode.Contains(term))
                                 orderby ds.DesignationId
                                 select new { ds.DesignationId, ds.DesignationCode, ds.Designation }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            listdata.Add(new AutoCompleteModel()
                            {
                                value = query[i].DesignationId.ToString(),
                                label = query[i].DesignationCode + "-" + query[i].Designation
                            });
                        }
                    }
                }
                return listdata;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        public static Tuple<decimal, decimal, DateTime?, DateTime?> getbasicpay(string applno, string typecode)
        {

            decimal basicpay = 0;
            decimal medicalamt = 0;
            DateTime? startdate = DateTime.MinValue;
            DateTime? closedate = DateTime.MinValue;

            try
            {

                using (var context = new IOASDBEntities())
                {
                    if (typecode == "STE")
                    {
                        var STEquery = (from prj in context.tblRCTSTE
                                        where prj.ApplicationNumber == applno
                                        select prj).FirstOrDefault();
                        medicalamt = STEquery.MedicalAmmount ?? 0;
                        basicpay = STEquery.Salary ?? 0;
                        startdate = STEquery.AppointmentStartdate;
                        closedate = STEquery.AppointmentEnddate;
                    }
                    else if (typecode == "CON")
                    {
                        var STEquery = (from prj in context.tblRCTConsultantEntry
                                        where prj.Consultant_ApplicationNo == applno
                                        select prj).FirstOrDefault();
                        medicalamt = 0;
                        basicpay = STEquery.Consultant_RetainerFee ?? 0;
                        startdate = STEquery.Consultant_AppStartDt;
                        closedate = STEquery.Consultant_AppEndDt;
                    }
                    else if (typecode == "OSG")
                    {
                        var STEquery = (from prj in context.tblRCTOutsourcing
                                        where prj.ApplicationNumber == applno
                                        select prj).FirstOrDefault();
                        medicalamt = 0;
                        basicpay = STEquery.Salary ?? 0;
                        startdate = STEquery.AppointmentStartdate;
                        closedate = STEquery.AppointmentEnddate;
                    }
                }

                return Tuple.Create(basicpay, medicalamt, startdate, closedate);
            }
            catch (Exception ex)
            {
                return Tuple.Create(basicpay, medicalamt, startdate, closedate);
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteBankName(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblRCTBankList
                            where (String.IsNullOrEmpty(term) || C.BankName.Contains(term))
                            orderby C.BankId
                            select new AutoCompleteModel()
                            {
                                value = C.BankId.ToString(),
                                label = C.BankName
                            }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteVendorList(string term)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblVendorMaster
                            where (string.IsNullOrEmpty(term) || U.Name.Contains(term))
                            orderby U.VendorId
                            select new
                            {
                                U.Name,
                                U.VendorId,
                                U.VendorCode,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.VendorId.ToString(),
                                label = x.Name,
                                desc = x.VendorCode,
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        public static Tuple<string, int> LoadVendorName(string VendorCode)
        {
            string Vendorname = string.Empty;
            int Vendorid = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.tblVendorMaster
                                      where cc.VendorCode == VendorCode
                                      select cc).FirstOrDefault();
                    if (checkquery != null)
                    {
                        Vendorname = checkquery.Name;
                        Vendorid = checkquery.VendorId;
                    }
                }
                return Tuple.Create(Vendorname, Vendorid);
            }
            catch (Exception ex)
            {
                return Tuple.Create(Vendorname, Vendorid);
            }
        }

        //Adhaar validation
        public static List<AutoCompleteModel> GetAutoCompleteRCTEmployee(string term, string apptype = null)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.vw_RCTOverAllApplicationEntry
                            where (string.IsNullOrEmpty(term) || U.EmployeersID.Contains(term))
                            && (U.Category == apptype || apptype == null) && U.ApplicationType == "New"
                            select new
                            {
                                EmployeersID = U.EmployeersID,
                            })
                            .Distinct()
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.EmployeersID.ToString(),
                                label = x.EmployeersID
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteRCTSTEEmployee(string term, string apptype = null)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTSTE
                            where (string.IsNullOrEmpty(term) || U.EmployeersID.Contains(term))
                            && (U.Status == "Relieved" || U.Status == "Cancel") && U.IsActiveNow == true
                            //&& (U.Category == apptype || apptype == null) && U.ApplicationType == "New"
                            select new
                            {
                                EmployeersID = U.EmployeersID,
                            })
                            .Distinct()
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.EmployeersID.ToString(),
                                label = x.EmployeersID
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }
        public static List<AutoCompleteModel> GetAutoCompleteRCTOSGEmployee(string term, string apptype = null)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTOutsourcing
                            where (string.IsNullOrEmpty(term) || U.EmployeersID.Contains(term))
                            && (U.Status == "Relieved" || U.Status == "Cancel") && U.IsActiveNow == true
                            //&& (U.Category == apptype || apptype == null) && U.ApplicationType == "New"
                            select new
                            {
                                EmployeersID = U.EmployeersID,
                            })
                            .Distinct()
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.EmployeersID.ToString(),
                                label = x.EmployeersID
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteApplicationNumber(string term, string apptype = null)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.vw_RCTOverAllApplicationEntry
                            where (string.IsNullOrEmpty(term) || U.ApplicationNo.Contains(term))
                            && (U.Category == apptype || apptype == null) && U.ApplicationType == "New"
                            select new
                            {
                                ApplicationNo = U.ApplicationNo,
                            })
                            .Distinct()
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.ApplicationNo.ToString(),
                                label = x.ApplicationNo
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteSTEApplicationNumber(string term, string apptype = null)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTSTE
                            where (string.IsNullOrEmpty(term) || U.ApplicationNumber.Contains(term))
                            && (U.Status == "Cancel")
                            //&& (U.Category == apptype || apptype == null) && U.ApplicationType == "New"
                            select new
                            {
                                ApplicationNo = U.ApplicationNumber,
                            })
                            .Distinct()
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.ApplicationNo.ToString(),
                                label = x.ApplicationNo
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteWorkPlace(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                List<AutoCompleteModel> list2 = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblRCTEmployeeWorkplace
                            where C.Status == "Active" && C.DepartmentCentres.Contains(term)
                            orderby C.DepartmentCentres
                            select new AutoCompleteModel()
                            {
                                value = C.WorkplaceId.ToString(),
                                label = C.DepartmentCentres
                            }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }

        //public static string CheckPreviousEmployeeAdhar(string adharno)
        //{
        //    string isalreadyEmp = string.Empty;
        //    try
        //    {
        //        using (var context = new IOASDBEntities())
        //        {
        //            var checkquery = (from cc in context.vw_RCTOverAllApplicationEntry
        //                              where cc.Status != "Cancel" && cc.Status != "Rejected" && cc.Status != "Relieved" && cc.ApplicationType == "New"
        //                              && (cc.AadhaarNo.Contains(adharno))
        //                              orderby cc.ApplicationId descending
        //                              select new { cc.Status, cc.EmployeeNo, cc.ApplicationNo }).FirstOrDefault();
        //            if (checkquery != null)
        //            {
        //                isalreadyEmp = checkquery.EmployeeNo == null ? checkquery.ApplicationNo : checkquery.EmployeeNo;
        //            }
        //        }
        //        return isalreadyEmp;
        //    }
        //    catch (Exception ex)
        //    {
        //        return isalreadyEmp;
        //    }
        //}

        public static string CheckPreviousEmployeePan(string Panno)
        {
            string isalreadyEmp = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.vw_RCTOverAllApplicationEntry
                                      where cc.Status != "Cancel" && cc.Status != "Rejected" && cc.Status != "Relieved" && cc.ApplicationType == "New"
                                      && (cc.PANNo.Contains(Panno))
                                      orderby cc.ApplicationId descending
                                      select new { cc.Status, cc.EmployeeNo, cc.ApplicationNo }).FirstOrDefault();
                    if (checkquery != null)
                    {
                        isalreadyEmp = checkquery.EmployeeNo == null ? checkquery.ApplicationNo : checkquery.EmployeeNo;
                    }
                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return isalreadyEmp;
            }
        }

        public static string CheckPreviousEmployeeAdharserver(string adharno, string RefNo = null, bool Preval_f = false, string Oldemployeeno = null, string Apptype = null)
        {
            string isalreadyEmp = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                      where cc.Status != "Cancel" && cc.Status != "Rejected" && cc.Status != "Relieved" && cc.ApplicationType == "New" 
                                      && cc.AadhaarNo.Contains(adharno) && (string.IsNullOrEmpty(RefNo) || !cc.ApplicationNo.Contains(RefNo))
                                      select new { cc.EmployeeNo, cc.ApplicationNo }).ToArray();

                    if (checkquery != null && checkquery.Count() > 0)
                    {
                        string[] record = new string[checkquery.Count()];
                        for (int i = 0; i < checkquery.Count(); i++)
                            record[i] = checkquery[i].EmployeeNo == null ? checkquery[i].ApplicationNo : checkquery[i].EmployeeNo;
                        isalreadyEmp = string.Join(" , ", record);
                        return "This Aadhaar Number is linked to " + isalreadyEmp+"," ;
                    }

                    if (Preval_f == true)
                    {
                        var relQuery = (from cc in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                        where cc.Status == "Relieved" && cc.ApplicationType == "New" && cc.AadhaarNo.Contains(adharno)
                                        && cc.Category == Apptype
                                        orderby cc.ApplicationId descending
                                        select new { cc.EmployeeNo, cc.ApplicationNo }).FirstOrDefault();
                        if (relQuery != null)
                        {
                            if (!string.IsNullOrEmpty(Oldemployeeno) && relQuery.EmployeeNo != Oldemployeeno)
                            {
                                return "This Aadhaar Number is linked to old number " + relQuery.EmployeeNo + "&";
                            }
                            if (string.IsNullOrEmpty(Oldemployeeno))
                            {
                                return "This Aadhaar Number is linked to old number " + relQuery.EmployeeNo + "&";
                            }
                        }

                        if (!string.IsNullOrEmpty(Oldemployeeno))
                        {
                            var Query = (from cc in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                         where cc.Status == "Relieved" && cc.ApplicationType == "New" && cc.EmployeeNo == Oldemployeeno
                                         && cc.Category == Apptype && !string.IsNullOrEmpty(cc.AadhaarNo)
                                         orderby cc.ApplicationId descending
                                         select new { cc.EmployeeNo, cc.AadhaarNo }).FirstOrDefault();
                            if (Query != null && Query.AadhaarNo != adharno)
                                return "This Old employee number  is linked to aadhaar Number " + Query.AadhaarNo + "&";
                        }
                    }
                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return "This Aadhaar Number is linked to XXXXX";
            }
        }

        public static string CheckPreviousEmployeePanserver(string Panno, string RefNo = null, bool Preval_f = false, string Oldemployeeno = null, string Apptype = null)
        {
            string isalreadyEmp = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                      where cc.Status != "Cancel"&& cc.Status != "Rejected" && cc.Status != "Relieved" && cc.ApplicationType == "New"
                                      && cc.PANNo.Contains(Panno) && (string.IsNullOrEmpty(RefNo) || !cc.ApplicationNo.Contains(RefNo))
                                      select new { cc.EmployeeNo, cc.ApplicationNo }).ToArray();

                    if (checkquery != null && checkquery.Count() > 0)
                    {
                        string[] record = new string[checkquery.Count()];
                        for (int i = 0; i < checkquery.Count(); i++)
                            record[i] = checkquery[i].EmployeeNo == null ? checkquery[i].ApplicationNo : checkquery[i].EmployeeNo;
                        isalreadyEmp = string.Join(" , ", record);
                        return "This Pan Number is linked to " + isalreadyEmp;
                    }

                    if (Preval_f == true)
                    {
                        var relQuery = (from cc in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                        where cc.Status == "Relieved" && cc.ApplicationType == "New" && cc.PANNo.Contains(Panno)
                                        && cc.Category == Apptype
                                        orderby cc.ApplicationId descending
                                        select new { cc.EmployeeNo, cc.ApplicationNo }).FirstOrDefault();
                        if (relQuery != null)
                        {
                            if (!string.IsNullOrEmpty(Oldemployeeno) && relQuery.EmployeeNo != Oldemployeeno)
                            {
                                return "This Pan Number is linked to old number " + relQuery.EmployeeNo;
                            }
                            if (string.IsNullOrEmpty(Oldemployeeno))
                            {
                                return "This Pan Number is linked to old number " + relQuery.EmployeeNo;
                            }
                        }

                        if (!string.IsNullOrEmpty(Oldemployeeno))
                        {
                            var Query = (from cc in context.vw_RCTOverAllApplicationEntry.AsNoTracking()
                                         where cc.Status == "Relieved" && cc.ApplicationType == "New" && cc.EmployeeNo == Oldemployeeno
                                         && cc.Category == Apptype && !string.IsNullOrEmpty(cc.PANNo)
                                         orderby cc.ApplicationId descending
                                         select new { cc.EmployeeNo, cc.PANNo }).FirstOrDefault();
                            if (Query != null && Query.PANNo != Panno)
                                return "This Old employee number  is linked to pan number " + Query.PANNo;
                        }
                    }
                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return "This Pan Number is linked to XXXXX";
            }
        }

        //public static string CheckPreviousEmployeeAdharByRefNo(string adharno, string RefNo)
        //{
        //    string isalreadyEmp = "";
        //    try
        //    {
        //        using (var context = new IOASDBEntities())
        //        {
        //            var checkquery = (from cc in context.vw_RCTOverAllApplicationEntry
        //                              where cc.Status != "Relieved" && cc.Status != "Cancel" && cc.Status != "Rejected" && cc.ApplicationType == "New"
        //                              && (cc.AadhaarNo.Contains(adharno) && !cc.ApplicationNo.Contains(RefNo))
        //                              select cc.ApplicationNo).ToArray();
        //            if (checkquery != null)
        //            {
        //                if (checkquery.Count() > 0)
        //                    isalreadyEmp = string.Join(",", checkquery);
        //            }
        //        }
        //        return isalreadyEmp;
        //    }
        //    catch (Exception ex)
        //    {
        //        return "";
        //    }
        //}

        //public static string CheckPreviousEmployeePanByRefNo(string Panno, string RefNo)
        //{
        //    string isalreadyEmp = string.Empty;
        //    try
        //    {
        //        using (var context = new IOASDBEntities())
        //        {
        //            var checkquery = (from cc in context.vw_RCTOverAllApplicationEntry
        //                              where cc.Status != "Relieved" && cc.Status != "Cancel" && cc.Status != "Rejected" && cc.ApplicationType == "New"
        //                              && (cc.PANNo.Contains(Panno) && !cc.ApplicationNo.Contains(RefNo))
        //                              select cc.ApplicationNo).ToArray();
        //            if (checkquery != null)
        //            {
        //                if (checkquery.Count() > 0)
        //                    isalreadyEmp = string.Join(",", checkquery);
        //            }
        //        }
        //        return isalreadyEmp;
        //    }
        //    catch (Exception ex)
        //    {
        //        return isalreadyEmp;
        //    }
        //}
        //-----------------


        public static string getIITMExperience(int appid, string apptype)
        {
            try
            {
                TimeSpan span = TimeSpan.Zero;
                string[] expOrder = new string[] { "New", "Extension", "Enhancement" };
                using (var context = new IOASDBEntities())
                {
                    var query = context.vw_RCTOverAllApplicationEntry.OrderBy(m => m.OrderId).FirstOrDefault(m => m.ApplicationId == appid && m.Category == apptype && m.ApplicationType == "New");
                    if (query != null)
                    {
                        if (query.Status == "Relieved")//If Candiate request relieving
                        {
                            var relQry = (from o in context.tblOrder
                                          from od in context.tblOrderDetail
                                          where o.OrderId == od.OrderId && o.OrderType == 9
                                          && o.AppointmentId == appid && o.AppointmentType == query.AppointmentType
                                          orderby o.OrderId
                                          select od.RelievingDate).FirstOrDefault();

                            (from vw in context.vw_RCTEmployeeHistory
                             join o in context.tblOrder on vw.OrderId equals o.OrderId into left
                             from jn in left.DefaultIfEmpty()
                             where (jn == null || jn.isExtended == true)
                             && expOrder.Contains(vw.OrderType)
                             && vw.EffectiveTo <= relQry
                             && vw.ApplicationId == appid && vw.AppointmentType == apptype
                             select new
                             {
                                 vw.EffectiveFrom,
                                 vw.EffectiveTo,
                             }).ToList().ForEach(m =>
                             {
                                 if (m.EffectiveFrom <= relQry && m.EffectiveTo >= relQry)
                                     span = span + ((m.EffectiveTo ?? DateTime.Now) - (relQry ?? DateTime.Now));
                                 else
                                     span = span + ((m.EffectiveTo ?? DateTime.Now) - (m.EffectiveFrom ?? DateTime.Now));
                             });
                        }
                        else
                        {
                            (from vw in context.vw_RCTEmployeeHistory
                             join o in context.tblOrder on vw.OrderId equals o.OrderId into left
                             from jn in left.DefaultIfEmpty()
                             where (jn == null || jn.isExtended == true)
                             && expOrder.Contains(vw.OrderType)
                             && vw.ApplicationId == appid && vw.AppointmentType == apptype
                             select new
                             {
                                 vw.EffectiveFrom,
                                 vw.EffectiveTo,
                             }).ToList().ForEach(m =>
                             {
                                 span = span + ((m.EffectiveTo ?? DateTime.Now) - (m.EffectiveFrom ?? DateTime.Now));
                             });
                        }
                        // because we start at year 1 for the Gregorian 
                        // calendar, we must subtract a year here.
                        DateTime zeroTime = new DateTime(1, 1, 1);
                        int years = (zeroTime + span).Year - 1;
                        int months = (zeroTime + span).Month - 1;
                        int days = (zeroTime + span).Day;
                        return years + " Year " + months + " Month " + days + " Days";
                    }
                }
                return "0 Year 0 Month 0 Days";
            }
            catch (Exception ex)
            {
                return "0 Year 0 Month 0 Days";
            }
        }

        public static string getExperienceInWordings(int appid, string apptype)
        {
            try
            {
                string Qualification = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    TimeSpan? span = DateTime.Now.Date - DateTime.Now.Date;
                    if (apptype == "CON")
                    {
                        context.tblRCTConsultantExperienceDetail.Where(x => x.ConsultantAppointmentId == appid && x.Status == "Active" && x.FromYear != null && x.ToYear != null)
                        .Select(m => new
                        {
                            m.FromYear,
                            m.ToYear
                        }).ToList().ForEach(m =>
                        {
                            span += m.ToYear.Value.AddDays(+1) - m.FromYear;
                        });
                    }
                    else if (apptype == "STE")
                    {
                        context.tblRCTSTEExperienceDetail.Where(x => x.STEID == appid && x.isCurrentVersion == true && x.FromYear != null && x.ToYear != null)
                        .Select(m => new
                        {
                            m.FromYear,
                            m.ToYear
                        }).ToList().ForEach(m =>
                        {
                            span += m.ToYear.Value.AddDays(+1) - m.FromYear;
                        });
                    }
                    else if (apptype == "OSG")
                    {
                        context.tblRCTOSGExperienceDetail.Where(x => x.OSGId == appid && x.isCurrentVersion == true && x.FromYear != null && x.ToYear != null)
                        .Select(m => new
                        {
                            m.FromYear,
                            m.ToYear
                        }).ToList().ForEach(m =>
                        {
                            span += m.ToYear.Value.AddDays(+1) - m.FromYear;
                        });
                    }
                    int ms = (int)span.Value.TotalMilliseconds;
                    var spanc = span.Value.TotalMilliseconds;
                    var Year = Math.Floor(spanc / 31536000000);
                    var Month = Math.Floor((spanc % 31536000000) / 2628000000);
                    var Days = Math.Floor(((spanc % 31536000000) % 2628000000) / 86400000);
                    return Year + " Years " + Month + " Months " + Days + " Days";
                }
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public static decimal getExperienceDecimal(int appid, string apptype)
        {
            try
            {
                decimal Experience = 0;
                int? totDays = 0;
                using (var context = new IOASDBEntities())
                {
                    if (apptype == "CON")
                    {
                        context.tblRCTConsultantExperienceDetail.Where(x => x.ConsultantAppointmentId == appid && x.Status == "Active" && x.FromYear != null && x.ToYear != null)
                        .Select(m => new
                        {
                            m.FromYear,
                            m.ToYear
                        }).ToList().ForEach(m =>
                        {
                            totDays += m.ToYear.Value.Subtract(m.FromYear.Value).Days + 1;
                        });
                    }
                    else if (apptype == "STE")
                    {
                        context.tblRCTSTEExperienceDetail.Where(x => x.STEID == appid && x.isCurrentVersion == true && x.FromYear != null && x.ToYear != null)
                        .Select(m => new
                        {
                            m.FromYear,
                            m.ToYear
                        }).ToList().ForEach(m =>
                        {
                            totDays += m.ToYear.Value.Subtract(m.FromYear.Value).Days + 1;
                        });
                    }
                    else if (apptype == "OSG")
                    {
                        context.tblRCTOSGExperienceDetail.Where(x => x.OSGId == appid && x.isCurrentVersion == true && x.FromYear != null && x.ToYear != null)
                        .Select(m => new
                        {
                            m.FromYear,
                            m.ToYear
                        }).ToList().ForEach(m =>
                        {
                            totDays += m.ToYear.Value.Subtract(m.FromYear.Value).Days + 1;
                        });
                    }
                    Experience = (Decimal)totDays / (Decimal)365;
                    return Math.Round(Convert.ToDecimal(Experience), 2);
                }
                return Experience;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public static string getQualificationWordings(int appid, string apptype)
        {
            try
            {
                string Qualification = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var query = context.vw_RCTOverAllApplicationEntry.Where(m => m.ApplicationId == appid && m.Category == apptype && m.ApplicationType == "New").Select(m => m.Qualification).FirstOrDefault();
                    return query;
                }
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        

        public static Tuple<int, int, int> DateDifference(DateTime d1, DateTime d2)
        {
            try
            {
                DateTime zeroTime = new DateTime(1, 1, 1);
                TimeSpan span = DateTime.Now - DateTime.Now;
                span = d2 - d1;
                int years = (zeroTime + span).Year - 1;
                int months = (zeroTime + span).Month - 1;
                int days = (zeroTime + span).Day - 1;
                return Tuple.Create(years, months, days);
            }
            catch (Exception ex)
            {
                return Tuple.Create(0, 0, 0);
            }
        }

        public static Tuple<int, int, int> DateDifference(DateTime[] d1, DateTime[] d2)
        {
            try
            {
                DateTime zeroTime = new DateTime(1, 1, 1);
                TimeSpan span = DateTime.Now - DateTime.Now;
                if (d1.Count() > 0)
                {
                    for (int i = 0; i < d1.Count(); i++)
                    {
                        var From = d1[i];
                        var To = d2[i];
                        if (i == 0)
                            span = To - From;
                        else
                            span = span + (To - From);
                    }
                }
                int years = (zeroTime + span).Year - 1;
                int months = (zeroTime + span).Month - 1;
                int days = (zeroTime + span).Day;
                return Tuple.Create(years, months, days);
            }
            catch (Exception ex)
            {
                return Tuple.Create(0, 0, 0);
            }
        }


        public static string getEmployeeID(int appid, int apptype)
        {
            try
            {
                string employeeId = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.vw_RCTOverAllApplicationEntry.Where(m => m.ApplicationId == appid && m.AppointmentType == apptype && m.ApplicationType == "New" && m.isEmployee == true).Select(x => x.EmployeersID).FirstOrDefault();
                    if (Qry != null)
                        return Qry;
                }
                return employeeId;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public static Tuple<int, string> getappidapptype(int orderid)
        {
            try
            {
                string employeeId = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    var Qry = context.vw_RCTOverAllApplicationEntry.Where(m => m.OrderId == orderid).Select(x => new { x.ApplicationId, x.Category }).FirstOrDefault();
                    if (Qry != null)
                        return Tuple.Create(Qry.ApplicationId ?? 0, Qry.Category);
                }
                return Tuple.Create(0, "");
            }
            catch (Exception ex)
            {
                return Tuple.Create(0, "");
            }
        }

        public static bool getPaymentthroughAgency(int appid, string apptype)
        {
            try
            {
                string employeeId = string.Empty;
                using (var context = new IOASDBEntities())
                {
                    if (apptype == "STE")
                    {
                        if (context.tblRCTSTE.Any(m => m.STEID == appid && m.CSIRStaffPayMode == 2))
                            return true;
                    }
                    else if (apptype == "CON")
                    {
                        if (context.tblRCTConsultantAppointment.Any(m => m.ConsultantAppointmentId == appid && m.CSIRStaffPayMode == 2))
                            return true;
                    }
                    else if (apptype == "OSG")
                    {
                        if (context.tblRCTOutsourcing.Any(m => m.OSGID == appid && m.CSIRStaffPayMode == 2))
                            return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static RCTViewDocumentsModel getDocuments(string EmployeeNo)
        {
            RCTViewDocumentsModel model = new RCTViewDocumentsModel();
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var qryMaster = (from S in IOAScontext.vw_RCTOverAllApplicationEntry
                                     where S.EmployeeNo == EmployeeNo && S.ApplicationType == "New"
                                     orderby S.ApplicationNo descending
                                     select new
                                     {
                                         S.EmployeersID,
                                         S.CandidateName,
                                         S.PIName
                                     }).FirstOrDefault();
                    if (qryMaster != null)
                    {
                        model.EmployeeID = qryMaster.EmployeersID;
                        model.Name = qryMaster.CandidateName;
                        model.PIName = qryMaster.PIName;
                        model.OtherDocModel = IOAScontext.vw_RCTOverAllDocuments.AsNoTracking().Where(s => s.EmployeeId == EmployeeNo)
                            .ToList()
                            .GroupBy(g => g.DocumentCatecory).AsEnumerable().Select((x) => new OtherDocModel
                            {
                                DocumentCatecory = x.Key,
                                DocumentList = x.Select((m) => new RCTViewDocumentListModel
                                {
                                    DocumentName = m.FileName,
                                    DocumentPath = m.FilePath,
                                    FormDate = m.FromDate != null ? string.Format("{0:dd-MMMM-yyyy}", m.FromDate) : "",
                                    ToDate = m.ToDate != null ? string.Format("{0:dd-MMMM-yyyy}", m.ToDate) : ""
                                }).ToList()
                            }).ToList();
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public static RCTViewDocumentsModel getDocuments(int appid, string apptype)
        {
            RCTViewDocumentsModel model = new RCTViewDocumentsModel();
            List<OtherDocModel> docList = new List<OtherDocModel>();
            try
            {
                using (var IOAScontext = new IOASDBEntities())
                {
                    var query = (from S in IOAScontext.vw_RCTOverAllApplicationEntry
                                 where S.ApplicationId == appid && S.Category == apptype
                                 && S.ApplicationType == "New"
                                 orderby S.ApplicationNo descending
                                 select new
                                 {
                                     S.EmployeersID,
                                     S.CandidateName,
                                     S.PIName
                                 }).FirstOrDefault();
                    if (query != null)
                    {
                        model.EmployeeID = query.EmployeersID;
                        model.Name = query.CandidateName;
                        model.PIName = query.PIName;
                        model.OtherDocModel = IOAScontext.vw_RCTOverAllDocuments.AsNoTracking().Where(s => s.Applicationid == appid && s.Catecory == apptype)
                            .ToList()
                            .GroupBy(g => g.DocumentCatecory).AsEnumerable().Select((x) => new OtherDocModel
                            {
                                DocumentCatecory = x.Key,
                                DocumentList = x.Select((z) => new RCTViewDocumentListModel
                                {
                                    DocumentName = z.FileName,
                                    DocumentPath = z.FilePath,
                                    FormDate = z.FromDate != null ? string.Format("{0:dd-MMMM-yyyy}", z.FromDate) : "",
                                    ToDate = z.ToDate != null ? string.Format("{0:dd-MMMM-yyyy}", z.ToDate) : ""
                                }).ToList()
                            }).ToList();
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public static ViewStaffAllocationModel getViewStaffAllocation(int ProjectID, int? Apptype = null)
        {
            ViewStaffAllocationModel model = new ViewStaffAllocationModel();
            List<ViewStaffAllocationListModel> list = new List<ViewStaffAllocationListModel>();
            List<AllocatedStaffListModel> allocatedStaff = new List<AllocatedStaffListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from cm in context.tblProjectStaffCategoryMaster
                               join cbrk in context.tblProjectStaffCategorywiseBreakup on cm.ProjectStaffCategoryId equals cbrk.ProjectStaffCategory into joined
                               from j in joined.DefaultIfEmpty()
                               where j.ProjectId == ProjectID
                               group j by new { j.ProjectStaffCategory, cm } into g
                               select new
                               {
                                   Category = g.Key.cm,
                                   NoofStaff = g.Sum(x => x.NoofStaffs),
                               }
                             ).ToList();
                    if (Qry.Count() > 0)
                    {
                        foreach (var item in Qry)
                        {
                            string Designation = item.Category.ProjectStaffCategory;
                            int AllottedStaff = (from vw in context.vw_RCTOverAllApplicationEntry
                                                 from d in context.tblRCTDesignation
                                                 where vw.DesignationId == d.DesignationId
                                                 && vw.Status == "Verification Completed" && (vw.AppointmentType == Apptype || Apptype == null)
                                                 && vw.ProjectId == ProjectID && d.DesignationCode == Designation
                                                 select vw.ApplicationId).Count();
                            int Vacancy = item.NoofStaff ?? 0 - AllottedStaff;

                            list.Add(new ViewStaffAllocationListModel()
                            {
                                Category = item.Category.ProjectStaffCategory,
                                NoOfStaffs = item.NoofStaff ?? 0,
                                AllottedStaffs = AllottedStaff,
                                StaffVacancy = Vacancy
                            });
                        }
                    }

                    allocatedStaff = (from cm in context.vw_RCTOverAllApplicationEntry
                                      where cm.Status == "Verification Completed" && cm.ApplicationType == "New"
                                      && cm.ProjectId == ProjectID
                                      select new
                                      {
                                          cm.PostRecommended,
                                          cm.EmployeeNo,
                                          cm.CandidateName,
                                          cm.BasicPay,
                                          cm.HRA,
                                          cm.AppointmentStartdate,
                                          cm.AppointmentEnddate
                                      }).AsEnumerable().Select((x, index) => new AllocatedStaffListModel()
                                      {
                                          Name = x.CandidateName,
                                          Designation = x.PostRecommended,
                                          EmployeeNo = x.EmployeeNo,
                                          StartDate = string.Format("{0:dd-MMMM-yyyy}", x.AppointmentStartdate),
                                          EndDate = string.Format("{0:dd-MMMM-yyyy}", x.AppointmentEnddate),
                                          Salary = x.BasicPay ?? 0,
                                          HRA = x.HRA ?? 0
                                      }).ToList();
                }
                model.StaffAllocationList = list;
                model.AllocatedStaffList = allocatedStaff;
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public static Tuple<String, String> GetApplTypebyReqId(int ComitReqId)
        {
            try
            {
                var Appltype = "";
                var Reqtype = "";
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblRCTCommitmentRequest.FirstOrDefault(dup => dup.RecruitmentRequestId == ComitReqId);
                    if (query != null)
                    {
                        Appltype = query.AppointmentType;
                        Reqtype = query.RequestType;
                    }
                }
                return Tuple.Create(Appltype, Reqtype);
            }
            catch (Exception ex)
            {
                var Appltype = "";
                var Reqtype = "";
                return Tuple.Create(Appltype, Reqtype);
            }
        }

        #region Other Payment and deduction 
        public static List<AutoCompleteModel> GetAutoCompleteEmployeeList(string term, string User)
        {
            try
            {

                var data = getUserIdAndRole(User);
                string category = string.Empty;
                if (data.Item2 == 89 || data.Item2 == 102 || data.Item2 == 103 || data.Item2 == 104 || data.Item2 == 104 || data.Item2 == 105 || data.Item2 == 106)
                    category = "STE";
                else if (data.Item2 == 93)
                    category = "CON";
                else if (data.Item2 == 97 || data.Item2 == 107 || data.Item2 == 108 || data.Item2 == 109)
                    category = "OSG";

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.vw_RCTOverAllApplicationEntry
                            where (string.IsNullOrEmpty(term) || U.EmployeeNo.Contains(term))
                                   && U.ApplicationType == "New" && U.Category == category && U.IsActiveNow == true
                            orderby U.EmployeeNo
                            select new
                            {
                                U.EmployeeNo,
                                U.ApplicationId,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.ApplicationId.ToString(),
                                label = x.EmployeeNo
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        public static List<MasterlistviewModel> GetmonthList()
        {
            try
            {
                List<MasterlistviewModel> getlistmonth = new List<MasterlistviewModel>();
                int Month = DateTime.Now.Month;
                int Year = DateTime.Now.Year;
                for (int i = Month; i <= Month; i++)
                {
                    DateTime date = new DateTime(Year, i, 1);
                    string monthyear = date.ToString("MMM") + "-" + Year;
                    getlistmonth.Add(new MasterlistviewModel()
                    {

                        id = i,
                        name = monthyear
                    });

                }
                return getlistmonth;
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> getlistmonth = new List<MasterlistviewModel>();
                return getlistmonth;
            }
        }

        public static List<MasterlistviewModel> GetYearOthList()
        {
            try
            {
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                int year = DateTime.Now.Year;
                for (int i = year; i <= year; i++)
                {
                    getlistyear.Add(new MasterlistviewModel()
                    {

                        id = i,
                        name = Convert.ToString(i)
                    });

                }
                return getlistyear;
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> getlistyear = new List<MasterlistviewModel>();
                return getlistyear;
            }
        }

        public static string GetOtherPaymentDecId()
        {
            try
            {
                string seqnum = "";
                //var checkNum = "OTHPD/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var query = (from oth in context.tblRCTOTHPaymentDeduction
                                 orderby oth.OTHPayDeductionId descending
                                 select oth).FirstOrDefault();
                    if (query != null)
                    {
                        var num = query.OTHPayDeductionNo;
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var lastnumber = Convert.ToInt32(number);
                        lastnumber += 1;
                        seqnum = lastnumber.ToString("000000");
                        return seqnum;
                    }
                    else
                    {
                        seqnum = "000001";
                        return seqnum;
                    }
                }
            }

            catch (Exception ex)
            {

                throw ex;

            }
        }
        #endregion

        #region ConsultantCommon
        public static string GetQualificationName(int qulifiactionid)
        {
            string Qualificationname = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from Qc in context.tblRCTQualificationList
                                 where Qc.QualificationId == qulifiactionid
                                 select Qc.Qualification).FirstOrDefault();
                    if (query != null)
                        Qualificationname = query;
                }
                return Qualificationname;
            }
            catch (Exception ex)
            {
                return Qualificationname;
            }
        }
        public static string GetDeciplineName(int Desciplineid)
        {
            string Desciplinename = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from dc in context.tblRCTCourseList
                                 where dc.CourseId == Desciplineid
                                 select dc.CourseName).FirstOrDefault();
                    if (query != null)
                        Desciplinename = query;
                }
                return Desciplinename;
            }
            catch (Exception ex)
            {
                return Desciplinename;
            }
        }
        #endregion


        public static bool EmployeeHistoryLog(int AppId, string AppType, int? OrderId = null)
        {
            bool status = false;
            try
            {
                OrderModel model = new OrderModel();
                using (var context = new IOASDBEntities())
                {
                    if (OrderId > 0)
                    {
                        if (context.tblRCTOrderHistory.Any(x => x.OrderId == OrderId))
                            return false;

                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderDetail
                                     from vw in context.vw_RCTOverAllApplicationEntry
                                     where o.OrderId == od.OrderId && o.OrderId == vw.OrderId
                                     && o.OrderId == OrderId
                                     select new { od, o, vw }).FirstOrDefault();
                        if (query != null)
                        {
                            model.EmployeeID = query.vw.EmployeersID;
                            model.ApplicationID = query.vw.ApplicationId ?? 0;
                            model.OrderID = query.o.OrderId;
                            model.OrderType = query.o.OrderType ?? 0;
                            model.OrderTypestr = query.vw.ApplicationType;
                            model.Category = query.vw.Category;
                            model.FromDate = query.o.FromDate;
                            if (query.o.OrderType == 9)
                                model.ToDate = query.o.FromDate;
                            else
                                model.ToDate = query.o.ToDate;
                            model.Salary = query.o.Basic;
                            model.HRA = query.o.HRA ?? 0;
                            model.MedicalAmmount = query.vw.MedicalAmmount ?? 0;
                            model.DesignationId = query.vw.DesignationId;
                            model.ProjectId = query.vw.ProjectId;
                            model.OrderDate = query.vw.ApplicationReceiveDate;
                            model.isMedical = query.vw.MedicalType == 2 ? true : false;

                            if (model.Category == "OSG")
                            {
                                var queryCalDetail = (from c in context.tblRCTSalaryCalcDetails
                                                      where c.ID == model.ApplicationID && c.AppointType == "Outsourcing"
                                                      && c.OrderId == model.OrderID && c.IsCurrentVersion == true
                                                      select new
                                                      {
                                                          c.EmployerESIC,
                                                          c.EmployerPF,
                                                          c.EmployerInsurance
                                                      }).FirstOrDefault();
                                if (queryCalDetail != null)
                                {
                                    model.EmployerESIC_f = queryCalDetail.EmployerESIC > 0 ? true : false;
                                    model.PFBasic_f = queryCalDetail.EmployerPF > 0 ? true : false;
                                    model.EmployerIns_f = queryCalDetail.EmployerInsurance > 0 ? true : false;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (context.tblRCTOrderHistory.Any(x => x.ApplicationId == AppId && x.AppointmentType == AppType && x.OrderType == "New"))
                            return false;

                        var query = (from vw in context.vw_RCTOverAllApplicationEntry
                                     where vw.ApplicationId == AppId && vw.Category == AppType
                                     && vw.ApplicationType == "New"
                                     select vw).FirstOrDefault();
                        if (query != null)
                        {
                            model.EmployeeID = query.EmployeeNo;
                            model.ApplicationID = query.ApplicationId ?? 0;
                            model.Category = query.Category;
                            model.OrderTypestr = "New";
                            model.FromDate = query.AppointmentStartdate;
                            model.ToDate = query.AppointmentEnddate;
                            model.Salary = query.BasicPay;
                            model.HRA = query.HRA ?? 0;
                            model.MedicalAmmount = query.MedicalAmmount ?? 0;
                            model.DesignationId = query.DesignationId;
                            model.ProjectId = query.ProjectId;
                            model.OrderDate = query.ApplicationReceiveDate;
                            model.isMedical = query.MedicalType == 2 ? true : false;
                            if (model.Category == "OSG")
                            {
                                var queryCalDetail = (from c in context.tblRCTSalaryCalcDetails
                                                      where c.ID == model.ApplicationID && c.AppointType == "Outsourcing"
                                                      && c.IsCurrentVersion == true
                                                      select new
                                                      {
                                                          c.EmployerESIC,
                                                          c.EmployerPF,
                                                          c.EmployerInsurance
                                                      }).FirstOrDefault();
                                if (queryCalDetail != null)
                                {
                                    model.EmployerESIC_f = queryCalDetail.EmployerESIC > 0 ? true : false;
                                    model.PFBasic_f = queryCalDetail.EmployerPF > 0 ? true : false;
                                    model.EmployerIns_f = queryCalDetail.EmployerInsurance > 0 ? true : false;
                                }
                            }
                        }
                    }

                    int?[] exceptedType = { 7, 8, 10 };


                    if (model.OrderType == 4)
                    {
                        var query = (from h in context.tblRCTOrderHistory
                                     join o in context.tblOrder on h.OrderId equals o.OrderId into lft
                                     from lf in lft.DefaultIfEmpty()
                                     where !exceptedType.Contains(h.OrderTypeId) && (!exceptedType.Contains(lf.OrderType) || lf == null)
                                     && (lf.isUpdated == true && lf.isExtended == true || lf == null)
                                     && h.ApplicationId == model.ApplicationID && h.AppointmentType == model.Category
                                     && (h.EffectiveFrom <= model.FromDate && ((h.ActualAppointmentEndDate != null && h.ActualAppointmentEndDate >= model.ToDate) || (h.ActualAppointmentEndDate == null && h.EffectiveTo >= model.ToDate)))
                                     && h.IsCanceled != true
                                     orderby h.OrderId descending
                                     select new { lf, h }).FirstOrDefault();
                        if (query != null)
                        {
                            query.h.IsCanceled = true;
                            context.SaveChanges();
                        }

                        tblRCTOrderHistory amendhis = new tblRCTOrderHistory();
                        amendhis.ApplicationId = model.ApplicationID;
                        amendhis.AppointmentType = model.Category;
                        amendhis.Basic = model.Salary;
                        amendhis.DesignationId = model.DesignationId;
                        amendhis.EffectiveFrom = model.FromDate;
                        amendhis.EffectiveTo = model.ToDate;
                        amendhis.EmployeeId = model.EmployeeID;
                        amendhis.HRA = model.HRA;
                        amendhis.Medical = model.MedicalAmmount;
                        amendhis.isMedicalInclusive = model.isMedical;
                        amendhis.OrderId = model.OrderID;
                        amendhis.OrderTypeId = model.OrderType;
                        amendhis.OrderType = model.OrderTypestr;
                        amendhis.ProjectId = model.ProjectId;
                        amendhis.OrderDate = model.OrderDate;
                        context.tblRCTOrderHistory.Add(amendhis);
                        context.SaveChanges();



                        //var queryEff = (from h in context.tblRCTOrderEffectHistory
                        //                join o in context.tblOrder on h.OrderId equals o.OrderId into lft
                        //                from lf in lft.DefaultIfEmpty()
                        //                where !exceptedType.Contains(h.OrderTypeId) && (!exceptedType.Contains(lf.OrderType) || lf == null)
                        //                && (lf.isUpdated == true && lf.isExtended == true || lf == null)
                        //                && h.ApplicationId == model.ApplicationID && h.AppointmentType == model.Category
                        //                && (h.EffectiveFrom <= model.FromDate && ((h.ActualAppointmentEndDate != null && h.ActualAppointmentEndDate >= model.ToDate) || (h.ActualAppointmentEndDate == null && h.EffectiveTo >= model.ToDate)))
                        //                orderby h.OrderId descending
                        //                select new { lf, h }).FirstOrDefault();
                        //if (queryEff != null)
                        //{
                        //    queryEff.h.EffectiveTo = model.ToDate;
                        //    context.SaveChanges();
                        //    return true;
                        //}
                        //else
                        //    return false;

                        (from h in context.tblRCTOrderEffectHistory
                             //join o in context.tblOrder on h.OrderId equals o.OrderId into lft
                             //from lf in lft.DefaultIfEmpty()
                             //where !exceptedType.Contains(h.OrderTypeId) && (!exceptedType.Contains(lf.OrderType) || lf == null)
                             //&& ((lf.isUpdated == true && lf.isExtended == true) || lf == null)
                             //&&
                         where h.ApplicationId == model.ApplicationID && h.AppointmentType == model.Category
                         && (h.EffectiveFrom == model.FromDate && ((h.ActualAppointmentEndDate != null && h.ActualAppointmentEndDate >= model.ToDate) || (h.ActualAppointmentEndDate == null && h.EffectiveTo >= model.ToDate)))
                         select h).ToList()
                         .ForEach(m =>
                         {
                             if (m.ActualAppointmentEndDate != null)
                                 m.ActualAppointmentEndDate = model.ToDate;
                             else
                                 m.EffectiveTo = model.ToDate;
                             m.AppointmentEndDate = model.ToDate;
                         });
                        context.SaveChanges();
                        return true;
                    }

                    var QryDatas = context.tblRCTOrderHistory
                        .Where(m => m.EmployeeId == model.EmployeeID && m.ApplicationId == model.ApplicationID
                        && m.AppointmentType == model.Category && m.IsCanceled != true
                        && !exceptedType.Contains(m.OrderTypeId) && !exceptedType.Contains(model.OrderType)
                        && m.EffectiveTo != m.ActualAppointmentEndDate
                        && ((m.ActualAppointmentEndDate == null && m.EffectiveTo >= model.FromDate) || (m.ActualAppointmentEndDate != null && m.ActualAppointmentEndDate >= model.FromDate))
                        && (m.Basic != model.Salary || m.HRA != model.HRA || m.Medical != model.MedicalAmmount
                        || m.DesignationId != model.DesignationId || m.ProjectId != model.ProjectId)).ToList();

                    if (model.OrderType == 9)
                    {
                        QryDatas = context.tblRCTOrderHistory
                                   .Where(m => m.EmployeeId == model.EmployeeID && m.ApplicationId == model.ApplicationID
                                   && m.AppointmentType == model.Category && m.IsCanceled != true
                                   && m.EffectiveTo != m.ActualAppointmentEndDate
                                   && ((m.ActualAppointmentEndDate == null && m.EffectiveTo >= model.FromDate) || (m.ActualAppointmentEndDate != null && m.ActualAppointmentEndDate >= model.FromDate))
                                   ).ToList();
                    }

                    if (!exceptedType.Contains(model.OrderType))
                    {
                        if (QryDatas.Count > 0)
                        {
                            foreach (var data in QryDatas)
                            {
                                if (model.OrderType == 9)
                                {
                                    data.ActualAppointmentEndDate = model.ToDate;
                                    data.isHRAUpdate = false;
                                }
                                else
                                {
                                    if (model.OrderType == 5 || model.OrderType == 6)
                                        data.isHRAUpdate = true;
                                    else
                                        data.isHRAUpdate = false;

                                    if (model.FromDate > data.EffectiveFrom)
                                        data.ActualAppointmentEndDate = model.FromDate.Value.AddDays(-1);
                                    else
                                        data.ActualAppointmentEndDate = model.FromDate;
                                }
                                context.SaveChanges();
                            }
                        }
                    }

                    tblRCTOrderHistory his = new tblRCTOrderHistory();
                    his.ApplicationId = model.ApplicationID;
                    his.AppointmentType = model.Category;
                    his.Basic = model.Salary;
                    his.DesignationId = model.DesignationId;
                    if (model.OrderType != 9)
                        his.EffectiveFrom = model.FromDate;
                    his.EffectiveTo = model.ToDate;
                    his.EmployeeId = model.EmployeeID;
                    his.HRA = model.HRA;
                    his.Medical = model.MedicalAmmount;
                    his.isMedicalInclusive = model.isMedical;
                    his.OrderId = model.OrderID;
                    his.OrderTypeId = model.OrderType;
                    his.OrderType = model.OrderTypestr;
                    his.ProjectId = model.ProjectId;
                    his.OrderDate = model.OrderDate;
                    if (model.OrderType == 5)
                    {
                        his.isHRABooking = true;
                        his.HRABookingDate = DateTime.Now;
                    }
                    else if (model.OrderType == 6)
                    {
                        his.isHRACancellation = true;
                        his.HRACancellationDate = DateTime.Now;
                    }
                    context.tblRCTOrderHistory.Add(his);
                    context.SaveChanges();
                    status = true;
                }
                return status;
            }
            catch (Exception ex)
            {
                return status;
            }
        }


        public static bool EmployeeHistoryLog(OrderModel model)
        {
            bool status = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int?[] exceptedType = { 7, 8, 10 };
                    var QryDatas = context.tblRCTOrderHistory
                        .Where(m => m.EmployeeId == model.EmployeeID && m.ApplicationId == model.ApplicationID
                        && m.AppointmentType == model.Category
                        && !exceptedType.Contains(m.OrderTypeId) && !exceptedType.Contains(model.OrderType)
                        && m.EffectiveTo != m.ActualAppointmentEndDate && m.EffectiveTo >= model.FromDate &&
                        (m.Basic != model.Salary || m.HRA != model.HRA || m.Medical != model.MedicalAmmount
                        || m.DesignationId != model.DesignationId || m.ProjectId != model.ProjectId || m.GST != model.GST)).ToList();
                    if (model.OrderType == 9)
                    {
                        QryDatas = context.tblRCTOrderHistory
                                   .Where(m => m.EmployeeId == model.EmployeeID && m.ApplicationId == model.ApplicationID
                                   && m.AppointmentType == model.Category
                                   && !exceptedType.Contains(m.OrderTypeId) && !exceptedType.Contains(model.OrderType)
                                   && m.EffectiveTo != m.ActualAppointmentEndDate && (m.EffectiveFrom <= model.FromDate && m.EffectiveTo >= model.FromDate)
                                   ).ToList();
                    }

                    if (!exceptedType.Contains(model.OrderType))
                    {
                        if (QryDatas.Count > 0)
                        {
                            foreach (var data in QryDatas)
                            {
                                if (model.OrderType == 9)
                                {
                                    data.ActualAppointmentEndDate = model.ToDate;
                                    data.isHRAUpdate = false;
                                }
                                else
                                {
                                    if (model.OrderType == 5 || model.OrderType == 6)
                                        data.isHRAUpdate = true;
                                    else
                                        data.isHRAUpdate = false;

                                    if (model.FromDate > data.EffectiveFrom)
                                        data.ActualAppointmentEndDate = model.FromDate.Value.AddDays(-1);
                                    else
                                    {
                                        data.ActualAppointmentEndDate = model.FromDate;

                                    }
                                }
                                context.SaveChanges();
                            }
                        }
                    }

                    tblRCTOrderHistory his = new tblRCTOrderHistory();
                    his.ApplicationId = model.ApplicationID;
                    his.AppointmentType = model.Category;
                    his.Basic = model.Salary;
                    his.DesignationId = model.DesignationId;
                    if (model.OrderType != 9)
                        his.EffectiveFrom = model.FromDate;
                    his.EffectiveTo = model.ToDate;
                    his.EmployeeId = model.EmployeeID;
                    his.HRA = model.HRA;
                    his.Medical = model.MedicalAmmount;
                    his.OrderId = model.OrderID;
                    his.OrderTypeId = model.OrderType;
                    his.OrderType = model.OrderTypestr;
                    his.ProjectId = model.ProjectId;
                    context.tblRCTOrderHistory.Add(his);
                    context.SaveChanges();
                    status = true;
                }
                return status;
            }
            catch (Exception ex)
            {
                return status;
            }
        }

        public static AttachmentDetailModel GetCommiteeOfferletterDetails(int appId, string appCategory, int? orderid = null)
        {
            AttachmentDetailModel model = new AttachmentDetailModel();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (orderid > 0)
                    {
                        var query = context.tblOrderDetail.FirstOrDefault(m => m.OrderId == orderid);
                        if (query != null)
                        {
                            var data = query.OfferLetter.Split(new char[] { '_' }, 2);
                            model.DocumentActualName = data[1];
                            model.DocumentName = query.OfferLetter;
                            model.DocumentPath = "RCTOfferLetter";
                        }
                    }
                    else
                    {
                        if (appCategory == "STE")
                        {
                            var query = context.tblRCTSTE.FirstOrDefault(m => m.STEID == appId);
                            if (query != null)
                            {
                                var data = query.OfferLetter.Split(new char[] { '_' }, 2);
                                model.DocumentActualName = data[1];
                                model.DocumentName = query.OfferLetter;
                                model.DocumentPath = "RCTOfferLetter";
                            }
                        }
                    }

                    return model;
                }
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        #region Common Employee Details
        public static CommonEmployeeDetails GetEmployeeDetails(string EmpNo = null, string AppRefNo = null)
        {
            CommonEmployeeDetails EmpModel = new CommonEmployeeDetails();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (EmpNo != null || AppRefNo != null)
                    {
                        var qeryempno = (from vw in context.vw_RCTOverAllApplicationEntry
                                         where (string.IsNullOrEmpty(EmpNo) || (vw.EmployeersID == EmpNo && vw.IsActiveNow == true)) && vw.ApplicationType == "New"
                                         && (string.IsNullOrEmpty(AppRefNo) || vw.ApplicationNo == AppRefNo)
                                         orderby vw.ApplicationId descending
                                         select new { vw.Category, vw.ApplicationId }).FirstOrDefault();
                        if (qeryempno != null)
                        {
                            if (qeryempno.Category == "STE")
                            {
                                int appid = qeryempno.ApplicationId ?? 0;
                                var steAppDetails = context.tblRCTSTE.Where(x => x.STEID == appid).FirstOrDefault();
                                if (steAppDetails != null)
                                {
                                    EmpModel.ProfessionalId = steAppDetails.ProfessionalType;
                                    EmpModel.CandidatePhoto = steAppDetails.CandidateImage;
                                    EmpModel.Name = steAppDetails.Name;
                                    EmpModel.Nameoftheguardian = steAppDetails.NameoftheGuardian;
                                    EmpModel.aadharnumber = steAppDetails.AadhaarNumber;
                                    EmpModel.PAN = steAppDetails.PANNo;
                                    EmpModel.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", steAppDetails.DateofBirth);
                                    EmpModel.Age = steAppDetails.Age;
                                    EmpModel.Gender = steAppDetails.Sex;
                                    EmpModel.Caste = steAppDetails.Caste;
                                    EmpModel.ContactNumber = steAppDetails.ContactNumber;
                                    EmpModel.AlternativeContactNumber = steAppDetails.AlternativeContactNumber;
                                    EmpModel.EmergencyContactno = steAppDetails.EmergencyContact;
                                    EmpModel.Email = steAppDetails.Email;
                                    EmpModel.PresentAddress = steAppDetails.PresentAddress;
                                    EmpModel.isSameasPermanentAddress = steAppDetails.isSameAsPresentAddress ?? false;
                                    EmpModel.PermanentAddress = steAppDetails.PermanentAddress;
                                    EmpModel.BloodGroup = steAppDetails.Bloodgroup;
                                    EmpModel.BloodGroupRH = steAppDetails.BloodgroupRH;
                                    EmpModel.Nationality = steAppDetails.Nationality;
                                    EmpModel.PhysicallyChallenged = steAppDetails.PhysicallyChallenged;
                                    EmpModel.RelatedIITMadras = steAppDetails.RelatedIIT;
                                    EmpModel.IITMPensionerCSIRStaff = steAppDetails.IITMPensionerOrCSIRStaff;
                                    EmpModel.MsPhdType = steAppDetails.MsPhdType;
                                    EmpModel.MsPhd = steAppDetails.MsPhd ?? false;
                                    EmpModel.PhdDetail = steAppDetails.PhdDetail;
                                    EmpModel.BankAccountNo = steAppDetails.BankAccountNumber;
                                    EmpModel.BankName = steAppDetails.BankName;
                                    EmpModel.IFSCCode = steAppDetails.IFSCCode;
                                    if (steAppDetails.isHaveGateScore == true)
                                    {
                                        EmpModel.GateScore = steAppDetails.GateScore;
                                        EmpModel.IsGateScore = steAppDetails.isHaveGateScore ?? false;
                                    }
                                    List<STEEducationModel> EducationList = new List<STEEducationModel>();
                                    var QryEducation = (from c in context.tblRCTSTEEducationDetail
                                                        from q in context.tblRCTQualificationList
                                                        where c.STEID == appid && c.isCurrentVersion == true && c.QualifiCationID == q.QualificationId
                                                        orderby c.STEEducationDetailID
                                                        select new { c, q }).ToList();
                                    if (QryEducation != null)
                                    {
                                        for (int i = 0; i < QryEducation.Count; i++)
                                        {
                                            int EducationID = QryEducation[i].c.QualifiCationID ?? 0;
                                            int DisciplineID = QryEducation[i].c.DisciplineID ?? 0;
                                            var list = Common.GetCourseList(EducationID);
                                            var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();

                                            EducationList.Add(new STEEducationModel()
                                            {
                                                Education = QryEducation[i].q.Qualification,
                                                EducationId = QryEducation[i].c.STEEducationDetailID,
                                                QualificationId = QryEducation[i].c.QualifiCationID,
                                                DisciplineId = QryEducation[i].c.DisciplineID,
                                                Discipline = Discipline,
                                                Institution = QryEducation[i].c.UniversityorInstitution,
                                                YearofPassing = QryEducation[i].c.YearOfPassing,
                                                MarkType = QryEducation[i].c.MarkType,
                                                Marks = QryEducation[i].c.Marks,
                                                DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                                CertificatePath = QryEducation[i].c.DocumentFilePath,
                                                CertificateName = QryEducation[i].c.FileName,
                                                Remarks = QryEducation[i].c.Remarks,
                                                DisiplineList = list
                                            });
                                        }
                                    }
                                    EmpModel.EducationDetail = EducationList;
                                    EmpModel.ExperienceDetail = (from c in context.tblRCTSTEExperienceDetail
                                                                 join d in context.tblCodeControl on c.TypeID equals d.CodeValAbbr into lft
                                                                 from j in lft.DefaultIfEmpty()
                                                                 where c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTExperienceType")
                                                                 && c.STEID == appid
                                                                 orderby c.STEExperienceDetailID
                                                                 select new
                                                                 {
                                                                     c.STEExperienceDetailID,
                                                                     c.TypeID,
                                                                     j.CodeValDetail,
                                                                     c.Organisation,
                                                                     c.DesignationId,
                                                                     c.Designation,
                                                                     c.FromYear,
                                                                     c.ToYear,
                                                                     c.SalaryDrawn,
                                                                     c.DocumentFilePath,
                                                                     c.FileName,
                                                                     c.Remarks,
                                                                 }).AsEnumerable().Select((x) => new STEExperienceModel()
                                                                 {
                                                                     ExperienceId = x.STEExperienceDetailID,
                                                                     ExperienceTypeId = x.TypeID,
                                                                     ExperienceType = x.CodeValDetail,
                                                                     Organisation = x.Organisation,
                                                                     DesignationListId = x.DesignationId,
                                                                     DesignationautoComplete = x.Designation,
                                                                     FromDate = x.FromYear,
                                                                     ToDate = x.ToYear,
                                                                     SalaryDrawn = x.SalaryDrawn,
                                                                     ExperienceFilePath = x.DocumentFilePath,
                                                                     ExperienceFileName = x.FileName,
                                                                     Remarks = x.Remarks,
                                                                     strFromDate = string.Format("{0:dd-MMMM-yyyy}", x.FromYear),
                                                                     strToDate = string.Format("{0:dd-MMMM-yyyy}", x.ToYear)
                                                                 }).ToList();
                                    if (EmpNo != null)
                                        EmpModel.IITMExperience = RequirementService.IITExperienceInWording(EmpNo);
                                }
                            }
                            else if (qeryempno.Category == "OSG")
                            {
                                int appid = qeryempno.ApplicationId ?? 0;
                                var osgAppDetails = context.tblRCTOutsourcing.Where(x => x.OSGID == appid).FirstOrDefault();
                                if (osgAppDetails != null)
                                {
                                    EmpModel.ProfessionalId = osgAppDetails.ProfessionalType;
                                    EmpModel.Name = osgAppDetails.Name;
                                    EmpModel.CandidatePhoto = osgAppDetails.CandidateImage;
                                    EmpModel.Nameoftheguardian = osgAppDetails.NameoftheGuardian;
                                    EmpModel.VendorName = osgAppDetails.VendorName;
                                    EmpModel.aadharnumber = osgAppDetails.AadhaarNumber;
                                    EmpModel.PAN = osgAppDetails.PANNo;
                                    EmpModel.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", osgAppDetails.DateofBirth);
                                    EmpModel.Age = osgAppDetails.Age;
                                    EmpModel.Gender = osgAppDetails.Sex;
                                    EmpModel.Caste = osgAppDetails.Caste;
                                    EmpModel.ContactNumber = osgAppDetails.ContactNumber;
                                    EmpModel.AlternativeContactNumber = osgAppDetails.AlternativeContactNumber;
                                    EmpModel.Email = osgAppDetails.Email;
                                    EmpModel.PresentAddress = osgAppDetails.PresentAddress;
                                    EmpModel.isSameasPermanentAddress = osgAppDetails.isSameAsPresentAddress ?? false;
                                    EmpModel.PermanentAddress = osgAppDetails.PermanentAddress;
                                    EmpModel.BloodGroup = osgAppDetails.Bloodgroup;
                                    EmpModel.BloodGroupRH = osgAppDetails.BloodgroupRH;
                                    EmpModel.Nationality = osgAppDetails.Nationality;
                                    EmpModel.PhysicallyChallenged = osgAppDetails.PhysicallyChallenged;
                                    EmpModel.RelatedIITMadras = osgAppDetails.RelatedIIT;
                                    EmpModel.IITMPensionerCSIRStaff = osgAppDetails.IITMPensionerOrCSIRStaff;
                                    EmpModel.MsPhdType = osgAppDetails.MsPhdType;
                                    EmpModel.MsPhd = osgAppDetails.MsPhd ?? false;
                                    EmpModel.PhdDetail = osgAppDetails.PhdDetail;
                                    EmpModel.BankAccountNo = osgAppDetails.BankAccountNumber;
                                    EmpModel.BankName = osgAppDetails.BankName;
                                    EmpModel.IFSCCode = osgAppDetails.IFSCCode;
                                    List<STEEducationModel> EducationList = new List<STEEducationModel>();
                                    var QryEducation = (from c in context.tblRCTOSGEducationDetail
                                                        from q in context.tblRCTQualificationList
                                                        where c.OSGId == appid && c.isCurrentVersion == true && c.QualificationId == q.QualificationId
                                                        orderby c.OSGEducationDetailId
                                                        select new { c, q }).ToList();
                                    if (QryEducation != null)
                                    {
                                        for (int i = 0; i < QryEducation.Count; i++)
                                        {
                                            int EducationID = QryEducation[i].c.QualificationId ?? 0;
                                            int DisciplineID = QryEducation[i].c.DisciplineId ?? 0;
                                            var list = Common.GetCourseList(EducationID);
                                            var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();

                                            EducationList.Add(new STEEducationModel()
                                            {
                                                Education = QryEducation[i].q.Qualification,
                                                EducationId = QryEducation[i].c.OSGEducationDetailId,
                                                QualificationId = QryEducation[i].c.QualificationId,
                                                DisciplineId = QryEducation[i].c.DisciplineId,
                                                Discipline = Discipline,
                                                Institution = QryEducation[i].c.UniversityorInstitution,
                                                YearofPassing = QryEducation[i].c.YearOfPassing,
                                                MarkType = QryEducation[i].c.MarkType,
                                                Marks = QryEducation[i].c.Marks,
                                                DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                                CertificatePath = QryEducation[i].c.DocumentFilePath,
                                                CertificateName = QryEducation[i].c.FileName,
                                                Remarks = QryEducation[i].c.Remarks,
                                                DisiplineList = list
                                            });
                                        }
                                    }
                                    EmpModel.EducationDetail = EducationList;
                                    EmpModel.ExperienceDetail = (from c in context.tblRCTOSGExperienceDetail
                                                                 join d in context.tblCodeControl on c.TypeId equals d.CodeValAbbr into lft
                                                                 from j in lft.DefaultIfEmpty()
                                                                 where c.isCurrentVersion == true && (j == null ? true : j.CodeName == "RCTExperienceType")
                                                                 && c.OSGId == appid
                                                                 orderby c.OSGExperienceDetailId
                                                                 select new
                                                                 {
                                                                     c.OSGExperienceDetailId,
                                                                     c.TypeId,
                                                                     j.CodeValDetail,
                                                                     c.Organisation,
                                                                     c.DesignationId,
                                                                     c.Designation,
                                                                     c.FromYear,
                                                                     c.ToYear,
                                                                     c.SalaryDrawn,
                                                                     c.DocumentFilePath,
                                                                     c.FileName,
                                                                     c.Remarks,
                                                                 }).AsEnumerable().Select((x) => new STEExperienceModel()
                                                                 {
                                                                     ExperienceId = x.OSGExperienceDetailId,
                                                                     ExperienceTypeId = x.TypeId,
                                                                     ExperienceType = x.CodeValDetail,
                                                                     Organisation = x.Organisation,
                                                                     DesignationListId = x.DesignationId,
                                                                     DesignationautoComplete = x.Designation,
                                                                     FromDate = x.FromYear,
                                                                     ToDate = x.ToYear,
                                                                     SalaryDrawn = x.SalaryDrawn,
                                                                     ExperienceFilePath = x.DocumentFilePath,
                                                                     ExperienceFileName = x.FileName,
                                                                     Remarks = x.Remarks,
                                                                     strFromDate = string.Format("{0:dd-MMMM-yyyy}", x.FromYear),
                                                                     strToDate = string.Format("{0:dd-MMMM-yyyy}", x.ToYear)
                                                                 }).ToList();
                                    EmpModel.OtherDetail = (from c in context.tblRCTOSGOtherDetail
                                                            where c.OSGId == appid && c.Status == "Active"
                                                            orderby c.OtherDetailsId
                                                            select new OtherDetailModel()
                                                            {
                                                                OtherNames = c.OthersName,
                                                                OtherDetailId = c.OtherDetailsId,
                                                                Description = c.Description,
                                                                OtherDetailFileName = c.AttachmentName,
                                                                OtherDetailFilePath = c.AttachmentPath,
                                                                Remarks = c.Remarks,
                                                            }).ToList();
                                    if (EmpNo != null)
                                        EmpModel.IITMExperience = RequirementService.IITExperienceInWording(EmpNo);
                                }
                            }
                            else if (qeryempno.Category == "CON")
                            {
                                int appid = qeryempno.ApplicationId ?? 0;
                                var steAppDetails = context.tblRCTConsultantAppointment.Where(x => x.ConsultantAppointmentId == appid).FirstOrDefault();
                                if (steAppDetails != null)
                                {
                                    EmpModel.ProfessionalId = steAppDetails.ProfessionalType;
                                    EmpModel.Name = steAppDetails.Name;
                                    EmpModel.CandidatePhoto = steAppDetails.CandidateImage;
                                    EmpModel.Nameoftheguardian = steAppDetails.NameoftheGuardian;
                                    EmpModel.aadharnumber = steAppDetails.AadhaarNumber;
                                    EmpModel.PAN = steAppDetails.PanNo;
                                    EmpModel.DateofBirth = string.Format("{0:dd-MMMM-yyyy}", steAppDetails.DateofBirth);
                                    EmpModel.Age = steAppDetails.Age;
                                    EmpModel.Gender = steAppDetails.Sex;
                                    //EmpModel.Caste = steAppDetails.Caste;
                                    EmpModel.ContactNumber = steAppDetails.ContactNumber;
                                    EmpModel.AlternativeContactNumber = steAppDetails.AlternativeContactNumber;
                                    EmpModel.EmergencyContactno = steAppDetails.EmergencyContact;
                                    EmpModel.Email = steAppDetails.Email;
                                    EmpModel.PresentAddress = steAppDetails.TemporaryAddress;
                                    EmpModel.isSameasPermanentAddress = steAppDetails.IsSameAsPresentAddress ?? false;
                                    EmpModel.PermanentAddress = steAppDetails.PermanentAddress;
                                    //EmpModel.BloodGroup = steAppDetails.Bloodgroup;
                                    //EmpModel.BloodGroupRH = steAppDetails.BloodgroupRH;
                                    //EmpModel.Nationality = steAppDetails.Nationality;
                                    //EmpModel.PhysicallyChallenged = steAppDetails.PhysicallyChallenged;
                                    //EmpModel.RelatedIITMadras = steAppDetails.RelatedIIT;
                                    EmpModel.IITMPensionerCSIRStaff = steAppDetails.IITMPensionerorCSIRStaff;
                                    //EmpModel.MsPhdType = steAppDetails.MsPhdType;
                                    //EmpModel.MsPhd = steAppDetails.MsPhd ?? false;
                                    //EmpModel.PhdDetail = steAppDetails.PhdDetail;
                                    EmpModel.BankAccountNo = steAppDetails.BankAccountNumber;
                                    EmpModel.BankName = steAppDetails.BankName;
                                    EmpModel.IFSCCode = steAppDetails.IFSCCode;
                                    List<EducationModel> EducationList = new List<EducationModel>();
                                    var QryEducation = (from c in context.tblRCTConsultantEducationDetail
                                                        from q in context.tblRCTQualificationList
                                                        where c.ConsultantAppointmentId == appid && c.Status != "InActive" && c.QualifiCationId == q.QualificationId
                                                        orderby c.ConsultantEducationDetailId
                                                        select new { c, q }).ToList();
                                    if (QryEducation != null)
                                    {
                                        for (int i = 0; i < QryEducation.Count; i++)
                                        {
                                            int EducationID = QryEducation[i].c.QualifiCationId ?? 0;
                                            int DisciplineID = QryEducation[i].c.DisciplineId ?? 0;
                                            var list = Common.GetCourseList(EducationID);
                                            var Discipline = Common.GetCourseList(EducationID).Where(m => m.id == DisciplineID).Select(m => m.name).FirstOrDefault();

                                            EducationList.Add(new EducationModel()
                                            {
                                                QualificationName = QryEducation[i].q.Qualification,
                                                EducationId = QryEducation[i].c.ConsultantEducationDetailId,
                                                QualificationId = QryEducation[i].c.QualifiCationId,
                                                DisciplineId = QryEducation[i].c.DisciplineId,
                                                DisciplineName = Discipline,
                                                Institution = QryEducation[i].c.UniversityorInstitution,
                                                YearofPassing = QryEducation[i].c.YearOfPassing,
                                                MarkType = QryEducation[i].c.MarkType,
                                                Marks = QryEducation[i].c.Marks,
                                                DivisionClassObtained = QryEducation[i].c.DivisionClassObtained,
                                                DocumentPath = QryEducation[i].c.DocumentFile,
                                                DocumentActualName = QryEducation[i].c.DocumentName,
                                                Remarks = QryEducation[i].c.Remarks,
                                                ddlList = list
                                            });
                                        }
                                    }
                                    EmpModel.ConEductiondetail = EducationList;
                                    EmpModel.ConExpereience = (from c in context.tblRCTConsultantExperienceDetail
                                                               join d in context.tblCodeControl on c.TypeId equals d.CodeValAbbr into lft
                                                               from j in lft.DefaultIfEmpty()
                                                               where c.Status != "InActive" && (j == null ? true : j.CodeName == "RCTExperienceType")
                                                               && c.ConsultantAppointmentId == appid
                                                               orderby c.ConsultantExperienceDetailId
                                                               select new
                                                               {
                                                                   c.ConsultantExperienceDetailId,
                                                                   c.TypeId,
                                                                   j.CodeValDetail,
                                                                   c.Organisation,
                                                                   c.DesignationId,
                                                                   c.Designation,
                                                                   c.FromYear,
                                                                   c.ToYear,
                                                                   c.SalaryDrawn,
                                                                   c.DocumentFile,
                                                                   c.DocumentName,
                                                                   c.Remarks,
                                                               }).AsEnumerable().Select((x) => new ExperienceModel()
                                                               {
                                                                   ExperienceId = x.ConsultantExperienceDetailId,
                                                                   ExperienceTypeId = x.TypeId,
                                                                   ExperienceTypeName = x.CodeValDetail,
                                                                   Organisation = x.Organisation,
                                                                   DesignationListId = x.DesignationId,
                                                                   DesignationautoComplete = x.Designation,
                                                                   FromDate = x.FromYear,
                                                                   ToDate = x.ToYear,
                                                                   SalaryDrawn = x.SalaryDrawn,
                                                                   DocumentPath = x.DocumentFile,
                                                                   DocumentActualName = x.DocumentName,
                                                                   Remarks = x.Remarks,
                                                                   strFromDate = string.Format("{0:dd-MMMM-yyyy}", x.FromYear),
                                                                   strToDate = string.Format("{0:dd-MMMM-yyyy}", x.ToYear)
                                                               }).ToList();
                                    if (EmpNo != null)
                                        EmpModel.IITMExperience = RequirementService.IITExperienceInWording(EmpNo);
                                }
                            }
                        }
                    }
                }
                return EmpModel;
            }
            catch (Exception ex)
            {
                return EmpModel;
            }
        }
        #endregion

        #region calculation part

        public static int dateRange(DateTime startDate, DateTime endDate)
        {
            var startYear = startDate.Year;
            var endYear = endDate.Year;
            int months = 0;
            for (int i = startYear; i <= endYear; i++)
            {
                var endMonth = i != endYear ? 11 : endDate.Month - 1;
                var startMon = i == startYear ? startDate.Month - 1 : 0;
                int k = 11;
                int? j = startMon;
                for (j = startMon; j <= endMonth; j = j > 12 ? j % 12 == 0 ? k : 0 : j + 1)
                {
                    months += 1;
                }
            }
            return months;
        }

        public static decimal calculateWithdrawalAmount(int AppId, string AppType, DateTime From, DateTime To, bool Includelast_f = false, int OrderId = 0, bool Verification_f = false)
        {
            decimal days = 0, startdatetotalDay = 0, enddatetotalDay = 0;
            decimal total = 0, months = 0, salary = 0, hra = 0, startworkingdays = 0, endworkingdays = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    #region <--Calculate appointment days-->
                    if (From != null && To != null)
                    {
                        var monthcount = dateRange(From, To);
                        startdatetotalDay = DateTime.DaysInMonth(From.Year, From.Month);
                        enddatetotalDay = DateTime.DaysInMonth(To.Year, To.Month);
                        if (From.Month == To.Month && From.Year == To.Year)
                        {
                            if (Includelast_f == true && Verification_f == false)
                                startworkingdays = (To.Day - From.Day) + 1;
                            else
                                startworkingdays = To.Day - From.Day;
                        }
                        else
                        {
                            if (Includelast_f == true)
                                startworkingdays = (startdatetotalDay - From.Day) + 1;
                            else
                                startworkingdays = startdatetotalDay - From.Day;

                            if (Verification_f == true)
                                endworkingdays = To.Day - 1;
                            else
                                endworkingdays = To.Day;
                        }

                        var count = 0;
                        for (var i = 0; i < monthcount; i++)
                        {
                            var lastCount = monthcount - 1;
                            if (i != 0 && i != lastCount)
                                count += 1;
                        }
                        var workingdays = startworkingdays + endworkingdays;
                        months = count;
                        days = workingdays;

                        if (From.Month == To.Month && From.Year == To.Year && (From.Hour == 12 || To.Hour == 12))
                        {
                            startworkingdays -= Convert.ToDecimal(0.5);
                        }
                        else if (From.Hour == 12 || To.Hour == 12)
                        {
                            if (From.Hour == 12)
                                startworkingdays -= Convert.ToDecimal(0.5);
                            if (To.Hour == 12)
                                startworkingdays -= Convert.ToDecimal(0.5);
                        }

                    }
                    else
                        return 0;

                    #endregion

                    if (OrderId > 0)
                    {
                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderDetail
                                     from vw in context.vw_RCTOverAllApplicationEntry
                                     where o.OrderId == od.OrderId && o.OrderId == vw.OrderId
                                     && o.OrderId == OrderId
                                     select new { o, od, vw }).FirstOrDefault();
                        if (query != null)
                        {
                            decimal ttlVal = 0, medical = 0;
                            hra = query.o.isHRA == true ? (query.o.HRA ?? 0) : 0;
                            medical = query.o.MedicalType == 1 ? (query.o.MedicalAmount ?? 0) : 0;
                            salary = query.o.Basic ?? 0;
                            if (query.o.AppointmentType == 3)
                            {
                                var salry = (from s in context.tblRCTSalaryCalcDetails
                                             where s.ID == AppId && s.Status == "Active"/* && s.IsCurrentVersion == true*/ && s.OrderId == OrderId
                                             select s).FirstOrDefault();
                                salary = salry.EmployerCTC ?? 0;
                            }

                            if (query.vw.isMsPhd == true || query.vw.TypeofAppointmentinInt == 2)
                            {
                                medical = 0;
                                hra = query.vw.TypeofAppointmentinInt == 2 ? 0 : hra;
                            }
                            ttlVal = medical + salary + hra;
                            var startperday = ttlVal / startdatetotalDay;
                            var endperday = ttlVal / enddatetotalDay;
                            var monthlyamt = ttlVal;
                            if (months > 0)
                                total = total + (monthlyamt * months);
                            if (days > 0)
                            {
                                total = total + (startworkingdays * startperday);
                                total = total + (endworkingdays * endperday);
                            }
                            return Math.Round(total);
                        }
                    }
                    else
                    {
                        if (AppType == "STE")
                        {
                            decimal ttlVal = 0, medical = 0;
                            var query = (from s in context.tblRCTSTE
                                         where s.STEID == AppId
                                         select s).FirstOrDefault();
                            if (query != null)
                            {
                                hra = query.isHaveHRA == true ? (query.HRA ?? 0) : 0;
                                medical = query.Medical == 1 ? (query.MedicalAmmount ?? 0) : 0;
                                salary = query.Salary ?? 0;
                                if (query.MsPhd == true || query.TypeofAppointment == 2)
                                {
                                    medical = 0;
                                    hra = query.TypeofAppointment == 2 ? 0 : hra;
                                }
                                ttlVal = medical + salary + hra;
                                var startperday = ttlVal / startdatetotalDay;
                                var endperday = ttlVal / enddatetotalDay;
                                var monthlyamt = ttlVal;
                                if (months > 0)
                                    total = total + (monthlyamt * months);
                                if (days > 0)
                                {
                                    total = total + (startworkingdays * startperday);
                                    total = total + (endworkingdays * endperday);
                                }
                            }
                        }
                        else if (AppType == "CON")
                        {
                            decimal ttlVal = 0;
                            var query = (from s in context.tblRCTConsultantAppointment
                                         where s.ConsultantAppointmentId == AppId
                                         select s).FirstOrDefault();
                            if (query != null)
                            {
                                salary = query.Salary ?? 0;
                                salary = query.Salary ?? 0;
                                decimal gstamt = 0;
                                decimal gstper = 0;
                                if (query.GSTApplicable == 2)
                                {
                                    gstper = (query.GSTPercentage ?? 0) / 100;
                                    gstamt = salary * gstper;
                                }
                                ttlVal = salary + gstamt;
                                var startperday = ttlVal / startdatetotalDay;
                                var endperday = ttlVal / enddatetotalDay;
                                var monthlyamt = ttlVal;
                                if (months > 0)
                                    total = total + (monthlyamt * months);
                                if (days > 0)
                                {
                                    total = total + (startworkingdays * startperday);
                                    total = total + (endworkingdays * endperday);
                                }
                            }
                        }
                        else if (AppType == "OSG")
                        {
                            var startmonth = From.Month;
                            var endmonth = To.Month;
                            var startyear = From.Year;
                            var endyear = To.Year;
                            decimal ttlVal = 0, medical = 0;
                            var query = (from s in context.tblRCTOutsourcing
                                         where s.OSGID == AppId
                                         select s).FirstOrDefault();
                            var salry = (from s in context.tblRCTSalaryCalcDetails
                                         where s.ID == AppId && s.Status == "Active" && s.IsCurrentVersion == true
                                         orderby s.SalaryDetailsId descending
                                         select s).FirstOrDefault();

                            if (query != null)
                            {
                                hra = query.isHaveHRA == true ? (query.HRA ?? 0) : 0;
                                medical = query.Medical == 1 ? (query.MedicalAmmount ?? 0) : 0;
                                salary = salry.EmployerCTC ?? 0;
                                //if (query.MsPhd == true || query.TypeofAppointment == 2)
                                //{
                                //    medical = 0;
                                //    hra = query.TypeofAppointment == 2 ? 0 : hra;
                                //}
                                var statMast = (from s in context.tblRCTStatutory
                                                where s.StatutoryId == salry.StatutoryId
                                                select s).FirstOrDefault();
                                var lwfamt = statMast.LWFEmployerContribution ?? 0;
                                ttlVal = medical + salary + hra;
                                var startperday = ttlVal / startdatetotalDay;
                                var endperday = ttlVal / enddatetotalDay;
                                var monthlyamt = ttlVal;
                                if (months > 0)
                                    total = total + (monthlyamt * months);
                                if (days > 0)
                                {
                                    total = total + (startworkingdays * startperday);
                                    total = total + (endworkingdays * endperday);
                                }
                                if (startyear < endyear)
                                {
                                    total += lwfamt;
                                }
                                if ((endmonth == 12 || startmonth == 12) && startyear == endyear)
                                {
                                    total += lwfamt;
                                }
                            }
                        }
                    }
                }
                return Math.Round(total);
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return 0;
            }
        }

        public static decimal calculateWithdrawalAmountlossofPay(int AppId, string AppType, DateTime From, DateTime To, bool Includelast_f = false, int OrderId = 0, bool Verification_f = false)
        {
            decimal days = 0, startdatetotalDay = 0, enddatetotalDay = 0;
            decimal total = 0, months = 0, salary = 0, hra = 0, startworkingdays = 0, endworkingdays = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    #region <--Calculate appointment days-->
                    if (From != null && To != null)
                    {
                        var monthcount = dateRange(From, To);
                        startdatetotalDay = DateTime.DaysInMonth(From.Year, From.Month);
                        enddatetotalDay = DateTime.DaysInMonth(To.Year, To.Month);
                        if (From.Month == To.Month && From.Year == To.Year)
                        {
                            if (Includelast_f == true && Verification_f == false)
                                startworkingdays = (To.Day - From.Day) + 1;
                            else
                                startworkingdays = To.Day - From.Day;
                        }
                        else
                        {
                            if (Includelast_f == true)
                                startworkingdays = (startdatetotalDay - From.Day) + 1;
                            else
                                startworkingdays = startdatetotalDay - From.Day;

                            if (Verification_f == true)
                                endworkingdays = To.Day - 1;
                            else
                                endworkingdays = To.Day;
                        }

                        var count = 0;
                        for (var i = 0; i < monthcount; i++)
                        {
                            var lastCount = monthcount - 1;
                            if (i != 0 && i != lastCount)
                                count += 1;
                        }
                        var workingdays = startworkingdays + endworkingdays;
                        months = count;
                        days = workingdays;

                        if (From.Month == To.Month && From.Year == To.Year && (From.Hour == 12 || To.Hour == 12))
                        {
                            startworkingdays -= Convert.ToDecimal(0.5);
                        }
                        else if (From.Hour == 12 || To.Hour == 12)
                        {
                            if (From.Hour == 12)
                                startworkingdays -= Convert.ToDecimal(0.5);
                            if (To.Hour == 12)
                                startworkingdays -= Convert.ToDecimal(0.5);
                        }

                    }
                    else
                        return 0;

                    #endregion

                    if (OrderId > 0)
                    {
                        var query = (from o in context.tblOrder
                                     from od in context.tblOrderDetail
                                     from vw in context.vw_RCTOverAllApplicationEntry
                                     where o.OrderId == od.OrderId && o.OrderId == vw.OrderId
                                     && o.OrderId == OrderId
                                     select new { o, od, vw }).FirstOrDefault();
                        if (query != null)
                        {
                            decimal ttlVal = 0, medical = 0;
                            hra = query.o.isHRA == true ? (query.o.HRA ?? 0) : 0;
                            medical = query.o.MedicalType == 1 ? (query.o.MedicalAmount ?? 0) : 0;
                            salary = query.o.Basic ?? 0;
                            if (query.o.AppointmentType == 3)
                            {
                                var salry = (from s in context.tblRCTSalaryCalcDetails
                                             where s.ID == AppId && s.Status == "Active"/* && s.IsCurrentVersion == true*/ && s.OrderId == OrderId
                                             select s).FirstOrDefault();
                                salary = salry.EmployerCTC ?? 0;
                            }

                            if (query.vw.isMsPhd == true || query.vw.TypeofAppointmentinInt == 2)
                            {
                                medical = 0;
                                hra = query.vw.TypeofAppointmentinInt == 2 ? 0 : hra;
                            }
                            ttlVal = medical + salary + hra;
                            var startperday = ttlVal / startdatetotalDay;
                            var endperday = ttlVal / enddatetotalDay;
                            var monthlyamt = ttlVal;
                            if (months > 0)
                                total = total + (monthlyamt * months);
                            if (days > 0)
                            {
                                total = total + (startworkingdays * startperday);
                                total = total + (endworkingdays * endperday);
                            }
                            return Math.Round(total);
                        }
                    }
                    else
                    {
                        if (AppType == "STE")
                        {
                            decimal ttlVal = 0, medical = 0;
                            var query = (from s in context.tblRCTSTE
                                         where s.STEID == AppId
                                         select s).FirstOrDefault();
                            if (query != null)
                            {
                                hra = query.isHaveHRA == true ? (query.HRA ?? 0) : 0;
                                medical = query.Medical == 1 ? (query.MedicalAmmount ?? 0) : 0;
                                salary = query.Salary ?? 0;
                                if (query.MsPhd == true || query.TypeofAppointment == 2)
                                {
                                    medical = 0;
                                    hra = query.TypeofAppointment == 2 ? 0 : hra;
                                }
                                ttlVal = medical + salary + hra;
                                var startperday = ttlVal / startdatetotalDay;
                                var endperday = ttlVal / enddatetotalDay;
                                var monthlyamt = ttlVal;
                                if (months > 0)
                                    total = total + (monthlyamt * months);
                                if (days > 0)
                                {
                                    total = total + (startworkingdays * startperday);
                                    total = total + (endworkingdays * endperday);
                                }
                            }
                        }
                        else if (AppType == "CON")
                        {
                            decimal ttlVal = 0;
                            var query = (from s in context.tblRCTConsultantAppointment
                                         where s.ConsultantAppointmentId == AppId
                                         select s).FirstOrDefault();
                            if (query != null)
                            {
                                salary = query.Salary ?? 0;
                                salary = query.Salary ?? 0;
                                decimal gstamt = 0;
                                decimal gstper = 0;
                                if (query.GSTApplicable == 2)
                                {
                                    gstper = (query.GSTPercentage ?? 0) / 100;
                                    gstamt = salary * gstper;
                                }
                                ttlVal = salary + gstamt;
                                var startperday = ttlVal / startdatetotalDay;
                                var endperday = ttlVal / enddatetotalDay;
                                var monthlyamt = ttlVal;
                                if (months > 0)
                                    total = total + (monthlyamt * months);
                                if (days > 0)
                                {
                                    total = total + (startworkingdays * startperday);
                                    total = total + (endworkingdays * endperday);
                                }
                            }
                        }
                        else if (AppType == "OSG")
                        {
                            var startmonth = From.Month;
                            var endmonth = To.Month;
                            var startyear = From.Year;
                            var endyear = To.Year;
                            decimal ttlVal = 0, medical = 0;
                            var query = (from s in context.tblRCTOutsourcing
                                         where s.OSGID == AppId
                                         select s).FirstOrDefault();
                            var salry = (from s in context.tblRCTSalaryCalcDetails
                                         where s.ID == AppId && s.Status == "Active" && s.IsCurrentVersion == true
                                         orderby s.SalaryDetailsId descending
                                         select s).FirstOrDefault();

                            if (query != null)
                            {
                                hra = query.isHaveHRA == true ? (query.HRA ?? 0) : 0;
                                medical = query.Medical == 1 ? (query.MedicalAmmount ?? 0) : 0;
                                salary = salry.RecommendSalary ?? 0;
                                //if (query.MsPhd == true || query.TypeofAppointment == 2)
                                //{
                                //    medical = 0;
                                //    hra = query.TypeofAppointment == 2 ? 0 : hra;
                                //}
                                var statMast = (from s in context.tblRCTStatutory
                                                where s.StatutoryId == salry.StatutoryId
                                                select s).FirstOrDefault();
                                var lwfamt = statMast.LWFEmployerContribution ?? 0;
                                ttlVal = medical + salary + hra;
                                var startperday = ttlVal / startdatetotalDay;
                                var endperday = ttlVal / enddatetotalDay;
                                var monthlyamt = ttlVal;
                                if (months > 0)
                                    total = total + (monthlyamt * months);
                                if (days > 0)
                                {
                                    total = total + (startworkingdays * startperday);
                                    total = total + (endworkingdays * endperday);
                                }
                                if (startyear < endyear)
                                {
                                    total += lwfamt;
                                }
                                if ((endmonth == 12 || startmonth == 12) && startyear == endyear)
                                {
                                    total += lwfamt;
                                }
                            }
                        }
                    }
                }
                return Math.Round(total);
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return 0;
            }
        }



        public static Tuple<decimal, bool, decimal, bool, decimal, bool> calRCTCommitmentAmount(IOASDBEntities context, DateTime From, DateTime To, decimal salary, decimal hra, int medical, int desid, bool ismsphd, int typeofappointment, string apptype = null, decimal LWFAmount = 0, decimal gst = 0, DateTime? preDueDate = null)
        {
            int days = 0, startworkingdays = 0, endworkingdays = 0, starttotday = 0, endtotalday = 0;
            decimal commitmentAmt = 0, months = 0, hraval = 0, ttlVal = 0, medicalamt = 0, hrapre = 0;
            bool ishra = false, ismedical = false, res = false;
            try
            {
                #region <--Calculate appointment days-->
                if (From != null && To != null)
                {
                    var MonthCount = dateRange(From, To);
                    starttotday = DateTime.DaysInMonth(From.Year, From.Month);
                    endtotalday = DateTime.DaysInMonth(To.Year, To.Month);
                    if (From.Month == To.Month && From.Year == To.Year)
                        startworkingdays = To.Day - From.Day + 1;
                    else
                    {
                        startworkingdays = starttotday - From.Day + 1;
                        endworkingdays = To.Day;
                    }

                    var count = 0;
                    for (var i = 0; i < MonthCount; i++)
                    {
                        var lastCount = MonthCount - 1;
                        if (i != 0 && i != lastCount)
                            count += 1;
                    }
                    var Workingdays = startworkingdays + endworkingdays;
                    months = count;
                    days = Workingdays;
                }
                else
                    return Tuple.Create(commitmentAmt, false, hraval, false, hrapre, res);
                #endregion

                if (desid > 0)
                {
                    if (apptype == "OSG" && preDueDate == null)
                    {
                        if (From.Year < To.Year)
                            commitmentAmt += LWFAmount > 0 ? LWFAmount : 0;
                        if ((From.Month == 12 || To.Month == 12) && From.Year == To.Year)
                            commitmentAmt += LWFAmount > 0 ? LWFAmount : 0;
                    }
                    else if (apptype == "OSG" && preDueDate != null)
                    {
                        if (From.Year < To.Year && (From.Month != 12 && To.Month < 12 || From.Month == 12 && To.Month == 12))
                            commitmentAmt += LWFAmount > 0 ? LWFAmount : 0;
                        if (From.Month != 12 && To.Month == 12 && From.Year == To.Year)
                            commitmentAmt += LWFAmount > 0 ? LWFAmount : 0;
                    }
                    var querydes = context.tblRCTDesignation.Where(m => m.DesignationId == desid && m.RecordStatus == "Active").Select(x => x).FirstOrDefault();

                    if (querydes != null)
                    {
                        ishra = querydes.HRA ?? false;
                        hrapre = querydes.HRABasic ?? 0;
                        ismedical = querydes.Medical ?? false;
                        medicalamt = querydes.MedicalDeduction ?? 0;
                    }
                    if (ishra && hra > 0)
                    {
                        hraval = salary * (hrapre / 100);
                        hra = hra > hraval ? hraval : hra;
                        hraval = hra;
                    }

                    if (ismedical)
                    {
                        if (medical != 1)
                            medicalamt = 0;
                    }
                    //check is MS/Phd or Part time appointment
                    if (ismsphd == true || typeofappointment == 2)
                    {
                        medicalamt = 0;
                        hra = typeofappointment == 2 ? 0 : hra;
                    }
                    ttlVal = medicalamt + salary + hra;
                    if (apptype == "CON")
                        ttlVal = salary + (salary * gst / 100);

                    var startperday = ttlVal / starttotday;
                    var endperday = ttlVal / endtotalday;
                    var monthlyamt = ttlVal;
                    if (months > 0)
                        commitmentAmt += monthlyamt * months;
                    if (days > 0)
                    {
                        commitmentAmt += startworkingdays * startperday;
                        commitmentAmt += endworkingdays * endperday;
                    }
                    res = true;
                }
                return Tuple.Create(Math.Round(commitmentAmt), ishra, Math.Round(hraval), ismedical, hrapre, res);
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(commitmentAmt, false, hraval, false, hrapre, false);
            }
        }

        public static decimal calHRA(DateTime From, DateTime To, decimal? salary, int? designationId, int? typeofappointment, decimal HRA = 0)
        {
            try
            {
                #region <--Calculate appointment days-->
                int days = 0, months = 0, startworkingdays = 0, endworkingdays = 0, starttotday = 0, endtotalday = 0;
                if (From != null && To != null)
                {
                    var MonthCount = dateRange(From, To);
                    starttotday = DateTime.DaysInMonth(From.Year, From.Month);
                    endtotalday = DateTime.DaysInMonth(To.Year, To.Month);
                    if (From.Month == To.Month && From.Year == To.Year)
                        startworkingdays = To.Day - From.Day + 1;
                    else
                    {
                        startworkingdays = starttotday - From.Day + 1;
                        endworkingdays = To.Day;
                    }

                    var count = 0;
                    for (var i = 0; i < MonthCount; i++)
                    {
                        var lastCount = MonthCount - 1;
                        if (i != 0 && i != lastCount)
                            count += 1;
                    }
                    var Workingdays = startworkingdays + endworkingdays;
                    months = count;
                    days = Workingdays;
                }
                else
                    return 0;
                #endregion

                using (var context = new IOASDBEntities())
                {
                    if (designationId > 0)
                    {
                        decimal total = 0, hraval = 0, hrapre = 0;

                        var query = (from d in context.tblRCTDesignation
                                     where d.DesignationId == designationId
                                     select d).FirstOrDefault();
                        if (query != null)
                        {
                            hrapre = query.HRABasic ?? 0;
                            hraval = (salary ?? 0) * (hrapre / 100);
                        }
                        hraval = typeofappointment == 2 ? 0 : hraval;
                        if (HRA > 0)
                            hraval = HRA;
                        var startperday = hraval / starttotday;
                        var endperday = hraval / endtotalday;
                        var monthlyamt = hraval;
                        if (months > 0)
                            total += monthlyamt * months;
                        if (days > 0)
                        {
                            total += startworkingdays * startperday;
                            total += endworkingdays * endperday;
                        }
                        return Math.Round(total);
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return 0;
            }
        }

        #endregion

        #region CheckDeviation

        public static int RCTCalculateAge(DateTime DateofCal, DateTime DOB)
        {
            var age = DateofCal.Year - DOB.Year;
            var m = DateofCal.Month - DOB.Month;
            if (m < 0 || (m == 0 && DateofCal.Day < DOB.Day))
            {
                age--;
            }
            return age;
        }

        public static bool IsAvailablefundProject(int projectid, decimal commitmentAmount, int? typeOfAppointment = null)
        {
            bool funddeviation = false;
            bool otherGov_f = false;
            try
            {
                otherGov_f = typeOfAppointment == 4 ? true : false;
                ProjectService _PS = new ProjectService();
                var prjDetail = _PS.getProjectSummaryDetails(projectid);
                decimal netBalance = prjDetail.PrjSummary.NetBalance;

                if (prjDetail.HeadWise != null)
                {
                    var totalAllocation = prjDetail.HeadWise.Sum(m => m.Amount);
                    if (totalAllocation <= 0)
                    {
                        if (netBalance < commitmentAmount)
                            funddeviation = true;
                    }
                    else if (otherGov_f == true)
                    {
                        if (!prjDetail.HeadWise.Any(m => m.Available >= commitmentAmount))
                            funddeviation = true;
                        if (!funddeviation)
                        {
                            if (netBalance < commitmentAmount)
                                funddeviation = true;
                        }
                    }
                    else if (!prjDetail.HeadWise.Any(m => m.AllocationId == 1))
                        funddeviation = true;
                    else if (prjDetail.HeadWise.Any(m => m.AllocationId == 1))
                    {
                        var headwisedata = prjDetail.HeadWise.Where(x => x.AllocationId == 1).FirstOrDefault();
                        var AvailableAmt = headwisedata.Available;
                        if (AvailableAmt < commitmentAmount)
                            funddeviation = true;

                        if (AvailableAmt >= commitmentAmount && !funddeviation)
                        {
                            if (netBalance < commitmentAmount)
                                funddeviation = true;
                        }
                    }
                }
                return funddeviation;
            }
            catch (Exception ex)
            {
                return funddeviation;
            }

        }

        public static bool IsAvailablefundProjects(int projectid, int budgetid, decimal commitmentAmount, int? typeOfAppointment = null)
        {
            bool funddeviation = false;
            bool otherGov_f = false;
            try
            {
                otherGov_f = typeOfAppointment == 4 ? true : false;
                ProjectService _PS = new ProjectService();
                var prjDetail = _PS.getProjectSummaryDetails(projectid);
                decimal netBalance = prjDetail.PrjSummary.NetBalance;

                if (prjDetail.HeadWise != null)
                {
                    var totalAllocation = prjDetail.HeadWise.Sum(m => m.Amount);
                    if (totalAllocation <= 0)
                    {
                        if (netBalance < commitmentAmount)
                            funddeviation = true;
                    }
                    else if (otherGov_f == true)
                    {
                        if (!prjDetail.HeadWise.Any(m => m.Available >= commitmentAmount))
                            funddeviation = true;
                        if (!funddeviation)
                        {
                            if (netBalance < commitmentAmount)
                                funddeviation = true;
                        }
                    }
                    else if (!prjDetail.HeadWise.Any(m => m.AllocationId == budgetid))
                        funddeviation = true;
                    else if (prjDetail.HeadWise.Any(m => m.AllocationId == budgetid))
                    {
                        var headwisedata = prjDetail.HeadWise.Where(x => x.AllocationId == budgetid).FirstOrDefault();
                        var AvailableAmt = headwisedata.Available;
                        if (AvailableAmt < commitmentAmount)
                            funddeviation = true;

                        if (AvailableAmt >= commitmentAmount && !funddeviation)
                        {
                            if (netBalance < commitmentAmount)
                                funddeviation = true;
                        }
                    }
                }
                return funddeviation;
            }
            catch (Exception ex)
            {
                return funddeviation;
            }

        }
        private static int GetDaysInAYear(int year)
        {
            int days = 0;
            for (int i = 1; i <= 12; i++)
                days += DateTime.DaysInMonth(year, i);
            return days;
        }

        public static decimal GetAvgDaysInAYear(DateTime From, DateTime To, bool iscalswape = false)
        {
            if (iscalswape == true)
            {
                From = To;
                To = From;
            }
            decimal totdays = 0;
            int count = 0;
            if (DateTime.IsLeapYear(To.Year))
            {
                totdays = 366;
            }
            else if(DateTime.IsLeapYear(From.Year))
            {
                totdays = 366;
            }
            else
            {
                for (int x = From.Year; x <= To.Year; x++)
                {
                    totdays += GetDaysInAYear(x);
                    count++;
                }
                totdays = totdays / count;
            }           
            return totdays;
        }
        
        public static Tuple<List<CheckListModel>, bool> GetDeviationofAppointments(CheckDevationModel model)
        {
            List<CheckListModel> list = new List<CheckListModel>();
            bool isDeviation = false;
            ProjectService _PS = new ProjectService();
            int? oldProject = null;
            DateTime? actualStartdate = null;
            DateTime? actualEnddate = null;
            decimal previousSalary = 0;
            decimal oldDesignation = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var ApplicationType = model.AppType == "CON" ? 1 : model.AppType == "STE" ? 2 : model.AppType == "OSG" ? 3 : 0;
                    if (model.AppId > 0 && !string.IsNullOrEmpty(model.AppType))
                    {
                        var queryvw = (from vw in context.vw_RCTOverAllApplicationEntry
                                       where vw.ApplicationId == model.AppId && vw.Category == model.AppType
                                       && vw.ApplicationType == "New"
                                       select new
                                       {
                                           vw.ProjectId,
                                           vw.DesignationId,
                                           vw.BasicPay,
                                           vw.AppointmentEnddate,
                                           vw.AppointmentStartdate,
                                           vw.TypeofAppointmentinInt,
                                           vw.DateofBirth,
                                           vw.PhysicallyChallenged,
                                           vw.StaffCategory,
                                           vw.EmployeeNo,
                                           vw.isMsPhd
                                       }).FirstOrDefault();
                        model.PaymentthroughAgency = getPaymentthroughAgency(model.AppId ?? 0, model.AppType);
                        if (queryvw != null)
                        {
                            model.TypeOfAppointment = queryvw.TypeofAppointmentinInt;
                            model.MsPhd = queryvw.isMsPhd ?? false;
                            model.DateOfBirth = queryvw.DateofBirth ?? DateTime.Now;
                            model.PhysicallyChanged = queryvw.PhysicallyChallenged == "Yes" ? 1 : 0;
                            model.StaffCatecory = queryvw.StaffCategory;
                            model.Experience = getExperienceDecimal(model.AppId ?? 0, model.AppType);
                            oldProject = queryvw.ProjectId;
                            oldDesignation = queryvw.DesignationId ?? 0;
                            previousSalary = queryvw.BasicPay ?? 0;
                            if (model.AppType == "OSG")
                                model.Caste = context.tblRCTOutsourcing.Where(x => x.OSGID == model.AppId).Select(m => m.Caste).FirstOrDefault();
                            actualStartdate = queryvw.AppointmentStartdate;
                            actualEnddate = queryvw.AppointmentEnddate;
                            model.OldEmployee = queryvw.EmployeeNo;
                        }
                    }

                    #region ServiceBar
                    if (!string.IsNullOrEmpty(model.OldEmployee))
                    {
                        bool devservicebar = false;
                        var queryvw = (from vw in context.vw_RCTOverAllApplicationEntry
                                       where vw.EmployeeNo == model.OldEmployee && vw.IsActiveNow == true
                                      && vw.ApplicationType == "New"
                                       select vw).FirstOrDefault();
                        if (queryvw != null)
                        {
                            var Days = model.AppointmentEndDate.Subtract(model.AppointmentStartDate).TotalDays + 1;
                            decimal totdays = GetAvgDaysInAYear(model.AppointmentStartDate, model.AppointmentEndDate);
                            var Years = Convert.ToDecimal(Days) / Convert.ToDecimal(totdays);
                            decimal IITMExperiencedes = 0;
                            if (model.OrderType == null)
                                IITMExperiencedes = RequirementService.IITExperience(queryvw.ApplicationId ?? 0, queryvw.Category, model.OldEmployee, model.AppointmentStartDate, model.AppointmentEndDate);
                            else
                                IITMExperiencedes = RequirementService.IITExperience(queryvw.ApplicationId ?? 0, queryvw.Category, model.OldEmployee);

                            if (model.OrderType == null && IITMExperiencedes > 5)
                                devservicebar = true;
                            if (model.AppointmentStartDate != null && model.AppointmentEndDate != null && ((model.OrderType == "Enhancement" && actualEnddate < model.AppointmentStartDate) || model.OrderType == "Extension"))
                            {
                                decimal totIITexp = IITMExperiencedes;
                                totIITexp = totIITexp + Years;
                                if (totIITexp > 5)
                                    devservicebar = true;
                            }

                        }

                        if (devservicebar)
                        {
                            var query = (from t in context.tblFunctionCheckList
                                         where t.FunctionCheckListId == 32
                                         select new { t.CheckList, t.FunctionCheckListId }
                                               ).FirstOrDefault();

                            list.Add(new CheckListModel()
                            {
                                CheckList = query.CheckList,
                                FunctionCheckListId = query.FunctionCheckListId,
                                IsChecked = true
                            });
                        }
                    }
                    #endregion

                    #region Projectfund
                    bool funddeviation = false;
                    if (model.StaffCatecory == "Non ICSR Staff" && !model.PaymentthroughAgency)
                        funddeviation = IsAvailablefundProject(model.ProjectID ?? 0, model.CommitmentAmount, model.TypeOfAppointment);

                    if (funddeviation)
                    {
                        var query = (from age in context.tblFunctionCheckList
                                     where age.FunctionCheckListId == 40
                                     select new { age.CheckList, age.FunctionCheckListId }).FirstOrDefault();
                        list.Add(new CheckListModel()
                        {
                            CheckList = query.CheckList,
                            FunctionCheckListId = query.FunctionCheckListId,
                            IsChecked = true
                        });
                    }
                    #endregion

                    #region Appointment tenure                    

                    if (model.AppointmentStartDate != null && model.AppointmentEndDate != null && ((model.OrderType == "Enhancement" && actualEnddate < model.AppointmentStartDate) || model.OrderType == null || model.OrderType == "Extension"))
                    {
                        var deviationintenure = false;
                        double daysdiff = model.AppointmentEndDate.Subtract(model.AppointmentStartDate).Days + 1;
                        if (model.AppointmentStartDate.Year == model.AppointmentEndDate.Year && model.AppointmentStartDate.Month == 2 && model.AppointmentStartDate.Day == 1)
                        {
                            if (daysdiff >= 28)
                                daysdiff = 30;
                        }
                        if (daysdiff <= 29)
                        {
                            deviationintenure = true;
                        }

                        var Days = model.AppointmentEndDate.Subtract(model.AppointmentStartDate).TotalDays + 1;
                        decimal totdays = GetAvgDaysInAYear(model.AppointmentStartDate, model.AppointmentEndDate);
                        var Years = Convert.ToDecimal(Days) / Convert.ToDecimal(totdays);
                        if (Years > 1 && !list.Select(m => m.FunctionCheckListId).ToArray().Contains(31))
                        {
                            deviationintenure = true;
                        }

                        if (deviationintenure)
                        {
                            var queryTenure = (from t in context.tblFunctionCheckList
                                               where t.FunctionCheckListId == 31
                                               select new { t.CheckList, t.FunctionCheckListId }
                                               ).FirstOrDefault();

                            list.Add(new CheckListModel()
                            {
                                CheckList = queryTenure.CheckList,
                                FunctionCheckListId = queryTenure.FunctionCheckListId,
                                IsChecked = true
                            });
                        }
                    }

                    #endregion

                    if (model.DesignationId != null)
                    {
                        //var querydesmast = (from dm in context.tblRCTDesignation
                        //                    from dd in context.tblRCTDesignationDetail
                        //                    from q in context.tblRCTQualificationDetail
                        //                    where dm.DesignationId == dd.DesignationId && dm.DesignationId == q.Designationid
                        //                    && dd.DesignationDetailId == q.DesignationDetailId && dm.DesignationId == model.DesignationId
                        //                    && dm.TypeOfAppointment == ApplicationType
                        //                    && dm.RecordStatus == "Active" && dd.IsCurrentVersion == true && dm.IsNotValid != true
                        //                    select new
                        //                    {
                        //                        dm,
                        //                        dd.DesignationDetailId,
                        //                        dd.Qualification,
                        //                        dd.Marks,
                        //                        dd.CGPA,
                        //                        dd.RelevantExperience,
                        //                        q.CourseId
                        //                    }).ToList();


                        decimal MinSalary = 0, MaxSalary = 0;
                        var querymasttbl = (from m in context.tblRCTDesignation
                                            where m.DesignationId == model.DesignationId && m.TypeOfAppointment == ApplicationType
                                            && m.RecordStatus == "Active" && m.IsNotValid != true
                                            select m).FirstOrDefault();

                        var querydetail = (from dd in context.tblRCTDesignationDetail
                                           from q in context.tblRCTQualificationDetail
                                           where dd.DesignationDetailId == q.DesignationDetailId && dd.DesignationId == model.DesignationId
                                           && dd.IsCurrentVersion == true
                                           select new
                                           {
                                               dd.Qualification,
                                               dd.Marks,
                                               dd.CGPA,
                                               dd.RelevantExperience,
                                               q.CourseId
                                           }).ToList();
                        if (querymasttbl != null && querymasttbl.SalaryLevel > 0)
                        {
                            var querysal = (from s in context.tblRCTSalaryLevel
                                            where s.SalaryLevelId == querymasttbl.SalaryLevel
                                            select s).FirstOrDefault();
                            querydetail = (from d in context.tblRCTSalaryLevelDetail
                                           from c in context.tblRCTSalaryLevelCourses
                                           where d.SalaryLevelDetailId == c.SalaryLevelDetailId && d.SalaryLevelId == querymasttbl.SalaryLevel
                                           && d.IsCurrentVersion == true
                                           select new
                                           {
                                               d.Qualification,
                                               d.Marks,
                                               d.CGPA,
                                               d.RelevantExperience,
                                               c.CourseId,
                                           }).ToList();
                            if (querysal != null)
                            {
                                MinSalary = querysal.MinSalary ?? 0;
                                MaxSalary = querysal.MaxSalary ?? 0;
                            }
                        }

                        if (querymasttbl != null && querydetail.Count > 0)
                        {

                            //var querymasttbl = querydesmast.Select(x => x.dm).FirstOrDefault();
                            if (querymasttbl.SalaryLevel == null || querymasttbl.SalaryLevel == 0)
                            {
                                MinSalary = querymasttbl.PayStructureMinMum ?? 0;
                                MaxSalary = querymasttbl.PayStructureMaximum ?? 0;
                            }
                            #region check age deviation

                            bool ageDeviation = false;
                            //check cadidate age
                            var CheckAge = RCTCalculateAge(DateTime.Now, model.DateOfBirth);
                            model.CheckAge = CheckAge;
                            if (querymasttbl.IsSCST == true && (model.Caste == 1 || model.Caste == 2))
                            {
                                if (CheckAge < 18 || CheckAge > querymasttbl.SCSTAgeLimit)
                                    ageDeviation = true;
                            }
                            else
                            {
                                if (CheckAge < 18 || CheckAge > querymasttbl.AgeLimit)
                                    ageDeviation = true;
                            }

                            //if (CheckAge < 18 || CheckAge > querymasttbl.AgeLimit)
                            //    ageDeviation = true;

                            //check appointment start date and appointment end date between cadidate age is valid or not                                
                            //if (ageDeviation == false)
                            //    ageDeviation = checkIsAgeCross(model.AppointmentEndDate, model.DateOfBirth, querymasttbl.AgeLimit ?? 0);

                            if (querymasttbl.IsSCST == true && (model.Caste == 1 || model.Caste == 2))
                            {
                                if (ageDeviation == false)
                                {
                                    var age = RCTCalculateAge(model.AppointmentEndDate, model.DateOfBirth);
                                    if (age >= querymasttbl.SCSTAgeLimit)
                                        ageDeviation = true;
                                    else
                                        ageDeviation = false;
                                }
                            }
                            else
                            {
                                if (ageDeviation == false)
                                {
                                    var age = RCTCalculateAge(model.AppointmentEndDate, model.DateOfBirth);
                                    if (age >= querymasttbl.AgeLimit)
                                        ageDeviation = true;
                                    else
                                        ageDeviation = false;
                                }
                                //ageDeviation = checkIsAgeCross(model.AppointmentEndDate, model.DateOfBirth, querymasttbl.AgeLimit ?? 0);
                            }

                            //When change the project or change the designation does not check below condition
                            if (actualEnddate >= model.AppointmentEndDate && ageDeviation)
                                ageDeviation = false;

                            if (ageDeviation == true)
                            {
                                var query = (from age in context.tblFunctionCheckList
                                             where age.FunctionCheckListId == 34
                                             select new { age.CheckList, age.FunctionCheckListId }
                                            ).FirstOrDefault();
                                list.Add(new CheckListModel()
                                {
                                    CheckList = query.CheckList,
                                    FunctionCheckListId = query.FunctionCheckListId,
                                    IsChecked = true
                                });
                            }
                            #endregion

                            //var validCheckSalary = (model.TypeOfAppointment == 3 && model.MsPhd);
                            //if (validCheckSalary == false)
                            //{
                            #region check salary deviation
                            bool Salarydeviation = false;
                            //part time cadidate must be giving off salary
                            if (model.TypeOfAppointment == 2 && model.AppType == "STE")
                            {
                                MinSalary = MinSalary / 2;
                                MaxSalary = MaxSalary / 2;
                            }

                            //Check 
                            if (model.OrderType == "Enhancement" || model.OrderType == "Extension")
                            {
                                bool parttimesal = (model.TypeOfAppointment == 2 && model.OrderType == "Extension" && model.AppType == "STE");

                                //if (!parttimesal && model.TypeOfAppointment == 2)
                                //{
                                //    if (MinSalary > model.ChekSalary || MaxSalary < model.ChekSalary)
                                //        Salarydeviation = true;
                                //}
                                //else if (MinSalary > model.ChekSalary || MaxSalary < model.ChekSalary)
                                //    Salarydeviation = true;

                                //if (!parttimesal && (MinSalary > model.ChekSalary || MaxSalary < model.ChekSalary))
                                //    Salarydeviation = true;

                                if (!parttimesal && (MinSalary > model.ChekSalary || MaxSalary < model.ChekSalary) && (model.AppType == "STE" || (model.AppType == "OSG" && model.TypeOfAppointment != 2)))
                                    Salarydeviation = true;
                                if (model.AppType == "OSG" && model.TypeOfAppointment == 2 && MinSalary <= model.ChekSalary)
                                    Salarydeviation = true;

                                //Ramya Said for SRF and JRF Case
                                if (oldDesignation == model.DesignationId && querymasttbl.AnnualIncrement > 0 && !parttimesal)
                                {
                                    decimal salaryDiff = (model.ChekSalary ?? 0) - previousSalary;
                                    decimal eligibleAmount = (querymasttbl.AnnualIncrement ?? 0) * 8;
                                    if (salaryDiff > eligibleAmount && !Salarydeviation)
                                    {
                                        var query = (from age in context.tblFunctionCheckList
                                                     where age.FunctionCheckListId == 42
                                                     select new { age.CheckList, age.FunctionCheckListId }
                                                                ).FirstOrDefault();
                                        list.Add(new CheckListModel()
                                        {
                                            CheckList = query.CheckList,
                                            FunctionCheckListId = query.FunctionCheckListId,
                                            IsChecked = true
                                        });
                                    }
                                }
                            }
                            else
                            {
                                if (model.ChekSalary != null && model.PhysicallyChanged == 1)
                                {
                                    //When user select physically challenged person system must validate is given minimum salary only
                                    if (MinSalary > model.ChekSalary)
                                        Salarydeviation = true;
                                }
                                else
                                {
                                    if ((MinSalary > model.ChekSalary || MaxSalary < model.ChekSalary) && (model.AppType == "STE" || (model.AppType == "OSG" && model.TypeOfAppointment != 2)))
                                        Salarydeviation = true;
                                    if (model.AppType == "OSG" && model.TypeOfAppointment == 2 && MinSalary <= model.ChekSalary)
                                        Salarydeviation = true;
                                }
                            }

                            if (Salarydeviation)
                            {
                                var query = (from age in context.tblFunctionCheckList
                                             where age.FunctionCheckListId == 37
                                             select new { age.CheckList, age.FunctionCheckListId }
                                                        ).FirstOrDefault();
                                list.Add(new CheckListModel()
                                {
                                    CheckList = query.CheckList,
                                    FunctionCheckListId = query.FunctionCheckListId,
                                    IsChecked = true
                                });
                            }

                            #endregion
                            //}

                            #region check gate score deviation
                            //check gate score
                            if (querymasttbl.GateScore == true)
                            {
                                var deviationgate = false;

                                if (model.AppType == "STE")
                                {
                                    if (model.OrderType == "Enhancement" || model.OrderType == null)
                                    {

                                        if (model.AppId != null && !string.IsNullOrEmpty(model.AppType))
                                        {
                                            decimal GateScore = 0;
                                            var QrySTE = context.tblRCTSTE.FirstOrDefault(m => m.STEID == model.AppId);
                                            GateScore = QrySTE != null ? Convert.ToDecimal(QrySTE.GateScore) : 0;
                                            if (GateScore == 0)
                                                deviationgate = true;
                                        }
                                        else
                                        {
                                            if (model.GateScore == 0)
                                                deviationgate = true;
                                        }
                                    }
                                }
                                if (model.AppType == "OSG")
                                {
                                    if (model.OrderType == "Enhancement" || model.OrderType == null)
                                    {

                                        if (model.AppId != null && !string.IsNullOrEmpty(model.AppType))
                                        {
                                            decimal GateScore = 0;
                                            var QrySTE = context.tblRCTOutsourcing.FirstOrDefault(m => m.OSGID == model.AppId);
                                            GateScore = QrySTE != null ? Convert.ToDecimal(QrySTE.GateScore) : 0;
                                            if (GateScore == 0)
                                                deviationgate = true;
                                        }
                                        else
                                        {
                                            if (model.GateScore == 0)
                                                deviationgate = true;
                                        }
                                    }
                                }

                                if (deviationgate == true)
                                {
                                    var query = (from age in context.tblFunctionCheckList
                                                 where age.FunctionCheckListId == 41
                                                 select new { age.CheckList, age.FunctionCheckListId }
                                                 ).FirstOrDefault();
                                    list.Add(new CheckListModel()
                                    {
                                        CheckList = query.CheckList,
                                        FunctionCheckListId = query.FunctionCheckListId,
                                        IsChecked = true
                                    });
                                }
                            }
                            #endregion

                            #region Work experience

                            if (model.OrderType != null && (model.OrderType == "Enhancement" || model.OrderType == "Extension" || model.OrderType == "Change of project"))
                            {

                                if (oldProject != model.ProjectID || model.ChekSalary < previousSalary || model.DesignationId != oldDesignation)
                                {
                                    //var fromdate = query.AppointmentStartdate;
                                    //var enddate = query.AppointmentEnddate;
                                    //if (enddate < model.AppointmentStartDate && query.DesignationId != model.DesignationId)
                                    //if (query.DesignationId != model.DesignationId)
                                    //{
                                    model.Experience = model.Experience + (RequirementService.getIITExperience(model.OldEmployee));
                                    if (model.AppType == "CON")
                                    {
                                        var queryexp = (from c in context.tblRCTConsultantEducationDetail
                                                        where c.Status == "Active" && c.ConsultantAppointmentId == model.AppId
                                                        orderby c.ConsultantEducationDetailId
                                                        select new { c.QualifiCationId, c.DisciplineId, c.MarkType, c.Marks }).ToArray();
                                        if (queryexp != null)
                                        {
                                            model.MasrksType = queryexp.Select(x => x.MarkType).ToArray();
                                            model.Masrks = queryexp.Select(x => x.Marks).ToArray();
                                            model.QualificationId = queryexp.Select(x => x.QualifiCationId).ToArray();
                                            model.DisciplineId = queryexp.Select(x => x.DisciplineId).ToArray();
                                        }
                                    }
                                    else if (model.AppType == "STE")
                                    {
                                        var queryexp = (from c in context.tblRCTSTEEducationDetail
                                                        where c.isCurrentVersion == true && c.STEID == model.AppId
                                                        orderby c.STEEducationDetailID
                                                        select new { c.QualifiCationID, c.DisciplineID, c.MarkType, c.Marks }).ToArray();
                                        if (queryexp != null)
                                        {
                                            model.MasrksType = queryexp.Select(x => x.MarkType).ToArray();
                                            model.Masrks = queryexp.Select(x => x.Marks).ToArray();
                                            model.QualificationId = queryexp.Select(x => x.QualifiCationID).ToArray();
                                            model.DisciplineId = queryexp.Select(x => x.DisciplineID).ToArray();
                                        }
                                    }
                                    else if (model.AppType == "OSG")
                                    {
                                        var queryexp = (from c in context.tblRCTOSGEducationDetail
                                                        where c.isCurrentVersion == true && c.OSGId == model.AppId
                                                        orderby c.OSGEducationDetailId
                                                        select new { c.QualificationId, c.DisciplineId, c.MarkType, c.Marks }).ToArray();
                                        if (queryexp != null)
                                        {
                                            model.MasrksType = queryexp.Select(x => x.MarkType).ToArray();
                                            model.Masrks = queryexp.Select(x => x.Marks).ToArray();
                                            model.QualificationId = queryexp.Select(x => x.QualificationId).ToArray();
                                            model.DisciplineId = queryexp.Select(x => x.DisciplineId).ToArray();
                                        }
                                    }
                                }
                                //}

                            }
                            if (string.IsNullOrEmpty(model.OrderType) && !string.IsNullOrEmpty(model.OldEmployee))
                            {
                                model.Experience = model.Experience + (RequirementService.getIITExperience(model.OldEmployee));
                            }

                            if (model.Experience != null && model.QualificationId != null)
                            {
                                if (model.QualificationId.Count() > 0)
                                {
                                    var validQua = false;
                                    var isValidExperience = false;
                                    for (int i = 0; i < model.QualificationId.Count(); i++)
                                    {
                                        var queryQua = querydetail.Where(m => m.Qualification == model.QualificationId[i] && m.CourseId == model.DisciplineId[i]).Select(m => new { m.Marks, m.CGPA, m.RelevantExperience }).ToList();
                                        if (queryQua.Count > 0)
                                        {
                                            for (var k = 0; k < queryQua.Count; k++)
                                            {
                                                decimal Min = 0, Max = 0;
                                                decimal MinCGPA = 0, MaxCGPA = 10;
                                                var ExperienceMin = 0;
                                                var ExperienceMax = 0;
                                                var MarkType = queryQua[k].Marks;
                                                var CGPA = queryQua[k].CGPA;
                                                var Experience = queryQua[k].RelevantExperience;

                                                #region Fill Value Qualification & Course
                                                //Fill Value                             
                                                var _marks = (from M in context.tblCodeControl
                                                              where M.CodeName == "Markstype" && M.CodeValAbbr == MarkType
                                                              orderby M.CodeValAbbr
                                                              select M.CodeValDetail).FirstOrDefault();
                                                var _CGPA = (from M in context.tblCodeControl
                                                             where M.CodeName == "CGPAType" && M.CodeValAbbr == CGPA
                                                             orderby M.CodeValAbbr
                                                             select M.CodeValDetail).FirstOrDefault();
                                                var QueryExpCodeControl = (from M in context.tblCodeControl
                                                                           where M.CodeName == "RelevantExperienceType" && M.CodeValAbbr == Experience
                                                                           orderby M.CodeValAbbr
                                                                           select M.CodeValDetail).FirstOrDefault();
                                                if (_marks != null && _CGPA != null)
                                                {
                                                    var splitmark = _marks.Split('-');
                                                    if (_marks.Contains('+'))
                                                    {
                                                        var splitplusmark = _marks.Split('+');
                                                        Min = Convert.ToDecimal(splitplusmark[0]);
                                                        Max = 100;
                                                    }
                                                    else if (_marks.Contains("Below"))
                                                    {
                                                        var splitplusmark = _marks.Split(' ');
                                                        Min = 0;
                                                        Max = Convert.ToDecimal(splitplusmark[1]);
                                                    }
                                                    else
                                                    {
                                                        Min = Convert.ToDecimal(splitmark[0]);
                                                        Max = Convert.ToDecimal(splitmark[1]);
                                                    }

                                                    if (_CGPA.Contains("Below"))
                                                    {
                                                        var splitplusmark = _CGPA.Split(' ');
                                                        MinCGPA = 0;
                                                        MaxCGPA = Convert.ToDecimal(splitplusmark[1]);
                                                    }
                                                    else
                                                    {
                                                        MinCGPA = Convert.ToDecimal(_CGPA);
                                                    }
                                                }
                                                if (QueryExpCodeControl.Contains("Above"))
                                                {
                                                    var SplitMarks = QueryExpCodeControl.Split(' ');
                                                    ExperienceMin = Convert.ToInt16(SplitMarks[1]);
                                                    ExperienceMax = 100;
                                                }
                                                else
                                                {
                                                    var SplitMarks = QueryExpCodeControl.Split('-');
                                                    ExperienceMin = Convert.ToInt16(SplitMarks[0]);
                                                    ExperienceMax = Convert.ToInt16(SplitMarks[1]); ;
                                                }
                                                //---end---
                                                #endregion

                                                //chcek Marks
                                                if (validQua == false)
                                                {
                                                    if (model.MasrksType[i] == 1)
                                                    {
                                                        if (Min <= model.Masrks[i] && (Max <= model.Masrks[i] || Max >= model.Masrks[i]))
                                                            validQua = true;
                                                        else
                                                            validQua = false;
                                                    }
                                                    else
                                                    {
                                                        if (MinCGPA <= model.Masrks[i] && (MaxCGPA <= model.Masrks[i] || MaxCGPA >= model.Masrks[i]))
                                                            validQua = true;
                                                        else
                                                            validQua = false;
                                                    }
                                                }

                                                if (isValidExperience == false)
                                                {
                                                    //chcek Experience
                                                    if (ExperienceMin <= model.Experience && (ExperienceMax >= model.Experience || ExperienceMax <= model.Experience))
                                                        isValidExperience = true;
                                                    else
                                                        isValidExperience = false;
                                                }

                                                if (validQua && isValidExperience)
                                                    break;
                                            }
                                        }
                                        else
                                            validQua = false;

                                        if (validQua && isValidExperience)
                                            break;
                                    }

                                    if (validQua == false)
                                    {
                                        var queryQualification = (from Q in context.tblFunctionCheckList
                                                                  where Q.FunctionCheckListId == 35
                                                                  select new { Q.CheckList, Q.FunctionCheckListId }
                                                                  ).FirstOrDefault();
                                        list.Add(new CheckListModel()
                                        {
                                            CheckList = queryQualification.CheckList,
                                            FunctionCheckListId = queryQualification.FunctionCheckListId,
                                            IsChecked = true
                                        });
                                    }

                                    if (validQua == true && isValidExperience == false)
                                    {
                                        var queryQualification = (from Q in context.tblFunctionCheckList
                                                                  where Q.FunctionCheckListId == 38
                                                                  select new { Q.CheckList, Q.FunctionCheckListId }
                                                                  ).FirstOrDefault();
                                        list.Add(new CheckListModel()
                                        {
                                            CheckList = queryQualification.CheckList,
                                            FunctionCheckListId = queryQualification.FunctionCheckListId,
                                            IsChecked = true
                                        });
                                    }

                                }
                                else
                                {
                                    var queryQualification = (from Q in context.tblFunctionCheckList
                                                              where Q.FunctionCheckListId == 35
                                                              select new { Q.CheckList, Q.FunctionCheckListId }
                                                                 ).FirstOrDefault();
                                    list.Add(new CheckListModel()
                                    {
                                        CheckList = queryQualification.CheckList,
                                        FunctionCheckListId = queryQualification.FunctionCheckListId,
                                        IsChecked = true
                                    });
                                }
                            }
                            #endregion

                            int?[] expClassification = new int?[] { 1, 6, 11, 13 };
                            string[] noexpAgencyCode = new string[] { "ALUM", "ICSR", "IDRB", "IITM", "LRAM", "NFIG", "NFSC", "RESF", "RFER", "RFIE", "RFIR", "RFME", "RMRI", "RFTP", "RUTG", "SRPA", "SRPX", "DDF" };
                            var manpower = (from p in context.tblProject
                                            join a in context.tblAgencyMaster on p.SponsoringAgency equals a.AgencyId into jn
                                            from j in jn.DefaultIfEmpty()
                                            where p.ProjectId == model.ProjectID && p.ProjectType != 2 && expClassification.Contains(p.ProjectClassification)
                                            && (j == null ? true : !noexpAgencyCode.Contains(j.AgencyCode))
                                            select p).Any();
                            if (manpower && (((model.OrderType == "Enhancement" || model.OrderType == "Change of project") && (oldProject != null && oldProject != model.ProjectID)) || model.OrderType == null))
                            {
                                #region check man power only new appointment and enhancement tenure increase time

                                var deviationinmanpower = false;
                                List<ViewStaffAllocationListModel> StaffAllocationListModel = new List<ViewStaffAllocationListModel>();
                                StaffAllocationListModel = getViewStaffAllocation(model.ProjectID ?? 0, ApplicationType).StaffAllocationList;
                                if (StaffAllocationListModel.Count > 0)
                                {
                                    var staffVacancy = StaffAllocationListModel.Where(X => X.Category == querymasttbl.DesignationCode).Select(m => m.StaffVacancy).FirstOrDefault();
                                    if (staffVacancy <= 0)
                                        deviationinmanpower = true;
                                }
                                else
                                    deviationinmanpower = true;

                                if (deviationinmanpower)
                                {
                                    var query = (from age in context.tblFunctionCheckList
                                                 where age.FunctionCheckListId == 39
                                                 select new { age.CheckList, age.FunctionCheckListId }
                                                       ).FirstOrDefault();
                                    list.Add(new CheckListModel()
                                    {
                                        CheckList = query.CheckList,
                                        FunctionCheckListId = query.FunctionCheckListId,
                                        IsChecked = true
                                    });
                                }
                                #endregion
                            }

                            #region trainee period only 6 months 
                            if (model.OrderType == null || model.OrderType == "Enhancement" || model.OrderType == "Extension")
                            {
                                int stardateyear = Common.leap(model.AppointmentStartDate.Year);
                                int enddateyear = Common.leap(model.AppointmentEndDate.Year);
                                var Days = model.AppointmentEndDate.Subtract(model.AppointmentStartDate).Days + 1;
                                //if (stardateyear == 1 || enddateyear == 1)
                                //    Days = Days - 1;

                                if (model.DesignationId == 1)
                                {
                                    decimal YearDays = Common.GetAvgDaysInAYear((DateTime)model.AppointmentStartDate, (DateTime)model.AppointmentEndDate);

                                    decimal permonth = Convert.ToDecimal(YearDays) / Convert.ToDecimal(12);
                                    decimal monthDiff = Convert.ToDecimal(Days) / permonth;
                                    monthDiff = Decimal.Round(monthDiff);
                                    if (model.OrderType == "Enhancement" || model.OrderType == "Extension")
                                    {
                                        decimal months = 0;
                                        var totalDays = actualEnddate.Value.Subtract(actualStartdate.Value).Days + 1;
                                        months = Convert.ToDecimal(totalDays) / permonth;
                                        months = Decimal.Round(months);
                                        if (model.OrderType == "Extension" || (actualEnddate < model.AppointmentStartDate && model.OrderType == "Enhancement"))
                                            monthDiff += months;
                                    }
                                    if (monthDiff > 6)
                                    {
                                        var queryTenure = (from t in context.tblFunctionCheckList
                                                           where t.FunctionCheckListId == 43
                                                           select new { t.CheckList, t.FunctionCheckListId }
                                                           ).FirstOrDefault();

                                        list.Add(new CheckListModel()
                                        {
                                            CheckList = queryTenure.CheckList,
                                            FunctionCheckListId = queryTenure.FunctionCheckListId,
                                            IsChecked = true
                                        });
                                    }
                                }
                            }

                            #endregion
                        }
                    }
                }

                if (list.Count > 0)
                    isDeviation = true;

                return Tuple.Create(list, isDeviation);
            }
            catch (Exception ex)
            {
                ErrorHandler WriteLog = new ErrorHandler();
                WriteLog.SendErrorToText(ex);
                return Tuple.Create(list, isDeviation);
            }
        }

        public static Tuple<List<CheckListModel>, bool> GetHRADeviation(CheckDevationModel model)
        {
            List<CheckListModel> list = new List<CheckListModel>();
            bool isDeviation = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (model.AppId > 0 && !string.IsNullOrEmpty(model.AppType))
                    {
                        var queryvw = (from vw in context.vw_RCTOverAllApplicationEntry
                                       where vw.ApplicationId == model.AppId && vw.Category == model.AppType
                                       select vw).FirstOrDefault();
                        model.PaymentthroughAgency = getPaymentthroughAgency(model.AppId ?? 0, model.AppType);
                        if (queryvw != null)
                        {
                            model.StaffCatecory = queryvw.StaffCategory;
                        }
                    }

                    #region Projectfund
                    if (model.StaffCatecory == "Non ICSR Staff" && model.PaymentthroughAgency == false)
                    {
                        ProjectService _PS = new ProjectService();
                        var funddeviation = IsAvailablefundProject(model.ProjectID ?? 0, model.CommitmentAmount, model.TypeOfAppointment);
                        if (funddeviation)
                        {
                            var query = (from age in context.tblFunctionCheckList
                                         where age.FunctionCheckListId == 40
                                         select new
                                         {
                                             age.CheckList,
                                             age.FunctionCheckListId,
                                             IsChecked = true
                                         }).FirstOrDefault();
                            list.Add(new CheckListModel()
                            {
                                CheckList = query.CheckList,
                                FunctionCheckListId = query.FunctionCheckListId,
                                IsChecked = true
                            });
                        }
                    }
                    #endregion
                }

                if (list.Count > 0)
                    isDeviation = true;

                return Tuple.Create(list, isDeviation);
            }
            catch (Exception ex)
            {
                return Tuple.Create(list, isDeviation);
            }
        }

        #endregion

        public static SalryCalcPercentModel GetSalCalPercent(int VendorId, decimal Salary)
        {
            SalryCalcPercentModel model = new SalryCalcPercentModel();
            DateTime date = DateTime.Now;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from cm in context.tblRCTStatutory
                               where cm.ValueDate <= date && (cm.EndDate >= date || cm.EndDate == null)
                               select cm).FirstOrDefault();
                    var qryVendor = (from cm in context.tblSalaryAgencyMaster
                                     where cm.SalaryAgencyId == VendorId
                                     select cm).FirstOrDefault();
                    var qryProftax = (from cm in context.tblRCTProfessionalTax
                                      where cm.ValueDate <= date && (cm.EndDate >= date || cm.EndDate == null)
                                      select cm).FirstOrDefault();
                    if (Qry != null)
                    {
                        model.EmployeePfPercent = Qry.PFEmployeePercentage;
                        model.EmployerPfPercent = Qry.PFEmployerPercentage;
                        model.EmployeeESIC = Qry.ESICEmployeePercentage;
                        model.EmployerESIC = Qry.ESICEmployerPercentage;
                        model.GenESICSlab = Qry.ESICEmployeegeneralamount ?? 0;
                        model.PhESICSlab = Qry.ESICEmployeePhysicalAmount ?? 0;
                        model.PFSlab = Qry.PFEmployeeAmount ?? 0;
                        model.Insurance = qryVendor.Insurance ?? 0;
                        model.AgencyFee = qryVendor.Agencyfee ?? 0;
                        model.GSTPercentage = qryVendor.GSTPercentage ?? 0;
                        model.LWFEmlyrAmount = Qry.LWFEmployerContribution ?? 0;
                        model.StatutoryId = Qry.StatutoryId;
                        if (Salary <= 3500)
                        {
                            model.ProfessionalTax = qryProftax.MonthySalary35;
                        }
                        else if (Salary > 3500 && Salary <= 5000)
                        {
                            model.ProfessionalTax = qryProftax.MonthySalary35to5;
                        }
                        else if (Salary > 5000 && Salary <= 7500)
                        {
                            model.ProfessionalTax = qryProftax.MonthySalary5to75;
                        }
                        else if (Salary > 7500 && Salary <= 10000)
                        {
                            model.ProfessionalTax = qryProftax.MonthySalary75to10;
                        }
                        else if (Salary > 10000 && Salary <= 12500)
                        {
                            model.ProfessionalTax = qryProftax.MonthySalary10to12;
                        }
                        else if (Salary > 12500)
                        {
                            model.ProfessionalTax = qryProftax.MonthySalaryAbove12;
                        }
                        else
                        {
                            model.ProfessionalTax = 0;
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public static int GetVendorId(int OSGID)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var VendorId = (from cm in context.tblRCTOutsourcing
                                    where cm.OSGID == OSGID
                                    select cm.VendorId).FirstOrDefault();
                    return VendorId ?? 0;
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public static int GetAppointmentType(int Orderid)
        {
            int apptype = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from o in context.tblOrder
                                 where o.OrderId == Orderid
                                 select o.AppointmentType).FirstOrDefault();
                    if (query != null)
                        apptype = query ?? 0;
                }
                return apptype;
            }
            catch (Exception ex)
            {
                return apptype;
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteDesignationConsultantList(string term, int TypeCode)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTDesignation
                            where ((U.DesignationCode.Contains(term) || U.Designation.Contains(term) || string.IsNullOrEmpty(term))
                            && U.TypeOfAppointment == TypeCode && U.RecordStatus == "Active")
                            orderby U.DesignationId
                            select new
                            {
                                U.Designation,
                                U.DesignationId,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.DesignationId.ToString(),
                                label = x.Designation
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        public static string GetStateCode(int stateId)
        {
            string Statecode = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var statecode = context.tblStateMaster.Where(x => x.StateId == stateId).Select(x => x.StateCode).FirstOrDefault();
                    if (statecode != null)
                        Statecode = statecode;
                }
                return Statecode;
            }
            catch (Exception ex)
            {
                return Statecode;
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteRCTCommitmentNo(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTCommitmentRequest
                            where ((U.CommitmentNumber.Contains(term) || string.IsNullOrEmpty(term))
                            && U.CommitmentNumber != null)
                            orderby U.RecruitmentRequestId
                            select new
                            {
                                U.CommitmentNumber,
                            }).Distinct()
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.CommitmentNumber.ToString(),
                                label = x.CommitmentNumber
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        public static Tuple<DateTime, DateTime> GetRCTFinPeriod()
        {
            DateTime startDate = new DateTime();
            DateTime endDate = new DateTime();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFinYear.Where(x => x.CurrentYearFlag == true).FirstOrDefault();
                    if (query != null)
                    {
                        startDate = Convert.ToDateTime(query.StartDate);
                        endDate = Convert.ToDateTime(query.EndDate.Value.AddDays(1).AddTicks(-2));
                    }
                }
                return Tuple.Create(startDate, endDate);
            }
            catch (Exception ex)
            {
                return Tuple.Create(startDate, endDate);
            }
        }


        public static List<MasterlistviewModel> GetAgencyMasterList()
        {
            try
            {

                List<MasterlistviewModel> list = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblSalaryAgencyMaster
                                 orderby C.AgencyName
                                 where C.Status == "Active"
                                 select new { C.AgencyName, C.SalaryAgencyId, C.AgencyCode }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].SalaryAgencyId,
                                name = query[i].AgencyName,
                                code = query[i].AgencyCode,
                            });
                        }
                    }
                }

                return list;
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                return list;
            }

        }
        public static List<AutoCompleteModel> GetAutoCompleteSlyAgencyList(string term)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblSalaryAgencyMaster
                            where (string.IsNullOrEmpty(term) || U.AgencyName.Contains(term))
                            orderby U.SalaryAgencyId
                            select new
                            {
                                U.AgencyName,
                                U.SalaryAgencyId,
                                U.AgencyCode,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.SalaryAgencyId.ToString(),
                                label = x.AgencyName,
                                desc = x.AgencyCode,
                            }).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }
        public static Tuple<string, int> LoadSalaryAgencyName(string VendorCode)
        {
            string Vendorname = string.Empty;
            int Vendorid = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.tblSalaryAgencyMaster
                                      where cc.AgencyCode == VendorCode
                                      select cc).FirstOrDefault();
                    if (checkquery != null)
                    {
                        Vendorname = checkquery.AgencyName;
                        Vendorid = checkquery.SalaryAgencyId;
                    }
                }
                return Tuple.Create(Vendorname, Vendorid);
            }
            catch (Exception ex)
            {
                return Tuple.Create(Vendorname, Vendorid);
            }
        }
        #endregion

        #region RCTPayment
        public static string GetAdhocStaffEmployeeId(int paybill)
        {
            string SchemeCode = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var Qry = (from C in context.vwCombineStaffDetails
                               where C.ID == paybill && C.Category == "AdhocStaff"
                               select C).FirstOrDefault();
                    if (Qry != null)
                    {
                        SchemeCode = Qry.EmployeeId;
                    }
                    return SchemeCode;
                }
            }
            catch (Exception)
            {
                return SchemeCode;
            }
        }
        //public static DateTime GetMonthFirstDate(string MonthYear)
        //{
        //    try
        //    {
        //        DateTime firstDate = DateTime.Now;
        //        string[] dt = MonthYear.Split('-');
        //        if (dt.Length > 0)
        //        {
        //            int month = DateTime.ParseExact(dt[0].Trim().ToString(), "MMM", CultureInfo.CurrentCulture).Month;
        //            int year = Convert.ToInt32(dt[1].Trim());
        //            firstDate = new DateTime(year, month, 1);
        //        }
        //        return firstDate;
        //    }
        //    catch (Exception ex)
        //    {
        //        return DateTime.Now;
        //    }
        //}
        public static DateTime GetNextMonthFirstDate(string MonthYear, int typeOfPaybill)
        {
            try
            {
                DateTime firstDate = DateTime.Now;
                string[] dt = MonthYear.Split('-');
                if (dt.Length > 0)
                {
                    int month = DateTime.ParseExact(dt[0].Trim().ToString(), "MMM", CultureInfo.CurrentCulture).Month;
                    if (typeOfPaybill != 2)
                        month = month + 1;
                    int year = Convert.ToInt32(dt[1].Trim());
                    if (month >= 13)
                    {
                        year += 1;
                        month = 1;
                    }
                    firstDate = new DateTime(year, month, 1);
                }
                return firstDate;
            }
            catch (Exception ex)
            {
                return DateTime.Now;
            }
        }

        //public static DateTime GetMonthLastDate(string MonthYear)
        //{
        //    try
        //    {
        //        DateTime lastDate = DateTime.Now;
        //        string[] dt = MonthYear.Split('-');
        //        if (dt.Length > 0)
        //        {
        //            int month = DateTime.ParseExact(dt[0].Trim().ToString(), "MMM", CultureInfo.CurrentCulture).Month;
        //            int year = Convert.ToInt32(dt[1].Trim());
        //            lastDate = new DateTime(year, month,
        //            DateTime.DaysInMonth(year, month));
        //        }
        //        return lastDate;
        //    }
        //    catch (Exception ex)
        //    {
        //        return DateTime.Now;
        //    }
        //}
        #endregion

        public static List<MasterlistviewModel> getSubheadList(int pId, int hdId)
        {
            try
            {

                List<MasterlistviewModel> subhead = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    subhead = (from s in context.tblProjectSubHead
                               join h in context.tblProjectAllocation on s.AllocationId equals h.AllocationId
                               where h.ProjectId == pId && h.AllocationHead == hdId
                               group s by s.Subhead into g
                               select new MasterlistviewModel()
                               {
                                   name = g.Key,
                                   code = g.Key
                               }).OrderBy(m => m.name).ToList();

                }

                return subhead;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
        public static int GetReceiptProject(int receiptId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    return context.tblReceipt.SingleOrDefault(m => m.ReceiptId == receiptId).ProjectId ?? 0;
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public static string ValidateReceiptBreakup(ReceiptBreakupModel model)
        {
            try
            {
                string msg = "Valid";
                using (var context = new IOASDBEntities())
                {
                    int projectId = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == model.ReceiptId).ProjectId ?? 0;
                    var queryExists = context.tblReceiptBreakup.Any(m => m.ReceiptId == model.ReceiptId && m.ReceiptBreakupId != model.ReceiptBreakupId && m.Status != "InActive");
                    if (queryExists)
                        msg = "Receipt breakup already done againts this receipt.";
                    var queryAllocExists = context.tblProjectAllocation.Any(C => C.ProjectId == projectId && C.AllocationValue > 0);
                    var queryEnhAllocExists = (from m in context.tblProjectEnhancement
                                               join C in context.tblProjectEnhancementAllocation on m.ProjectEnhancementId equals C.ProjectEnhancementId
                                               where m.ProjectId == projectId && C.EnhancedValue > 0 && m.Status == "Active"
                                               select C).Any();
                    if (!queryAllocExists && !queryEnhAllocExists)
                    {
                        msg = "Receipt project did not have allocation.";
                        return msg;
                    }
                    decimal ttlAmt = 0;
                    foreach (var groupItem in model.groups)
                    {
                        decimal groupAmt = groupItem.Amount.GetValueOrDefault(0);
                        decimal ttlHeadAmt = groupItem.heads.Where(m => m.BudgetHeadId > 0).Sum(m => m.Amount) ?? 0;
                        if ((groupAmt == 0 && ttlHeadAmt > 0) || (groupItem.BudgetHeadMapping_f && Math.Round(ttlHeadAmt, 2, MidpointRounding.AwayFromZero) != Math.Round(groupAmt, 2, MidpointRounding.AwayFromZero)))
                        {
                            msg = "Not a valid entry. Budget group value and Budget head breakup value are not equal.";
                            return msg;
                        }
                        if (groupAmt > 0)
                        {
                            ttlAmt += groupAmt;
                            if (groupItem.BudgetHeadMapping_f)
                            {
                                foreach (var head in groupItem.heads)
                                {
                                    if (head.BudgetHeadId > 0 && head.Amount > 0)
                                    {
                                        decimal headAmt = Convert.ToDecimal(head.Amount);
                                        decimal projectOpenAlloc = (from C in context.tblProject
                                                                    from D in context.tblProjectAllocation
                                                                    where C.ProjectId == D.ProjectId
                                                                    where C.ProjectId == projectId && D.AllocationHead == head.BudgetHeadId
                                                                    select D).Sum(m => m.AllocationValue) ?? 0;
                                        decimal EnhAlloc = (from m in context.tblProjectEnhancement
                                                            join C in context.tblProjectEnhancementAllocation on m.ProjectEnhancementId equals C.ProjectEnhancementId
                                                            where m.ProjectId == projectId && C.AllocationHead == head.BudgetHeadId && m.Status == "Active"
                                                              && C.EnhancedValue > 0
                                                            select C).Sum(m => m.EnhancedValue) ?? 0;
                                        decimal preBreakup = (from m in context.tblReceiptBreakup
                                                              join g in context.tblReceiptBudgetGroup on m.ReceiptBreakupId equals g.ReceiptBreakupId
                                                              join h in context.tblReceiptBudgetHead on g.ReceiptBudgetGroupId equals h.ReceiptBudgetGroupId
                                                              join r in context.tblReceipt on m.ReceiptId equals r.ReceiptId
                                                              where r.ProjectId == projectId && g.Status == "Active" && m.Status != "InActive" && m.ReceiptBreakupId != model.ReceiptBreakupId
                                                              select h.Amount).Sum() ?? 0;
                                        if ((projectOpenAlloc + EnhAlloc) < (preBreakup + headAmt))
                                        {
                                            msg = "Budget head breakup value should not be greater than budget head allocation value.";
                                            return msg;
                                        }
                                    }
                                }
                            }
                            decimal groupOpenAlloc = (from C in context.tblProject
                                                      from D in context.tblProjectAllocation
                                                      join b in context.tblBudgetHead on D.AllocationHead equals b.BudgetHeadId
                                                      where C.ProjectId == D.ProjectId
                                                      where C.ProjectId == projectId && b.BudgetGroupId == groupItem.BudgetGroupId
                                                      select D).Sum(m => m.AllocationValue) ?? 0;
                            decimal groupEnhAlloc = (from m in context.tblProjectEnhancement
                                                     join C in context.tblProjectEnhancementAllocation on m.ProjectEnhancementId equals C.ProjectEnhancementId
                                                     join b in context.tblBudgetHead on C.AllocationHead equals b.BudgetHeadId
                                                     where m.ProjectId == projectId && b.BudgetGroupId == groupItem.BudgetGroupId && m.Status == "Active"
                                                       && C.EnhancedValue > 0
                                                     select C).Sum(m => m.EnhancedValue) ?? 0;
                            decimal groupBreakup = (from m in context.tblReceiptBreakup
                                                    join g in context.tblReceiptBudgetGroup on m.ReceiptBreakupId equals g.ReceiptBreakupId
                                                    //join h in context.tblReceiptBudgetHead on g.ReceiptBudgetGroupId equals h.ReceiptBudgetGroupId
                                                    join r in context.tblReceipt on m.ReceiptId equals r.ReceiptId
                                                    where r.ProjectId == projectId && g.Status == "Active" && m.Status != "InActive" && m.ReceiptBreakupId != model.ReceiptBreakupId
                                                    && g.BudgetGroupId == groupItem.BudgetGroupId
                                                    select g.Amount).Sum() ?? 0;
                            if ((groupOpenAlloc + groupEnhAlloc) < (groupBreakup + groupAmt))
                            {
                                msg = "Budget head breakup value should not be greater than budget head allocation value.";
                                return msg;
                            }
                        }
                    }
                }
                return msg;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "Something went wrong please contact administrator.";
            }
        }
        public static List<ReceiptBudgetHeadDetailModel> getReciptBudgetHead(int receiptBudgetGroupId)
        {
            try
            {

                List<ReceiptBudgetHeadDetailModel> head = new List<ReceiptBudgetHeadDetailModel>();

                using (var context = new IOASDBEntities())
                {
                    head = (from s in context.tblReceiptBudgetHead
                            where s.ReceiptBudgetGroupId == receiptBudgetGroupId && s.Status == "Active"
                            select new ReceiptBudgetHeadDetailModel()
                            {
                                Amount = s.Amount,
                                BudgetHeadId = s.BudgetHeadId
                            }).ToList();

                }

                return head;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<ReceiptBudgetHeadDetailModel>();
            }

        }
        public static bool ValidateReceiptBreakupStatus(int receiptBreakupId, string status)
        {
            try
            {
                bool isValid = false;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblReceiptBreakup.FirstOrDefault(m => m.ReceiptBreakupId == receiptBreakupId && m.Status == status);
                    if (query != null)
                        isValid = true;
                }
                return isValid;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return false;
            }
        }

        public static string GetNewReceiptBreakupNumber()
        {
            try
            {
                var no = string.Empty;
                var checkNum = "RCBU/" + GetCurrentFinYear() + "/";
                using (var context = new IOASDBEntities())
                {
                    var num = (from b in context.tblReceiptBreakup
                               orderby b.ReceiptBreakupId descending
                               select b.ReferenceNumber).FirstOrDefault();

                    if (!String.IsNullOrEmpty(num))
                    {
                        var value = num.Split('/').Last();
                        string number = Regex.Replace(value, @"\D", "");
                        var seqnum = Convert.ToInt32(number);
                        seqnum += 1;
                        return checkNum + seqnum.ToString("000000");
                    }
                    else
                    {
                        return checkNum + "000001";
                    }
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        public static List<ReceiptBudgetGroupDetailModel> getAllocationHeadAndGroup(int projectID)
        {
            List<ReceiptBudgetGroupDetailModel> model = new List<ReceiptBudgetGroupDetailModel>();
            try
            {
                List<MasterlistviewModel> List = new List<MasterlistviewModel>();
                List<MasterlistviewModel> groups = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var qryBudgetHead = (from C in context.tblBudgetHead
                                         join D in context.tblProjectAllocation on C.BudgetHeadId equals D.AllocationHead
                                         join E in context.tblProject on D.ProjectId equals E.ProjectId
                                         where E.ProjectId == projectID
                                         group C by C.BudgetHeadId into g
                                         select new { BudgetHeadId = g.Key, HeadName = g.Select(m => m.HeadName).FirstOrDefault() }).ToList();
                    if (qryBudgetHead.Count > 0)
                    {

                        for (int i = 0; i < qryBudgetHead.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = qryBudgetHead[i].BudgetHeadId,
                                name = qryBudgetHead[i].HeadName
                            });
                        }
                    }
                    var heads = List.Select(s => s.id).ToList();
                    var queryEnh = (from C in context.tblBudgetHead
                                    join D in context.tblProjectEnhancementAllocation on C.BudgetHeadId equals D.AllocationHead
                                    join m in context.tblProjectEnhancement on D.ProjectEnhancementId equals m.ProjectEnhancementId
                                    where m.ProjectId == projectID && m.Status == "Active"
                                    && !heads.Contains(D.AllocationHead)
                                    select C).ToList();
                    if (queryEnh.Count > 0)
                    {
                        for (int i = 0; i < queryEnh.Count; i++)
                        {
                            List.Add(new MasterlistviewModel()
                            {
                                id = queryEnh[i].BudgetHeadId,
                                name = queryEnh[i].HeadName
                            });
                        }
                    }
                    heads = List.Select(s => s.id).ToList();
                    groups = (from C in context.tblBudgetHead
                              join cc in context.tblCodeControl on
                        new { Category = C.BudgetGroupId ?? 0, codeName = "BudgetGroup" } equals
                        new { Category = cc.CodeValAbbr, codeName = cc.CodeName }
                              where heads.Contains(C.BudgetHeadId)
                              group cc by cc.CodeValAbbr into g
                              select new MasterlistviewModel { id = g.Key, name = g.Select(m => m.CodeValDetail).FirstOrDefault() }).ToList();
                    if (groups.Count > 0)
                    {
                        foreach (var grp in groups)
                        {
                            var queryHeads = (from C in context.tblBudgetHead
                                              where heads.Contains(C.BudgetHeadId) && C.BudgetGroupId == grp.id
                                              select new MasterlistviewModel { id = C.BudgetHeadId, name = C.HeadName }).ToList();
                            model.Add(new ReceiptBudgetGroupDetailModel()
                            {
                                BudgetGroup = grp.name,
                                BudgetGroupId = grp.id,
                                headList = queryHeads
                            });
                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return model;
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteReceiptNumberForBreakup(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from C in context.tblReceipt
                            where (String.IsNullOrEmpty(term) || C.ReceiptNumber.Contains(term)) && C.Status == "Completed"
                            && C.IsBudgetHeadPosting == true
                            && !context.tblReceiptBudgetGroup.Any(m => m.ReceiptId == C.ReceiptId && m.Status != "InActive")
                            orderby C.ReceiptId
                            select new AutoCompleteModel()
                            {
                                value = C.ReceiptId.ToString(),
                                label = C.ReceiptNumber
                            }).ToList();


                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<AutoCompleteModel>();
            }
        }
        public static string getSubheads(int AllocationId)
        {
            try
            {
                string subheads = "";
                using (var context = new IOASDBEntities())
                {
                    var qryAN = (from C in context.tblProjectSubHead where C.AllocationId == AllocationId && C.Status == "Active" select C.Subhead).ToArray();
                    if (qryAN != null)
                    {
                        subheads = string.Join(", ", qryAN);
                    }
                }
                return subheads;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static Tuple<string, string> GetEmployeeDepartment(int Projectid)
        {
            string departmentcode = string.Empty;
            string depatmentname = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from prj in context.tblProject
                                 join fac in context.tblFacultyDetail on prj.PIName equals fac.CastEmployeeId
                                 where prj.ProjectId == Projectid
                                 select fac).FirstOrDefault();
                    if (query != null)
                    {
                        departmentcode = query.DepartmentCode;
                        depatmentname = query.DepartmentName;
                    }
                }
                return Tuple.Create(departmentcode, depatmentname);
            }
            catch (Exception ex)
            {
                return Tuple.Create(departmentcode, depatmentname);
            }
        }


        public static List<AutoCompleteModel> GetAutoCompleteOSGEmployeeList(string term, string User)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.vw_RCTOverAllApplicationEntry
                            where (string.IsNullOrEmpty(term) || U.EmployeeNo.Contains(term))
                            && U.ApplicationType == "New" && U.Category == "OSG" && U.IsActiveNow == true
                            orderby U.EmployeeNo
                            select new
                            {
                                U.EmployeeNo,
                                U.ApplicationId,
                                U.CandidateName,
                                U.ApplicationNo
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.ApplicationId.ToString(),
                                label = x.EmployeeNo + " - " + x.CandidateName + " - " + x.ApplicationNo
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }


        public Tuple<string, string, string> GetJournalCurrentDate(string RefNumber)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var BoaDate = context.tblBOA.Where(m => m.RefNumber == RefNumber).OrderByDescending(m => m.BOAId).Select(m => m.PostedDate).FirstOrDefault();
                    var BillDate = context.tblJournal.Where(m => m.JournalNumber == RefNumber).FirstOrDefault();
                    return Tuple.Create(string.Format("{0:dd-MMM-yyyy}", BoaDate), string.Format("{0:dd-MMM-yyyy}", BillDate.CRTD_TS), "NA");
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return Tuple.Create((string)"NA", (string)"NA", (string)"NA");
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteDesignationConsultantList(string term)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from U in context.tblRCTDesignation
                            where ((U.DesignationCode.Contains(term) || U.Designation.Contains(term) || string.IsNullOrEmpty(term))
                            && U.TypeOfAppointment == 1 && U.RecordStatus == "Active")
                            orderby U.DesignationId
                            select new
                            {
                                U.Designation,
                                U.DesignationId,
                            })
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.DesignationId.ToString(),
                                label = x.Designation
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        #region Multiple Agency Salary
        public static string GetSalaryAgencyName(int agencyId)
        {
            try
            {
                string name = "";
                using (var context = new IOASDBEntities())
                {
                    var qryAN = context.tblSalaryAgencyMaster.FirstOrDefault(m => m.SalaryAgencyId == agencyId);
                    if (qryAN != null)
                    {
                        name = qryAN.AgencyName;
                    }
                }
                return name;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return "";
            }
        }
        public static int getAgencySalaryVendorId(int agencySalaryId)
        {
            try
            {
                int? vendorId = 0;

                using (var context = new IOASDBEntities())
                {
                    vendorId = context.tblAgencySalary.FirstOrDefault(m => m.AgencySalaryId == agencySalaryId).VendorId;

                    return Convert.ToInt32(vendorId);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }
        public static Tuple<int, string> getAgencySalaryMonthVendorId(int agencySalaryId)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var data = context.tblAgencySalary.FirstOrDefault(m => m.AgencySalaryId == agencySalaryId);

                    return Tuple.Create(data.VendorId ?? 0, data.MonthYearStr);
                }
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                throw ex;
            }
        }

        #endregion

        public static List<MasterlistviewModel> getAmendmentType()
        {
            try
            {
                List<MasterlistviewModel> amendmenttype = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblOrderMaster
                                 where C.CodeID > 11
                                 select C).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            amendmenttype.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeID,
                                name = query[i].CodeDescription,
                            });
                        }
                    }
                }
                return amendmenttype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }

        public static List<MasterlistviewModel> GetRecruitCommonHeadList(int categoryId, int groupId)
        {
            try
            {
                List<MasterlistviewModel> list = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    int[] headId = new int[] { 1, 9, 10, 203, 4, 123, 204 };
                    list = (from h in context.tblCommonHeads
                            where h.CategoryId == categoryId && h.GroupId == groupId && h.Status != "InActive"
                            && headId.Contains(h.HeadId)
                            select new MasterlistviewModel()
                            {
                                id = h.HeadId,
                                name = h.Head
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return new List<MasterlistviewModel>();
            }
        }

        public static List<MasterlistviewModel> GetSalaryLevelList(int? apptype = null)
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from cc in context.tblRCTSalaryLevel
                                 where (apptype == null || cc.AppointmentType == apptype) && cc.Status == "Active"
                                 orderby cc.SalaryLevelId
                                 select new { cc.SalaryLevelId, cc.LevelRange }).ToList();
                    list.Add(new MasterlistviewModel()
                    {
                        id = 0,
                        name = "No"
                    });
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].SalaryLevelId,
                                name = query[i].LevelRange
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }

        public static decimal GetSalaryLevelMin(int id)
        {
            decimal MinSalary = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    MinSalary = (from salmin in context.tblRCTSalaryLevel
                                 where salmin.SalaryLevelId == id
                                 select salmin.MinSalary ?? 0).FirstOrDefault();
                }
                return MinSalary;
            }
            catch (Exception ex)
            {
                return MinSalary;
            }
        }
        public static decimal GetSalaryLevelMax(int id)
        {
            decimal MaxSalary = 0;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    MaxSalary = (from salmin in context.tblRCTSalaryLevel
                                 where salmin.SalaryLevelId == id
                                 select salmin.MaxSalary ?? 0).FirstOrDefault();
                }
                return MaxSalary;
            }
            catch (Exception ex)
            {
                return MaxSalary;
            }
        }
        #region RCT WorkFlow
        public static STEModel GetWFEditSTE(int WFid)
        {
            STEModel model = new STEModel();
            try
            {
                using (var context = new IOASWorkFlowEntities1())
                {
                    var QrySTE = (from A in context.tblRCTSTE where A.STEID == WFid select new { A }).FirstOrDefault();
                    if (QrySTE != null)
                    {
                        model.Status = "";
                        model.bccSaved = QrySTE.A.bcc != null ? true : false;
                        //model.STEId = QrySTE.A.STEID;
                        model.WfId = WFid;
                        model.ApplicationNo = QrySTE.A.ApplicationNumber;
                        model.TypeofappointmentId = QrySTE.A.TypeofAppointment;
                        model.EmployeeType = QrySTE.A.EmployeeCategory;
                        model.NIDNumber = QrySTE.A.NIDNumber;
                        model.OldEmployeeNumber = QrySTE.A.OldNumber;
                        if (!string.IsNullOrEmpty(model.OldEmployeeNumber))
                            model.OldEmpId = model.OldEmployeeNumber;
                        model.PersonImagePath = QrySTE.A.CandidateImage;
                        if (!string.IsNullOrEmpty(QrySTE.A.ResumeFile))
                            model.ResumeFileName = QrySTE.A.ResumeFile.Substring((QrySTE.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = QrySTE.A.ResumeFile;
                        model.CantidateSignatureFilePath = QrySTE.A.CandidateSignature;
                        model.Professional = Common.GetCodeControlName(QrySTE.A.ProfessionalType ?? 0, "RCTProfessional");
                        model.ProfessionalId = QrySTE.A.ProfessionalType;
                        model.Name = QrySTE.A.Name;
                        model.Nameoftheguardian = QrySTE.A.NameoftheGuardian;
                        if (!string.IsNullOrEmpty(QrySTE.A.AadhaarNumber))
                            model.aadharnumber = long.Parse(QrySTE.A.AadhaarNumber == "" ? "0" : QrySTE.A.AadhaarNumber);
                        else
                            model.aadharnumber = null;
                        model.PAN = QrySTE.A.PANNo;
                        model.DateofBirth = QrySTE.A.DateofBirth;
                        model.strDateofBirth = string.Format("{0:dd-MMMM-yyyy}", QrySTE.A.DateofBirth);
                        model.Age = QrySTE.A.Age ?? 0;
                        model.Sex = QrySTE.A.Sex ?? 0;
                        model.Caste = QrySTE.A.Caste ?? 0;
                        model.ContactNumber = QrySTE.A.ContactNumber;
                        model.AlternativeContactNumber = QrySTE.A.AlternativeContactNumber;
                        model.EmergencyContactNo = QrySTE.A.EmergencyContact;
                        model.Email = QrySTE.A.Email;
                        model.PresentAddress = QrySTE.A.PresentAddress;
                        model.isSameasPermanentAddress = QrySTE.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = QrySTE.A.PermanentAddress;
                        model.BloodGroup = QrySTE.A.Bloodgroup;
                        model.BloodGroupRH = QrySTE.A.BloodgroupRH;
                        model.StaffCategory = QrySTE.A.StaffCategory;
                        model.Nationality = QrySTE.A.Nationality ?? 0;
                        model.PhysicallyChallenged = QrySTE.A.PhysicallyChallenged == "No" ? 2 : QrySTE.A.PhysicallyChallenged == "Yes" ? 1 : 0;
                        model.Relationship = QrySTE.A.Relationship;
                        model.RelationshipName = QrySTE.A.RelationshipDetails;
                        model.RelatedIITMadras = QrySTE.A.RelatedIIT;
                        model.ApplicationEntryDate = QrySTE.A.ApplicationEntryDate;
                        model.ApplicationReceiveDate = QrySTE.A.ApplicationReceiveDate;
                        model.ConsolidatedPay = QrySTE.A.ConsolidatedPay ?? false;
                        model.Fellowship = QrySTE.A.Fellowship ?? false;
                        model.IITMPensionerCSIRStaff = QrySTE.A.IITMPensionerOrCSIRStaff;
                        model.PPONo = QrySTE.A.PPONo;
                        model.CSIRStaff = QrySTE.A.CSIRStaffPayMode;
                        model.MsPhd = QrySTE.A.MsPhd ?? false;
                        model.MsPhdType = QrySTE.A.MsPhdType;
                        model.PhdDetail = QrySTE.A.PhdDetail;
                        model.ProjectId = GetProjectId(QrySTE.A.ProjectNumber);
                        model.ProjectNumber = QrySTE.A.ProjectNumber;
                        model.DesignationId = QrySTE.A.DesignationId;
                        //model.SalaryLevelId = QrySTE.A.SalaryLevelId;
                        //model.Designation = QrySTE.Designation;
                        //model.DesignationCode = QrySTE.DesignationCode;
                        //model.MinSalary = QrySTE.PayStructureMinMum;
                        //model.MaxSalary = QrySTE.PayStructureMaximum;
                        model.Medical = QrySTE.A.Medical;
                        model.Appointmentstartdate = QrySTE.A.AppointmentStartdate;
                        model.AppointmentEndDate = QrySTE.A.AppointmentEnddate;
                        model.MedicalAmmount = QrySTE.A.MedicalAmmount ?? 0;
                        model.Salary = QrySTE.A.Salary;
                        model.HRA = QrySTE.A.HRA ?? 0;
                        model.isHRA = QrySTE.A.isHaveHRA ?? false;
                        model.HRAPercentage = QrySTE.A.HRAPercentage ?? 0;
                        model.CommitmentAmount = QrySTE.A.CommitmentAmount;
                        model.SalaryPayHigh = QrySTE.A.SalaryPayHigh;
                        model.BankAccountNo = QrySTE.A.BankAccountNumber;
                        model.BankName = QrySTE.A.BankName;
                        model.IFSCCode = QrySTE.A.IFSCCode;
                        model.isHaveGateScore = QrySTE.A.isHaveGateScore == true ? "Yes" : "No";
                        model.GateScore = QrySTE.A.GateScore;

                        model.CommiteeMemberId1 = QrySTE.A.CommitteeMember ?? 0;
                        model.CommiteeMemberId2 = QrySTE.A.CommitteeMembers ?? 0;
                        model.ChairpersonNameId = QrySTE.A.Chairperson ?? 0;
                        model.CommiteeMember1 = Common.GetPIName(QrySTE.A.CommitteeMember ?? 0);
                        model.CommiteeMember2 = Common.GetPIName(QrySTE.A.CommitteeMembers ?? 0);
                        model.ChairpersonName = Common.GetPIName(QrySTE.A.Chairperson ?? 0);
                        model.FlowofMail = QrySTE.A.NotetoPI == true ? "NP" : QrySTE.A.NotetoCommittee == true ? "NC" : QrySTE.A.NotetoDean == true ? "NDean" : "Nd";
                        model.EmergencyContactNo = QrySTE.A.EmergencyContact;
                        model.EmployeeId = QrySTE.A.EmployeersID;
                        model.ToMail = QrySTE.A.ToMail;
                        model.bcc = QrySTE.A.bcc;
                        model.isGovAgencyFund = QrySTE.A.isGovAgencyFund ?? false;
                        if (QrySTE.A.NotetoCMAdmin == true)
                            model.FlowApprover = "CMAdmin";
                        if (QrySTE.A.NotetoDean == true)
                            model.FlowApprover = "NDean";
                        model.EmployeeWorkplace = QrySTE.A.EmployeeWorkplace;
                        model.ApplicationRefNo = QrySTE.A.RefNumber;
                        model.AutoFillRequstedbyPI = Common.GetPIName(QrySTE.A.RequestedBy ?? 0);
                        model.RequestedByPI = QrySTE.A.RequestedBy;
                        model.Comments = QrySTE.A.Comments;
                        model.PIJustificationRemarks = QrySTE.A.PICoPIComments + " , " + QrySTE.A.Remarks;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }

        public static STEModel GetWFEditOSG(int WfId)
        {
            STEModel model = new STEModel();
            List<STEEducationModel> EducationList = new List<STEEducationModel>();
            List<STEExperienceModel> ExperienceList = new List<STEExperienceModel>();
            List<CheckListModel> CheckListDetail = new List<CheckListModel>();
            try
            {
                using (var context = new IOASWorkFlowEntities1())
                {
                    if (WfId > 0)
                    {
                        var QryOSG = (from A in context.tblRCTOutsourcing
                                      where A.OSGID == WfId
                                      select new { A }).FirstOrDefault();

                        model.Status = "";
                        model.bccSaved = QryOSG.A.bcc != null ? true : false;
                        //model.STEId = QryOSG.A.OSGID;
                        model.WfId = WfId;
                        model.ApplicationNo = QryOSG.A.ApplicationNumber;
                        model.TypeofappointmentId = QryOSG.A.TypeofAppointment;
                        model.EmployeeType = QryOSG.A.EmployeeCategory;
                        model.VendorName = QryOSG.A.VendorName;
                        model.VendorCode = QryOSG.A.VendorCode;
                        model.VendorId = QryOSG.A.VendorId;
                        model.NIDNumber = QryOSG.A.NIDNumber;
                        model.OldEmployeeNumber = QryOSG.A.OldNumber;
                        if (!string.IsNullOrEmpty(model.OldEmployeeNumber))
                            model.OldEmpId = model.OldEmployeeNumber;
                        model.PersonImagePath = QryOSG.A.CandidateImage;
                        if (QryOSG.A.ResumeFile != null)
                            model.ResumeFileName = QryOSG.A.ResumeFile.Substring((QryOSG.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = QryOSG.A.ResumeFile;
                        model.ProfessionalId = QryOSG.A.ProfessionalType;
                        model.Name = QryOSG.A.Name;
                        model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                        if (!string.IsNullOrEmpty(QryOSG.A.AadhaarNumber))
                            model.aadharnumber = long.Parse(QryOSG.A.AadhaarNumber == "" ? "0" : QryOSG.A.AadhaarNumber);
                        else
                            model.aadharnumber = null;
                        if (QryOSG.A.AadhaarNumber == "")
                            model.aadharnumber = null;
                        model.PAN = QryOSG.A.PANNo;
                        model.DateofBirth = QryOSG.A.DateofBirth;
                        model.strDateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                        model.Age = QryOSG.A.Age ?? 0;
                        model.Sex = QryOSG.A.Sex ?? 0;
                        model.Caste = QryOSG.A.Caste ?? 0;
                        model.ContactNumber = QryOSG.A.ContactNumber;
                        model.AlternativeContactNumber = QryOSG.A.AlternativeContactNumber;
                        model.EmergencyContactNo = QryOSG.A.EmergencyContact;
                        model.Email = QryOSG.A.Email;
                        model.PresentAddress = QryOSG.A.PresentAddress;
                        model.isSameasPermanentAddress = QryOSG.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = QryOSG.A.PermanentAddress;
                        model.BloodGroup = QryOSG.A.Bloodgroup ?? 0;
                        model.BloodGroupRH = QryOSG.A.BloodgroupRH ?? 0;
                        model.StaffCategory = QryOSG.A.StaffCategory; if (!string.IsNullOrEmpty(model.OldEmployeeNumber))
                            model.OldEmpId = model.OldEmployeeNumber;
                        model.PersonImagePath = QryOSG.A.CandidateImage;
                        if (QryOSG.A.ResumeFile != null)
                            model.ResumeFileName = QryOSG.A.ResumeFile.Substring((QryOSG.A.ResumeFile.LastIndexOf('_') + 1));
                        model.ResumeFilePath = QryOSG.A.ResumeFile;
                        model.ProfessionalId = QryOSG.A.ProfessionalType;
                        model.Name = QryOSG.A.Name;
                        model.Nameoftheguardian = QryOSG.A.NameoftheGuardian;
                        if (!string.IsNullOrEmpty(QryOSG.A.AadhaarNumber))
                            model.aadharnumber = long.Parse(QryOSG.A.AadhaarNumber == "" ? "0" : QryOSG.A.AadhaarNumber);
                        else
                            model.aadharnumber = null;
                        if (QryOSG.A.AadhaarNumber == "")
                            model.aadharnumber = null;
                        model.PAN = QryOSG.A.PANNo;
                        model.DateofBirth = QryOSG.A.DateofBirth;
                        model.strDateofBirth = string.Format("{0:dd-MMMM-yyyy}", QryOSG.A.DateofBirth);
                        model.Age = QryOSG.A.Age ?? 0;
                        model.Sex = QryOSG.A.Sex ?? 0;
                        model.Caste = QryOSG.A.Caste ?? 0;
                        model.ContactNumber = QryOSG.A.ContactNumber;
                        model.AlternativeContactNumber = QryOSG.A.AlternativeContactNumber;
                        model.EmergencyContactNo = QryOSG.A.EmergencyContact;
                        model.Email = QryOSG.A.Email;
                        model.PresentAddress = QryOSG.A.PresentAddress;
                        model.isSameasPermanentAddress = QryOSG.A.isSameAsPresentAddress ?? false;
                        model.PermanentAddress = QryOSG.A.PermanentAddress;
                        model.BloodGroup = QryOSG.A.Bloodgroup ?? 0;
                        model.BloodGroupRH = QryOSG.A.BloodgroupRH ?? 0;
                        model.StaffCategory = QryOSG.A.StaffCategory;
                        model.Nationality = QryOSG.A.Nationality ?? 0;
                        model.PhysicallyChallenged = QryOSG.A.PhysicallyChallenged == "No" ? 2 : QryOSG.A.PhysicallyChallenged == "Yes" ? 1 : 0;
                        model.Relationship = QryOSG.A.Relationship;
                        model.RelationshipName = QryOSG.A.RelationshipDetails;
                        model.RelatedIITMadras = QryOSG.A.RelatedIIT;
                        model.ApplicationEntryDate = QryOSG.A.ApplicationEntryDate;
                        model.ApplicationReceiveDate = QryOSG.A.ApplicationReceiveDate;
                        model.ConsolidatedPay = QryOSG.A.ConsolidatedPay ?? false;
                        model.Fellowship = QryOSG.A.Fellowship ?? false;
                        model.IITMPensionerCSIRStaff = QryOSG.A.IITMPensionerOrCSIRStaff ?? 0;
                        model.PPONo = QryOSG.A.PPONo;
                        model.CSIRStaff = QryOSG.A.CSIRStaffPayMode ?? 0;
                        model.MsPhd = QryOSG.A.MsPhd ?? false;
                        model.MsPhdType = QryOSG.A.MsPhdType;
                        model.PhdDetail = QryOSG.A.PhdDetail;
                        model.ProjectId = GetProjectId(QryOSG.A.ProjectNumber);
                        model.ProjectNumber = QryOSG.A.ProjectNumber;
                        model.DesignationId = QryOSG.A.DesignationId;
                        model.Medical = QryOSG.A.Medical ?? 0;
                        model.Appointmentstartdate = QryOSG.A.AppointmentStartdate;
                        model.AppointmentEndDate = QryOSG.A.AppointmentEnddate;
                        model.MedicalAmmount = QryOSG.A.MedicalAmmount ?? 0;
                        model.Salary = QryOSG.A.Salary ?? 0;
                        model.HRA = QryOSG.A.HRA ?? 0;
                        model.isHRA = QryOSG.A.isHaveHRA ?? false;
                        model.CommitmentAmount = QryOSG.A.CommitmentAmount ?? 0;
                        model.SalaryPayHigh = QryOSG.A.SalaryPayHigh;
                        //model.PIJustificationFilePath = QrySTE.A.PIJustificationDocument1;
                        model.BankAccountNo = QryOSG.A.BankAccountNumber;
                        model.BankName = QryOSG.A.BankName;
                        model.IFSCCode = QryOSG.A.IFSCCode;
                        model.isHaveGateScore = QryOSG.A.isHaveGateScore == true ? "Yes" : "No";
                        model.GateScore = QryOSG.A.GateScore ?? 0;
                        model.EmployeeWorkplace = QryOSG.A.EmployeeWorkplace;


                        model.CommiteeMemberId1 = QryOSG.A.CommitteeMember ?? 0;
                        model.CommiteeMemberId2 = QryOSG.A.CommitteeMembers ?? 0;
                        model.ChairpersonNameId = QryOSG.A.Chairperson ?? 0;
                        model.CommiteeMember1 = Common.GetPIName(QryOSG.A.CommitteeMember ?? 0);
                        model.CommiteeMember2 = Common.GetPIName(QryOSG.A.CommitteeMembers ?? 0);
                        model.ChairpersonName = Common.GetPIName(QryOSG.A.Chairperson ?? 0);
                        model.FlowofMail = QryOSG.A.NotetoPI == true ? "NP" : QryOSG.A.NotetoCommittee == true ? "NC" : QryOSG.A.NotetoDean == true ? "NDean" : "Nd";

                        model.EmergencyContactNo = QryOSG.A.EmergencyContact;
                        model.EmployeeId = QryOSG.A.EmployeersID;
                        model.ToMail = QryOSG.A.ToMail;
                        model.bcc = QryOSG.A.bcc;
                        if (QryOSG.A.NotetoCMAdmin == true)
                            model.FlowApprover = "CMAdmin";
                        if (QryOSG.A.NotetoDean == true)
                            model.FlowApprover = "NDean";
                        model.ApplicationRefNo = QryOSG.A.RefNumber;
                        model.AutoFillRequstedbyPI = Common.GetPIName(QryOSG.A.RequestedBy ?? 0);
                        model.RequestedByPI = QryOSG.A.RequestedBy;
                        model.Comments = QryOSG.A.Comments;
                        model.PIJustificationRemarks = QryOSG.A.PICoPIComments + " , " + QryOSG.A.Remarks;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return model;
            }
        }
        #endregion
        #region RecuirmentCommitmentValidation
        public static bool CheckRCTCommitmentRequest(int id)
        {
            bool isvalidRequest = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var QryRecruitCommitReq = (from A in context.tblRCTCommitmentRequest
                                               where A.RecruitmentRequestId == id && A.Status == "Awaiting Commitment Booking"
                                               && (A.IsBookedFullRequestAmount == false || A.IsBookedFullRequestAmount == null)
                                               select new { A }).FirstOrDefault();
                    if (QryRecruitCommitReq != null)
                        isvalidRequest = true;
                }
                return isvalidRequest;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return isvalidRequest;
            }
        }
        #endregion
        public static List<MasterlistviewModel> GetHonororiumTdsSection()
        {
            List<MasterlistviewModel> list = new List<MasterlistviewModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from ah in context.tblAccountHead
                                 where ah.AccountGroupId == 15
                                 select new { ah.AccountHeadId, ah.AccountHead }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new MasterlistviewModel()
                            {
                                id = query[i].AccountHeadId,
                                name = query[i].AccountHead
                            });
                        }
                    }
                }
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }
        public static bool CheckPaymentFailedEmail(int boadraftId)
        {
            bool issendFailedEmail = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    issendFailedEmail = context.tblFailedEmail.Any(x => x.boaDraftId == boadraftId && x.IssendMail == false && x.FailedTypeofMail == 3);

                }
                return issendFailedEmail;
            }

            catch (Exception ex)
            {
                return issendFailedEmail;
            }
        }
        public static bool CheckUTRFailedEmail(int boadraftId)
        {
            bool issendFailedEmail = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    issendFailedEmail = context.tblFailedEmail.Any(x => x.boaDraftId == boadraftId && x.IssendMail == false && x.FailedTypeofMail == 2);

                }
                return issendFailedEmail;
            }

            catch (Exception ex)
            {
                return issendFailedEmail;
            }
        }
        #region CheckPostingProjectInvoice
        public static bool CheckBOAPostingProjectInvoice(int id)
        {
            bool IscheckedInvoice = false;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from pi in context.tblProjectInvoice
                                 where pi.InvoiceId == id && pi.Status == "Approval Pending"
                                 select pi).FirstOrDefault();
                    if (query != null)
                        IscheckedInvoice = true;
                }
                return IscheckedInvoice;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
    (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return IscheckedInvoice;
            }
        }
        #endregion
        #region CheckGstCreditDetail
        //public static bool CheckGSTCreditPostDetails(GSTCredit model)
        //{
        //    try
        //    {
        //        var gstidlist = model.CreditList.Where(x => x.CreditCheckBox == true).Select(x => x.Id).ToArray();
        //        using (var context = new IOASDBEntities())
        //        {
        //            var query = (from gs in context.tblGSTCreditDetails
        //                         where gstidlist.Contains(gs.Id ?? 0)
        //                       )
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //}
        #endregion
        public static string GetVendorBankDetails(int vendorid)
        {
            string VendorBankDetails = "";
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (from v in context.tblVendorMaster
                                 where v.VendorId == vendorid
                                 select v.BankName + "-" + v.AccountNumber).FirstOrDefault();
                    if (query != null)
                    {
                        VendorBankDetails = query;
                    }
                }
                return VendorBankDetails;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
      (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return VendorBankDetails;
            }
        }

       

        #region TSA
        public static string GetAgencyByProjectId(int projId)
        {
            using (var context = new IOASDBEntities())
            {
                var AgencyName = (from p in context.tblProject
                                  join a in context.tblAgencyMaster on p.SponsoringAgency equals a.AgencyId
                                  where p.ProjectId == projId
                                  select a.AgencyName).FirstOrDefault();

                return AgencyName;
            }
        }
        public static decimal? GetTotEditedValue(int projId, int aprvdId)
        {
            using (var context = new IOASDBEntities())
            {
                var TotEditedvalue = (from p in context.tblProjectROSummary
                                      join a in context.tblProjectROLog on p.RO_Id equals a.RO_Id 
                                      where (p.ProjectId == projId || a.RO_ProjectApprovalId == aprvdId)
                                      select a.RO_AddEditValue).Sum();
                return TotEditedvalue;
            }
        }

        public static decimal? GetTotNewValue(int projId, int aprvdId)
        {
            using (var context = new IOASDBEntities())
            {
                /*var TotNewvalue = (from p in context.tblProjectROSummary
                                   join a in context.tblProjectROLog on p.RO_Id equals a.RO_Id
                                   where (p.ProjectId == projId || a.RO_ProjectApprovalId == aprvdId)
                                   select a.RO_NewValue).Sum();*/
                var TotNewvalue = context.tblProjectROApprovalRequest.Where(x => x.RO_ProjectApprovalId == aprvdId).Select(x => x.RO_TotNewValue).FirstOrDefault();
                return TotNewvalue;
            }
            
        }
        /*View*/
        public static decimal? GetROTotNewValue(int projId, int aprvdId)
        {
            using (var context = new IOASDBEntities())
            {
                decimal? TotNewvalue = 0;
                var query = context.tblProjectROSummary.Where(m => m.ProjectId == projId && m.RO_ProjectApprovalId == aprvdId).FirstOrDefault();
                if (query != null)
                {
                    if (query.RO_Status == "Open")
                    {
                        TotNewvalue = (from p in context.tblProjectROSummary
                                       join a in context.tblProjectROLog on p.RO_Id equals a.RO_Id
                                       where (p.ProjectId == projId && a.RO_ProjectApprovalId == aprvdId && p.Is_TempRO != true && a.RO_LogStatus == "Open")
                                       select a.RO_NewValue).Sum();
                    }
                    else
                        TotNewvalue = (from p in context.tblProjectROSummary
                                       join a in context.tblProjectROLog on p.RO_Id equals a.RO_Id
                                       where (p.ProjectId == projId && a.RO_ProjectApprovalId == aprvdId && p.Is_TempRO != true && (a.RO_LogStatus == "Active" || a.RO_LogStatus == "Submit for approval"))
                                       select a.RO_NewValue).Sum();
                }
                return TotNewvalue;
            }
        }
        /*View*/
        public static decimal? GetTempROTotNewValue(int projId, int aprvdId)
        {
            using (var context = new IOASDBEntities())
            {
                decimal? TotNewvalue = 0;
                var query = context.tblProjectROSummary.Where(m => m.ProjectId == projId && m.RO_ProjectApprovalId == aprvdId);
                if (query != null)
                {
                    if (!String.IsNullOrEmpty(query.FirstOrDefault().RO_Status)){ 

                    if (query.FirstOrDefault().RO_Status == "Open")
                    {
                        TotNewvalue = (from p in context.tblProjectROSummary
                                       join a in context.tblProjectROLog on p.RO_Id equals a.RO_Id
                                       where (p.ProjectId == projId && a.RO_ProjectApprovalId == aprvdId && p.Is_TempRO == true && a.RO_LogStatus == "Open")
                                       select a.RO_NewValue).Sum();
                    }
                    else
                        TotNewvalue = (from p in context.tblProjectROSummary
                                       join a in context.tblProjectROLog on p.RO_Id equals a.RO_Id
                                       where (p.ProjectId == projId && a.RO_ProjectApprovalId == aprvdId && p.Is_TempRO == true && (a.RO_LogStatus == "Active" || a.RO_LogStatus == "Submit for approval"))
                                       select a.RO_NewValue).Sum();
                    }
                }
                return TotNewvalue;
            }
        }
        /*To get the RONumber by ROId*/
        public static string GetRONumber(int ROId)
        {
            string RONumber = "";
            using (var context = new IOASDBEntities())
            {
                RONumber = (from p in context.tblProjectROSummary
                            where p.RO_Id == ROId
                            select p.RO_Number).FirstOrDefault();
            }
            return RONumber;
        }

        /*To get Temp RO details while creating RO*/
        public static RODetailsListModel getTempRODetails(int projectId, int aprvdId)
         {
            RODetailsListModel tempROModel = new RODetailsListModel();

            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (aprvdId == 0 && projectId > 0)
                        {

                            var query = (from RO in context.tblProjectROSummary
                                         join ROLog in context.tblProjectROLog on RO.RO_Id equals ROLog.RO_Id
                                         where RO.ProjectId == projectId 
                                         && (RO.Is_Active != false && RO.Is_TempRO == true)
                                         select new { RO.RO_Id, RO.RO_Number, ROLog.RO_ExistingValue, ROLog.RO_AddEditValue, ROLog.RO_NewValue, RO.RO_Status, RO.RO_ProjectValue }).FirstOrDefault();
                            if (query != null)
                            { 
                                tempROModel.TempRONumber = query.RO_Number;
                                tempROModel.ExistingValue = query.RO_ProjectValue;
                                tempROModel.EditedValue = 0;
                                tempROModel.NewValue = query.RO_NewValue;
                                tempROModel.RO_Id = query.RO_Id;
                                tempROModel.Status = query.RO_Status;
                            }
                        }
                        else
                        {
                            var query = (from RO in context.tblProjectROSummary
                                         join ROLog in context.tblProjectROLog on RO.RO_Id equals ROLog.RO_Id
                                         where //RO.ProjectId == projectId && 
                                         ROLog.RO_ProjectApprovalId == aprvdId //&& ROLog.RO_LogStatus == "Open"
                                         && (RO.Is_Active != false && RO.Is_TempRO == true)
                                         select new { RO.RO_Id, RO.RO_Number, ROLog.RO_ExistingValue, ROLog.RO_AddEditValue, ROLog.RO_NewValue,RO.RO_Status }).FirstOrDefault();
                            if(query != null)
                            { 
                                tempROModel.TempRONumber = query.RO_Number;
                                tempROModel.ExistingValue = query.RO_ExistingValue;
                                tempROModel.EditedValue = query.RO_AddEditValue;
                                tempROModel.NewValue = query.RO_NewValue;
                                tempROModel.RO_Id = query.RO_Id;
                                tempROModel.Status = query.RO_Status;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return tempROModel;
                    }
                }
            }

            return tempROModel;
        }

        /*To get RO details while updating RO*/
        public static List<RODetailsListModel> getRoDetails(int ProjId, int aprvdId)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    List<RODetailsListModel> RODetails = new List<RODetailsListModel>();
                    try
                    {
                        if (aprvdId == 0 && ProjId > 0)
                        {

                            var roAprvId = (from id in context.tblProjectROApprovalRequest
                                            join RO in context.tblProjectROSummary on id.RO_ProjectApprovalId equals RO.RO_ProjectApprovalId
                                            where RO.ProjectId == ProjId
                                            orderby id.Crtd_TS descending
                                            select id.RO_ProjectApprovalId).ToList();
                            /*To Show */
                            if (roAprvId != null)
                            {
                                //foreach (var item in roAprvId)
                                //{
                                RODetails = (from RO in context.tblProjectROSummary
                                             join ROLog in context.tblProjectROLog on RO.RO_Id equals ROLog.RO_Id
                                             where roAprvId.Contains(ROLog.RO_ProjectApprovalId ?? 0) //&& ROLog.RO_LogStatus == "Active"
                                                 && RO.Is_Active != false && RO.Is_TempRO != true
                                             select new
                                             {
                                                 RO.RO_Id,
                                                 RO.RO_ProjectValue,
                                                 ROLog.RO_ExistingValue,
                                                 ROLog.RO_AddEditValue,
                                                 ROLog.RO_NewValue,
                                                 ROLog.RO_LogStatus,
                                                 RO.RO_Status,
                                                 RO.RO_Number,
                                                 RO.Is_TempRO
                                             }).AsEnumerable()
                                                .Select((x) => new RODetailsListModel()
                                                {
                                                    RO_Id = x.RO_Id,
                                                    RONumber = x.RO_Number,
                                                    EditedValue = 0,
                                                    //ExistingValue = x.RO_AddEditValue,
                                                    ExistingValue = x.RO_ExistingValue + x.RO_AddEditValue,
                                                    NewValue = x.RO_NewValue,
                                                    Status = x.RO_Status
                                                }).ToList();
                                //}
                            }
                            else
                            {
                                /* RODetails = (from ROLog in context.tblProjectROLog
                                              join RO in context.tblProjectROSummary on ROLog.RO_ProjectApprovalId equals RO.RO_ProjectApprovalId
                                              where ROLog.RO_ProjectApprovalId == roAprvId
                                              && RO.Is_Active != false && RO.Is_TempRO != true
                                              select new
                                              {
                                                  RO.RO_Id,
                                                  RO.RO_ProjectValue,
                                                  ROLog.RO_ExistingValue,
                                                  ROLog.RO_AddEditValue,
                                                  ROLog.RO_NewValue,
                                                  ROLog.RO_LogStatus,
                                                  RO.RO_Status,
                                                  RO.RO_Number,
                                                  RO.Is_TempRO
                                              }).AsEnumerable()
                                             .Select((x) => new RODetailsListModel()
                                             {
                                                 RO_Id = x.RO_Id,
                                                 RONumber = x.RO_Number,
                                                 EditedValue = 0,
                                                 ExistingValue = x.RO_ExistingValue,
                                                 NewValue = x.RO_NewValue,
                                                 Status = x.RO_Status
                                             }).ToList();*/
                            }
                        }
                        else
                        {
                            /*Fill data for edit*/
                            RODetails = (from RO in context.tblProjectROSummary
                                         join ROLog in context.tblProjectROLog on RO.RO_Id equals ROLog.RO_Id
                                         where ROLog.RO_ProjectApprovalId == aprvdId && ROLog.RO_LogStatus == "Open"
                                         //&& RO.ProjectId == ProjId 
                                         && (RO.Is_Active != false && RO.Is_TempRO != true)
                                         select new
                                         {
                                             ROLog.RO_Id,
                                             ROLog.RO_ExistingValue,
                                             ROLog.RO_AddEditValue,
                                             ROLog.RO_NewValue,
                                             ROLog.RO_LogStatus,
                                             RO.RO_Number
                                             //RO.Is_TempRO
                                         }).AsEnumerable()
                                        .Select((x) => new RODetailsListModel()
                                        {
                                            RO_Id = x.RO_Id,
                                            RONumber = x.RO_Number,
                                            EditedValue = x.RO_AddEditValue,
                                            ExistingValue = x.RO_ExistingValue,
                                            //ExistingValue = x.RO_ExistingValue + x.RO_AddEditValue,
                                            NewValue = x.RO_NewValue,
                                            Status = x.RO_LogStatus
                                        }).ToList();
                        }
                    }
                    catch (Exception ex)
                    {

                        transaction.Rollback();
                        return RODetails;
                    }
                    return RODetails;
                }
            }

        }

        /*View*/
        public static List<RODetailsListModel> getRoViewDetails(int ProjId, int aprvdId)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    List<RODetailsListModel> RODetails = new List<RODetailsListModel>();
                    try
                    {
                        var query = context.tblProjectROSummary.Where(m => m.ProjectId == ProjId && m.RO_ProjectApprovalId == aprvdId );

                        if (query != null && query.FirstOrDefault().RO_Status == "Open")
                        {
                            RODetails = (from RO in context.tblProjectROSummary
                                          join ROLog in context.tblProjectROLog on RO.RO_Id equals ROLog.RO_Id
                                          where ROLog.RO_ProjectApprovalId == aprvdId && ROLog.RO_LogStatus == "Open"
                                          //&& RO.ProjectId == ProjId  Roids.Contains(ROLog.RO_Id)
                                          && (RO.Is_Active != false && RO.Is_TempRO != true)
                                          select new
                                          {
                                              ROLog.RO_Id,
                                              ROLog.RO_ExistingValue,
                                              ROLog.RO_AddEditValue,
                                              ROLog.RO_NewValue,
                                              ROLog.RO_LogStatus,
                                              RO.RO_Number
                                              //RO.Is_TempRO
                                          }).AsEnumerable()
                                            .Select((x) => new RODetailsListModel()
                                            {
                                                RO_Id = x.RO_Id,
                                                RONumber = x.RO_Number,
                                                EditedValue = x.RO_AddEditValue,
                                                ExistingValue = x.RO_ExistingValue,
                                                NewValue = x.RO_NewValue,
                                                Status = x.RO_LogStatus
                                            }).ToList();
                        }
                        else
                        {
                            /*Future reference
                             * var Roids = context.tblProjectROApprovalRequest.Where(x => x.RO_ProjectApprovalId == aprvdId).FirstOrDefault().
                               RO_Id_List.Split(',').Select(int.Parse).
                               ToList();
                            var RODetailquerys = (from RO in context.tblProjectROSummary
                                                  join ROLog in context.tblProjectROLog on RO.RO_Id equals ROLog.RO_Id 
                                                  where ROLog.RO_ProjectApprovalId == aprvdId && ROLog.RO_LogStatus == "Active"
                                                  //&& RO.ProjectId == ProjId  Roids.Contains(ROLog.RO_Id)
                                                  && (RO.Is_Active != false && RO.Is_TempRO != true)
                                                  select new
                                                  {
                                                      ROLog.RO_Id,
                                                      ROLog.RO_ExistingValue,
                                                      ROLog.RO_AddEditValue,
                                                      ROLog.RO_NewValue,
                                                      ROLog.RO_LogStatus,
                                                      RO.RO_Number
                                                      //RO.Is_TempRO
                                                  });*/
                         RODetails = (from RO in context.tblProjectROSummary
                                      join ROLog in context.tblProjectROLog on RO.RO_Id equals ROLog.RO_Id
                                      where ROLog.RO_ProjectApprovalId == aprvdId //&& ROLog.RO_LogStatus == "Active"
                                      //&& RO.ProjectId == ProjId  Roids.Contains(ROLog.RO_Id)
                                      && (RO.Is_Active != false && RO.Is_TempRO != true)
                                      select new
                                      {
                                          ROLog.RO_Id,
                                          ROLog.RO_ExistingValue,
                                          ROLog.RO_AddEditValue,
                                          ROLog.RO_NewValue,
                                          ROLog.RO_LogStatus,
                                          RO.RO_Number
                                          //RO.Is_TempRO
                                      }).AsEnumerable()
                                               .Select((x) => new RODetailsListModel()
                                               {
                                                   RO_Id = x.RO_Id,
                                                   RONumber = x.RO_Number,
                                                   EditedValue = x.RO_AddEditValue,
                                                   ExistingValue = x.RO_ExistingValue,
                                                   NewValue = x.RO_NewValue,
                                                   Status = x.RO_LogStatus
                                               }).ToList();
                                                                
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                    return RODetails;
                }
            }
        }

        /* Update both table with updated. 
            * tblProjectROSummary : ProjectValue = RO_AddEditValue
            * tblProjectROLog :(once Active) RO_ExistingValue  : edited value  and RO_AddEditValue - RO_ExistingValue + edited value */

    public static decimal UpdateROSummaryLog(int projId, int ROApprovalId)
        {
            decimal amt = 0;
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        var query = context.tblProjectROSummary.Where(m => m.ProjectId == projId && m.RO_ProjectApprovalId == ROApprovalId && m.RO_Status == "Active");
                        var queryROLog = context.tblProjectROLog.Where(m => m.RO_ProjectApprovalId == ROApprovalId && m.RO_LogStatus == "Active").OrderBy(m => m.Uptd_TS).ToList();
                        if (query != null && queryROLog != null)
                        {
                            //query.RO_ProjectValue = queryROLog.FirstOrDefault().RO_NewValue ?? 0;
                            foreach (var log in queryROLog)
                            {
                                foreach (var roSum in (query.ToList().Where(t => t.RO_Id == log.RO_Id)))
                                {
                                    roSum.RO_ProjectValue = log.RO_NewValue ?? 0;
                                    
                                }
                            }
                            context.SaveChanges();
                        }
                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Infrastructure.IOASException.Instance.HandleMe(
                           (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                        transaction.Rollback();
                        throw ex;
                    }
                    return amt;
                }
            }
        }

        public static List<ProjectlistviewModel> getProjectNumberByBankId(int bankHead)
        {
            try
            {
                List<ProjectlistviewModel> List = new List<ProjectlistviewModel>();
                using (var context = new IOASDBEntities())
                {

                    var qryProjectNo = (from C in context.tblProject where C.Status == "Active" && C.BankID == bankHead select new { C.ProjectId, C.ProjectNumber, C.ProjectFundingCategory }).ToList();
                    if (qryProjectNo.Count > 0)
                    {
                        for (int i = 0; i < qryProjectNo.Count; i++)
                        {
                            List.Add(new ProjectlistviewModel()
                            {
                                id = qryProjectNo[i].ProjectId,
                                name = qryProjectNo[i].ProjectNumber,
                                ProjectFundingcategory = (int)qryProjectNo[i].ProjectFundingCategory
                            });
                        }
                    }
                }
                return List;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<ProjectlistviewModel> List = new List<ProjectlistviewModel>();
                return List;
            }

        }

        public static List<CodeControllistviewModel> getprojecttypeByBankId(int BankHeadId)
        {
            try
            {

                List<CodeControllistviewModel> Projecttype = new List<CodeControllistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join cc in context.tblCodeControl on C.ProjectType equals cc.CodeValAbbr
                                 where C.Status == "Active" && C.BankID == BankHeadId
                                 select cc).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Projecttype.Add(new CodeControllistviewModel()
                            {
                                CodeName = query[i].CodeName,
                                codevalAbbr = query[i].CodeValAbbr,
                                CodeValDetail = query[i].CodeValDetail
                            });
                        }
                    }
                }

                return Projecttype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
   (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                return null;
            }

        }
      
  //public static Tuple<string, string> GetVerifyAadharPan(int STEId, string aadharnumber, string PanNo, string ApplicationNo, string EmployeeNumber)
  //      {
  //          var chkemployeeadhar = "";
  //          var chkemployeepanno = "";
  //          try
  //          {
  //              string application = (STEId < 0 && ApplicationNo == null || STEId < 0 && string.IsNullOrEmpty(ApplicationNo)) ? null : ApplicationNo;
  //              chkemployeeadhar = (aadharnumber!= null || aadharnumber != "") ? Common.CheckPreviousEmployeeAdharserver(Convert.ToString(aadharnumber), application, true, EmployeeNumber, "OSG") : "Success";
  //              chkemployeepanno = (PanNo != null || PanNo != "") ? Common.CheckPreviousEmployeePanserver(PanNo, application, true, EmployeeNumber, "OSG") : "Success";
  //              if (chkemployeeadhar=="")chkemployeeadhar= "Success";
  //              if (chkemployeepanno== "")chkemployeepanno="Success";
  //              return Tuple.Create(chkemployeeadhar,chkemployeepanno);
  //          }
  //          catch (Exception ex)
  //          {
  //              throw ex;
  //          }

  //      }
        public static Tuple<string, string> GetVerifyAadharPan(int STEId, string aadharnumber, string PanNo, string ApplicationNo, string EmployeeNumber)
        {
            var chkemployeeadhar = "";
            var chkemployeepanno = "";
            try
            {
                string application = (STEId < 0 && ApplicationNo == null || STEId < 0 && string.IsNullOrEmpty(ApplicationNo)) ? null : ApplicationNo;
                chkemployeeadhar = (aadharnumber != null || aadharnumber != "") ? Common.CheckPreviousEmployeeAdharserver(Convert.ToString(aadharnumber), application, true, EmployeeNumber, "OSG") : "Success";
                chkemployeepanno = (PanNo != null || PanNo != "") ? Common.CheckPreviousEmployeePanserver(PanNo, application, true, EmployeeNumber, "OSG") : "Success";
                if (chkemployeeadhar == "" || aadharnumber == "") chkemployeeadhar = "Success";
                if (chkemployeepanno == "" || PanNo == "") chkemployeepanno = "Success";
                return Tuple.Create(chkemployeeadhar, chkemployeepanno);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        public static Tuple<string, string> GetnextVerifyAadharPan(int STEId, string aadharnumber, string PanNo, string AppicationNo, string EmployeeNumber)
        {
            var chkemployeeadhar = "";
            var chkemployeepanno = "";
            try
            {
                string application = (STEId < 0 && AppicationNo == null || STEId < 0 && string.IsNullOrEmpty(AppicationNo)) ? null : AppicationNo;
                chkemployeeadhar = (aadharnumber != null || aadharnumber != "") ? Common.CheckPreviousEmployeeAdharserver(Convert.ToString(aadharnumber), application, true, EmployeeNumber, "OSG") : "Success";
                chkemployeepanno = (PanNo != null || PanNo != "") ? Common.CheckPreviousEmployeePanserver(PanNo, application, true, EmployeeNumber, "OSG") : "Success";
                if (chkemployeeadhar == "") chkemployeeadhar = "Success";
                if (chkemployeepanno == "") chkemployeepanno = "Success";
                return Tuple.Create(chkemployeeadhar, chkemployeepanno);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        #endregion

        #region ConsultantMaster
        public static List<MasterlistviewModel> GetConsultantCategory()
        {
            try
            {
                List<MasterlistviewModel> agencytype = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from AT in context.tblCodeControl
                                 where (AT.CodeName == "ConsultantCategory")
                                 select new { AT.CodeValAbbr, AT.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            agencytype.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return agencytype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> agencytype = new List<MasterlistviewModel>();
                return agencytype;
            }
        }

        public static List<MasterlistviewModel> GetConsultantNationality()
        {
            try
            {
                List<MasterlistviewModel> agencytype = new List<MasterlistviewModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = (from AT in context.tblCodeControl
                                 where (AT.CodeName == "ConsultantNationality")
                                 select new { AT.CodeValAbbr, AT.CodeValDetail }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            agencytype.Add(new MasterlistviewModel()
                            {
                                id = query[i].CodeValAbbr,
                                name = query[i].CodeValDetail
                            });
                        }
                    }
                }
                return agencytype;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<MasterlistviewModel> agencytype = new List<MasterlistviewModel>();
                return agencytype;
            }
        }

        public static List<ConsultantMaster> GetConsultantMasterList()
        {
            try
            {

                List<ConsultantMaster> list = new List<ConsultantMaster>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblRCTConsultantMaster
                                 orderby C.Consultant_EmpId
                                 where C.Status == "Open"
                                 select new { C.Consultant_EmpId, C.Consultant_MasterId }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            list.Add(new ConsultantMaster()
                            {
                                Consultant_EmpId = query[i].Consultant_EmpId,
                                Consultant_MasterId = query[i].Consultant_MasterId,
                            });
                        }
                    }
                }

                return list;
            }
            catch (Exception ex)
            {
                Infrastructure.IOASException.Instance.HandleMe(
 (object)System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName, ex);
                List<ConsultantMaster> list = new List<ConsultantMaster>();
                return list;
            }

        }

        public static string CheckPreviousMasterGSTNumber(string GSTno)
        {
            string isalreadyEmp = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.tblRCTConsultantMaster
                                      where cc.GSTIN.Contains(GSTno)

                                      orderby cc.Consultant_MasterId descending
                                      select new { cc.Status, cc.Consultant_EmpId, cc.Consultant_MasterId, cc.GSTIN }).FirstOrDefault();
                    if (checkquery != null)
                    {
                        isalreadyEmp = checkquery.Consultant_EmpId;
                    }
                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return isalreadyEmp;
            }
        }

        public static string CheckTINNumber(string Tinno)
        {
            string isalreadyEmp = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.tblRCTConsultantMaster
                                      where cc.Consultant_TIN.Contains(Tinno)

                                      orderby cc.Consultant_MasterId descending
                                      select new { cc.Status, cc.Consultant_EmpId, cc.Consultant_MasterId, cc.Consultant_TIN }).FirstOrDefault();
                    if (checkquery != null)
                    {
                        isalreadyEmp = checkquery.Consultant_TIN;
                    }
                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return isalreadyEmp;
            }
        }

        public static string CheckConsultantEmployeePan(string Panno, string GST, string EmpID)
        {
            string isalreadyEmp = string.Empty;

            try
            {
                using (var context = new IOASDBEntities())
                {
                    if ((Panno != "" && Panno != null) && (GST == "" || GST == null))
                    {
                        var checkquery4 = (from cc in context.vwConsultantMasterPanNo
                                           where cc.PANNo.Contains(Panno) && (cc.GSTIN != null || cc.GSTIN == null) //&& cc.Type != "Consultant"
                                           select new { cc.PANNo, cc.GSTIN, cc.EmpId }).FirstOrDefault();
                        if (checkquery4.PANNo != null)
                        {
                            return isalreadyEmp = checkquery4.EmpId;
                        }
                    }
                    if ((Panno != "" && Panno != null) && (GST != "" && GST != null))
                    {

                        var checkquery = (from cc in context.vwConsultantMasterPanNo
                                          where cc.PANNo.Contains(Panno) //&& cc.Type != "Consultant"
                                          select new { cc.PANNo, cc.GSTIN, cc.EmpId }).FirstOrDefault();
                        var checkquery2 = (from cc in context.vwConsultantMasterPanNo
                                           where cc.GSTIN.Contains(GST) //&& cc.Type != "Consultant"
                                           select new { cc.PANNo, cc.GSTIN, cc.EmpId }).FirstOrDefault();
                        if (checkquery2 != null)
                        {
                            if (checkquery2.GSTIN != null && checkquery2.GSTIN != "")
                            {
                                return isalreadyEmp = checkquery2.EmpId;
                            }
                        }
                        //else
                        //{
                        //    //return isalreadyEmp = checkquery2.EmpId;
                        //    return isalreadyEmp = "GST";
                        //}

                        if (checkquery.PANNo != null)
                        {
                            var checkquery1 = (from cc in context.vwConsultantMasterPanNo
                                               where cc.PANNo.Contains(Panno) && cc.GSTIN == null && cc.EmpId != EmpID//&& cc.Type != "Consultant"
                                               select new { cc.PANNo, cc.GSTIN, cc.EmpId }).FirstOrDefault();
                            if (checkquery1 != null)
                            {
                                return isalreadyEmp = checkquery1.EmpId;
                            }
                        }
                    }

                    //if(Panno != "" && Panno != null)
                    //{
                    //    var checkquery = (from cc in context.vwConsultantMasterPanNo
                    //                      where cc.PANNo.Contains(Panno) //&& cc.GSTIN.Contains(GST) == null
                    //                      select new { cc.PANNo,cc.GSTIN, cc.EmpId }).FirstOrDefault();
                    //    if (checkquery != null)
                    //    {
                    //        //var checkquery = (from cc in context.vwConsultantMasterPanNo
                    //        //                  where cc.PANNo.Contains(Panno) //&& cc.GSTIN.Contains(GST) == null
                    //        //                  select new { cc.PANNo, cc.GSTIN }).FirstOrDefault();
                    //        if(GST=="")
                    //        {
                    //            GST = null;
                    //            var GStINcheck = (from cc in context.vwConsultantMasterPanNo
                    //                              where cc.PANNo.Contains(Panno) && cc.GSTIN.Contains(GST) == null
                    //                              select new { cc.PANNo, cc.GSTIN, cc.EmpId }).FirstOrDefault();
                    //            if (GStINcheck.PANNo != null)
                    //            {
                    //                isalreadyEmp = checkquery.EmpId;
                    //            }
                    //            //if (GStINcheck.GSTIN != null)
                    //            //{
                    //            //    isalreadyEmp = checkquery.GSTIN;
                    //            //}
                    //        }
                    //        else
                    //        {
                    //            var GStINcheck = (from cc in context.vwConsultantMasterPanNo
                    //                              where cc.PANNo.Contains(Panno) && cc.GSTIN.Contains(GST)
                    //                              select new { cc.PANNo, cc.GSTIN, cc.EmpId }).FirstOrDefault();
                    //            if (GStINcheck != null)
                    //            {
                    //                if (GStINcheck.PANNo != null)
                    //                {
                    //                    isalreadyEmp = checkquery.EmpId;
                    //                }
                    //            }
                    //            else
                    //            {
                    //                isalreadyEmp = "";
                    //            }


                    //        }


                    //    }
                    //    else
                    //    {
                    //        isalreadyEmp = "";
                    //    }
                    //}


                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return isalreadyEmp;
            }
        }

        public static string CheckUpdateConsultantEmployeePan(string Panno, string GST)
        {
            string isalreadyEmp = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (GST != "" && GST != null)
                    {
                        var checkquery = (from cc in context.vwConsultantMasterPanNo
                                          where cc.PANNo.Contains(Panno) && cc.GSTIN.Contains(GST) && cc.Type != "Consultant"
                                          select new { cc.PANNo }).FirstOrDefault();
                        if (checkquery != null)
                        {
                            isalreadyEmp = checkquery.PANNo;
                        }
                    }
                    //else
                    //{
                    //    var checkquery = (from cc in context.vwConsultantMasterPanNo
                    //                      where cc.PANNo.Contains(Panno) && cc.Type != "Consultant"
                    //                      select new { cc.PANNo }).FirstOrDefault();
                    //    if (checkquery != null)
                    //    {
                    //        isalreadyEmp = checkquery.PANNo;
                    //    }
                    //}

                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return isalreadyEmp;
            }
        }

        public static List<AutoCompleteModel> GetAutoCompleteConsultantServiceList(string term, int? type = null)
        {
            try
            {

                List<AutoCompleteModel> list = new List<AutoCompleteModel>();

                using (var context = new IOASDBEntities())
                {
                    list = (from P in context.tblRCTConsultantEntry
                            where P.Consultant_ServiceNo.Contains(term) && P.Consultant_Status == "Completed"


                            orderby P.Consultant_ServiceNo
                            select new AutoCompleteModel()
                            {
                                value = P.Consultant_AppointmentId.ToString(),
                                label = P.Consultant_ServiceNo
                            }).ToList();
                    //select new
                    //        {
                    //            P.Consultant_MasterId,
                    //            P.Consultant_ServiceNo

                    //        })
                    //        .AsEnumerable()
                    //.Select((x, index) => new AutoCompleteModel()
                    //{
                    //    value = x.Consultant_MasterId.ToString(),
                    //    label = x.Consultant_ServiceNo
                    //}).ToList();

                }

                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }

        }

        #endregion

        public static string CheckPreviousGSTNumber(string GSTno)
        {
            string isalreadyEmp = string.Empty;
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var checkquery = (from cc in context.tblRCTConsultantEntry
                                      where cc.Consultant_GSTIN.Contains(GSTno)

                                      orderby cc.Consultant_MasterId descending
                                      select new { cc.Consultant_Status, cc.Consultant_EmpNo, cc.Consultant_MasterId, cc.Consultant_GSTIN }).FirstOrDefault();
                    if (checkquery != null)
                    {
                        isalreadyEmp = checkquery.Consultant_EmpNo;
                    }
                }
                return isalreadyEmp;
            }
            catch (Exception ex)
            {
                return isalreadyEmp;
            }
        }

        #region Consultant New Entry
        public static List<AutoCompleteModel> GetAutoCompleteRCTCONEmployee(string term, string apptype = null)
        {
            try
            {
                List<AutoCompleteModel> list = new List<AutoCompleteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from cm in context.tblRCTConsultantMaster
                            where (string.IsNullOrEmpty(term) || cm.Consultant_EmpId.Contains(term))
                            && (cm.Status != "InActive" && cm.Status != "Open") && cm.IsActiveNow == true
                            select new
                            {
                                Consultant_EmpId = cm.Consultant_EmpId
                            })
                            .Distinct()
                            .AsEnumerable()
                            .Select((x, index) => new AutoCompleteModel()
                            {
                                value = x.Consultant_EmpId.ToString(),
                                label = x.Consultant_EmpId
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AutoCompleteModel>();
            }
        }
        public static ConsultantEmployeeEntry GetConsEmployeeDetails(string ConsID = null)
        {
            ConsultantEmployeeEntry ConsModel = new ConsultantEmployeeEntry();
            List<ConsultantMaster> ConsModel1 = new List<ConsultantMaster>();
            using (var context = new IOASDBEntities())
            {
                if (ConsID != null)
                {
                    var querycons = (from cm in context.tblRCTConsultantMaster
                                     join cc in context.tblCodeControl on cm.Consultant_Nationality equals cc.CodeValAbbr
                                     join cc1 in context.tblCodeControl on cm.Consultant_Category equals cc1.CodeValAbbr
                                     where cm.Consultant_EmpId == ConsID
                                     && cc.CodeName == "ConsultantNationality" && cc1.CodeName == "ConsultantCategory"
                                     select new { cm.Consultant_Name, cm.Consultant_EmpType, cm.Consultant_MasterId, cm.GSTIN, cc, cc1 }).FirstOrDefault();
                    if (querycons != null)
                    {
                        ConsModel.Consultant_Name = querycons.Consultant_Name;
                        ConsModel1.Add(new ConsultantMaster()
                        {
                            Consultant_EmpType = querycons.Consultant_EmpType
                        });
                        ConsModel.ConsultantMasterList = ConsModel1;
                        ConsModel.Consultant_Type = querycons.cc1.CodeValDetail + "-" + querycons.cc.CodeValDetail;
                        ConsModel.Consultant_EmpType = querycons.Consultant_EmpType;
                        ConsModel.Consultant_MasterId = querycons.Consultant_MasterId;
                        ConsModel.Consultant_GSTIN = querycons.GSTIN;
                    }
                }
            }
            return ConsModel;
        }
        #endregion


    }
}



