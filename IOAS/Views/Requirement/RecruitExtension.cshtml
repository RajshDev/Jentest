@model IOAS.Models.OrderModel
@using IOAS.GenericServices
@{
    ViewBag.Title = "Extension";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
    <link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
    string Remark = RequirementService.GetRejectCommitment(Model.ApplicationNo, Model.OrderID);
}
<style>
    .modal-dialog {
        width: 850px;
    }

    .rt-tb-scrl {
        width: 100%;
        height: 400px;
        overflow: auto;
    }

    .tbl-style table, .tbl-style tr, .tbl-style td, .tbl-style th {
        border: 1px solid #000;
    }

    .tbl-style > .table {
        margin-top: 10px;
        margin-bottom: 10px;
        width: 85% !important;
        max-width: 100% !important;
        margin-left: 60px;
    }

    .tbl-style > .table-bordered > thead > tr > th {
        border: 1px solid #000;
        border-width: 1px 1px 0px 1px !important;
        width: 100px;
    }

    .tbl-style > .table-bordered > tbody > tr > th {
        border: 1px solid #000;
        border-width: 1px 1px 0px 1px !important;
    }

    .tbl-style > .table-bordered > thead > tr > th {
        border-bottom-width: 0px;
    }

    .tbl-style > .table.table-bordered > tbody > tr > td {
        border: 1px solid #000;
        border-width: 1px 1px 0px 1px !important;
        width: 100px;
    }

    .reg-no {
        z-index: 1 !important;
    }
</style>

@using (Html.BeginForm("RecruitExtension", "Requirement", FormMethod.Post, new { @class = "", role = "form", @id = "formExtension", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Extension</b></h4>
        </div>
    </div>

    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-2 ds-spl-bg">

            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    @Html.HiddenFor(m => m.ApplicationID)
                    @Html.HiddenFor(m => m.OrderID)
                    @Html.HiddenFor(m => m.OrderType)
                    @Html.HiddenFor(m => m.Status)
                    @Html.HiddenFor(m => m.TypeCode)
                    @Html.HiddenFor(m => m.VendorId)
                    @Html.HiddenFor(M => M.StatutoryId)
                    <span>Request Reference</span>
                    @Html.DropDownListFor(m => m.RequestReference, new SelectList(ViewBag.ReferenceType, "id", "name"), "Select", new { @class = "form-control" })
                    <div>@Html.ValidationMessageFor(m => m.RequestReference)</div>
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(M => M.ReferenceNo, new { @class = "form-control" })
                    <div>@Html.ValidationMessageFor(M => M.ReferenceNo)</div>
                    @*@Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control" })
                        <div>@Html.ValidationMessageFor(M => M.SourceReferenceNumber)</div>
                        @Html.Hidden("SourceTapalOrWorkflow", "True")*@
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>
            <div class="col-md-4">
            </div>
        </div>
    </div>

    <div class="row cust-tab">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">

                    <div class="row">
                        <div class="col-md-12">

                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">

                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Order Type</label><br />
                                                <h4>Extension</h4>
                                            </div>
                                        </div>
                                        @if (Model.ApplicationID > 0 && (Model.TypeCode == "STE" || Model.TypeCode == "OSG" || Model.TypeCode == "CON"))
                                        {
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Type of appointment </label>
                                                    <h4>@Html.DisplayFor(m => m.Typeofappointment)</h4>
                                                    @if (Model.TypeCode == "OSG")
                                                    {
                                                        @Html.DropDownListFor(m => m.TypeofappointmentId, new SelectList(ViewBag.Apptype, "id", "name"), "Select Appointment", new { @class = "form-control dis-none" })
                                                        @Html.DropDownListFor(m => m.PhysicallyChallenged, new SelectList(ViewBag.YesNo, "id", "name"), "Select", new { @class = "form-control dis-none", @id = "PhysicallyChallenged", @data_val = "false" })
                                                    }
                                                    else
                                                    {
                                                        @Html.HiddenFor(m => m.TypeofappointmentId)
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Pay Type</label>
                                                    <h4>@Html.DisplayFor(m => m.PayType)</h4>
                                                </div>
                                            </div>
                                        }
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Email ID</label>
                                                <h4>@Html.DisplayFor(m => m.Email)</h4>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Name </label>
                                                <h4 id="CantidateName">@Html.DisplayFor(m => m.Name)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Qualification</label>
                                                <h4>@Html.DisplayFor(m => m.Qualification)</h4>
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Other experience</label>
                                                <h4>
                                                    @Html.DisplayFor(m => m.Experience)
                                                </h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>M.S/Ph.D</label>
                                                    <h4>
                                                        @Html.CheckBoxFor(m => m.IsMsPhd, new { @Disabled = "Disabled" })
                                                    </h4>
                                                </div>
                                            </div>
                                            @if (Model.IsMsPhd)
                                            {
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Roll Number</label>
                                                        <h4>@Html.DisplayFor(m => m.PhdDetail)</h4>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Employee Id</label>
                                                <h4>@Html.DisplayFor(m => m.EmployeeID)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Contact No</label>
                                                <h4>@Html.DisplayFor(m => m.ContactNumber)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Date of Birth</label>
                                                <h4>@Html.DisplayFor(m => m.DateofBirth)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Age</label>
                                                <h4 id="Age">@Html.DisplayFor(m => m.Age)</h4>
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Gate Score</label>
                                                <h4>@Html.DisplayFor(m => m.GateScore)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label class="required">PI Letter </label>
                                                @Html.HiddenFor(M => M.InitByPI_f)
                                                @if (Model.OrderID > 0 && !string.IsNullOrEmpty(Model.PILetterPath))
                                                {
                                                    <input type="file" id="PILetter" name="PILetter">
                                                    @Html.ActionLink(Model.PILetterFileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.PILetterPath }, new { @name = "DocDownload", @target = "_blank" })
                                                    <div>@Html.ValidationMessage("PILetter")</div>
                                                }
                                                else if (Model.InitByPI_f == true)
                                                {
                                                    <input type="file" id="PILetter" name="PILetter">
                                                    <div>@Html.ValidationMessage("PILetter")</div>
                                                }
                                                else
                                                {
                                                    <input type="file" id="PILetter" name="PILetter" required>
                                                    <div>@Html.ValidationMessage("PILetter")</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Application ReceiveDate</label>
                                                @Html.EditorFor(m => m.ApplicationReceiveDate, new { @class = "form-control ", @required = "required" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicationReceiveDate)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>IITM Experience</label>
                                                <h4>@Html.DisplayFor(m => m.IITMExperience)</h4>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Salary</label>
                                                <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.Salary)</h4>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Number</label>
                                                    @if (Model.OrderID > 0)
                                                    {
                                                        <h4>@Html.DisplayFor(m => m.ProjectNumber)</h4>
                                                        @Html.HiddenFor(m => m.ProjectId)
                                                    }
                                                    else
                                                    {
                                                        <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectNumber)</h4>
                                                        @Html.Hidden("ProjectId", Model.OldPrjDetailModel.ProjectID)
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectTitle)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Name of the Client / Sponsoring Agency</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.SponsoringAgency)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Type</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectType)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIName)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4 id="lblProjectStartDate">@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectStartDate)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Closure Date</label>
                                                    <h4 id="lblProjectClosureDate">@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectClosureDate)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Code</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PICode)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Email ID</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.Email)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Phone No</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.Phone)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department code </label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIDepartmentCode)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIDepartmentName)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Appointment start date</label>
                                                            <h4 id="lblAppointmentStartDate">@Html.DisplayFor(m => m.OldPrjDetailModel.AppointmentStartDate)</h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Appointment End date</label>
                                                            <h4 id="lblAppointmentEndDate">@Html.DisplayFor(m => m.OldPrjDetailModel.AppointmentClosureDate)</h4>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation</label>
                                                    @if (Model.OrderID > 0)
                                                    {
                                                        <h4 id="Designation">@Html.DisplayFor(m => m.Designation)</h4>
                                                        @Html.HiddenFor(m => m.DesignationId)
                                                    }
                                                    else
                                                    {
                                                        <h4 id="Designation">@Html.DisplayFor(m => m.OldPrjDetailModel.Designation)</h4>
                                                        @Html.Hidden("DesignationId", Model.OldPrjDetailModel.DesignationId)
                                                    }
                                                    @Html.Hidden("DesignationMedicalamount", Model.MedicalAmmount)
                                                </div>
                                            </div>
                                            @if (Model.ApplicationID > 0 && (Model.TypeCode == "STE" || Model.TypeCode == "OSG"))
                                            {
                                                <div class="col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <label>Medical</label> <br>
                                                        <h4 id="MedicalText"></h4>
                                                        @Html.DropDownListFor(m => m.Medical, new SelectList(ViewBag.Medical, "id", "name"), "Select Medical", new { @class = "form-control dis-none", @data_val = "false" })
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Salary Level Range <i class="ion-information-circled" data-toggle="tooltip" data-original-title="" id="lblSalaryLevelDesription"></i></label>
                                                    <h4 id="lblSalaryLevel"></h4>
                                                    @Html.HiddenFor(m => m.SalaryLevelId)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Salary</label>
                                                    @if (Model.OrderID > 0)
                                                    {
                                                        if (Model.TypeCode == "OSG")
                                                        {
                                                            @Html.TextBoxFor(m => m.Salary, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off", @onchange = "FillSalaryCalcDetls();" })
                                                        }
                                                        else
                                                        {
                                                            @Html.TextBoxFor(m => m.Salary, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                        }
                                                        <div>@Html.ValidationMessageFor(m => m.Salary)</div>
                                                    }
                                                    else
                                                    {
                                                        if (Model.TypeCode == "OSG")
                                                        {
                                                            @Html.TextBox("Salary", Model.OldPrjDetailModel.Salary, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off", @onchange = "FillSalaryCalcDetls();" })
                                                        }
                                                        else
                                                        {
                                                            @Html.TextBox("Salary", Model.OldPrjDetailModel.Salary, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                        }
                                                        <div>@Html.ValidationMessage("Salary")</div>
                                                    }
                                                    @Html.Hidden("MinSalary", 0)
                                                    @Html.Hidden("MaxSalary", 0)
                                                    @if (Model.TypeCode == "OSG")
                                                    {
                                                        <a href="#" class="bl-bg-txt" onclick="salarycalcpopup();">Salary Calculation</a>       }
                                                </div>
                                            </div>
                                            @if (Model.ApplicationID > 0 && Model.TypeCode == "STE")
                                            {
                                                <div class="col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <label>HRA</label>
                                                        <h4 id="HRAText"></h4>
                                                        @if (Model.OrderID > 0)
                                                        {
                                                            @Html.TextBoxFor(m => m.HRA, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                            <div>@Html.ValidationMessageFor(m => m.HRA)</div>
                                                        }
                                                        else
                                                        {
                                                            @Html.TextBox("HRA", Model.OldPrjDetailModel.HRA, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                            <div>@Html.ValidationMessage("HRA")</div>
                                                        }
                                                        @Html.HiddenFor(m => m.isHRA)
                                                        @Html.HiddenFor(m => m.HRAPercentage)
                                                    </div>
                                                </div>
                                                <div class="col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <label>Medical Amount</label>
                                                        <h4 id="MedicalAmmountText">0</h4>
                                                        @Html.HiddenFor(m => m.MedicalAmmount)
                                                        @Html.HiddenFor(m => m.isMedical)
                                                    </div>
                                                </div>
                                            }
                                            else if (Model.ApplicationID > 0 && Model.TypeCode == "CON")
                                            {
                                                <div class="col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <label>GST</label>
                                                        @if (Model.OrderID > 0)
                                                        {
                                                            @Html.TextBoxFor(m => m.GST, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                            <div>@Html.ValidationMessageFor(m => m.GST)</div>
                                                        }
                                                        else
                                                        {
                                                            @Html.TextBox("GST", Model.OldPrjDetailModel.GST, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                            <div>@Html.ValidationMessage("GST")</div>
                                                        }
                                                        @Html.Hidden("IsGSTapplicable")
                                                        @Html.Hidden("OldGST", Model.OldPrjDetailModel.GST)
                                                    </div>
                                                </div>
                                            }
                                            <div class="col-md-3  reg-no custom-reg-no">
                                                <div class="form-group custom-form-group">
                                                    <label class="">Commitment Amount</label>
                                                    @Html.TextBoxFor(m => m.CommitmentAmount, new { @class = "form-control required", @readonly = "readonly" })
                                                    <div>@Html.ValidationMessageFor(m => m.CommitmentAmount)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Extension From Date</label>
                                                    <h4 id="txtExtensionfromdate"></h4>
                                                    @Html.HiddenFor(m => m.FromDate, new { @class = "required" })
                                                    <div>@Html.ValidationMessageFor(m => m.FromDate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Extension To Date</label>
                                                    @Html.EditorFor(m => m.ToDate, new { @class = "form-control required" })
                                                    <div>@Html.ValidationMessageFor(m => m.ToDate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Arrear till</label>
                                                    @Html.EditorFor(m => m.ArrearOrDeductionTillDate, new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Arrear Amount</label>
                                                    @Html.TextBoxFor(m => m.ArrearOrDeductionAmount, new { @class = "form-control", @readonly = "readonly" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Request received from PI</label>
                                                    @Html.TextBoxFor(m => m.AutoFillRequstedbyPI, new { @class = "form-control" })
                                                    @Html.HiddenFor(m => m.RequestedByPI)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Project Fund Availability</label>
                                                    <h4><a id="btnViewSummary" style="color:#ffffff;">Click Here...</a></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <label>PI Justification Document</label> <br>
                                                <div id="divPIJustification">
                                                    <input class="form-control mb-sm" id="PIJustificationFile_0" type="file" name="PIJustificationFile[0]" value="">
                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger mb-sm removeFile" style="margin-bottom: 10px;"><i class="ion-android-close"></i></a>
                                                </div>
                                                <a href="javascript:void(0)" id="btnAddFile" class="btn btn-success mt-20 mb20">Add New</a>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label>PI Justification Remarks</label>
                                                    @Html.TextAreaFor(m => m.PIJustificationRemarks, new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.PIJustificationRemarks)</div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="row cust-tab" style="display:none;">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row ">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Employee No: </label>
                                                <h4>@Html.DisplayFor(m => m.EmployeeID)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Candidate Name: </label>
                                                <h4>@Html.DisplayFor(m => m.Name)</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>PI Name:</label> <br>
                                                <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIName)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Department name:</label> <br>
                                                <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIDepartmentName)</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>M.S/Ph.D</label> <br>
                                                @if (Model.IsMsPhd)
                                                {
                                                    <h4>@Html.DisplayFor(m => m.PhdDetail)</h4>
                                                }
                                                else
                                                {
                                                    <h4>-</h4>
                                                }
                                            </div>
                                        </div>

                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Designation: </label>
                                                @if (Model.OrderID > 0)
                                                {
                                                    <h4>@Html.DisplayFor(m => m.Designation)</h4>
                                                }
                                                else
                                                {
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.Designation)</h4>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Qualification: </label>
                                                <h4>@Html.Raw(Model.Qualification)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Experience: </label>
                                                <h4>@Html.DisplayFor(m => m.Experience)</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Pay: </label>
                                                <h4 id="lblPay"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Medical:</label> <br>
                                                <h4 id="lblMedical"></h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>DOB </label>
                                                <h4>@Html.DisplayFor(m => m.DateofBirth)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group  ">
                                                <label>Application Received Date</label>
                                                <h4 id="lblReceivedDate">@Html.DisplayFor(m => m.ApplicationReceiveDate)</h4>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="row ">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                @if (Model.ConsolidatedPay)
                                                {
                                                    <input id="ConsolidatedPay1" name="ClConsolidatedPay" type="checkbox" checked disabled> <span>Consolidated pay </span><br>
                                                }
                                                @if (Model.Fellowship)
                                                {
                                                    <input id="FellowshipPay1" name="ClFellowship" type="checkbox" checked disabled> <span>Fellowship</span> <br>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group  mb-sm">
                                                <label>Staff Category</label>   <br>
                                                <h4>@Html.DisplayFor(m => m.staffcategory)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label>IITM Pensioner / CSIR Staff :</label>
                                                <h4>
                                                    @Html.DisplayFor(m => m.IITMPensionerCSIRStaff)
                                                </h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>PI Justification Document</label> <br>
                                                @if (Model.OrderID > 0 && Model.JustificationDoc != null)
                                                {
                                                    foreach (var item in Model.JustificationDoc)
                                                    {
                                                        if (item.FilePath != null)
                                                        {
                                                            if (item.FilePath != "")
                                                            {
                                                                <h4>
                                                                    @Html.ActionLink(item.FileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = item.FilePath }, new { @name = "DocDownload", @target = "_blank" })

                                                                    @if (Model.Status == "Draft" || Model.Status == "Open" || Model.Status.Contains("Note"))
                                                                    {

                                                                        <a class="rct-del-doc" value="@item.FilePath">Delete</a>
                                                                    }
                                                                </h4><br>
                                                            }
                                                        }
                                                    }
                                                }
                                                <div id="fileAppend">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group  ">
                                                <label>Comments </label>
                                                @Html.TextAreaFor(m => m.Comments, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Number</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectNumber)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectTitle)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Name of the Client / Sponsoring Agency</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.SponsoringAgency)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Type</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectType)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIName)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectStartDate)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Closure Date</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.ProjectClosureDate)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Code</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PICode)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Email ID</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.Email)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Phone No</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.Phone)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department code </label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIDepartmentCode)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.PIDepartmentName)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Medical</label> <br>
                                                    <h4 id="txtMedical"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation Code</label>
                                                    @if (Model.OrderID > 0)
                                                    {
                                                        <h4>@Html.DisplayFor(m => m.DesignationCode)</h4>
                                                    }
                                                    else
                                                    {
                                                        <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.DesignationCode)</h4>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation</label>
                                                    @if (Model.OrderID > 0)
                                                    {
                                                        <h4>@Html.DisplayFor(m => m.Designation)</h4>
                                                    }
                                                    else
                                                    {
                                                        <h4>@Html.DisplayFor(m => m.OldPrjDetailModel.Designation)</h4>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment start date</label>
                                                    <h4 id="lblAppStartDate"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment End date</label>
                                                    <h4 id="lblAppEndDate"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Commitment Amount</label>
                                                    <h4 id="lblCommitmentAmt"></h4>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Committee member</label>
                                                    @Html.TextBoxFor(m => m.CommiteeMember1, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.HiddenFor(m => m.CommiteeMemberId1)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Committee member</label>
                                                    @Html.TextBoxFor(m => m.CommiteeMember2, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.HiddenFor(m => m.CommiteeMemberId2)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label> Chairperson</label>
                                                    @Html.TextBoxFor(m => m.ChairpersonName, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.HiddenFor(m => m.ChairpersonNameId)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowofMail, "NP", new { @id = "IsNotePI" })<label class="ml-sm ">Send for PI Justification</label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowofMail, "Nd", new { @id = "IsNodeviation" })<label class="ml-sm ">No deviation</label>
                                                </div>
                                            </div>
                                            @if (Model.TypeCode == "OSG")
                                            {
                                                <div class="col-md-4">
                                                    <div class="form-group custom-form-group">
                                                        @Html.RadioButtonFor(m => m.SendSalaryStructure, "SST", new { @id = "IsSendSalaryStructure", @onclick = "checkuncheck(this)" }) <label class="ml-sm "> Send Pay Structure</label>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <div id="Deviation">

                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>

                    <div class="row">
                        <div class="col-md-6">
                        </div>
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-4" id="devCMAdmin">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowApprover, "CMAdmin", new { @id = "IsNotetoCMAdmin" })<label class="ml-sm ">Note to CM Admin</label>
                                                </div>
                                            </div>
                                            <div class="col-md-4" id="devNoteDean">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowApprover, "NDean", new { @id = "IsNotetoDean" })<label class="ml-sm " id="lblNoteDean">Note to Dean</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="text-center" style="margin-bottom: 50px;">
        <button type="button" class="btn btn-default" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
        <button type="button" class="btn btn-primary" id="nextBtn" onclick="nextPrev(1)">Next</button>
        @Html.HiddenFor(m => m.List_f)
        @if (!string.IsNullOrEmpty(Model.List_f))
        {
        <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action(Model.List_f,"Requirement")';">Close</button>
        }
        else
        {
        <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action("EmployeeMaster","Requirement")';">Close</button>
        }
    </div>

    <div id="dialogSalaryConfirm" class="modal fade scrl-table scrl-table-po-bl" role="dialog" data-backdrop="static" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header brd-bottom">
                    <button type="button" class="close" data-dismiss="modal">×</button>
                    <h4 class="modal-title">SALARY STRUCTURE</h4>
                </div>
                <div class="modal-body">
                    @*<div style="padding:10px;" id="divBcc">
                            <label>Carbon Copy(CC)</label>
                            <input name="bcc" type="text" class="form-control" id="bccList" />
                        </div>
                        <div style="padding:10px;overflow:auto" id="ShowDeviation">
                        </div>*@
                    <div class="tbl-style">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th colspan="4" class="text-left">
                                        <center><h4><b>PAY STRUCTURE</b></h4></center>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="text-left">
                                        <b>Recommended Consolidated Salary</b>
                                    </td>
                                    <td class="text-left">
                                        @*@Model.RecommendedSalary*@
                                        <h4 id="lblRecommendedSalary" class="txt-bold"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        PF Basic wages
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmpPFBasicWages*@
                                        <h4 id="lblEmpPFBasicWages"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        <b>Gross Salary</b>
                                    </td>
                                    <td class="text-left">
                                        @*@Model.RecommendedSalary*@
                                        <h4 id="lblGrossSalary" class="txt-bold"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        Employee PF
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployeePF*@
                                        <h4 id="lblEmployeePF"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        Employee ESIC (<span id="lblEmployeeESICPer">0.75</span>% of GP)
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployeeESIC*@
                                        <h4 id="lblEmployeeESIC"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        Professional Tax
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployeeProfessionalTax*@
                                        <h4 id="lblEmployeeProfessionalTax"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        <b>Total Deduction</b>
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployeeTtlDeduct*@
                                        <h4 id="lblEmployeeTtlDeduct" class="txt-bold"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        <b>Net Salary</b>
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployeeNetSalary*@
                                        <h4 id="lblEmployeeNetSalary" class="txt-bold"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        Employer PF
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployerPF*@
                                        <h4 id="lblEmployerPF"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        Employer ESIC (<span id="lblEmployerESICPer">3.25</span>% of GP)
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployerESIC*@
                                        <h4 id="lblEmployerESIC"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        Insurance
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployerIns*@
                                        <h4 id="lblEmployerIns"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        <b>Total Employer Contribution</b>
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployerTtlContribute*@
                                        <h4 id="lblEmployerTtlContribute" class="txt-bold"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        <b>Cost To Project (CTC) Per Month</b>
                                    </td>
                                    <td class="text-left">
                                        @*@Model.EmployeeCTC*@
                                        <h4 id="lblEmployeeCTC" class="txt-bold"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        ** Agency Fee (<span id="lblAgencyFeePer">1.94</span>%)
                                    </td>
                                    <td class="text-left">
                                        @*@Model.AgencyFee*@
                                        <h4 id="lblAgencyFee"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        CTC with Agency Fee
                                    </td>
                                    <td class="text-left">
                                        @*@Model.CTCwithAgencyFee*@
                                        <h4 id="lblCTCwithAgencyFee"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        ** GST @@ <span id="lblSalaryGSTPer">18</span>%
                                    </td>
                                    <td class="text-left">
                                        @*@Model.CTCwithAgencyFee*@
                                        <h4 id="lblSalaryGST"></h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-left">
                                        <b>Total cost / Per Month</b>
                                    </td>
                                    <td class="text-left">
                                        @*@Model.TotalCTC*@
                                        <h4 id="lblTotalCTC" class="txt-bold"></h4>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer brd-top">
                    <button type="button" class="btn btn-danger" id="issalaryConfirm">Confirm</button>
                    <button type="button" class="btn btn-default" id="issalaryClose">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div id="dialogConfirm" class="modal fade" role="dialog" data-backdrop="static" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header brd-bottom">
                    <button type="button" class="close" data-dismiss="modal">×</button>
                    <h4 class="modal-title">Mail Preview</h4>
                </div>
                <div class="modal-body">
                    <div style="padding:10px;margin-left: 10px;" id="divBcc">
                        <label>To mail</label>
                        <h4>@Html.DisplayFor(m => m.ToMail)</h4>
                        <label>Carbon Copy(CC)</label>
                        <h4>@Html.DisplayFor(m => m.CCMail)</h4>
                    </div>
                    <div style="padding:10px;overflow:auto" id="ShowDeviationNP">

                    </div>
                    <div style="padding:10px;overflow:auto" id="ShowDeviationND">

                    </div>
                </div>
                <div class="modal-footer brd-top">
                    <button type="button" class="btn btn-danger" id="isbtnConfirm">Confirm</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <div id="salarycalc" class="modal fade modal-pr-vw" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <div class="row hd-tt-bg">
                        <div class="col-md-12">
                            <h4><b>Salary Calculation: </b></h4>
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="page-wrapper">
                            <div class="custom-md-bg">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="bl-lg-panel-box pb-null">
                                                    <div class="cmn-panel-box">
                                                        <div class="row ">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    @*@Html.RadioButtonFor(M => M.EmpType, "Existing Employee", new { @id = "IsExistingEmp", @checked = "checked" })&nbsp;<label>Existing Employee </label> <br>
                                                                        @Html.RadioButtonFor(M => M.EmpType, "New Employee", new { @id = "IsNewEmp" })&nbsp;<label>New Employee</label> <br>
                                                                        @Html.RadioButtonFor(M => M.EmpType, "Part time", new { @id = "IsParttime" })&nbsp;<label>Part time</label> <br>*@
                                                                    @*<input name="pay_norms2" type="radio" checked=""> Existing Employee <br>
                                                                        <input name="pay_norms2" type="radio"> New Employee <br>
                                                                        <input name="pay_norms2" type="radio"> Part time <br>
                                                                        <h4 id="lblEmplType" class="txt-bold"></h4>*@
                                                                    <label>Employee type: <span id="lblEmplType" class="txt-bold"></span>@Html.HiddenFor(m => m.EmpType, new { @class = "form-control" })</label>
                                                                    <label>Type of appointment: <span id="lblAppointType" class="txt-bold"></span></label>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Recommended Salary</label>
                                                                    @Html.TextBoxFor(m => m.RecommendedSalary, new { @class = "form-control", @id = "RecommendSalary", @readonly = true })
                                                                    @*<input type="text" class="form-control">*@
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row ">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Name </label>
                                                                    @Html.DropDownListFor(m => m.EmpSalutation, new SelectList(ViewBag.Professional, "id", "name"), "Select", new { @disabled = true })
                                                                    @Html.HiddenFor(m => m.EmpSalutation, new { @class = "form-control" })
                                                                    @Html.TextBoxFor(m => m.EmpName, new { @class = "form-control", @id = "EmpName", @readonly = true })
                                                                    @Html.HiddenFor(m => m.LWFAmount, new { @class = "form-control" })
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Designation</label> <br>
                                                                    @Html.TextBoxFor(m => m.EmpDesig, new { @class = "form-control", @id = "EmpDesig", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            @*<div class="col-md-6">
                                                                    <div class="form-group custom-form-group">
                                                                        <label>PH</label><br>
                                                                        @Html.RadioButtonFor(M => M.PhysicalyHandicaped, "Physically Handicapped", new { @id = "IsPH", @readonly = true })&nbsp;<label>Physically Handicapped</label> <br>
                                                                    </div>
                                                                </div>*@
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group mb-sm ">
                                                                    <label>PF Basic Wages</label>
                                                                    @Html.TextBoxFor(m => m.EmpPFBasicWages, new { @class = "form-control", @id = "EmpPFBasicWages" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="bl-lg-panel-box pb-null">
                                                    <div class="cmn-panel-box">
                                                        <div class="row">
                                                            <div class="col-md-12">
                                                                <h4>Deductions</h4>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Employee PF</label>
                                                                    @Html.TextBoxFor(m => m.EmployeePF, new { @class = "form-control", @id = "EmployeePF", @readonly = true })
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Employee ESIC</label>
                                                                    @Html.TextBoxFor(m => m.EmployeeESIC, new { @class = "form-control", @id = "EmployeeESIC", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Professional Tax</label>
                                                                    @Html.TextBoxFor(m => m.EmployeeProfessionalTax, new { @class = "form-control", @id = "EmployeeProfsnlTax" })
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Total Deduction</label>
                                                                    @Html.TextBoxFor(m => m.EmployeeTtlDeduct, new { @class = "form-control", @id = "EmployeeTtlDeduct", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Net Salary</label>
                                                                    @Html.TextBoxFor(m => m.EmployeeNetSalary, new { @class = "form-control", @id = "EmployeeNetSalary", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="bl-lg-panel-box pb-null">
                                                    <div class="cmn-panel-box">
                                                        <div class="row">
                                                            <div class="col-md-12">
                                                                <h4>Contribution</h4>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Employer PF</label>
                                                                    @Html.TextBoxFor(m => m.EmployerPF, new { @class = "form-control", @id = "EmployerPF", @readonly = true })
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>
                                                                        Insurance
                                                                    </label>
                                                                    @Html.TextBoxFor(m => m.EmployerIns, new { @class = "form-control", @id = "EmployerIns" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Employer ESIC</label>
                                                                    @Html.TextBoxFor(m => m.EmployerESIC, new { @class = "form-control", @id = "EmployerESIC", @readonly = true })
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Total Contribution</label>
                                                                    @Html.TextBoxFor(m => m.EmployerTtlContribute, new { @class = "form-control", @id = "EmployerttlContribute", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Cost To Company(CTC) Per Month</label>
                                                                    @Html.TextBoxFor(m => m.EmployeeCTC, new { @class = "form-control", @id = "EmployeeCTC", @readonly = true })
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Agency Fee</label>
                                                                    @Html.TextBoxFor(m => m.AgencyFee, new { @class = "form-control", @id = "AgencyFee", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>CTC With Agency Fee</label>
                                                                    @Html.TextBoxFor(m => m.CTCwithAgencyFee, new { @class = "form-control", @id = "CTCwithAgencyFee", @readonly = true })
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>GST</label>
                                                                    @Html.TextBoxFor(m => m.SalaryGST, new { @class = "form-control", @id = "SalaryGST", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label><b>Total Cost per Month</b></label>
                                                                    @Html.TextBoxFor(m => m.TotalCTC, new { @class = "form-control", @id = "TotalCTC", @readonly = true })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="btnSubmitSalaryCalc">Submit</button>
                </div>
            </div>
        </div>
    </div>

}

<div class="loading-bg dis-none">

</div>

<div id="popup">

</div>

<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var alertMsg = '@TempData["alertMsg"]';
    var ApplicationID = @Json.Encode(Model.ApplicationID) || 0;
    var isMsPhd = @Html.Raw(Json.Encode(Model.IsMsPhd)) || false;
    var typcategory = @Html.Raw(Json.Encode(Model.TypeCode)) || "";
    var TypeOfAppointment = @Html.Raw(Json.Encode(Model.TypeofappointmentId)) || 0;
    var OrderID = @Html.Raw(Json.Encode(Model.OrderID)) || 0;
    var Medical = @Html.Raw(Json.Encode(Model.Medical)) || 0;

    var flowApp = @Html.Raw(Json.Encode(Model.FlowApprover)) || "";
    if(flowApp == "CMAdmin")
    {
        $("input[name=FlowApprover][value=CMAdmin]").prop('checked', true);
        $("#devNoteDean").hide();
    }
    if(flowApp == "NDean")
    {
        $("input[name=FlowApprover][value=NDean]").prop('checked', true);
        $("#devCMAdmin").hide();
    }

    function salarycalcpopup() {
        $('#salarycalc').modal('toggle');
    }

    if(OrderID == 0)
    {
        var oldappclosedate = @Html.Raw(Json.Encode(Model.OldPrjDetailModel.AppointmentClosureDate));
        oldappclosedate     = moment(new Date(oldappclosedate.split('-').join('/'))).add(+1,'days').toDate();
        oldappclosedate     = $.datepicker.formatDate('dd-MM-yy', oldappclosedate);
        $('#txtExtensionfromdate').text(oldappclosedate);
        $('#FromDate').val(oldappclosedate);
    }
    else
    {
        if(@Html.Raw(Json.Encode(Model.FromDate)) != null)
        {
            var appointmentstartdate = '@string.Format("{0:dd-MMMM-yyyy}", Model.FromDate)';
            $('#txtExtensionfromdate').text(appointmentstartdate);
            $('#FromDate').val(appointmentstartdate);
        }
    }


    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
        applyAutoComplete($('#AutoFillRequstedbyPI'), $('#RequestedByPI'), '@Url.Action("LoadPIList", "Requirement")');

        if(typcategory == "OSG")
        {
            //var emppfbasicwages = $('input[name=EmpPFBasicWages]').val() || 0;
            FillSalaryCalcDetls();
        }

        var CommitmentRemark = '@Remark' || '';
        if (CommitmentRemark != '') {
            $('#alertSuccess').html(CommitmentRemark);
            $('#Success').modal('toggle');
        }
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        else if (alertMsg != '') {
            $('#alert').html(alertMsg);
            $('#Validation').modal('toggle');
        }

        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');


        var currentdate = moment(new Date()).toDate();

        if(OrderID > 0)
        {
            if(@Html.Raw(Json.Encode(Model.ApplicationReceiveDate)) != null)
            {
                var appreceivedate = "@string.Format("{0:dd/MMMM/yyyy}", Model.ApplicationReceiveDate)";
                var appreceivedt   = moment(appreceivedate).toDate();
                $('#ApplicationReceiveDate').datepicker({
                    dateFormat: 'dd-MM-yy',
                    changeYear: true
                }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", appreceivedt);
            }

            if(@Html.Raw(Json.Encode(Model.SourceEmailDate)) != null)
            {
                var sourceemaildate = "@string.Format("{0:dd/MMMM/yyyy}", Model.SourceEmailDate)";
                var sourceofemaildt = moment(sourceemaildate).toDate();
                $('#SourceEmailDate').datepicker({
                    dateFormat: 'dd-MM-yy',
                    changeYear: true
                }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", sourceofemaildt);
            }
        }
        else
        {
            $('#ApplicationReceiveDate,#SourceEmailDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", -185);
        }

    });

    var addyear = 0;

    //if ($("#ProjectId").val() > 0)
    //    ProjectSummary()

    if ($("#DesignationId").val() > 0)
        LoadFillDesignation()

    function LoadFillDesignation() {
        var designationid = $("#DesignationId").val() || 0;
        if (designationid > 0) {
            $.getJSON("@Url.Action("LoadDesignationDetails", "Requirement")", { DesignationID: designationid },
                function (result)
                {
                    if (result.DesignationData.DestinationID > 0)
                    {
                        $("#MinSalary").val(result.DesignationData.MinSalary);
                        $("#MaxSalary").val(result.DesignationData.MaxSalary);
                        $("#SalaryLevelId").val(result.DesignationData.SalaryLevelId);
                        $("#lblSalaryLevel").text(result.DesignationData.SalaryLevel);
                        $("#lblSalaryLevelDescription").attr("data-original-title",result.DesignationData.SalaryLevelDescription);
                        if (result.DesignationData.Medical && isMsPhd == false && TypeOfAppointment != 2)
                        {
                            $('#isMedical').val(true)
                            $('#DesignationMedicalamount').val(result.DesignationData.MedicalAmount);
                            if (typcategory == "STE" && OrderID > 0) {
                                $('#Medical').val(Medical)
                                UpdateMedical(Medical);
                            }
                            else {
                                UpdateMedical(2);
                            }
                        }
                        else
                        {
                            $('#isMedical').val(false)
                            $('#DesignationMedicalamount').val(0);
                            UpdateMedical(3);
                        }

                        if (result.DesignationData.HRA && TypeOfAppointment != 2)
                        {
                            $('#HRAText').addClass('dis-none');
                            $('#HRA').removeClass('dis-none');
                            $('#HRAPercentage').val(result.DesignationData.HRAPercentage)
                            $('#isHRA').val(true);
                        }
                        else
                        {
                            $('#HRAText').text('0');
                            $('#isHRA').val(false);
                            $('#HRA').val(0);
                            $('#HRAPercentage').val(result.DesignationData.HRAPercentage)
                            $('#HRAText').removeClass('dis-none');
                            $('#HRA').addClass('dis-none');
                        }
                        if(OrderID > 0)
                        {
                            calculatetaxTotal();

                            if($('#ArrearOrDeductionTillDate').val() != "") {
                                var Arrearamount = calculatetaxTotal(true) || 0;
                                $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
                            }
                        }
                    }
                });
        }
    }

    function updatedatepicker() {
        var defaultappstrToDate = "";
        var strappointmentenddate = $('#lblAppointmentEndDate').text().split('-').join('/');
        var defaultappstrFromDate = moment(strappointmentenddate).add(+2, 'days').toDate();
        if($('#DesignationId').val() == 1)
            defaultappstrToDate = moment(defaultappstrFromDate).add(+6, 'months').add(-1, 'days').toDate();
        else
            defaultappstrToDate = moment(strappointmentenddate).add(+1, 'years').toDate();

        var strprojectclosuredate = $('#lblProjectClosureDate').text().split('-').join('/');
        var prjClosure = moment(strprojectclosuredate).toDate();
        if(defaultappstrToDate > prjClosure)
            defaultappstrToDate = prjClosure;

        var arrearstartdate = moment(strappointmentenddate).add(+1, 'days').toDate();

        $('#ArrearOrDeductionTillDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", arrearstartdate).datepicker("option", "maxDate", defaultappstrToDate);

        $('#ToDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", defaultappstrFromDate).datepicker("option", "maxDate", defaultappstrToDate);

    }

    updatedatepicker();

    $("#ArrearOrDeductionTillDate").change(function () {

        if(typcategory == "OSG")
            FillSalaryCalcDetls();
        else
        {
            var Arrearamount = calculatetaxTotal(true) || 0;
            $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
        }
    });


    $('#Salary,#GST,#HRA').keyup(function () {
        if(typcategory == "OSG")
            FillSalaryCalcDetls();
        else
        {
            calculatetaxTotal();

            if($('#ArrearOrDeductionTillDate').val() != "")
            {
                var Arrearamount = calculatetaxTotal(true) || 0;
                $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
            }
        }

    });

    $('#EmployeeProfsnlTax').change(function () {
        var salary = $('#Salary').val();
        if(salary > 0)
        {
            //var emppfbasicwages = $('input[name=EmpPFBasicWages]').val() || 0;
            if(typcategory == "OSG")
                FillSalaryCalcDetls();
            //calculatetaxTotal();

            //if($('#ArrearOrDeductionTillDate').val() != "") {
            //    var Arrearamount = calculatetaxTotal(true) || 0;
            //    $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
            //}
        }
    });

    $('#EmployerIns').change(function () {
        var salary = $('#Salary').val();
        if(salary > 0)
        {
            //var emppfbasicwages = $('input[name=EmpPFBasicWages]').val() || 0;
            if(typcategory == "OSG")
                FillSalaryCalcDetls();
            else {
                calculatetaxTotal();

                if($('#ArrearOrDeductionTillDate').val() != "") {
                    var Arrearamount = calculatetaxTotal(true) || 0;
                    $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
                }
            }

        }
    });


    $('input[name=EmpPFBasicWages]').keyup(function () {
        //var emppfbasicwages = $('input[name=EmpPFBasicWages]').val();
        FillSalaryCalcDetls();
    });

    $('input[name=RecommendedSalary]').change(function () {
        FillSalaryCalcDetls();
    });

    $('select[name=PhysicallyChallenged]').change(function () {
        FillSalaryCalcDetls();
    });
    $('#btnSubmitSalaryCalc').click(function () {
        PopupSalaryConfirm();
    });

    $('#issalaryConfirm').click(function () {
        $('#dialogSalaryConfirm').modal('toggle');
    });

    $('#issalaryClose').click(function () {
        $('#dialogSalaryConfirm').modal('toggle');
    });

    function PopupConfirm() {
        $('#dialogConfirm').modal('toggle');
    }

    function PopupSalaryConfirm() {
        $('#dialogSalaryConfirm').modal('toggle');
        $('#salarycalc').modal('toggle');
    }

    function calculatetaxTotal(isarrearpay)
    {
        var fromdate = $('#FromDate').val();
        var todate = $('#ToDate').val();
        if(isarrearpay == true)
            todate = $('#ArrearOrDeductionTillDate').val();
        var isNotHighSalary = false;
        var months = 0, days = 0;
        var starttotaldays = 0,endtotaldays = 0,startworingdays = 0,endworkingdays = 0;
        var startyear = 0,endyear = 0,startmonth = 0,endmonth = 0;
        if (fromdate != "" && todate != "")
        {
            var objData = getCalDateDetails(fromdate,todate);
            starttotaldays  = objData.starttotaldays;
            endtotaldays    = objData.endtotaldays;
            startworingdays = objData.startworkingdays;
            endworkingdays  = objData.endworkingdays;
            months          = objData.monthcount;
            startyear       = objData.startdateyear
            endyear         = objData.enddateyear;
            startmonth      = objData.startdatemonth;
            endmonth        = objData.enddatemonth;
            days            = startworingdays + endworkingdays;

        }
        else
        {
            return;
        }

        if(typcategory == "STE")
        {
            var hravalue = 0,ttlVal = 0,medicalamount = 0;
            var salary = parseFloat($('#Salary').val()) || 0;
            var hra    = parseFloat($("#HRA").val()) || 0;
            if (hra > 0)
            {
                var hraper = parseFloat($("#HRAPercentage").val()) || 0;
                hraper = hraper / 100;
                if (getBoolean($('#isHRA').val()) == true)
                {
                    hravalue = salary * hraper;
                    if (hravalue < hra || hravalue > hra)
                        $("#HRA").val(hravalue.toFixed(2));
                    else
                        hravalue = hra;
                }
                else
                    hravalue = 0;
            }

            var total = 0;
            //check isMspd or Part time appointment
            if (isMsPhd || TypeOfAppointment == 2)
            {
                medicalamount = 0;
                if(TypeOfAppointment == 2)
                    hravalue = 0;
            }
            else if ($('#Medical').val() == 1)//if Medical Exclude
                medicalamount = parseFloat($('#DesignationMedicalamount').val()) || 0;
            else //if Medical include
                medicalamount = 0;

            ttlVal = medicalamount + salary + hravalue;
            var startperday = ttlVal / starttotaldays;
            var endperday   = ttlVal / endtotaldays;
            var monthlyamt  = ttlVal;

            if (months > 0)
                total += monthlyamt * months;
            if (days > 0) {
                total += startworingdays * startperday;
                total += endworkingdays * endperday;
            }

            if(isarrearpay == true)
                return total;

            //UpdateValue
            if($('#Medical').val() == 1 || $('#Medical').val() == 2)
                $('#MedicalAmmount').val(parseFloat($('#DesignationMedicalamount').val()));
            else
                $('#MedicalAmmount').val(0);

            if (TypeOfAppointment == 2)
            {
                $('#MedicalAmmount').val(0);
                $("#HRA").val(0);
            }
            else if(isMsPhd)
                $('#MedicalAmmount').val(0);

            $('#CommitmentAmount').val(Math.round(total));
            $('#Salary').val(Math.round(salary));//Trigger keyup event
        }
        else if(typcategory == "CON")
        {
            var ttlVal = 0;
            var salary = parseFloat($('#Salary').val()) || 0;
            var taxVal = parseFloat($('#GST').val()) || 0;
            if($('#GST').val() == 0)
                $('#IsGSTapplicable').val("No");
            else
                $('#IsGSTapplicable').val("Yes");
            var total  = 0;
            var taxVal = parseFloat($('#GST').val()) || 0;
            ttlVal = salary + (salary * taxVal / 100);
            var startperday = ttlVal / starttotaldays;
            var endperday   = ttlVal / endtotaldays;
            var monthlyamt  = ttlVal;
            if (months > 0) {
                total += monthlyamt * count;
            }
            if (days > 0) {
                total += startworingdays * startperday;
                total += endworkingdays * endperday;
            }

            if(isarrearpay == true)
                return total;
            $('#CommitmentAmount').val(Math.round(total));
            $('#Salary').val(Math.round(salary));//Trigger keyup event
        }
        else if(typcategory == "OSG")
        {
            var hravalue = 0,ttlVal = 0,medicalamount = 0;
            var salry  = parseFloat($('#Salary').val()) || 0;
            var salary = parseFloat($('input[name=EmployeeCTC]').val()) || 0;
            var hra    = parseFloat($("#HRA").val()) || 0;
            var lwfamt = 0;
            if(hra > 0)
            {
                var hraper = parseFloat($("#HRAPercentage").val()) || 0;
                hraper     = hraper / 100;
                if (getBoolean($('#isHRA').val()) == true)
                {
                    hravalue = salary * hraper;
                    if(hravalue < hra)
                        $("#HRA").val(hravalue.toFixed(2));
                    else
                        hravalue = hra;
                }
                else
                    hravalue = 0;
            }

            var total = 0;
            //check isMspd or Part time appointment
            if (isMsPhd || TypeOfAppointment == 2)
            {
                medicalamount = 0;
                if(TypeOfAppointment == 2)
                    hravalue = 0;
            }
            else if ($('#Medical').val() == 1)//if Medical Exclude
                medicalamount = parseFloat($('#DesignationMedicalamount').val()) || 0;
            else //if Medical include
                medicalamount = 0;

            ttlVal = medicalamount + salary + hravalue;
            var startperday = ttlVal / starttotaldays;
            var endperday   = ttlVal / endtotaldays;
            var monthlyamt  = ttlVal;

            if (months > 0)
                total += monthlyamt * months;
            if (days > 0)
            {
                total += startworingdays * startperday;
                total += endworkingdays * endperday;
            }


            if(startyear < endyear)
            {
                lwfamt = parseFloat($('input[name=LWFAmount]').val()) || 0;
                if(lwfamt > 0)
                {
                    total += lwfamt;
                }
            }
            if((startmonth == 12 ||  endmonth == 12) && startyear == endyear)
            {
                lwfamt = parseFloat($('input[name=LWFAmount]').val()) || 0;
                if(lwfamt > 0)
                {
                    total += lwfamt;
                }
            }

            if(isarrearpay == true)
                return total;

            //UpdateValue
            if($('#Medical').val() == 1 || $('#Medical').val() == 2)
                $('#MedicalAmmount').val(parseFloat($('#DesignationMedicalamount').val()));
            else
                $('#MedicalAmmount').val(0);

            if (TypeOfAppointment == 2)
            {
                $('#MedicalAmmount').val(0);
                $("#HRA").val(0);
            }
            else if(isMsPhd)
                $('#MedicalAmmount').val(0);

            $('#CommitmentAmount').val(Math.round(total));
            $('#Salary').val(Math.round(salry));//Trigger keyup event
        }
    }




    $("#FromDate, #ToDate").change(function () {
        validDateDiff();
        calculatetaxTotal();
    });

    $('#FromDate').change(function () {
        var endDate = "";
        if($(this).val() != "")
        {
            var fromdate = $('#FromDate').val().split('-').join('/');
            var projectenddate = $('#lblProjectClosureDate').text().split('-').join('/');
            $('#ToDate').val('');
            var endDate = moment(projectenddate).toDate();
            if(endDate != "")
            {
                var addedYear = moment(fromdate).add(+364, 'days').toDate();
                if(addedYear < endDate)
                    endDate = addedYear;
            }
            var startDate = moment(fromdate).add(+1, 'days').toDate();
            $('#ToDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", startDate).datepicker("option", "maxDate", endDate);
        }

    });

    function validDateDiff() {
        var strDate = $("#FromDate").val();
        var clsDate = $("#ToDate").val();
        var appstartdate = new Date(strDate.split('-').join('/'));
        var appenddate = new Date(clsDate.split('-').join('/'));
        var prjStartDate = $("#lblProjectStartDate").text();
        if (prjStartDate == "") {
            $("#FromDate").val('')
            $("#ToDate").val('')
            $.alert('Please enter project number');
            return;
        }
        prjStartDate = prjStartDate.split('-').join('/');
        prjStartDate = new Date(prjStartDate);
        var prjCloseDate = $("#lblProjectClosureDate").text();
        prjCloseDate = prjCloseDate.split('-').join('/')
        prjCloseDate = new Date(prjCloseDate);
        if (strDate != '' && clsDate != '') {
            if (!(appstartdate >= prjStartDate && appenddate <= prjCloseDate)) {
                $("#FromDate").val('')
                $("#ToDate").val('')
                $.alert('Appointment date must be between the project start date and project closure date.');
                return;
            }
        }
    }

    $("#FromDate,#ToDate,#ArrearOrDeductionTillDate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        }
    });

    function checkDevation() {
        var qualifi = [];
        var descipid = [];
        var marks = [];
        addyear = 0;
        var TotalExp = 0;
        var PersonName = $('#CantidateName').text();
        var InputData = [];
        InputData = {
            DesignationId: @Json.Encode(Model.OldPrjDetailModel.DesignationId) || null,
            QualificationId: qualifi,
            DisciplineId: descipid,
            MarksId: marks,
            ChekSalary: $('#Salary').val(),
            AppointmentStartDate: $('#FromDate').val(),
            AppointmentEndDate: $('#ToDate').val(),
            ProjectFund:  0,
            ProjectID: $('#ProjectId').val(),
            CommitmentAmount: $('#CommitmentAmount').val() || 0,
            PersonName: PersonName,
            OrderType: "Extension",
            AppId:ApplicationID,
            AppType:typcategory,
            Comments: $('textarea[name="Comments"]').val(),
            SendSalaryStructure : $('input[name="SendSalaryStructure"]:checked').val() || "",
        }
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("OrderCheckDeviation", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",
            //dataType: "json",
            beforeSend: function () {
                $(".loading-bg").removeClass('dis-none');
            },
            success: function (result) {
                $(".loading-bg").addClass('dis-none');
                $("input[name=FlowofMail]").prop('checked', false);
                if (result.isRes) {
                    $("input[name=FlowofMail][value=NP]").prop('checked', true);
                    document.getElementById("nextBtn").innerHTML = "Send to clarification";
                }
                else {
                    $("input[name=FlowofMail][value=Nd]").prop('checked', true);
                    document.getElementById("nextBtn").innerHTML = "Send for approval";
                }
                if ($('#Status').val() == "" || $('#Status').val().includes("Open") || $('#Status').val().includes("Note to PI") || $('#Status').val().includes("PI Initiated")) {
                    $("#Deviation").html(result.output);
                    $("#ShowDeviationNP").html(result.template);
                }
                else {
                    $("#Deviation").empty();
                    $("input[name=FlowofMail][value=Nd]").prop('checked', true);
                }
            },
            error: function (err) {
                $(".loading-bg").addClass('dis-none');
                console.log("error : " + err);
            }
        });
    }

    function AckowleadgementEmail() {
        var PersonName = $('#CantidateName').text();
        var InputData = [];
        InputData = {
            DesignationId : @Model.OldPrjDetailModel.DesignationId || null,
            AppointmentReciveDate : $('#ApplicationReceiveDate').val(),
            PersonName : PersonName,
            AppointmentStartDate : $('#FromDate').val(),
            AppointmentEndDate : $('#ToDate').val(),
            BasicPay : $('#Salary').val(),
            OrderType : 'Extension',
            ProjectID : $('#ProjectId').val(),
            AppId : @Html.Raw(Json.Encode(Model.ApplicationID)) || 0,
            AppType : @Html.Raw(Json.Encode(Model.TypeCode)) || "",
            SendSalaryStructure : $('input[name="SendSalaryStructure"]:checked').val() || "",
        }
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("OrderEmailProcess", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",
            beforeSend: function () {
                $(".loading-bg").removeClass('dis-none');
            },
            success: function (result) {
                $(".loading-bg").addClass('dis-none');
                $("#ShowDeviationND").html(result.output.Item2);
            },
            error: function (err) {
                $(".loading-bg").addClass('dis-none');
                console.log("error : " + err);
            }
        });
    }


    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("cust-tab");
        x[n].style.display = "block";

        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            if ($('#Status').val() == "" || $('#Status').val().includes("Open") || $('#Status').val().includes("Note to PI") || $('#Status').val().includes("PI Initiated")) {
                document.getElementById("nextBtn").style.display = "inline";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }
            else {
                document.getElementById("nextBtn").style.display = "none";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }

        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            document.getElementById("nextBtn").style.display = "inline";
        }
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("cust-tab");
        // Exit the function if any field in the current tab is invalid:
        var v = n;
        if($('#nextBtn').text().includes("Send") || $('#nextBtn').text().includes("Submit")){
            v = 2;
        }
        if (n > 0 && !validateForm(v)) {
            $.confirm({
                title: 'Warning!',
                content: 'Invalid data exist',
                type: 'red',
                buttons: {
                    Ok: function () {
                        //close
                    },
                },
            });
            return false;
        }

        if($('#Comments').val() != '') {
            $('#txt-Comments').text($('#Comments').val());
        }

        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        }
        else {
            // ... the form gets submitted:
            // ... Update checklist in the deviation
            var CheckedValue = [];
            $('#tbodyDEVCheckList').find('input[id^="DeviationCheckId_"]').each(function(){
                if ($(this).is(':checked')) {
                    var str = $(this).attr('name');
                    var matches = str.match(/(\d+)/);
                    var value = ""
                    if (matches)
                        value = $('input[name="CheckListDetail[' + matches[0] + '].FunctionCheckListId"]').val();
                    CheckedValue.push(value);
                }
            });
            $('.CheckListBody').find('tr[class^="Checklist_"]').each(function() {
                $(this).addClass('dis-none');
            });

            if(CheckedValue.length > 0) {
                for(var i = 0;i < CheckedValue.length;i++)
                {
                    $('.Checklist_' + CheckedValue[i]).removeClass('dis-none');
                }
            }
            $('.CheckListBody').find('tr:not(.dis-none)').each(function(e) {
                $(this).find('.dyn-srl-No').text(parseInt(e));
            });
            if($('input[name="FlowofMail"]:checked').val() != "Nd") {//Deviation mail Preview
                var Comments = $('textarea[name="Comments"]').val();
                if(Comments != "")
                    $('#tr-cmt').removeClass('dis-none');
                else
                    $('#tr-cmt').addClass('dis-none');
                $('#txt-mail-comments').text(Comments);
                $('#ShowDeviationND').hide();
                $('#ShowDeviationNP').show();
                PopupConfirm()
            }//Process mail Preview is occur only once for application save
            else if ($('input[name="FlowofMail"]:checked').val() == "Nd" && (typcategory == "STE" || typcategory == "CON"  || (typcategory == "OSG" && $('input[name="SendSalaryStructure"]:checked').val() == "SST")))
            {
                //Process mail Preview is occur only once for application save
                $('#ShowDeviationND').empty();
                $('#ShowDeviationNP').hide();
                $('#ShowDeviationND').show();
                AckowleadgementEmail()
                PopupConfirm()
            }
            else
                formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n)
    {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $("#formExtension");
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(tabs).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;
        }
        $(stepElements).each(function (idx) {
            if (!$(this).is(':radio') && !$(this).is(':checkbox')) {
                isValid = $(this).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) {
                    hadError = true;
                } // set our flag if there was an error
            }
        });
        if (!hadError && n != 2 && ($('#Status').val() == "" || $('#Status').val().includes("Open") || $('#Status').val().includes("Note to PI") || $('#Status').val().includes("PI Initiated"))) {
            var MinSalary = parseFloat($('#MinSalary').val());
            var Salary    = parseFloat($('#Salary').val());
            if(TypeOfAppointment == 2) {
                MinSalary = MinSalary / 2;
            }
            if(MinSalary > Salary) {
                $.confirm({
                    title: 'Warning!',
                    content: 'Salary mentioned is below the institution norms',
                    type: 'red',
                    buttons: {
                        Ok: function () {
                            //close
                        },
                    },
                });
                return false;
            }
            else {
                checkDevation();
            }
        }

        if ($('#ProjectId').val() != null || $('#ProjectId').val() != "") {
            FillData();
        }

        return !hadError; // return the valid status
    }

    function PopupConfirm() {
        $('#dialogConfirm').modal('toggle');
    }

    $('#isbtnConfirm').click(function () {
        $(this).attr("disabled", "disabled");
        $('.loading-bg').removeClass('dis-none');
        formSave()
    });

    var radioState = false;
    function checkuncheck(element){
        if(radioState == false) {
            check();
            radioState = true;
        }else{
            uncheck();
            radioState = false;
        }
    }
    function check() {
        document.getElementById("IsSendSalaryStructure").checked = true;
    }
    function uncheck() {
        document.getElementById("IsSendSalaryStructure").checked = false;
    }

    function formSave() {
        $('#isDraftbtn').val(false);
        var valid_f = $('#formExtension').valid();
        if (!valid_f)
            return false;
        if(typcategory == "OSG")
        {
            if(document.getElementById("IsSendSalaryStructure").checked == false){
                $.confirm({
                    title: 'Alert!',
                    content: 'Send Pay structure option is not selected. Pay structure will not be sent to PI. To continue click Ok. To change click Close',
                    type: 'orange',
                    buttons: {
                        Ok: function () {
                            //submit
                            if (valid_f)
                                $('#formExtension').submit();
                        },
                        Close: function(){
                            //close
                            $(".loading-bg").addClass('dis-none');
                        }
                    },
                });
            }
            else if(document.getElementById("IsSendSalaryStructure").checked == true)
            {
                if (valid_f)
                    $('#formExtension').submit();
            }
        }
        else
        {
            if (valid_f)
                $('#formExtension').submit();
        }
    }


    $(document).on('click', '#btnViewSummary', function () {
        var projNo = $('#ProjectId').val() || 0;
        if (projNo > 0) {
            var searchData = { "ProjectId": projNo };
            $.ajax({
                url: "@Url.Action("_ProjectSummary", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                beforeSend: function () {
                    $(".loading-bg").removeClass('dis-none');
                },
                success: function (result) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(result);
                    $("#projectSummaryModal").modal('toggle');
                },
                error: function (err) {
                    $(".loading-bg").addClass('dis-none');
                    console.log("error : " + err);
                }
            });
        }
    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    $(document).on('change', 'input[name$=".IsChecked"]', function () {
        var isUnchecked = false;
        $('input[name$=".IsChecked"]').each(function () {
            if ($(this).is(':checked')) {
                isUnchecked = true;
            }
        });
        $("input[name=FlowofMail]").prop('checked', false);

        if (!isUnchecked) {
            $("input[name=FlowofMail][value=Nd]").prop('checked', true);
            $('#nextBtn').text('Send for approval');
        }
        else {
            $("input[name=FlowofMail][value=NP]").prop('checked', true);
            $('#nextBtn').text('Send for clarification');
        }
    });

    $(document).on('change', 'input[name="FlowofMail"]', function () {
        var isUnchecked = false;
        var value = $('input[name="FlowofMail"]:checked').val();
        if (value == "Nd") {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', false);
            });
            $('#nextBtn').text('Send for approval');
        }
        else {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', true);
            });
            $('#nextBtn').text('Send to clarification');
        }
    });

    $('a[name="DocDownload"]').click(function (p) {
        p.preventDefault();
        var ref = $(this).attr('href');
        var win = window.open('', '_blank');
        win.location.href = ref;
    });

    var findtabs = $(".cust-tab");
    $(findtabs[0]).find('textarea,input[type="text"]').each(function () {
        var id = $(this).attr('id');
        var name = $(this).attr('name').split('.')[1];
        var notinid   = ["DesignationCode" , "ProjectNumber" , "Comments"];
        var notinname = ["DesignationautoComplete"];
        if (!notinid.includes(id) && !notinname.includes(name)) {
            $(this).attr('style', 'text-transform:uppercase');
        }
    });

    $(document).on('keyup','textarea,input[type="text"]',function(event) {
        if($(this).attr('id') != "Comments" && $(this).attr('id') != "PIJustificationRemarks" && $(this).attr('id') != undefined) {
            var input = event.target;
            var start = input.selectionStart;
            var end = input.selectionEnd;
            input.value = input.value.toLocaleUpperCase();
            input.setSelectionRange(start, end);
        }
    });

    function FillData() {
        $('#lblAppStartDate').text($('#FromDate').val());
        $('#lblAppEndDate').text($('#ToDate').val());
        $('#lblCommitmentAmt').text($('#CommitmentAmount').val());
        $('#lblReceivedDate').text($("#ApplicationReceiveDate").val());
        $('#lblPay').text($('#Salary').val());
    }

    $('select[name="Medical"]').on('change', function () {
        UpdateMedical($(this).val());
        calculatetaxTotal();
        if($('#ArrearOrDeductionTillDate').val() != "") {
            var Arrearamount = calculatetaxTotal(true) || 0;
            $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
        }
    });

    $('input[name="PILetter"]').change(function (event) {
        $('#PILetter').empty();
        var form_data = new FormData();
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        // Read selected files
        var allowedExtensions = [".pdf", ".doc", ".docx"];
        var totalfiles = document.getElementById('PILetter').files.length;
        for (var index = 0; index < totalfiles; index++) {
            var fileName = document.getElementById('PILetter').files[index].name;
            var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
            var validFormat = allowedExtensions.includes('.' + extension);
            if (!validFormat) {
                $('#FailedAlert').html('PI Letter File should be allowed olny document type [pdf,doc,docx]');
                $('#Failed').modal('toggle');
                $(this).val('');
                return;
            }
            else {
                if (iSize > 5120) {
                    $('#FailedAlert').html('Documents size should be allow below 5MB');
                    $('#Failed').modal('toggle');
                    $(this).val('');
                    return;
                }
            }
        }
    });

    function getBoolean(value) {
        switch (value) {
            case true:
            case "true":
            case "True":
            case 1:
            case "1":
            case "on":
            case "yes":
                return true;
            default:
                return false;
        }
    }

    function UpdateMedical(value) {
        var isHaveMedical = false;
        var checkmedical = getBoolean($('#isMedical').val());
        if(value == 1 || value == 2) {
            $('#Medical').removeClass('dis-none');
            $('#MedicalText').addClass('dis-none');
            $('#Medical').val(value);
            $('#MedicalAmmount').val(parseFloat($('#DesignationMedicalamount').val()))
        }
        else if(value == 3 || value == 0) {
            if(!getBoolean($('#isMedical').val())) 
            {
                $('#Medical').addClass('dis-none');
                $('#MedicalText').removeClass('dis-none');
            }
            else
            {
                $('#Medical').removeClass('dis-none');
                $('#MedicalText').addClass('dis-none');
            }
            $('#Medical').val(value);
            $('#MedicalAmmount').val(0)
        }
        $('#MedicalText,#txtMedical').text($("#Medical option:selected").text());
        $('#MedicalAmmountText,#lblMedical').text($('#MedicalAmmount').val());
    }

    $('#SourceEmailDate').change(function(){
        var value = $(this).val();
        $('#ApplicationReceiveDate').val(value);
    });

    $(document).on('click', '#btnViewStaffAllocation', function () {
        var projNo = $('#ProjectId').val() || 0;
        if (projNo > 0) {
            var searchData = { "ProjectId": projNo };
            $.ajax({
                url: "@Url.Action("_ViewStaffAllocation", "Requirement")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                beforeSend: function () {
                    $(".loading-bg").removeClass('dis-none');
                },
                success: function (result) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(result);
                    $("#myModal1").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                    $(".loading-bg").addClass('dis-none');
                }
            });
        }
    });


    var inncPIJus = 1;
    $("#btnAddFile").click(function () {
        var cln = $('div#divPIJustification:first').clone().find("input").val("").end();
        $(cln).find('a').removeClass('dis-none');
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, inncPIJus));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, inncPIJus));
        });
        $(cln).insertAfter("div#divPIJustification:last");
        inncPIJus++;
    });

    $(document).on('click', 'a.removeFile', function () {
        if ($('div#divPIJustification').length == 1)
            $('div#divPIJustification').find("input").val("").end();
        else
        {
            $(this).closest('div').remove();
            UpdateUploadedDoc();
            $(document).find('input[name^="PIJustificationFile"]').each(function(idx,ele){
                $(this).attr("name", $(this).attr("name").replace(/\d+/, idx));
                if ($(this).attr("id"))
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, idx));
            });
            inncPIJus--;
        }
    });

    function UpdateUploadedDoc()
    {
        var form_data = new FormData();
        $('#fileAppend').empty();
        $(document).find('input[name^="PIJustificationFile"]').each(function(idx,ele) {
            var val = $(this).val();
            var id  = $(this).attr('id');
            if(val != "")
            {
                var tmppath = URL.createObjectURL(document.getElementById(id).files[0]);
                var fileN   = document.getElementById(id).files[0].name;
                var ele   = document.createElement('a');
                var elebr = document.createElement('br');
                ele.href = tmppath
                ele.text = fileN;
                ele.name = "DocDownload";
                document.getElementById('fileAppend').appendChild(ele);
                document.getElementById('fileAppend').appendChild(elebr);
            }
        });
    }

    $(document).on('change','input[name^="PIJustificationFile"]', function(event) {
        var id = $(this).attr('id');
        id = id.split('_')[1];
        if($(this).val() != "")
        {
            // Read selected files
            var allowedExtensions = [".pdf", ".doc",".docx"];
            var fileName    = document.getElementById('PIJustificationFile_' + id).files[0].name;
            var extension   = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
            var validFormat = allowedExtensions.includes('.'+extension);
            if(validFormat)
            {
                var _size = document.getElementById('PIJustificationFile_' + id).files[0].size;
                var iSize = (_size / 1024);
                iSize = (Math.round(iSize * 100) / 100)
                if (iSize > 5120) {
                    $('#FailedAlert').html('Documents size should be allow below 5MB');
                    $('#Failed').modal('toggle');
                    $(this).val('');
                    return;
                }
                UpdateUploadedDoc();
            }
            else {
                $('#FailedAlert').html('PIJustification allowed document type [pdf,doc,docx]');
                $('#Failed').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            UpdateUploadedDoc();
        }
    });


    function FormDisabled() {
        $("#formExtension").find("input, select, textarea").each(function () {
            var disabled_f = $(this).is(":disabled");
            var id = $(this).attr('id');
            if (!disabled_f) {
                $(this).attr("disabled", "disabled");
            }
        });
    }

    var Status = @Html.Raw(Json.Encode(Model.Status)) || "";
    var disablestatus = [ "" , "Open" , "Note to PI" , "PI Initiated"];
    if (!disablestatus.includes(Status)) {
        FormDisabled();
        $('#btnViewSummary,#btnViewStaffAllocation').removeAttr('disabled');
    }

    $('#VendorId').change(function () {
        FillSalaryCalcDetls();
    });


    function FillSalaryCalcDetls() {
        var Vendorid = $('#VendorId').val();
        var salary = $('#Salary').val();
        var emppfbasicwages = $('input[name=EmpPFBasicWages]').val() || 0;
        var isemppfwages = true;
        $.getJSON("@Url.Action("LoadSalCalPercent", "Requirement")", { VendorId: Vendorid, Salary: salary },
    function (result) {
        var emppfpercent = result.EmployeePfPercent * (1 / 100);
        var emplyrpfpercent = result.EmployerPfPercent * (1 / 100);
        var empESICpercent = result.EmployeeESIC * (1 / 100);
        var emplyrESICpercent = result.EmployerESIC * (1 / 100);
        var genESICSlab = result.GenESICSlab || 0;
        //if(genESICSlab == 0)
        //{
        //    genESICSlab = 21000;
        //}
        var phESICSlab = result.PhESICSlab || 0;
        //if(phESICSlab == 0)
        //{
        //    phESICSlab = 25000;
        //}
        var pfSlab = result.PFSlab;
        var profesTax = result.ProfessionalTax;
        var LWFAmount = result.LWFEmlyrAmount;
        var agncyfee = result.AgencyFee * (1 / 100);
        var statutoryId = result.StatutoryId;
        //var gstpercent = result.GSTPercentage * (1 / 100);
        var gstpercent = 0.18;
        var ins = result.Insurance || 0;
        if(emppfbasicwages > pfSlab && pfSlab > 0)
        {
            emppfbasicwages = pfSlab;
        }
        var name = $('input[name=Name]').val();
        var salary = Math.round($('input[name=Salary]').val());
        var designation = $('input[name=Designation]').val();
        var profesionalId = $('select[name=ProfessionalId]').val();
        //var typeofappoint = $('select[name=TypeofappointmentId]').selected.text();
        var typeofappoint = $( "select[name=TypeofappointmentId] option:selected" ).text();
        var isphysichandc = $( "select[name=PhysicallyChallenged] option:selected" ).text();
        if(isphysichandc == "Select")
        {
            $("#lblPHYHandC").html('No Input');
        }
        if(isphysichandc != "Select")
        {
            $("#lblPHYHandC").html(isphysichandc);
        }
        var emptype = "";
        if($('#IsNew').is(':checked'))
        {
            emptype = $('#IsNew').val();
        }
        else if($('#IsOld').is(':checked'))
        {
            emptype = $('#IsOld').val();
        }
        $('select[name=EmpSalutation]').val(profesionalId);
        $('input[name=EmpSalutation]').val(profesionalId);
        $('input[name=EmpName]').val(name);
        $('input[name=EmpDesig]').val(designation);
        $('input[name=RecommendedSalary]').val(salary);
        $('input[name=LWFAmount]').val(LWFAmount);
        $('input[name=StatutoryId]').val(statutoryId);
        $("#lblRecommendedSalary").html(salary);
        $("#lblEmplType").html(emptype);
        $("#lblEmployeeESICPer").text(result.EmployeeESIC);
        $("#lblEmployerESICPer").text(result.EmployerESIC);
        $("#lblAgencyFeePer").text(result.AgencyFee);
        $("#lblSalaryGSTPer").text(result.GSTPercentage);
        if(typeofappoint != null && typeofappoint != "" && typeofappoint != "Select Appointment")
        {
            $("#lblAppointType").html(typeofappoint);
        }
        if(typeofappoint == "Select Appointment")
        {
            $("#lblAppointType").html('No Input');
        }

        if(salary <= pfSlab)
        {
            $('input[name=EmpPFBasicWages]').val(salary);

            var empPF = Math.round(salary * emppfpercent) || 0;
            $('input[name=EmployeePF]').val(empPF);
            $("#lblEmpPFBasicWages").html(salary);

            $("#lblGrossSalary").html(salary);
            $("#lblEmployeePF").html(empPF);
            var empESIC = Math.ceil(salary * empESICpercent) || 0;
            $('input[name=EmployeeESIC]').val(empESIC);
            $("#lblEmployeeESIC").html(empESIC);
            //$('input[name=EmpPFBasicWages]').attr('readonly',true);
            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);
                $("#lblEmpPFBasicWages").html(0);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                //$('input[name=EmployeeESIC]').val(0);
                //$("#lblEmployeeESIC").html(0);
                empPF = 0;
                // empESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);
                //$('input[name=EmployeePF]').val(0);
                //$("#lblEmployeePF").html(0);
                //$('input[name=EmployeeESIC]').val(0);
                //$("#lblEmployeeESIC").html(0);
                //empPF = 0;
                //empESIC = 0;
                empPF = Math.round(emppfbasicwages * emppfpercent) || 0;
                $('input[name=EmployeePF]').val(empPF);
                $("#lblEmpPFBasicWages").html(emppfbasicwages);

                $("#lblGrossSalary").html(salary);
                $("#lblEmployeePF").html(empPF);
                empESIC = Math.ceil(salary * empESICpercent) || 0;
                $('input[name=EmployeeESIC]').val(empESIC);
                $("#lblEmployeeESIC").html(empESIC);
            }
            if(typeofappoint == "Part time")
            {
                $('input[name=EmpPFBasicWages]').val(0);
                $("#lblEmpPFBasicWages").html(0);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                empPF = 0;
            }
            //var empproftax = parseFloat($('input[name=EmployeeProfessionalTax]').val()) || 0;
            var empproftax = profesTax || 0;
            //if(empproftax == 0)
            //{
            //    empproftax = 208;
            //}
            if(isphysichandc == "Yes")
            {
                empproftax = 0;
            }
            $('input[name=EmployeeProfessionalTax]').val(empproftax);
            $("#lblEmployeeProfessionalTax").html(empproftax);
            var totlempdeduct = empPF + empESIC + empproftax;
            $('input[name=EmployeeTtlDeduct]').val(totlempdeduct);
            $("#lblEmployeeTtlDeduct").html(totlempdeduct);
            var empnetsalary = salary - totlempdeduct
            $('input[name=EmployeeNetSalary]').val(empnetsalary);
            $("#lblEmployeeNetSalary").html(empnetsalary);
            var employerPF = Math.round(salary * emplyrpfpercent) || 0;
            $('input[name=EmployerPF]').val(employerPF);
            $("#lblEmployerPF").html(employerPF);
            var employerESIC = Math.ceil(salary * emplyrESICpercent) || 0;
            $('input[name=EmployerESIC]').val(employerESIC);
            $("#lblEmployerESIC").html(employerESIC);
            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                //$('input[name=EmployerESIC]').val(0);
                //$("#lblEmployerESIC").html(0);
                employerPF = 0;
                //employerESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                employerPF = Math.round(emppfbasicwages * emplyrpfpercent) || 0;
                $('input[name=EmployerPF]').val(employerPF);
                $("#lblEmployerPF").html(employerPF);
                employerESIC = Math.ceil(salary * emplyrESICpercent) || 0;
                $('input[name=EmployerESIC]').val(employerESIC);
                $("#lblEmployerESIC").html(employerESIC);
            }

            //var employerIns = parseFloat($('input[name=EmployerIns]').val()) || 0;
            var employerIns = ins;
            if(employerIns == 0)
            {
                employerIns = 250;
            }
            if(typeofappoint == "Part time")
            {
                //$('input[name=EmpPFBasicWages]').val(0);
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                employerIns = 0;
                employerPF = 0;
            }
            $('input[name=EmployerIns]').val(employerIns);
            $("#lblEmployerIns").html(employerIns);

            var ttlemployerContribute = employerPF + employerESIC + employerIns;
            $('input[name=EmployerTtlContribute]').val(ttlemployerContribute);
            $("#lblEmployerTtlContribute").html(ttlemployerContribute);
            var employeeCTC = salary + ttlemployerContribute;
            $('input[name=EmployeeCTC]').val(employeeCTC);
            $("#lblEmployeeCTC").html(employeeCTC);
            var agencyFee = Math.round(employeeCTC * agncyfee) || 0;
            $('input[name=AgencyFee]').val(agencyFee);
            $("#lblAgencyFee").html(agencyFee);
            var ctcwithagencyfee = agencyFee + employeeCTC;
            $('input[name=CTCwithAgencyFee]').val(ctcwithagencyfee);
            $("#lblCTCwithAgencyFee").html(ctcwithagencyfee);
            var salaryGST = Math.round(ctcwithagencyfee * gstpercent) || 0;
            $('input[name=SalaryGST]').val(salaryGST);
            $("#lblSalaryGST").html(salaryGST);
            var totalCTC = ctcwithagencyfee + salaryGST;
            $('input[name=TotalCTC]').val(totalCTC);
            $("#lblTotalCTC").html(totalCTC);
        }
        //if(salary > 15000 && salary <= 21000 && isphysichandc != "Yes")
        if(salary > pfSlab && salary <= genESICSlab && isphysichandc != "Yes")
        {
            //$('input[name=EmpPFBasicWages]').val(15000);
            //$("#lblEmpPFBasicWages").html(15000);
            $('input[name=EmpPFBasicWages]').val(0);
            $("#lblEmpPFBasicWages").html(0);
            $("#lblGrossSalary").html(salary);
            var empbasicwages = $('input[name=EmpPFBasicWages]').val();
            var empPF = Math.round(empbasicwages * emppfpercent) || 0;
            $('input[name=EmployeePF]').val(empPF);
            $("#lblEmployeePF").html(empPF);
            var empESIC = Math.ceil(salary * empESICpercent) || 0;
            $('input[name=EmployeeESIC]').val(empESIC);
            $("#lblEmployeeESIC").html(empESIC);
            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                //$('input[name=EmployeeESIC]').val(0);
                //$("#lblEmployeeESIC").html(0);
                empPF = 0;
                //empESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);

                empPF = Math.round(emppfbasicwages * emppfpercent) || 0;
                $('input[name=EmployeePF]').val(empPF);
                $("#lblEmpPFBasicWages").html(emppfbasicwages);

                $("#lblGrossSalary").html(salary);
                $("#lblEmployeePF").html(empPF);
                empESIC = Math.ceil(salary * empESICpercent) || 0;
                $('input[name=EmployeeESIC]').val(empESIC);
                $("#lblEmployeeESIC").html(empESIC);
            }
            if(typeofappoint == "Part time")
            {
                $('input[name=EmpPFBasicWages]').val(0);
                $("#lblEmpPFBasicWages").html(0);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                empPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            var empproftax = profesTax || 0;
            //var empproftax = parseFloat($('input[name=EmployeeProfessionalTax]').val()) || 0;
            //if(empproftax == 0)
            //{
            //    empproftax = 208
            //}
            if(isphysichandc == "Yes")
            {
                empproftax = 0;
            }
            $('input[name=EmployeeProfessionalTax]').val(empproftax);
            $("#lblEmployeeProfessionalTax").html(empproftax);
            var totlempdeduct = empPF + empESIC + empproftax;
            $('input[name=EmployeeTtlDeduct]').val(totlempdeduct);
            $("#lblEmployeeTtlDeduct").html(totlempdeduct);
            var empnetsalary = salary - totlempdeduct;
            $('input[name=EmployeeNetSalary]').val(empnetsalary);
            $("#lblEmployeeNetSalary").html(empnetsalary);
            var employerPF = Math.round(empbasicwages * emplyrpfpercent) || 0;
            $('input[name=EmployerPF]').val(employerPF);
            $("#lblEmployerPF").html(employerPF);
            var employerESIC = Math.ceil(salary * emplyrESICpercent) || 0;
            $('input[name=EmployerESIC]').val(employerESIC);
            $("#lblEmployerESIC").html(employerESIC);

            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                //$('input[name=EmployerESIC]').val(0);
                //$("#lblEmployerESIC").html(0);
                employerPF = 0;
                //employerESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                employerPF = Math.round(emppfbasicwages * emplyrpfpercent) || 0;
                $('input[name=EmployerPF]').val(employerPF);
                $("#lblEmployerPF").html(employerPF);
                employerESIC = Math.ceil(salary * emplyrESICpercent) || 0;
                $('input[name=EmployerESIC]').val(employerESIC);
                $("#lblEmployerESIC").html(employerESIC);
            }
            //var employerIns = parseFloat($('input[name=EmployerIns]').val()) || 0;
            var employerIns = ins || 0;

            if(employerIns == 0)
            {
                employerIns = 250
            }
            if(typeofappoint == "Part time")
            {
                //$('input[name=EmpPFBasicWages]').val(0);
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                employerIns = 0;
                employerPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            $('input[name=EmployerIns]').val(employerIns);
            $("#lblEmployerIns").html(employerIns);
            var ttlemployerContribute = employerPF + employerESIC + employerIns;
            $('input[name=EmployerTtlContribute]').val(ttlemployerContribute);
            $("#lblEmployerTtlContribute").html(ttlemployerContribute);
            var employeeCTC = salary + ttlemployerContribute;
            $('input[name=EmployeeCTC]').val(employeeCTC);
            $("#lblEmployeeCTC").html(employeeCTC);
            var agencyFee = Math.round(employeeCTC * agncyfee) || 0;
            $('input[name=AgencyFee]').val(agencyFee);
            $("#lblAgencyFee").html(agencyFee);
            var ctcwithagencyfee = agencyFee + employeeCTC;
            $('input[name=CTCwithAgencyFee]').val(ctcwithagencyfee);
            $("#lblCTCwithAgencyFee").html(ctcwithagencyfee);
            var salaryGST = Math.round(ctcwithagencyfee * gstpercent) || 0;
            $('input[name=SalaryGST]').val(salaryGST);
            $("#lblSalaryGST").html(salaryGST);
            var totalCTC = ctcwithagencyfee + salaryGST;
            $('input[name=TotalCTC]').val(totalCTC);
            $("#lblTotalCTC").html(totalCTC);
        }
        //if(salary > 15000 && salary <= 25000 && isphysichandc == "Yes")
        if(salary > pfSlab && salary <= phESICSlab && isphysichandc == "Yes")
        {
            $('input[name=EmpPFBasicWages]').val(0);
            $("#lblEmpPFBasicWages").html(0);
            $("#lblGrossSalary").html(salary);
            var empbasicwages = $('input[name=EmpPFBasicWages]').val();
            var empPF = Math.round(empbasicwages * emppfpercent) || 0;
            $('input[name=EmployeePF]').val(empPF);
            $("#lblEmployeePF").html(empPF);
            var empESIC = Math.ceil(salary * empESICpercent) || 0;
            $('input[name=EmployeeESIC]').val(empESIC);
            $("#lblEmployeeESIC").html(empESIC);
            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                //$('input[name=EmployeeESIC]').val(0);
                //$("#lblEmployeeESIC").html(0);
                empPF = 0;
                //empESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);

                empPF = Math.round(emppfbasicwages * emppfpercent) || 0;
                $('input[name=EmployeePF]').val(empPF);
                $("#lblEmpPFBasicWages").html(emppfbasicwages);

                $("#lblGrossSalary").html(salary);
                $("#lblEmployeePF").html(empPF);
                empESIC = Math.ceil(salary * empESICpercent) || 0;
                $('input[name=EmployeeESIC]').val(empESIC);
                $("#lblEmployeeESIC").html(empESIC);
            }
            if(typeofappoint == "Part time")
            {
                $('input[name=EmpPFBasicWages]').val(0);
                $("#lblEmpPFBasicWages").html(0);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                empPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            //var empproftax = parseFloat($('input[name=EmployeeProfessionalTax]').val()) || 0;
            //if(empproftax == 0)
            //{
            //    empproftax = 208
            //}
            var empproftax = profesTax || 0;
            if(isphysichandc == "Yes")
            {
                empproftax = 0;
            }
            $('input[name=EmployeeProfessionalTax]').val(empproftax);
            $("#lblEmployeeProfessionalTax").html(empproftax);
            var totlempdeduct = empPF + empESIC + empproftax;
            $('input[name=EmployeeTtlDeduct]').val(totlempdeduct);
            $("#lblEmployeeTtlDeduct").html(totlempdeduct);
            var empnetsalary = salary - totlempdeduct;
            $('input[name=EmployeeNetSalary]').val(empnetsalary);
            $("#lblEmployeeNetSalary").html(empnetsalary);
            var employerPF = Math.round(empbasicwages * emplyrpfpercent) || 0;
            $('input[name=EmployerPF]').val(employerPF);
            $("#lblEmployerPF").html(employerPF);
            var employerESIC = Math.ceil(salary * emplyrESICpercent) || 0;
            $('input[name=EmployerESIC]').val(employerESIC);
            $("#lblEmployerESIC").html(employerESIC);

            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                //$('input[name=EmployerESIC]').val(0);
                //$("#lblEmployerESIC").html(0);
                employerPF = 0;
                //employerESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                employerPF = Math.round(emppfbasicwages * emplyrpfpercent) || 0;
                $('input[name=EmployerPF]').val(employerPF);
                $("#lblEmployerPF").html(employerPF);
                employerESIC = Math.ceil(salary * emplyrESICpercent) || 0;
                $('input[name=EmployerESIC]').val(employerESIC);
                $("#lblEmployerESIC").html(employerESIC);
            }
            //var employerIns = parseFloat($('input[name=EmployerIns]').val()) || 0;
            var employerIns = ins || 0;
            if(employerIns == 0)
            {
                employerIns = 250
            }
            if(typeofappoint == "Part time")
            {
                //$('input[name=EmpPFBasicWages]').val(0);
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                employerIns = 0;
                employerPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            $('input[name=EmployerIns]').val(employerIns);
            $("#lblEmployerIns").html(employerIns);
            var ttlemployerContribute = employerPF + employerESIC + employerIns;
            $('input[name=EmployerTtlContribute]').val(ttlemployerContribute);
            $("#lblEmployerTtlContribute").html(ttlemployerContribute);
            var employeeCTC = salary + ttlemployerContribute;
            $('input[name=EmployeeCTC]').val(employeeCTC);
            $("#lblEmployeeCTC").html(employeeCTC);
            var agencyFee = Math.round(employeeCTC * agncyfee) || 0;
            //var agencyFee = Math.round(employeeCTC * 0.0194) || 0;
            $('input[name=AgencyFee]').val(agencyFee);
            $("#lblAgencyFee").html(agencyFee);
            var ctcwithagencyfee = agencyFee + employeeCTC;
            $('input[name=CTCwithAgencyFee]').val(ctcwithagencyfee);
            $("#lblCTCwithAgencyFee").html(ctcwithagencyfee);
            var salaryGST = Math.round(ctcwithagencyfee * gstpercent) || 0;
            $('input[name=SalaryGST]').val(salaryGST);
            $("#lblSalaryGST").html(salaryGST);
            var totalCTC = ctcwithagencyfee + salaryGST;
            $('input[name=TotalCTC]').val(totalCTC);
            $("#lblTotalCTC").html(totalCTC);
        }
        if(salary > genESICSlab && isphysichandc != "Yes")
        {
            $('input[name=EmpPFBasicWages]').val(0);
            $("#lblEmpPFBasicWages").html(0);
            $("#lblGrossSalary").html(salary);
            var empbasicwages = $('input[name=EmpPFBasicWages]').val();
            var empPF = Math.round(empbasicwages * emppfpercent) || 0;
            $('input[name=EmployeePF]').val(empPF);
            $("#lblEmployeePF").html(empPF);
            var empESIC = 0;
            $('input[name=EmployeeESIC]').val(empESIC);
            $("#lblEmployeeESIC").html(empESIC);
            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                $('input[name=EmployeeESIC]').val(0);
                $("#lblEmployeeESIC").html(0);
                empPF = 0;
                empESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);

                empPF = Math.round(emppfbasicwages * emppfpercent) || 0;
                $('input[name=EmployeePF]').val(empPF);
                $("#lblEmpPFBasicWages").html(emppfbasicwages);

                $("#lblGrossSalary").html(salary);
                $("#lblEmployeePF").html(empPF);
                //empESIC = Math.round(salary * 0.0075) || 0;
                empESIC = 0;
                $('input[name=EmployeeESIC]').val(empESIC);
                $("#lblEmployeeESIC").html(empESIC);
            }
            if(typeofappoint == "Part time")
            {
                $('input[name=EmpPFBasicWages]').val(0);
                $("#lblEmpPFBasicWages").html(0);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                empPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            //var empproftax = parseFloat($('input[name=EmployeeProfessionalTax]').val()) || 0;
            //if(empproftax == 0)
            //{
            //    empproftax = 208
            //}
            var empproftax = profesTax || 0;
            if(isphysichandc == "Yes")
            {
                empproftax = 0;
            }
            $('input[name=EmployeeProfessionalTax]').val(empproftax);
            $("#lblEmployeeProfessionalTax").html(empproftax);
            var totlempdeduct = empPF + empESIC + empproftax;
            $('input[name=EmployeeTtlDeduct]').val(totlempdeduct);
            $("#lblEmployeeTtlDeduct").html(totlempdeduct);
            var empnetsalary = salary - totlempdeduct;
            $('input[name=EmployeeNetSalary]').val(empnetsalary);
            $("#lblEmployeeNetSalary").html(empnetsalary);
            var employerPF = Math.round(emppfbasicwages * emplyrpfpercent) || 0;
            $('input[name=EmployerPF]').val(employerPF);
            $("#lblEmployerPF").html(employerPF);
            var employerESIC = 0;
            $('input[name=EmployerESIC]').val(employerESIC);
            $("#lblEmployerESIC").html(employerESIC);

            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                $('input[name=EmployerESIC]').val(0);
                $("#lblEmployerESIC").html(0);
                employerPF = 0;
                employerESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                employerPF = Math.round(emppfbasicwages * emplyrpfpercent) || 0;
                $('input[name=EmployerPF]').val(employerPF);
                $("#lblEmployerPF").html(employerPF);
                //employerESIC = Math.round(salary * 0.0325) || 0;
                employerESIC = 0;
                $('input[name=EmployerESIC]').val(employerESIC);
                $("#lblEmployerESIC").html(employerESIC);
            }
            var employerIns = ins || 0;
            //var employerIns = parseFloat($('input[name=EmployerIns]').val()) || 0;
            if(employerIns == 0)
            {
                employerIns = 250
            }
            if(typeofappoint == "Part time")
            {
                //$('input[name=EmpPFBasicWages]').val(0);
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                employerIns = 0;
                employerPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            $('input[name=EmployerIns]').val(employerIns);
            $("#lblEmployerIns").html(employerIns);
            var ttlemployerContribute = employerPF + employerESIC + employerIns;
            $('input[name=EmployerTtlContribute]').val(ttlemployerContribute);
            $("#lblEmployerTtlContribute").html(ttlemployerContribute);
            var employeeCTC = salary + ttlemployerContribute;
            $('input[name=EmployeeCTC]').val(employeeCTC);
            $("#lblEmployeeCTC").html(employeeCTC);
            //var agencyFee = Math.round(employeeCTC * 0.0194) || 0;
            var agencyFee = Math.round(employeeCTC * agncyfee) || 0;
            $('input[name=AgencyFee]').val(agencyFee);
            $("#lblAgencyFee").html(agencyFee);
            var ctcwithagencyfee = agencyFee + employeeCTC;
            $('input[name=CTCwithAgencyFee]').val(ctcwithagencyfee);
            $("#lblCTCwithAgencyFee").html(ctcwithagencyfee);
            var salaryGST = Math.round(ctcwithagencyfee * gstpercent) || 0;
            $('input[name=SalaryGST]').val(salaryGST);
            $("#lblSalaryGST").html(salaryGST);
            var totalCTC = ctcwithagencyfee + salaryGST;
            $('input[name=TotalCTC]').val(totalCTC);
            $("#lblTotalCTC").html(totalCTC);
        }
        if(salary > phESICSlab && isphysichandc == "Yes")
        {
            $('input[name=EmpPFBasicWages]').val(0);
            $("#lblEmpPFBasicWages").html(0);
            $("#lblGrossSalary").html(salary);
            var empbasicwages = $('input[name=EmpPFBasicWages]').val();
            var empPF = Math.round(empbasicwages * emppfpercent) || 0;
            $('input[name=EmployeePF]').val(empPF);
            $("#lblEmployeePF").html(empPF);
            var empESIC = 0;
            $('input[name=EmployeeESIC]').val(empESIC);
            $("#lblEmployeeESIC").html(empESIC);
            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                $('input[name=EmployeeESIC]').val(0);
                $("#lblEmployeeESIC").html(0);
                empPF = 0;
                empESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                $('input[name=EmpPFBasicWages]').val(emppfbasicwages);

                empPF = Math.round(emppfbasicwages * emppfpercent) || 0;
                $('input[name=EmployeePF]').val(empPF);
                $("#lblEmpPFBasicWages").html(emppfbasicwages);

                $("#lblGrossSalary").html(salary);
                $("#lblEmployeePF").html(empPF);
                //empESIC = Math.round(salary * 0.0075) || 0;
                empESIC = 0;
                $('input[name=EmployeeESIC]').val(empESIC);
                $("#lblEmployeeESIC").html(empESIC);
            }
            if(typeofappoint == "Part time")
            {
                $("#lblEmpPFBasicWages").html(0);
                $('input[name=EmpPFBasicWages]').val(0);
                $('input[name=EmployeePF]').val(0);
                $("#lblEmployeePF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                empPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            //var empproftax = parseFloat($('input[name=EmployeeProfessionalTax]').val()) || 0;
            //if(empproftax == 0)
            //{
            //    empproftax = 208
            //}
            var empproftax = profesTax || 0;
            if(isphysichandc == "Yes")
            {
                empproftax = 0;
            }
            $('input[name=EmployeeProfessionalTax]').val(empproftax);
            $("#lblEmployeeProfessionalTax").html(empproftax);
            var totlempdeduct = empPF + empESIC + empproftax;
            $('input[name=EmployeeTtlDeduct]').val(totlempdeduct);
            $("#lblEmployeeTtlDeduct").html(totlempdeduct);
            var empnetsalary = salary - totlempdeduct;
            $('input[name=EmployeeNetSalary]').val(empnetsalary);
            $("#lblEmployeeNetSalary").html(empnetsalary);
            var employerPF = Math.round(emppfbasicwages * emplyrpfpercent) || 0;
            $('input[name=EmployerPF]').val(employerPF);
            $("#lblEmployerPF").html(employerPF);
            var employerESIC = 0;
            $('input[name=EmployerESIC]').val(employerESIC);
            $("#lblEmployerESIC").html(employerESIC);

            if(isemppfwages == true && emppfbasicwages == 0)
            {
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                $('input[name=EmployerESIC]').val(0);
                $("#lblEmployerESIC").html(0);
                employerPF = 0;
                employerESIC = 0;
            }
            if(isemppfwages == true && emppfbasicwages > 0)
            {
                employerPF = Math.round(emppfbasicwages * emplyrpfpercent) || 0;
                $('input[name=EmployerPF]').val(employerPF);
                $("#lblEmployerPF").html(employerPF);
                //employerESIC = Math.round(salary * 0.0325) || 0;
                employerESIC = 0;
                $('input[name=EmployerESIC]').val(employerESIC);
                $("#lblEmployerESIC").html(employerESIC);
            }
            //var employerIns = parseFloat($('input[name=EmployerIns]').val()) || 0;
            var employerIns = ins || 0;
            if(employerIns == 0)
            {
                employerIns = 250
            }
            if(typeofappoint == "Part time")
            {
                //$('input[name=EmpPFBasicWages]').val(0);
                $('input[name=EmployerPF]').val(0)
                $("#lblEmployerPF").html(0);
                $('input[name=EmpPFBasicWages]').attr('readonly',true);
                employerIns = 0;
                employerPF = 0;
            }
            else if(typeofappoint == "Full time")
            {
                $('input[name=EmpPFBasicWages]').removeAttr("readonly");
            }
            $('input[name=EmployerIns]').val(employerIns);
            $("#lblEmployerIns").html(employerIns);
            var ttlemployerContribute = employerPF + employerESIC + employerIns;
            $('input[name=EmployerTtlContribute]').val(ttlemployerContribute);
            $("#lblEmployerTtlContribute").html(ttlemployerContribute);
            var employeeCTC = salary + ttlemployerContribute;
            $('input[name=EmployeeCTC]').val(employeeCTC);
            $("#lblEmployeeCTC").html(employeeCTC);
            //var agencyFee = Math.round(employeeCTC * 0.0194) || 0;
            var agencyFee = Math.round(employeeCTC * agncyfee) || 0;
            $('input[name=AgencyFee]').val(agencyFee);
            $("#lblAgencyFee").html(agencyFee);
            var ctcwithagencyfee = agencyFee + employeeCTC;
            $('input[name=CTCwithAgencyFee]').val(ctcwithagencyfee);
            $("#lblCTCwithAgencyFee").html(ctcwithagencyfee);
            var salaryGST = Math.round(ctcwithagencyfee * gstpercent) || 0;
            $('input[name=SalaryGST]').val(salaryGST);
            $("#lblSalaryGST").html(salaryGST);
            var totalCTC = ctcwithagencyfee + salaryGST;
            $('input[name=TotalCTC]').val(totalCTC);
            $("#lblTotalCTC").html(totalCTC);
        }

        calculatetaxTotal();

        if($('#ArrearOrDeductionTillDate').val() != "") {
            var Arrearamount = calculatetaxTotal(true) || 0;
            $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
        }
    });
    }


    $('#RequestReference').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNo").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });

    var selSource = $('#RequestReference').val();
    $("#divRefNum, #divRefEmailDate").addClass('dis-none');
    if (selSource == '1') {
        applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    } else if (selSource == '3') {
        applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }
    else if (selSource == '2') {
        $('#divRefEmailDate').removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
    } else {
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }



    $(document).on('click', 'a[class="rct-del-doc"]', function () {
        if (OrderID > 0) {
            var $this = $(this);
            var Filepath = $this.attr("value");
            $(".loading-bg").removeClass('dis-none');
            $.getJSON("@Url.Action("DeleteDocument", "Requirement")", { Appid : ApplicationID, Apptype : typcategory, Doctype : "PI Justification Document", File : Filepath ,Orderid : OrderID},
            function (result) {
                if(result == true)
                {
                    $this.parent('h4').remove();
                    $.alert({
                        title: 'Success Alert!',
                        content: "PI Justification document deleted.",
                        type: 'green'
                    });
                    $(".loading-bg").addClass('dis-none');
                }
                else
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: "PI Justification document not deleted.",
                        type: 'red'
                    });
                    $(".loading-bg").addClass('dis-none');
                }
            });
        }
    });
</script>
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
