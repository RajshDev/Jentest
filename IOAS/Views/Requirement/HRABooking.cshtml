@model IOAS.Models.HRAOrderModel
@using IOAS.GenericServices
@{
    ViewBag.Title = "HRA";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
    <link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
    string Remark = RequirementService.GetRejectCommitment(Model.ApplicationNo, 0);
}
<style>
    .modal-dialog {
        width: 850px;
    }

    .file-upload {
        width: 280px;
    }

    .ui-datepicker {
        z-index: 1001 !important;
    }
</style>
@using (Html.BeginForm("HRABooking", "Requirement", FormMethod.Post, new { @class = "", role = "form", @id = "formHRA", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>HRA</b></h4>
        </div>
        <div></div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-2 ds-spl-bg">

            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    @Html.HiddenFor(m => m.ApplicationID)
                    @Html.HiddenFor(m => m.OrderID)
                    @Html.HiddenFor(m => m.OrderType)
                    @Html.HiddenFor(m => m.Status)
                    @Html.HiddenFor(m => m.TypeCode)
                    @Html.HiddenFor(m => m.ApplicationNo)
                    <span>Request Reference</span>
                    @Html.DropDownListFor(m => m.RequestReference, new SelectList(ViewBag.ReferenceType, "id", "name"), "Select", new { @class = "form-control" })
                    <div>@Html.ValidationMessageFor(m => m.RequestReference)</div>
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(M => M.ReferenceNo, new { @class = "form-control" })
                    @*@Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                        <div>@Html.ValidationMessageFor(M => M.SourceReferenceNumber)</div>*@
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div><div class="col-md-4">
            </div>
        </div>
    </div>
    <div class="row cust-tab">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">

                    <div class="row">
                        <div class="col-md-12">

                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Employee Id</label>
                                                <h4>
                                                    @Html.DisplayFor(m => m.EmployeeID)
                                                </h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Type of appointment </label>
                                                <h4>@Html.DisplayFor(m => m.Typeofappointment)</h4>
                                                @Html.HiddenFor(m => m.TypeofappointmentId)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group  ">
                                                <label>Email ID</label>
                                                <h4>@Html.DisplayFor(m => m.Email)</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Name </label>
                                                <h4 id="CantidateName">@Html.DisplayFor(m => m.Name)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Father’s / Husband’s Name</label>
                                                <h4>@Html.DisplayFor(m => m.Nameoftheguardian)</h4>
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Permanent Address  </label>
                                                <h4>
                                                    @Html.DisplayFor(m => m.PermanentAddress)
                                                </h4>
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Temporary Address  </label>
                                                <h4>
                                                    @Html.DisplayFor(m => m.PresentAddress)
                                                </h4>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Contact No</label>
                                                <h4>@Html.DisplayFor(m => m.ContactNumber)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Date of Birth</label>
                                                <h4>@Html.DisplayFor(m => m.DateofBirth)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Age</label>
                                                <h4 id="Age">@Html.DisplayFor(m => m.Age)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group  ">
                                                <label>Sex</label>
                                                <h4>@Html.DisplayFor(m => m.Sex)</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Upload HRA form</label> <br>
                                                @if (Model.OrderID > 0 && !string.IsNullOrEmpty(Model.HRAFormPath))
                                                {
                                                    <input type="file" name="HRAForm" class="file-upload pull-left">
                                                    <div>@Html.ValidationMessage("HRAForm")</div>
                                                    @Html.ActionLink(Model.HRAFormName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.HRAFormPath }, new { @name = "DocDownload", @target = "_blank" })
                                                }
                                                else
                                                {
                                                    <input type="file" name="HRAForm" class="file-upload pull-left" required>
                                                    <div>@Html.ValidationMessage("HRAForm")</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Proof of Address</label> <br>
                                                @Html.DropDownListFor(m => m.AddressProof, new SelectList(ViewBag.ProofofAddress, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.AddressProof)</div>
                                                <br>
                                                @if (Model.OrderID > 0 && !string.IsNullOrEmpty(Model.AddressProofPath))
                                                {
                                                    <input type="file" name="ProofAddress" class="file-upload pull-left">
                                                    <div>@Html.ValidationMessage("ProofAddress")</div>
                                                    @Html.ActionLink(Model.AddressProofName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.AddressProofPath }, new { @name = "DocDownload", @target = "_blank" })
                                                }
                                                else
                                                {
                                                    <input type="file" name="ProofAddress" class="file-upload pull-left" required>
                                                    <div>@Html.ValidationMessage("ProofAddress")</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label class="">PI email request</label> <br>
                                                <input type="file" name="PILetter" class="file-upload pull-left">
                                                <div>@Html.ValidationMessage("PILetter")</div>
                                                <h4>
                                                    @if (Model.OrderID > 0 && !string.IsNullOrEmpty(Model.PILetterPath))
                                                    {
                                                        @Html.ActionLink(Model.PILetterFileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.PILetterPath }, new { @name = "DocDownload", @target = "_blank" })
                                                    }
                                                    @if (!string.IsNullOrEmpty(Model.Status) && (Model.Status == "Open" || Model.Status.Contains("Note")))
                                                    {
                                                        <a class="rct-del-doc" value="@Model.PILetterPath">Delete</a>
                                                    }
                                                </h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Application ReceiveDate</label>
                                                @Html.EditorFor(m => m.ApplicationReceiveDate, new { @class = "form-control required" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicationReceiveDate)</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Number</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.ProjectNumber)</h4>
                                                    @Html.HiddenFor(m => m.Appointmentdetails.ProjectID)
                                                    @Html.Hidden("ProjectId", Model.Appointmentdetails.ProjectID)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.ProjectTitle)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Name of the Client / Sponsoring Agency</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.SponsoringAgency)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Type</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.ProjectType)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.PIName)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.ProjectStartDate)</h4>

                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Closure Date</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.ProjectClosureDate)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Code</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.PICode)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Email ID</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.Email)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Phone No</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.Phone)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department code </label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.PIDepartmentCode)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.PIDepartmentName)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Appointment start date</label>
                                                            <h4 id="lblAppointmentStartDate">@Html.DisplayFor(m => m.Appointmentdetails.AppointmentStartDate)</h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Appointment End date</label>
                                                            <h4 id="lblAppointmentEndDate">@Html.DisplayFor(m => m.Appointmentdetails.AppointmentClosureDate)</h4>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.Designation)</h4>
                                                    @Html.Hidden("DesignationId", Model.Appointmentdetails.DesignationId)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation Code</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.DesignationCode)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3 mt-lg">
                                                <div class="form-group custom-form-group">
                                                    <input type="button" class="btn btn-success" value="Project Fund Availability" id="btnViewSummary">
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="">Commitment Amount</label>
                                                    <h4 id="">@Model.Appointmentdetails.CommitmentAmmount</h4>
                                                    @Html.Hidden("PrjAviAvailableBalance")
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Salary Level Range <i class="ion-information-circled" data-toggle="tooltip" data-original-title="@Model.Appointmentdetails.SalaryLevelDescription"></i></label>
                                                    <h4>@Model.Appointmentdetails.SalaryLevel</h4>
                                                    @Html.HiddenFor(m => m.Appointmentdetails.SalaryLevel)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Salary</label>
                                                    <h4 id="Salary">@Model.Appointmentdetails.Salary</h4>
                                                    @Html.Hidden("Salary", Model.Appointmentdetails.Salary)
                                                    @Html.Hidden("MinSalary", 0)
                                                    @Html.Hidden("MaxSalary", 0)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>HRA</label>
                                                    @if (Model.OrderID > 0)
                                                    {
                                                        @Html.TextBoxFor(m => m.HRA, new { @class = "form-control required", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                        <div>@Html.ValidationMessageFor(m => m.HRA)</div>
                                                    }
                                                    else
                                                    {
                                                        @Html.TextBox("HRA", Model.Appointmentdetails.HRA, new { @class = "form-control required", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                        <div>@Html.ValidationMessage("HRA")</div>
                                                    }
                                                    @Html.HiddenFor(m => m.Appointmentdetails.HRA)
                                                    @Html.HiddenFor(m => m.isHRA)
                                                    @Html.HiddenFor(m => m.HRAPercentage)
                                                </div>
                                            </div>
                                            <div class="col-md-3  reg-no custom-reg-no">
                                                <div class="form-group custom-form-group">
                                                    <label>Additional Commitment</label>
                                                    @Html.TextBoxFor(m => m.CommitmentAmount, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off", @readonly = "readonly" })
                                                    <div>@Html.ValidationMessageFor(m => m.CommitmentAmount)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">HRA<br>From Date</label>
                                                    @Html.EditorFor(m => m.FromDate, new { @class = "form-control required" })
                                                    <div>@Html.ValidationMessageFor(m => m.FromDate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">HRA<br>To Date</label>
                                                    <h4 id="txtHRAtodate"></h4>
                                                    @Html.HiddenFor(m => m.ToDate, new { @class = "required" })
                                                    <div>@Html.ValidationMessageFor(m => m.ToDate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Arrear HRA till</label>
                                                    @Html.EditorFor(m => m.ArrearOrDeductionTillDate, new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.ArrearOrDeductionTillDate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Arrear Amount</label>
                                                    @Html.TextBoxFor(m => m.ArrearOrDeductionAmount, new { @class = "form-control", @readonly = "readonly" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.Remarks)</div>
                                                    @Html.HiddenFor(m => m.isHRAFullTenure)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="text-center" style="margin-bottom: 50px;">
        <button type="button" class="btn btn-default" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
        <button type="button" class="btn btn-primary" id="nextBtn" onclick="nextPrev(1)">Next</button>
        @Html.HiddenFor(m => m.List_f)
        @if (!string.IsNullOrEmpty(Model.List_f))
        {
        <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action(Model.List_f,"Requirement")';">Close</button>
        }
        else
        {
        <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action("EmployeeMaster","Requirement")';">Close</button>
        }
    </div>

    <div id="dialogConfirm" class="modal fade" role="dialog" data-backdrop="static" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header brd-bottom">
                    <button type="button" class="close" data-dismiss="modal">×</button>
                    <h4 class="modal-title">Mail Preview</h4>
                </div>
                <div class="modal-body">
                    <div style="padding:10px;overflow:auto" id="ShowDeviation">

                    </div>
                </div>
                <div class="modal-footer brd-top">
                    <button type="button" class="btn btn-danger" id="isbtnConfirm">Confirm</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="loading-bg dis-none">
</div>
<div id="popup">

</div>

<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var alertMsg = '@TempData["alertMsg"]';
    var TypeOfAppointment = @Html.Raw(Json.Encode(Model.TypeofappointmentId)) || 0;
    var isMsPhd = @Html.Raw(Json.Encode(Model.IsMsPhd)) || false;
    var OrderID = @Html.Raw(Json.Encode(Model.OrderID)) || 0;
    var Status = @Html.Raw(Json.Encode(Model.Status)) || '';
    var Salary =  @Html.Raw(Json.Encode(Model.Appointmentdetails.Salary)) || 0;
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
        var CommitmentRemark = '@Remark' || '';
        if (CommitmentRemark != '') {
            $('#alertSuccess').html(CommitmentRemark);
            $('#Success').modal('toggle');
        }

        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        else if (alertMsg != '') {
            $('#alert').html(alertMsg);
            $('#Validation').modal('toggle');
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');

        var currentdate = moment(new Date()).toDate();

        if(OrderID > 0)
        {
            var appreceivedate = "@string.Format("{0:dd/MMMM/yyyy}", Model.ApplicationReceiveDate)";
            var appreceivedt = moment(appreceivedate.split('-').join('/')).toDate();
            var appsourceofemaildate = "@string.Format("{0:dd/MMMM/yyyy}", Model.SourceEmailDate)";
            var appsourceofemaildt = moment(appsourceofemaildate.split('-').join('/')).toDate();
            $('#ApplicationReceiveDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", appreceivedt);

            $('#SourceEmailDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", appsourceofemaildt);

        }
        else
        {
            $('#ApplicationReceiveDate,#SourceEmailDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", -185);
        }

        if(OrderID == 0)
        {
            var strappointmentend = @Html.Raw(Json.Encode(Model.Appointmentdetails.AppointmentClosureDate));
            $('#txtHRAtodate').text(strappointmentend);
            $('#ToDate').val(strappointmentend);
        }
        else
        {
            var strtodate = '@string.Format("{0:dd-MMMM-yyyy}", Model.ToDate)';
            $('#txtHRAtodate').text(strtodate)
            $('#ToDate').val(strtodate);
        }

    });
    var addyear = 0;

    //if ($("#ProjectId").val() > 0)
    //    ProjectSummary()

    if ($("#DesignationId").val() > 0)
        LoadFillDesignation()

    function LoadFillDesignation() {
        var DesignationID = $('#DesignationId').val();
        if (DesignationID > 0) {
            $.getJSON("@Url.Action("LoadDesignationDetails", "Requirement")", { DesignationID: DesignationID },
                function (result) {
                    if (result.DesignationData.DestinationID > 0) {
                        $("#MinSalary").val(result.DesignationData.MinSalary);
                        $("#MaxSalary").val(result.DesignationData.MaxSalary);
                        if (result.DesignationData.HRA)
                            $('#isHRA').val(true)
                        else
                            $('#isHRA').val(false)
                        $('#HRAPercentage').val(result.DesignationData.HRAPercentage);
                        if (Salary > 0) {
                            var HRAPercentage = parseFloat(result.DesignationData.HRAPercentage);
                            HRAPercentage = HRAPercentage / 100;
                            var hra = Salary * HRAPercentage;
                            $('#HRA').val(Math.round(hra).toFixed(0));
                            calculatetaxTotal();
                        }
                    }
                });
        }
    }

    function Updatedatepicker()
    {
        var fulltenure_f = @Html.Raw(Json.Encode(Model.isHRAFullTenure)) || false;
        var setappstrdat = "";
        var currentdate = moment(new Date()).toDate();
        var appointmentstartDate = moment($('#lblAppointmentStartDate').text().split('-').join('/')).toDate();
        var appointmentendDate   = moment($('#lblAppointmentEndDate').text().split('-').join('/')).toDate();
        setappstrdat = appointmentstartDate;
        if(fulltenure_f != true)
        {
            if (appointmentstartDate <= currentdate) {
                var currmonthbegin = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1, 'days').toDate();
                if (appointmentstartDate <= currmonthbegin && currmonthbegin <= appointmentendDate)
                    setappstrdat = currmonthbegin;
            }
        }

        var setappenddat = moment(appointmentendDate).add(-1, 'days').toDate();

        $('#ArrearOrDeductionTillDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", appointmentstartDate).datepicker("option", "maxDate", appointmentendDate);

        $('#FromDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", setappenddat);
    }

    Updatedatepicker();

    $('#HRA').keyup(function () {
        calculatetaxTotal();
    });

    $("#ArrearOrDeductionTillDate").change(function () {
        var Arrearamount = calculatetaxTotal(true) || 0;
        $('#ArrearOrDeductionAmount').val(Math.round(Arrearamount));
    });


    function calculatetaxTotal(isarrear) {

        if ($('#FromDate').val() != "" && $('#ToDate').val() != "") {
            var startdate = $('#FromDate').val();
            var enddate = $('#ToDate').val();
            if(isarrear == true)
                enddate = $('#ArrearOrDeductionTillDate').val();
            var objData = getCalDateDetails(startdate,enddate);

            var startdatemonthend = objData.starttotaldays;
            var enddatemonthend   = objData.endtotaldays;
            var startworkingdays  = objData.startworkingdays;
            var endworkingdays    = objData.endworkingdays;
            var months = 0,days = 0;
            days = startworkingdays + endworkingdays;
            months = objData.monthcount || 0;
            var hra = parseFloat($("#HRA").val()).toFixed(0) || 0;
            var hraper = $('#HRAPercentage').val() || 0;
            hraper = hraper / 100;
            hra = Salary * hraper;
            hra = parseFloat(hra).toFixed(0);
            $("#HRA").val(hra);

            var Tot = 0;
            if (TypeOfAppointment == 2) {
                hra = 0;
            }

            var startperday = hra / startdatemonthend;
            var endperday   = hra / enddatemonthend;
            var monthlyamt  = hra;
            if (months > 0) {
                Tot += monthlyamt * months;
            }
            if (days > 0) {
                Tot += startworkingdays * startperday;
                Tot += endworkingdays * endperday;
            }

            if(isarrear == true)
                return Math.round(Tot);
            if (TypeOfAppointment == 2)
                $("#HRA").val(0);
            $('#CommitmentAmount').val(Math.round(Tot));
        }
    }

    $("#FromDate, #ToDate").change(function () {
        calculatetaxTotal()
    });

    $('#FromDate').change(function () {
        var defaultstartDateDate = moment($('#FromDate').val().split('-').join('/')).add(+1, 'days').toDate();
        var endDate = moment($('#lblAppointmentEndDate').text().split('-').join('/')).toDate();
        $('#ToDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", defaultstartDateDate).datepicker("option", "maxDate", endDate);
    })


    $("#FromDate,#ArrearOrDeductionTillDate,#ToDate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        }
    });

    function checkDevation() {
        var qualifi = [];
        var descipid = [];
        var marks = [];
        addyear = 0;
        var TotalExp = 0;
        var Exp = parseFloat($('#Experience').val());
        var PersonName = $('#CantidateName').text();
        var InputData = [];
        InputData = {
            AppointmentStartDate: $('#FromDate').val(),
            AppointmentEndDate: $('#ToDate').val(),
            StaffCatecory: $('#staffcategory').val(),
            ProjectFund: $('#PrjAviAvailableBalance').val() || 0,
            CommitmentAmount: $('#CommitmentAmount').val() || 0,
            PersonName: PersonName,
            TypeOfAppointment : $('#TypeofappointmentId').val()
        }
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("HRACheckDeviation", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",
            beforeSend: function () {
                $(".loading-bg").removeClass('dis-none');
            },
            success: function (result) {
                $(".loading-bg").addClass('dis-none');
                if (result.isRes) {

                    $('#Remarks').val('Project fund is not available add negative balance')
                }
            },
            error: function (err) {
                $(".loading-bg").addClass('dis-none');
                console.log("error : " + err);
            }
        });
    }

    function AckowleadgementEmail() {
        var PersonName = $('#CantidateName').text();
        var InputData = [];
        InputData = {
            DesignationId: $('#DesignationId').val() || null,
            AppointmentReciveDate: $('#ApplicationReceiveDate').val(),
            PersonName: PersonName,
            AppointmentStartDate: $('#FromDate').val(),
            AppointmentEndDate: $('#ToDate').val(),
            OrderType: "HRA Booking",
            BasicPay: parseFloat($('#HRA').val()).toFixed(2),
            
            AppId : $('#ApplicationID').val(),
            AppType : 'STE'
        }
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("OrderEmailProcess", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",
            beforeSend: function () {
                $(".loading-bg").removeClass('dis-none');
            },
            success: function (result) {
                $("#ShowDeviation").html(result.output.Item2);
                $(".loading-bg").addClass('dis-none');
            },
            error: function (err) {
                $(".loading-bg").addClass('dis-none');
                console.log("error : " + err);
            }
        });
    }

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("cust-tab");
        x[n].style.display = "block";

        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            if (Status == "" || Status.includes("Open") || Status.includes("Note to PI")) {
                document.getElementById("nextBtn").style.display = "inline";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }
            else {
                document.getElementById("nextBtn").style.display = "none";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }

        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            document.getElementById("nextBtn").style.display = "inline";
        }
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("cust-tab");
        // Exit the function if any field in the current tab is invalid:
        var v = n;

        if (n > 0 && !validateForm(v)) {
            $.confirm({
                title: 'Warning!',
                content: 'Invalid data exist',
                type: 'red',
                buttons: {
                    Ok: function () {
                        //close
                    },
                },
            });
            return false;
        }
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        }
        else {
            // ... the form gets submitted:
            // ... Update checklist in the deviation
            if (parseInt($('#OrderID').val()) == 0) {
                $('#divBcc').addClass('dis-none');
                $('#ShowDeviation').empty();
                AckowleadgementEmail()
                PopupConfirm()
            }
            else
                formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }


    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $("#formHRA");
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(tabs).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;
        }
        $(stepElements).each(function (idx) {
            if (!$(this).is(':radio') && !$(this).is(':checkbox')) {
                isValid = $(this).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) {
                    hadError = true;
                } // set our flag if there was an error
            }
        });
        if (!hadError && n != 2) {
            if ($('#DesignationId').val() != null || $('#DesignationId').val() != "") {
                checkDevation();
            }
        }
        return !hadError; // return the valid status
    }

    function PopupConfirm() {
        $('#dialogConfirm').modal('toggle');
    }

    $('#isbtnConfirm').click(function () {
        $(this).attr("disabled", "disabled");
        $('.loading-bg').removeClass('dis-none');
        formSave()
    });

    function formSave() {
        $('#isDraftbtn').val(false);
        var isValid = $('#formHRA').valid();
        if (!isValid)
            return false;
        if (isValid)
            $('#formHRA').submit();
    }

    $(document).on('click', '#btnViewSummary', function () {
        var projNo = $('#ProjectId').val() || 0;
        if (projNo > 0) {
            var searchData = { "ProjectId": projNo };
            $.ajax({
                url: "@Url.Action("_ProjectSummary", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                beforeSend: function () {
                    $(".loading-bg").removeClass('dis-none');
                },
                success: function (result) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(result);
                    $("#projectSummaryModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    var isMedical = $('select[name="Medical"]').val();
    if (isMedical != "") {
        $('#divMedicalAmmount').removeClass('dis-none');
        if (isMedical == 1||isMedical ==2) {
            $('#MedicalAmmount').val(205);
        }
        else if (isMedical == 3) {
            $('#MedicalAmmount').val(0);
            $('#divMedicalAmmount').addClass('dis-none');
        }
    }

    $(document).on('change', 'input[name$=".IsChecked"]', function () {
        var isUnchecked = false;
        $('input[name$=".IsChecked"]').each(function () {
            if ($(this).is(':checked')) {
                isUnchecked = true;
            }
        });
        $("input[name=FlowofMail]").prop('checked', false);

        if (!isUnchecked) {
            $("input[name=FlowofMail][value=Nd]").prop('checked', true);
            $('#nextBtn').text('Send for approval');
        }
        else {
            $("input[name=FlowofMail][value=NP]").prop('checked', true);
            $('#nextBtn').text('Send for clarification');
        }
    });

    $(document).on('change', 'input[name="FlowofMail"]', function () {
        var isUnchecked = false;
        var value = $('input[name="FlowofMail"]:checked').val();
        if (value == "Nd") {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', false);
            });
            $('#nextBtn').text('Send for approval');
        }
        else {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', true);
            });
            $('#nextBtn').text('Send to clarification');
        }
    });

    $('a[name="DocDownload"]').click(function (p) {
        p.preventDefault();
        var ref = $(this).attr('href');
        var win = window.open('', '_blank');
        win.location.href = ref;
    });

    var findtabs = $(".cust-tab");
    $(findtabs[0]).find('textarea,input[type="text"]').each(function () {
        var id = $(this).attr('id');
        var name = $(this).attr('name').split('.')[1];
        var notinid    = ["DesignationCode", "ProjectNumber"];
        var notinename = ["DesignationautoComplete"];
        if (!notinid.includes(id) && !notinename.includes(name)) {
            $(this).attr('style', 'text-transform:uppercase');
        }
    });

    $(document).on('keyup','textarea,input[type="text"]',function(event) {

        if($(this).attr('id') != "Remarks" && $(this).attr('id') != undefined) {
            var input = event.target;
            var start = input.selectionStart;
            var end = input.selectionEnd;
            input.value = input.value.toLocaleUpperCase();
            input.setSelectionRange(start, end);
        }
    });

    $('input[name="HRAForm"],input[name="PILetter"],input[name="ProofAddress"]').change(function (e) {
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        var fileName = e.target.files[0].name;
        var allowedExtensionsPdf = [".pdf",".doc",".docx"];
        var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
        var DocFormat = allowedExtensionsPdf.includes('.' + extension);
        if (DocFormat) {
            if (iSize > 5120) {
                $('#alert').html('PDF size should be allow below 5MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            $('#alert').html('HRA form ,Address proof and PI letter allowed document type [pdf,doc,docx]');
            $('#Validation').modal('toggle');
            $(this).val('');
            return;
        }
    });


    function FormDisabled() {
        $("#formHRA").find("input, select, textarea").each(function () {
            var disabled_f = $(this).is(":disabled");
            if (!disabled_f) {
                $(this).attr("disabled", "disabled");
            }
        });
    }


    var disabledStatus = ["", "Open", "Note to PI"];
    if (!disabledStatus.includes(Status)) {
        FormDisabled();
        $('#btnViewSummary').removeAttr('disabled');
        $('#btnViewStaffAllocation').removeAttr('disabled');
    }

    $('#RequestReference').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNo").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });

    var selSource = $('#RequestReference').val();
    $("#divRefNum, #divRefEmailDate").addClass('dis-none');
    if (selSource == '1') {
        applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }
    else if (selSource == '3') {
        applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }
    else if (selSource == '2') {
        $('#divRefEmailDate').removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
    }
    else {
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }

    $('#SourceEmailDate').change(function(){
        var value=$(this).val();
        $('#ApplicationReceiveDate').val(value);
    });

    $(document).on('click', 'a[class="rct-del-doc"]', function () {
        if (OrderID > 0) {
            var $this = $(this);
            var Filepath = $this.attr("value");
            $(".loading-bg").removeClass('dis-none');
            $.getJSON("@Url.Action("DeleteDocument", "Requirement")", { Appid : $('#ApplicationID').val() , Apptype : "STE", Doctype : "PI Request Document", File : Filepath ,Orderid : OrderID},
            function (result) {
                if(result == true)
                {
                    $this.parent('h4').remove();
                    $.alert({
                        title: 'Success Alert!',
                        content: "PI request document deleted.",
                        type: 'green'
                    });
                    $(".loading-bg").addClass('dis-none');
                }
                else
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: "PI request document not deleted.",
                        type: 'red'
                    });
                    $(".loading-bg").addClass('dis-none');
                }
            });
        }
    });


</script>
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
