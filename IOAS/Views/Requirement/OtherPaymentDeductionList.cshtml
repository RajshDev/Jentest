
@{
    ViewBag.Title = "OtherPaymentDeductionList";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h3>Other Payment Deduction List</h3>
        <ul class="nav nav-pills custom-nav-pills custom-spl-nav">
            <li class="active"><a data-toggle="tab" href="#tabJsOTHSTE" class="brd-rd-md">Short term</a></li>
            <li><a data-toggle="tab" href="#tabJsOTHOSG" class="brd-rd-md">OutSourcing</a></li>
            <li><a data-toggle="tab" href="#tabJsOTHCON" class="brd-rd-md">Consultant</a></li>
        </ul>
    </div>
    <div class="flt-nav-links pull-right">
        <a href="@Url.Action("OtherPaymentDeduction")"> <i class="ion-plus"></i>Add New</a>
    </div>
</div>
<div class="tab-content mt30">
    <div id="tabJsOTHSTE" class="tab-pane fade in active">
        <div class="custom-jsgrid-normal">
            <div class="" id="gridDataSTE">
            </div>
        </div>
    </div>
    <div id="tabJsOTHOSG" class="tab-pane fade">
        <div class="custom-jsgrid-normal">
            <div id="gridDataOSG">

            </div>
        </div>
    </div>
    <div id="tabJsOTHCON" class="tab-pane fade">
        <div class="custom-jsgrid-normal">
            <div id="gridDataCON">

            </div>
        </div>
    </div>
</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<script type="text/javascript">
    loadedList = [];
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var alertMsg = '@TempData["alertMsg"]';
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        else if (alertMsg != '') {
            $('#alert').html(alertMsg);
            $('#Validation').modal('toggle');
        }
    });
    function searchData(href) {
        if (loadedList.indexOf(href) > -1)
            return false;
        if (href == "#tabJsOTHOSG")
            $("#gridDataOSG").jsGrid("search");
        else if (href == "#tabJsOTHCON")
            $("#gridDataCON").jsGrid("search");
    }
    $('a[href^="#tabJs"]').click(function () {
        var href = $(this).attr('href');
        searchData(href);
    });
    var DateField = function (config) {
        jsGrid.Field.call(this, config);
    };

    DateField.prototype = new jsGrid.Field({
        sorter: function (date1, date2) {
            return new Date(date1) - new Date(date2);
        },

        itemTemplate: function (value) {
            return new Date(value).toDateString();
        },

        filterTemplate: function () {
            var now = new Date();
            this._fromPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() - 1), changeYear: true });
            this._toPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() + 1), changeYear: true });
            return $("<div>").append(this._fromPicker).append(this._toPicker);
        },

        insertTemplate: function (value) {
            return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
        },

        editTemplate: function (value) {
            return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
        },

        insertValue: function () {
            return this._insertPicker.datepicker("getDate").toISOString();
        },

        editValue: function () {
            return this._editPicker.datepicker("getDate").toISOString();
        },

        filterValue: function () {
            return {
                from: this._fromPicker.datepicker("getDate"),
                to: this._toPicker.datepicker("getDate")
            };
        }
    });
    jsGrid.fields.date = DateField;
    var db;

    $("#gridDataSTE").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 5,
        editing: false,
        filtering: true,
        pageLoading: true,
        autoload: true,
        controller: {

            loadData: function (filter) {
                var searchData = [];
                searchData = {
                    SearchEMPNo: filter.EmployeeNo || null,
                    ProjectNo: filter.ProjectNumber || null,
                    EmployeeName: filter.Name || null,
                    Appointmenttype: filter.AppointmentTypeName || null,
                    //SearchOtherType: filter.OtherType || null,
                    //SearchPaymentNo: filter.OtherPaymentNo || null,
                    SearchStatus: filter.Status || null
                },
                filter.model = searchData;
                filter.Category = "STE";
                var deferred = $.Deferred();
                $.ajax({
                    type: "post",
                    url: 'GetEmployeeOtherPaymentList',
                    data: JSON.stringify(filter),
                    contentType: "application/json; charset=utf-8",
                    success: function (result) {
                        var da = {
                            data: result.Detail,
                            itemsCount: result.TotalRecords
                        }
                        if (loadedList.indexOf("#tabJsOTHSTE") == -1)
                            loadedList.push("#tabJsOTHSTE");
                        deferred.resolve(da);
                    },
                    error: function (err) {
                        console.log("error : " + err);
                    }

                });
                return deferred.promise();
            }

        },

        fields: [
            { name: "SNo", title: "S.No", editing: false, width: 50 },
            { type: "number", name: "OTHPayDeductionId", title: "Id", visible: false },
            { type: "number", name: "OrderId", title: "OrderId", visible: false },
            { type: "text", name: "OtherPaymentNo", title: "Other Application No", visible: false },
            { type: "text", name: "EmployeeNo", title: "Employee No", editing: false },
            { type: "text", name: "Name", title: "Name", editing: false },
            { type: "text", name: "ProjectNumber", title: "Project Number", editing: false },
            { type: "text", name: "AppointmentTypeName", title: "Application Type", editing: false },
            { name: "CreatedDate", title: "Creaded Date", type: "date", width: 110 },
            { type: "text", name: "Status", title: "Status", editing: false },
            {
                type: "control", editButton: false, deleteButton: false, width: 120, title: "Action",

                itemTemplate: function (value, item) {
                    var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                    if (item.Status == "Open") {
                        statusList = [{ id: "", name: "Select Action" }, { id: "Edit", name: "Edit" },{id:"View",name:"View"}]
                    }
                    else {
                        statusList = [{ id: "", name: "Select Action" }, { id: "View", name: "View" }]
                    }
                    var $customSelect;

                        $customSelect = $("<select>")
                            .attr("class", "form-control").prop("selectedIndex", "")
                        $.each(statusList, function (index, itemData) {
                            $customSelect.append($('<option/>', {

                                value: itemData.id,
                                text: itemData.name
                            }));
                        });
                        $customSelect.change(function (e) {
                            var selVal = $(this).val();
                            if (selVal == "Edit") {
                                var url = '@Url.Action("OtherPaymentDeduction", "Requirement")?OthId=' + item.OTHPayDeductionId;
                                window.location.href = url;
                            }
                            else if (selVal == "View") {
                                var url = '@Url.Action("OtherPaymentDeductionView", "Requirement")?OthId=' + item.OTHPayDeductionId;
                                window.location.href = url;
                            }

                            $(this).val("");
                            return false;
                            e.stopPropagation();
                        });
                        return $result.add($customSelect);

                },
                _createFilterSwitchButton: function () {
                    return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                }
            }


        ],

    });
    $("#gridDataOSG").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 5,
        editing: false,
        filtering: true,
        pageLoading: true,
        controller: {

            loadData: function (filter) {
                var searchData = [];
                searchData = {
                    SearchEMPNo: filter.EmployeeNo || null,
                    ProjectNo: filter.ProjectNumber || null,
                    EmployeeName: filter.Name || null,
                    Appointmenttype: filter.AppointmentTypeName || null,
                    //SearchOtherType: filter.OtherType || null,
                    //SearchPaymentNo: filter.OtherPaymentNo || null,
                    SearchStatus: filter.Status || null
                },
                filter.model = searchData;
                filter.Category = "OSG";
                var deferred = $.Deferred();
                $.ajax({
                    type: "post",
                    url: 'GetEmployeeOtherPaymentList',
                    data: JSON.stringify(filter),
                    contentType: "application/json; charset=utf-8",
                    success: function (result) {
                        var da = {
                            data: result.Detail,
                            itemsCount: result.TotalRecords
                        }
                        if (loadedList.indexOf("#tabJsOTHOSG") == -1)
                            loadedList.push("#tabJsOTHOSG");
                        deferred.resolve(da);
                    },
                    error: function (err) {
                        console.log("error : " + err);
                    }

                });
                return deferred.promise();
            }

        },

        fields: [
            { name: "SNo", title: "S.No", editing: false, width: 50 },
            { type: "number", name: "OTHPayDeductionId", title: "Id", visible: false },
            { type: "number", name: "OrderId", title: "OrderId", visible: false },
            { type: "text", name: "OtherPaymentNo", title: "Other Application No", visible: false },
            { type: "text", name: "EmployeeNo", title: "Employee No", editing: false },
            { type: "text", name: "Name", title: "Name", editing: false },
            { type: "text", name: "ProjectNumber", title: "Project Number", editing: false },
            { type: "text", name: "AppointmentTypeName", title: "Application Type", editing: false },
            { name: "CreatedDate", title: "Creaded Date", type: "date", width: 110 },
            { type: "text", name: "Status", title: "Status", editing: false },
            {
                type: "control", editButton: false, deleteButton: false, width: 120, title: "Action",

                itemTemplate: function (value, item) {
                    var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                    if (item.Status == "Open") {
                        statusList = [{ id: "", name: "Select Action" }, { id: "Edit", name: "Edit" }, { id: "View", name: "View" }]
                    }
                    else {
                        statusList = [{ id: "", name: "Select Action" }, { id: "View", name: "View" }]
                    }
                    var $customSelect;

                    $customSelect = $("<select>")
                        .attr("class", "form-control").prop("selectedIndex", "")
                    $.each(statusList, function (index, itemData) {
                        $customSelect.append($('<option/>', {

                            value: itemData.id,
                            text: itemData.name
                        }));
                    });
                    $customSelect.change(function (e) {
                        var selVal = $(this).val();
                        if (selVal == "Edit") {
                            var url = '@Url.Action("OtherPaymentDeduction", "Requirement")?OthId=' + item.OTHPayDeductionId;
                            window.location.href = url;
                        }
                        else if (selVal == "View") {
                            var url = '@Url.Action("OtherPaymentDeductionView", "Requirement")?OthId=' + item.OTHPayDeductionId;
                            window.location.href = url;
                        }

                        $(this).val("");
                        return false;
                        e.stopPropagation();
                    });
                    return $result.add($customSelect);

                },
                _createFilterSwitchButton: function () {
                    return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                }
            }


        ],

    });
    $("#gridDataCON").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 5,
        editing: false,
        filtering: true,
        pageLoading: true,
        
        controller: {

            loadData: function (filter) {
                var searchData = [];
                searchData = {
                    SearchEMPNo: filter.EmployeeNo || null,
                    ProjectNo: filter.ProjectNumber || null,
                    EmployeeName: filter.Name || null,
                    Appointmenttype: filter.AppointmentTypeName || null,
                    //SearchOtherType: filter.OtherType || null,
                    //SearchPaymentNo: filter.OtherPaymentNo || null,
                    SearchStatus: filter.Status || null
                },
                filter.model = searchData;
                filter.Category = "CON";
                var deferred = $.Deferred();
                $.ajax({
                    type: "post",
                    url: 'GetEmployeeOtherPaymentList',
                    data: JSON.stringify(filter),
                    contentType: "application/json; charset=utf-8",
                    success: function (result) {
                        var da = {
                            data: result.Detail,
                            itemsCount: result.TotalRecords
                        }
                        if (loadedList.indexOf("#tabJsOTHCON") == -1)
                            loadedList.push("#tabJsOTHCON");
                        deferred.resolve(da);
                    },
                    error: function (err) {
                        console.log("error : " + err);
                    }

                });
                return deferred.promise();
            }

        },

        fields: [
            { name: "SNo", title: "S.No", editing: false, width: 50 },
            { type: "number", name: "OTHPayDeductionId", title: "Id", visible: false },
            { type: "number", name: "OrderId", title: "OrderId", visible: false },
            { type: "text", name: "OtherPaymentNo", title: "Other Application No", visible: false },
            { type: "text", name: "EmployeeNo", title: "Employee No", editing: false },
            { type: "text", name: "Name", title: "Name", editing: false },
            { type: "text", name: "ProjectNumber", title: "Project Number", editing: false },
            { type: "text", name: "AppointmentTypeName", title: "Application Type", editing: false },
            { name: "CreatedDate", title: "Creaded Date", type: "date", width: 110 },
            { type: "text", name: "Status", title: "Status", editing: false },
            {
                type: "control", editButton: false, deleteButton: false, width: 120, title: "Action",

                itemTemplate: function (value, item) {
                    var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                    if (item.Status == "Open") {
                        statusList = [{ id: "", name: "Select Action" }, { id: "Edit", name: "Edit" }, { id: "View", name: "View" }]
                    }
                    else {
                        statusList = [{ id: "", name: "Select Action" }, { id: "View", name: "View" }]
                    }
                    var $customSelect;

                    $customSelect = $("<select>")
                        .attr("class", "form-control").prop("selectedIndex", "")
                    $.each(statusList, function (index, itemData) {
                        $customSelect.append($('<option/>', {

                            value: itemData.id,
                            text: itemData.name
                        }));
                    });
                    $customSelect.change(function (e) {
                        var selVal = $(this).val();
                        if (selVal == "Edit") {
                            var url = '@Url.Action("OtherPaymentDeduction", "Requirement")?OthId=' + item.OTHPayDeductionId;
                            window.location.href = url;
                        }
                        else if (selVal == "View") {
                            var url = '@Url.Action("OtherPaymentDeductionView", "Requirement")?OthId=' + item.OTHPayDeductionId;
                            window.location.href = url;
                        }

                        $(this).val("");
                        return false;
                        e.stopPropagation();
                    });
                    return $result.add($customSelect);

                },
                _createFilterSwitchButton: function () {
                    return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                }
            }


        ],

    });
    $("#gridDataCON,#gridDataSTE,#gridDataOSG").jsGrid("option", "filtering", false);
</script>
