@model IOAS.Models.ConsultantPaymentRelease
@{
    ViewBag.Title = "RCTConsultantPaymentRelease";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
    <link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
    var doccount = 0;
}
<style>
    .rc-tb-scrl {
        width: 100%;
        overflow: auto;
    }

    .file-wd {
        width: 275px;
    }

    .rc-tb-scrl table {
        max-width: 2100px !important;
        width: 2000px;
    }
</style>
@using (Html.BeginForm("RCTConsultantPaymentRelease", "Requirement", FormMethod.Post, new { @class = "", role = "form", @id = "formOTHJuniorApp", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Modify Profile</b></h4>
        </div>
    </div>
    <div class="row cts-mn-dts" id="tab-01">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Consultant ID </label>
                                                <h4 id="CantidateName">@Html.DisplayFor(m => m.Consultant_MasterId)</h4>
                                                @Html.HiddenFor(m => m.Consultant_MasterId)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Consultant ServiceID</label>
                                                @Html.TextBoxFor(m => m.Consultant_ServiceNo, new { @class = "form-control" })
                                                @Html.HiddenFor(m => m.Consultant_AppointmentId)
                                                @Html.HiddenFor(m => m.Consultant_ServiceNo)
                                                <div>@Html.ValidationMessageFor(m => m.Consultant_ServiceNo)</div>
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group  ">
                                                <label>Consultant Name</label>                                                
                                                <h4 id="lblConsultantEmpName">@Html.DisplayFor(m => m.ConsultantName)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group  ">
                                                <label>Designation  </label>
                                                <h4 id="lblConsultantDesignation">@Html.DisplayFor(m => m.Consultant_Title)</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Email</label>
                                                <h4 id="lblConsultantEmail">@Html.DisplayFor(m => m.Email)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Contact No</label>
                                                <h4 id="lblConsultantContactNo">@Html.DisplayFor(m => m.Consultant_ContactNumber)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Consultant_Type</label>
                                                <h4 id="lblConsultantType">@Html.DisplayFor(m => m.Consultant_EmpType)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Appointment Start</label>
                                                <h4 id="lblConsultantAppStart">@Html.DisplayFor(m => m.Appointment_Start)</h4>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Appointment End</label>
                                                <h4 id="lblConsultantAppEnd">@Html.DisplayFor(m => m.Appointment_End)</h4>
                                                @Html.HiddenFor(M => M.Appointment_End, new { @id = "txtAppointmentEnd" })
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Payment Type</label>
                                                <h4 id="lblConsultantPayType">@Html.DisplayFor(m => m.Payment_Type)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Retainer Fee (in INR)</label>
                                                <h4 id="lblConsultantRetainerFee">@Html.DisplayFor(m => m.Consultant_RetainerFee)</h4>
                                                @Html.HiddenFor(m => m.Consultant_RetainerFee, new { @class = "form-control", @readonly = "readonly" })
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Booked Commitment </label>
                                                <h4 id="lblConsultantBookedCommit">@Html.DisplayFor(m => m.Booked_Commitment)</h4>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Commitment Balance</label>
                                                <h4 id="lblConsultantCommitBala">@Html.DisplayFor(m => m.Commitment_Balance)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Currency Type</label>
                                                <h4 id="lblConsultantCurrType">@Html.DisplayFor(m => m.Currency_Type)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group ">
                                                <label>Currency Value</label>
                                                <h4 id="lblConsultantCurrValue">@Html.DisplayFor(m => m.Currency_Value)</h4>
                                                @Html.HiddenFor(m => m.Currency_Value)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Conversion rate </label>
                                                <h4 id="lblConsultantConRate">@Html.DisplayFor(m => m.Conversion_rate)</h4>
                                                @Html.HiddenFor(m => m.Conversion_rate)
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="grey-bg-adj mb-lg">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="">
                                                    <table class="table alter-table mb-null">
                                                        <thead>
                                                            <tr>
                                                                <th class="required">Other</th>
                                                                <th class="required">Payment / Deduction</th>
                                                                <th class="required">Amount</th>
                                                                <th>Remarks</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="tblbodyPaydeduction">
                                                            @if (Model.CONOTHDetail != null)
                                                            {
                                                                var count = 0;
                                                                foreach (var item in Model.CONOTHDetail)
                                                                {
                                                                    var othdid = "OTHDetail[" + count + "].OTHPayDeductionDetailId";
                                                                    var othtype = "OTHDetail[" + count + "].OtherType";
                                                                    var Paydec = "OTHDetail[" + count + "].PaymentDeductionType";
                                                                    var amt = "OTHDetail[" + count + "].Amount";
                                                                    var rem = "OTHDetail[" + count + "].Remarks";
                                                                    var othdectype = "othdectype_" + count;
                                                                    <tr>
                                                                        <td>
                                                                            @Html.DropDownList(@othtype, new SelectList(ViewBag.OtherType, "id", "name", item.OtherType), "Select Other",
                                                                         new { @class = "form-control", @id = @othdectype, @required = "required", @title = "Other type field is required." })
                                                                            @Html.ValidationMessage(@othtype)
                                                                            @Html.Hidden("OTHDetail.Index", @count)
                                                                            @Html.Hidden(@othdid, item.OTHPayDeductionDetailId)
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList(@Paydec, new SelectList(item.PaydecList, "id", "name", item.PaymentDeductionType), "Select",
                                                                  new { @class = "form-control", @id = @Paydec, @required = "required", @title = "Payment / Deduction field is required." })
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox(@amt, item.Amount, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off", @required = "required", @title = "Amount field is required." })
                                                                            @Html.ValidationMessage(@amt)
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox(@rem, item.Remarks, new { @class = "form-control", @autocomplete = "off" })

                                                                        </td>
                                                                        <td>
                                                                            <a href="javascript:void(0)" class="btn-sm btn btn-danger removeOTHDetail"><i class="ion-android-close"></i></a>
                                                                        </td>
                                                                    </tr>
                                                                    count++;
                                                                }

                                                            }
                                                            else
                                                            {



                                                                <tr>
                                                                    <td>
                                                                        @Html.DropDownList("CONOTHDetail[0].OtherType", new SelectList(ViewBag.OtherType, "id", "name"), "Select Other",
                         new { @class = "form-control", @id = "othdectype_0", @required = "required", @title = "Other type field is required." })
                                                                        @Html.ValidationMessage("CONOTHDetail[0].OtherType")
                                                                        @Html.Hidden("CONOTHDetail.Index", 0)

                                                                    </td>
                                                                    <td>
                                                                        @Html.DropDownList("CONOTHDetail[0].PaymentDeductionType", new SelectList(ViewBag.List, "id", "name"), "Select",
                                                                 new { @class = "form-control", @id = "paydec", @required = "required", @title = "Payment / Deduction field is required." })
                                                                        @Html.ValidationMessage("CONOTHDetail[0].PaymentDeductionType")
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBox("CONOTHDetail[0].Amount", "", new { @class = "form-control", @id = "othAmount_", @onkeypress = "return isNumberKey(event)", @autocomplete = "off", @required = "required", @title = "Amount field is required." })
                                                                        @Html.ValidationMessage("CONOTHDetail[0].Amount")
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBox("CONOTHDetail[0].Remarks", "", new { @class = "form-control", @autocomplete = "off" })
                                                                    </td>
                                                                    <td>
                                                                        <a href="javascript:void(0)" class="btn-sm btn btn-danger removeOTHDetail"><i class="ion-android-close"></i></a>
                                                                    </td>

                                                                </tr>
                                                            }

                                                            </tbody>

                                                    </table>

                                                </div>
                                                <div class="col-md-6 mt-md">
                                                    <a href="javascript:void(0)" id="btnAddPaydec" class="btn btn-primary mb30">Add New</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-body">
                        <div class="custom-jsgrid-normal">
                            <div class="row">
                                <div class="page-wrapper">
                                    <div class="col-md-8">
                                        <div class="col-md-12">
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <div class="form-group custom-form-group">
                                                        @Html.RadioButtonFor(M => M.FeeType, "Old Employee", new { @id = "IsOld", @checked = "checked" })&nbsp;<label>Current Fee</label>
                                                        @Html.RadioButtonFor(M => M.FeeType, "New Employee", new { @id = "IsNew"  })&nbsp;<label>Arrear Fee</label> <br>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">From date</label>
                                                        <h4 id="lblFromDate"></h4>
                                                        @Html.EditorFor(m => m.Fromdate, new { @class = "form-control" })
                                                        <div>@Html.ValidationMessageFor(m => m.Fromdate)</div>
                                                        @Html.HiddenFor(M => M.Fromdate, new { @id = "txtFromdate" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">To date</label>
                                                        <h4 id="lblToDate"></h4>
                                                        @Html.EditorFor(m => m.ToDate, new { @class = "form-control", @readonly = "readonly" })
                                                        <div>@Html.ValidationMessageFor(m => m.ToDate)</div>
                                                        @Html.HiddenFor(M => M.ToDate, new { @id = "txtToDate" })
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="row">
                                                <div class="col-md-4">
                                                    @if (Model.Payment_Type == "Monthly")
                                                    {
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Amount</label>
                                                            @Html.TextBoxFor(m => m.TaxAmount, new { @class = "form-control", @readonly = "readonly" })
                                                            <div>@Html.ValidationMessageFor(m => m.TaxAmount)</div>

                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Amount</label>
                                                            @Html.TextBoxFor(m => m.TaxAmount, new { @class = "form-control required", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                            <div>@Html.ValidationMessageFor(m => m.TaxAmount)</div>

                                                        </div>
                                                    }
                                                </div>
                                                <div class="col-md-4">
                                                    @if (Model.Consultant_Nationality == 1)
                                                    {
                                                        <div class="form-group custom-form-group">
                                                            <label>Conversion_Rate</label><br>

                                                            @Html.TextBoxFor(m => m.TaxConversion_rate, new { @class = "form-control", @readonly = "readonly" })

                                                        </div>

                                                    }
                                                    else
                                                    {


                                                        <div class="form-group custom-form-group">
                                                            <label>Conversion_Rate</label><br>

                                                            @Html.TextBoxFor(m => m.TaxConversion_rate, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })

                                                        </div>
                                                    }

                                                </div>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="col-md-4 mt30">
                                        <div class="bl-lg-panel-box   pb-null">
                                            <div id="prjDetails">
                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">Basic Amount</label>
                                                    <span id="span_basicamt" class="col-md-6"> @Html.DisplayFor(m => m.BasicAmount)</span>
                                                    @*(@Model.BasicAmount)*@
                                                    @Html.HiddenFor(m => m.BasicAmount)
                                                </div>
                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">Deduction</label>
                                                    <span class="col-md-6" id="spanDeduction"> @Html.DisplayFor(m => m.Deduction) </span> @*(@Model.GSTPercentage)*@
                                                    @Html.HiddenFor(m => m.Deduction)
                                                </div>
                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">GST Percentage</label>
                                                    <span class="col-md-6 " id="spanGSTPer"> @Html.DisplayFor(m => m.GSTPercentage) </span> @*(@Model.GSTPercentage)*@
                                                    @Html.HiddenFor(m => m.GSTPercentage)
                                                </div>

                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">GST Value</label>
                                                    <span class="col-md-6 " id="spanGstValue"> @Html.DisplayFor(m => m.GSTValue) </span>@*@Model.GSTValue</span>*@
                                                    @Html.HiddenFor(m => m.GSTValue)
                                                </div>

                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">Invoice Value</label>
                                                    <span class="col-md-6 " id="spanIncValue">  @Html.DisplayFor(m => m.InvoiceValue) </span> @*@Model.InvoiceValue</span>*@
                                                    @Html.HiddenFor(m => m.InvoiceValue)
                                                </div>

                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">OtherPayment</label>
                                                    <span class="col-md-6 " id="spanOtherPayment"> @Html.DisplayFor(m => m.OtherPayment) </span>@*@Model.OtherPayment</span>*@
                                                    @Html.HiddenFor(m => m.OtherPayment)
                                                </div>

                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">GrossPay</label>
                                                    <span class="col-md-6 " id="spanGrossPay"> @Html.DisplayFor(m => m.GrossPay) </span>@*@Model.GrossPay</span>*@
                                                    @Html.HiddenFor(m => m.GrossPay)
                                                </div>

                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">ITTDSPercentage</label>
                                                    <span class="col-md-6 " id="spanITTDS"> @Html.DisplayFor(m => m.ITTDSPercentage) </span>@*@Model.ITTDSValue</span>*@
                                                    @Html.HiddenFor(m => m.ITTDSPercentage)
                                                </div>

                                                <div class="form-group custom-form-group mb-s-md">
                                                    <label class="col-md-6">ITTDSValue</label>
                                                    <span class="col-md-6 " id="spanITTDSValue"> @Html.DisplayFor(m => m.ITTDSValue) </span>@*@Model.ITTDSValue</span>*@
                                                    @Html.HiddenFor(m => m.ITTDSValue)
                                                </div>
                                                <div class="form-group custom-form-group">
                                                    <label class="col-md-6">GSTTDSPercentage</label>
                                                    <span class="col-md-6" id="spanGSTTDS"> @Html.DisplayFor(m => m.GSTTDSPercentage) </span>@*@Model.GSTTDSValue</span>*@
                                                    @Html.HiddenFor(m => m.GSTTDSPercentage)
                                                </div>
                                                <div class="form-group custom-form-group">
                                                    <label class="col-md-6">GSTTDSValue</label>
                                                    <span class="col-md-6" id="spanGSTTDSValue"> @Html.DisplayFor(m => m.GSTTDSValue) </span>@*@Model.GSTTDSValue</span>*@
                                                    @Html.HiddenFor(m => m.GSTTDSValue)
                                                </div>
                                                <div class="form-group custom-form-group">
                                                    <label class="col-md-6 hgt-txt">Net Balance</label>
                                                    <span class="col-md-6 hgt-txt" id="spanNetBal"> @Html.DisplayFor(m => m.NetAmount) </span> @*@Model.NetAmount</span>*@
                                                    @Html.HiddenFor(m => m.NetAmount)
                                                </div>

                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="grey-bg-adj mb-lg">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <h4>Other Documents:</h4>
                                                <div class="">
                                                    <table class="table alter-table mb-null">
                                                        <thead>
                                                            <tr>
                                                                <th>Document Name</th>
                                                                <th>Attachment</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="OtherDoc">
                                                            @{
                                                                @*if (Model.OtherDocList != null)
                                                                    {
                                                                        foreach (var item in Model.OtherDocList)
                                                                        {
                                                                            var docName = "OtherDocList[" + doccount + "].DocumentName";
                                                                            var doc = "OtherDocList[" + doccount + "].Document";
                                                                            <tr>
                                                                                <td>
                                                                                    <h4>@item.DocumentName</h4>
                                                                                    @Html.TextBoxFor(m => m.OtherDocList[doccount].DocumentName, new { @class = "form-control dis-none" })
                                                                                </td>
                                                                                <td>
                                                                                    @if (!string.IsNullOrEmpty(item.DocumentPath))
                                                                                    {
                                                                                        if (!string.IsNullOrEmpty(item.DocumentName))
                                                                                        {
                                                                                            @Html.ActionLink(item.DocumentName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = item.DocumentPath }, new { @name = "DocDownload", @target = "_blank" })
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            @Html.ActionLink(item.DocumentFileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = item.DocumentPath }, new { @name = "DocDownload", @target = "_blank" })
                                                                                        }
                                                                                    }
                                                                                    <input type="file" class="dis-none" name="@doc" />&nbsp; &nbsp; &nbsp;
                                                                                </td>
                                                                                <td>
                                                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger removeOtherDoc dis-none"><i class="ion-android-close"></i></a>
                                                                                </td>
                                                                            </tr>
                                                                            doccount++;
                                                                        }
                                                                    }
                                                                    else
                                                                    {*@
                                                                var docName = "OtherDocList[0].DocumentName";
                                                                var doc = "OtherDocList[0].Document";
                                                                <tr>
                                                                    <td>
                                                                        @Html.TextBox(@docName, null, new { @class = "form-control" })
                                                                        @Html.ValidationMessage(@docName)
                                                                    </td>
                                                                    <td>
                                                                        <input type="file" class="" name="@doc" />&nbsp; &nbsp; &nbsp;
                                                                        @Html.ValidationMessage(@doc)
                                                                    </td>
                                                                    <td>
                                                                        <a href="javascript:void(0)" class="btn-sm btn btn-danger removeOtherDoc"><i class="ion-android-close"></i></a>
                                                                    </td>
                                                                </tr>
                                                                @*}*@
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                                <div class="col-md-6 mt-md">
                                                    <a href="javascript:void(0)" id="btnAddOtherDoc" class="btn btn-primary">Add New</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 mb-lg text-center">
            <input type="submit" class="btn btn-primary" value="Submit" id="btnSave" />
            <input type="button" onclick="window.location.href='@Url.Action("RCTConsultantPaymentRelease", "Requirement")';" class="btn btn-default" value="Close" name="Button" id="btnReset" />
            @*<a href='@Url.Action("RCTConsultantPaymentRelease", "Requirement")' class="btn btn-default">Close</a>*@
            @*@if (Model.VerifyProfile != true)
        {
            <a href='@Url.Action("STEEmployeeMaster", "Requirement")' class="btn btn-default">Close</a>
        }
        else
        {
            <a href='@Url.Action("EmployeeverificationList", "Requirement")' class="btn btn-default">Close</a>
        }*@
        </div>
    </div>


}

    <script type="text/javascript">
    $(document).ready(function () {
        applyAutoComplete($('#Consultant_ServiceNo'), $('#Consultant_AppointmentId'), '@Url.Action("LoadConsultantServiceList", "Requirement")', 'ProjectSummary', true);

    });

    function ProjectSummary() {
        var ConsultantAppID = $("#Consultant_AppointmentId").val();
        var data = {};
        if (ConsultantAppID != "" || ConsultantAppID != 0) {

            data = { ConsAppID: ConsultantAppID };
            $.ajax({
                url: '@Url.Action("ConsultantServicePayment", "Requirement")',
                type: "Get",
                dataType: "JSON",
                data: data,
                success: function (result) {
                    if (result != "") {
                        $('#Consultant_MasterId').val(result.Consultant_MasterId);
                        $('#lblConsultantEmpName').text(result.ConsultantName);
                        $('#ConsultantName').val(result.ConsultantName);
                        $('#lblConsultantEmail').text(result.Email);
                        //$('#Email').val(result.Email);
                        $('#lblConsultantDesignation').text(result.co);
                        //$('#Consultant_ContactNumber').val(result.Consultant_ContactNumber);
                        $('#lblConsultantContactNo').text(result.Consultant_ContactNumber);
                        $('#lblConsultantType').text(result.Consultant_EmpType);
                        //$('#Consultant_EmpType').val(result.Consultant_EmpType);
                        $('#lblConsultantAppStart').text(result.Appointment_Start);
                        $('#Appointment_Start').val(result.Appointment_Start);
                        $('#Appointment_End').val(result.Appointment_End);
                        $('#lblConsultantAppEnd').text(result.Appointment_End);
                        $('#lblConsultantPayType').text(result.Payment_Type);
                        //$('#lblConsultantRetainerFee').text(result.Consultant_RetainerFee);
                        $('#lblConsultantRetainerFee').html(parseFloat(result.Consultant_RetainerFee).toFixed(2));
                        $('#Consultant_RetainerFee').val(parseFloat(result.Consultant_RetainerFee).toFixed(2));
                        //$('#lblConsultantRetainerFee').text(result.Consultant_RetainerFee);
                        $('#lblConsultantBookedCommit').text(result.Booked_Commitment);
                        $('#Booked_Commitment').val(parseFloat(result.Booked_Commitment).toFixed(2));
                        $('#Commitment_Balance').val(parseFloat(result.Commitment_Balance).toFixed(2));
                        $('#lblConsultantCommitBala').text(result.Commitment_Balance);
                        $('#lblConsultantCurrType').text(result.Currency_Type);
                        $('#lblConsultantCurrValue').text(result.Currency_Value);
                        $('#Currency_Value').html(parseFloat(result.Currency_Value).toFixed(2));
                        $('#lblConsultantConRate').text(result.Conversion_rate);
                        $('#Conversion_rate').val(result.Conversion_rate);
                        //html(parseFloat(TaxAmount).toFixed(2));
                        $('#spanGSTPer').html(parseFloat(result.GSTPercentage).toFixed(2));
                        $('#GSTPercentage').val(parseFloat(result.GSTPercentage).toFixed(2));
                        $('#ITTDSPercentage').val(parseFloat(result.ITTDSPercentage).toFixed(2));
                        $('#GSTTDSPercentage').val(parseFloat(result.GSTTDSPercentage).toFixed(2));
                        $('#spanITTDS').html(parseFloat(result.ITTDSPercentage).toFixed(2));
                        $('#spanGSTTDS').html(parseFloat(result.GSTTDSPercentage).toFixed(2));
                        //GSTTDSPercentage

                        //$('#PICode').text(result);



                        var EmployeeType = $("input[name='FeeType']:checked").val();
                        if (EmployeeType == "Old Employee") {


                            var currentTime = new Date();
                            // First Date Of the month
                            var startDateFrom = new Date(currentTime.getFullYear(), currentTime.getMonth(), 1);
                            // Last Date Of the Month
                            var startDateTo = new Date(currentTime.getFullYear(), currentTime.getMonth() + 1, 0);

                            var applicationreceivedate = moment(startDateFrom).toDate();
                            var applicationenddate = moment(startDateTo).toDate();

                            $('#Fromdate').datepicker({
                                dateFormat: 'dd-MM-yy',
                                changeYear: true
                            }).datepicker("option", "maxDate", applicationenddate).datepicker("option", "minDate", applicationreceivedate);

                            $('#ToDate').datepicker({
                                dateFormat: 'dd-MM-yy',
                                changeYear: true
                            }).datepicker("option", "maxDate", applicationenddate).datepicker("option", "minDate", applicationreceivedate)
                            @*var currentdate = moment(new Date()).toDate();
                            var setappstrdat = "";
                            //$('#lblFromDate').text(result.Fromdate);
                            //$('#lblToDate').text(result.ToDate);
                            var strstartdt = result.Fromdate|| "";
                            var strenddt = result.ToDate || "";
                            var strstartdt1 = moment($('#Fromdate').val().split('-').join('/')).toDate();
                            if (strstartdt != '' && strenddt != '') {
                                //var strappointmentstartdt = $('#lblConsultantAppStart').text().split('-').join('/');
                                //var strappointmentenddt = $('#lblConsultantAppEnd').text().split('-').join('/');
                                var AppointmentStartDate = moment(strstartdt.split('-').join('/')).toDate();
                                var AppointmentEndDate = moment(strenddt.split('-').join('/')).toDate();
                                setappstrdat = AppointmentStartDate;
                                var setappenddt = moment(AppointmentEndDate).toDate();
                                var datepickerenddate = moment(AppointmentEndDate).toDate();
                                //currentdate = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1, 'days').toDate();
                                //if (currentdate >= AppointmentStartDate && currentdate <= AppointmentEndDate)
                                //    setappstrdat = currentdate;
                                //else
                                //    setappstrdat = AppointmentStartDate;
                                datepickerenddate = moment(AppointmentEndDate).add(+1, 'days').toDate();
                                //var defaultappstrToDate = moment($('#txtAppointmentEnd').text().split('-').join('/')).add(-1, 'days').toDate();
                                //if (currentdate != '' && setappstrdat != '') {
                                //    if (setappstrdat <= currentdate) {
                                //        //setappstrdat = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1,'days').toDate();
                                //        var BeginDate = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1, 'days').toDate();
                                //        if (setappstrdat <= BeginDate && BeginDate <= setappenddt)
                                //            setappstrdat = BeginDate;
                                //    }
                                //}
                            }
                            else {
            @*var strappointmentstartdt = @Html.Raw(Json.Encode(Model.Appointment_Start)) || "";
            var strappointmentenddt = @Html.Raw(Json.Encode(Model.Appointment_End)) || "";*@
                                @*var strappointmentstartdt = $('#lblConsultantAppStart').text().split('-').join('/');
                                var strappointmentenddt = $('#lblConsultantAppEnd').text().split('-').join('/');
                                var AppointmentStartDate = moment(strappointmentstartdt.split('-').join('/')).toDate();
                                var AppointmentEndDate = moment(strappointmentenddt.split('-').join('/')).toDate();
                                setappstrdat = AppointmentStartDate;
                                var setappenddt = moment(AppointmentEndDate).toDate();
                                var datepickerenddate = moment(AppointmentEndDate).toDate();
                                //currentdate = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1, 'days').toDate();
                                //if (currentdate >= AppointmentStartDate && currentdate <= AppointmentEndDate)
                                //    setappstrdat = currentdate;
                                //else
                                //    setappstrdat = AppointmentStartDate;
                                datepickerenddate = moment(AppointmentEndDate).add(+1, 'days').toDate();
                                //var defaultappstrToDate = moment($('#txtAppointmentEnd').text().split('-').join('/')).add(-1, 'days').toDate();
                                if (currentdate != '' && setappstrdat != '') {
                                    if (setappstrdat <= currentdate) {
                                        //setappstrdat = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1,'days').toDate();
                                        var BeginDate = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1, 'days').toDate();
                                        if (setappstrdat <= BeginDate && BeginDate <= setappenddt)
                                            setappstrdat = BeginDate;
                                    }
                                }
                            }

                            $('#Fromdate').datepicker({
                                dateFormat: 'dd-MM-yy',
                                changeYear: true
                            }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", datepickerenddate);
                            $('#ToDate').datepicker({
                                dateFormat: 'dd-MM-yy',
                                changeYear: true
                            }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", datepickerenddate)*@
                            //  .datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", defaultappstrToDate)
                        }
                        else {
                            var CurrDate = moment(new Date()).toDate();
                            //$("#Fromdate").datepicker({
                            //    dateFormat: 'dd-MM-yy',
                            //    minDate: Appointment_Start,
                            //    maxDate: Appointment_End
                            //});
                            //$("#ToDate").datepicker({
                            //    dateFormat: 'dd-MM-yy',
                            //    minDate: Appointment_Start,
                            //    maxDate: Appointment_End
                            //});

                            $("#Fromdate").datepicker({
                                dateFormat: 'dd-MM-yy',
                                changeYear: true,
                                yearRange: '-100:+0',
                            }).datepicker("option", "maxDate", CurrDate);

                            $("#ToDate").datepicker({
                                dateFormat: 'dd-MM-yy',
                                changeYear: true,
                                yearRange: '-100:+0',
                            }).datepicker("option", "maxDate", CurrDate);
                        }

                    }
                }
            });

        }

    }

    $('input[name="FeeType"]').on('change', function () {
        var value = $("input[name='FeeType']:checked").val();
        if (value == "Old Employee") {
            var currentTime = new Date();
            // First Date Of the month
            var startDateFrom = new Date(currentTime.getFullYear(), currentTime.getMonth(), 1);
            // Last Date Of the Month
            var startDateTo = new Date(currentTime.getFullYear(), currentTime.getMonth() + 1, 0);

            var applicationreceivedate = moment(startDateFrom).toDate();
            var applicationenddate = moment(startDateTo).toDate();

            $('#Fromdate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", applicationenddate).datepicker("option", "minDate", applicationreceivedate);

            $('#ToDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", applicationenddate).datepicker("option", "minDate", applicationreceivedate)

            @*var currentdate = moment(new Date()).toDate();
            var setappstrdat = "";
            var strappointmentstartdt = @Html.Raw(Json.Encode(Model.Appointment_Start)) || "";
            var strappointmentenddt = @Html.Raw(Json.Encode(Model.Appointment_End)) || "";
            var AppointmentStartDate = moment(strappointmentstartdt.split('-').join('/')).toDate();
            var AppointmentEndDate = moment(strappointmentenddt.split('-').join('/')).toDate();
            currentdate = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1, 'days').toDate();
            if (currentdate >= AppointmentStartDate && currentdate <= AppointmentEndDate)
                setappstrdat = currentdate;
            else
                setappstrdat = AppointmentStartDate;
            var defaultappstrToDate = moment($('#txtAppointmentEnd').text().split('-').join('/')).add(-1, 'days').toDate();
            $('#Fromdate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", defaultappstrToDate);
            $('#ToDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", defaultappstrToDate)*@
        }
        else {
            var currentdate = moment(new Date()).toDate();
            var setappstrdat = "";
            var strappointmentstartdt = @Html.Raw(Json.Encode(Model.Appointment_Start)) || "";
            var strappointmentenddt = @Html.Raw(Json.Encode(Model.Appointment_End)) || "";
            var AppointmentStartDate = moment(strappointmentstartdt.split('-').join('/')).toDate();
            var AppointmentEndDate = moment(strappointmentenddt.split('-').join('/')).toDate();
            currentdate = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1, 'days').toDate();
            if (currentdate >= AppointmentStartDate && currentdate <= AppointmentEndDate)
                setappstrdat = currentdate;
            else
                setappstrdat = AppointmentStartDate;
            var defaultappstrToDate = moment($('#txtAppointmentEnd').text().split('-').join('/')).add(-1, 'days').toDate();
            $('#Fromdate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", defaultappstrToDate);
            $('#ToDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", defaultappstrToDate)



        }
    });





    $("#Fromdate, #ToDate").change(function () {
        //$('#ToDate').val('');
        var endDate = moment($('#txtAppointmentEnd').text().split('-').join('/')).toDate();
        var defaultstartDateDate = moment($('#Fromdate').val().split('-').join('/')).toDate();
        $('#ToDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", defaultstartDateDate).datepicker("option", "maxDate", endDate);
        calculatetaxTotal();
    });
    //$('#ToDate').change(function () {
    //    if ($("#Fromdate").val() != "" && $("#ToDate").val() != "") {
    //        calculatetaxTotal();
    //    }
    //});

    function calculatetaxTotal(isarrearpay) {
        var fromdate = $('#Fromdate').val();
        var todate = $('#ToDate').val();
        var Am = $('#Consultant_RetainerFee').val();

        //if (isarrearpay == true)
        //    todate = $('#ArrearOrDeductionTillDate').val();
        var isNotHighSalary = false;
        var months = 0, days = 0;
        var starttotaldays = 0, endtotaldays = 0, startworingdays = 0, endworkingdays = 0;
        var startyear = 0, endyear = 0, startmonth = 0, endmonth = 0;
        if (fromdate != "" && todate != "") {
            var objData = getCalDateDetails(fromdate, todate);
            starttotaldays = objData.starttotaldays;
            endtotaldays = objData.endtotaldays;
            startworingdays = objData.startworkingdays;
            endworkingdays = objData.endworkingdays;
            months = objData.monthcount;
            startyear = objData.startdateyear
            endyear = objData.enddateyear;
            startmonth = objData.startdatemonth;
            endmonth = objData.enddatemonth;
            days = startworingdays + endworkingdays;

        }
        else {
            return;
        }

        var hravalue = 0, ttlVal = 0, medicalamount = 0;
        var InvoiceValue = 0;
        var salary = parseFloat($('#Consultant_RetainerFee').val()) || 0;


            var total = 0;


            ttlVal = medicalamount + salary + hravalue;
            var startperday = ttlVal / starttotaldays;
            var endperday = ttlVal / endtotaldays;
            var monthlyamt = ttlVal;

            if (months > 0)
                total += monthlyamt * months;
            if (days > 0) {
                total += startworingdays * startperday;
                total += endworkingdays * endperday;
            }

            if (isarrearpay == true)
                return total;



        $('#TaxAmount').val(Math.round(total));
        var TaxAmount = parseFloat($('#TaxAmount').val()) || 0;
        $('#Consultant_RetainerFee').val(Math.round(salary));//Trigger keyup event
        //$('#BasicAmount').val(salary);
        $('#BasicAmount').val(TaxAmount);
        //$('#span_basicamt').html(parseFloat(salary).toFixed(2));
        $('#span_basicamt').html(parseFloat(TaxAmount).toFixed(2));
        var Basic = parseFloat($('#BasicAmount').val()) || 0;
        var GSTPercen = $('#GSTPercentage').val();
        //parseFloat((pcfamount * ohpercent) / 100);

        var Deduction = parseFloat($('#Deduction').val()) || 0;

        var GstValue = parseFloat(Basic - Deduction);


        var TotalGstValue = parseFloat((GstValue * GSTPercen) / 100);
        $('#spanGstValue').html(Math.round(TotalGstValue).toFixed(2));
        $('#GSTValue').val(Math.round(TotalGstValue).toFixed(2));
        //var GstValue = parseFloat($('#GSTValue').val()) || 0;

        InvoiceValue = (Basic - Deduction) + TotalGstValue;
        $('#spanIncValue').html(Math.round(InvoiceValue).toFixed(2));
        $('#InvoiceValue').val(Math.round(InvoiceValue).toFixed(2));
        var Addition = parseFloat($('#OtherPayment').val()) || 0;
        var BDAValue = parseFloat(Basic - Deduction) + Addition;
        //var GrossPay = parseFloat($('#spanGrossPay').val()) || 0;
        var TotalInvoice = parseFloat($('#spanIncValue').text()) || 0;
        var TotalGrossPay = 0;
        TotalGrossPay = TotalInvoice + Addition;
        //$('#spanGrossPay').val(TotalGrossPay);
        $('#GrossPay').val(Math.round(TotalGrossPay).toFixed(2));
        $('#spanGrossPay').html(Math.round(TotalGrossPay).toFixed(2));
        var NetPay = 0;
        var ITTDS = parseFloat($('#spanITTDS').text()) || 0;
        var TotalITTDS = parseFloat((BDAValue * ITTDS) / 100);
        //var ITTDSPercentage = parseFloat($('#ITTDSPercentage').val()) || 0;

        $('#spanITTDSValue').html(Math.round(TotalITTDS).toFixed(2));
        $('#ITTDSValue').val(Math.round(TotalITTDS).toFixed(2));
        var GSTTDSValue = parseFloat($('#spanGSTTDS').text()) || 0;
        var TotalGSTTDS = parseFloat((BDAValue * GSTTDSValue) / 100);
        $('#spanGSTTDSValue').html(Math.round(TotalGSTTDS).toFixed(2));
        $('#GSTTDSValue').val(Math.round(TotalGSTTDS).toFixed(2));
        NetPay = TotalGrossPay - TotalITTDS - TotalGSTTDS;
        $('#NetAmount').val(NetPay);
        $('#spanNetBal').html(Math.round(NetPay).toFixed(2));
    }



    var innc = @doccount;
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    $("#btnAddOtherDoc").click(function () {
        //var cln = $('#OtherDoc tr:first').clone().find("input").val("").end();
        //$(cln).find(".dis-none").each(function () {
        //    $(this).removeClass('dis-none');
        //});

        //$(cln).find("input").each(function () {
        //    if ($(this).attr("name") != undefined)
        //        $(this).attr("name", $(this).attr("name").replace(/\d+/, innc));
        //    console.log($(this).attr("id"));
        //    var letters = /^[0-9a-zA-Z]+$/;
        //    if ($(this).attr("id") != undefined)
        //        $(this).attr("id", $(this).attr("id").replace(/\d+/, innc));
        //});
        //$(cln).find("span[data-valmsg-for]").each(function () {
        //    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, innc));
        //});
        //$(cln).find("a[name='DocDownload'],h4").each(function () {
        //    $(this).remove();
        //});
        //$(cln).insertAfter("#OtherDoc tr:last");
        //innc++;


        var cln = $('#OtherDoc tr:first').clone().find("select,input,textarea").val("").end();
        var index = $('#OtherDoc tr:last').find("input[name='OtherDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find('b').parent('a').remove();
        $(cln).find('b').remove();
        $(cln).find('a[name="DocDownload"]').remove();
        $(cln).find("input[name='OtherDetail.Index']").val(index);
        $(cln).find("input[name='OtherDetail[0].Verify']").prop('checked', false);
        $(cln).find(".lbl-rv").each(function () {
            $(this).remove();
        })
        $(cln).find("input, select,textarea").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find(".dis-none").each(function () {
            $(this).removeClass('dis-none');
        })
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $('#OtherDoc').append(cln);
    });

    $('#btnAddPaydec').click(function () {
        var cln = $('#tblbodyPaydeduction tr:first').clone().find("input,select").val("").end();
        $(cln).find('select[name$=".PaymentDeductionType"]').empty().append($('<option/>', { value: "", text: "Select" }));
        var index = $('#tblbodyPaydeduction tr:last').find("input[name='CONOTHDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='CONOTHDetail.Index']").val(index);
        $(cln).find("input,select").each(function () {

            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $('#tblbodyPaydeduction').append(cln);


    });

    $(document).on('click', 'a.removeOTHDetail', function () {
        if ($('#tblbodyPaydeduction tr').length != 1) {
            $(this).closest('tr').remove();
            UpdateTransactionDetails();
        }
    });

    $(document).on('change', 'select[id^="othdectype_"]', function () {
        var othId = $(this).val();
        //var type = 1;
        var ID = $(this).attr("id");
        var idx = ID.substr(ID.lastIndexOf("_") + 1);
        var select = $(this).closest('#tblbodyPaydeduction').find('select[name="CONOTHDetail[' + idx + '].PaymentDeductionType"]');

        $(select).empty().append($('<option/>', { value: "", text: "Select" }));
        $.getJSON("@Url.Action("GetSalaryBreakUpHead", "Requirement")", { groupId: othId },
            function (locationdata) {
                $.each(locationdata, function (index, itemData) {
                    $(select).append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name
                    }));
                });
            });
        UpdateTransactionDetails();
    });



    function UpdateTransactionDetails() {
        var totalDed = 0;
        var totalPay = 0;
        var amount = 0;

        $('#tblbodyPaydeduction tr').each(function (idx, val) {
             amount = parseFloat($(this).closest('tr').find('input[name$=".Amount"]').val());

            var paytype = $(this).find('select[name$=".OtherType"]').val();
            if (isNaN(amount)) {
                amount = 0;
            }

            if (paytype == 1)
            { totalPay += (amount); }
            else if (paytype == 2)
            { totalDed += (amount); }




        });
        $('#spanDeduction').text(parseFloat(totalDed).toFixed(2));
        $('#spanOtherPayment').text(parseFloat(totalPay).toFixed(2));

        $('#Deduction').val($('#spanDeduction').text());
        $('#OtherPayment').val($('#spanOtherPayment').text());


        var fromdate = $('#Fromdate').val();
        var todate = $('#ToDate').val();
        if (fromdate != "" && todate != "") {

            var months = 0, days = 0;
            var starttotaldays = 0, endtotaldays = 0, startworingdays = 0, endworkingdays = 0;
            var hravalue = 0, ttlVal = 0, medicalamount = 0;
            var InvoiceValue = 0;
            var salary = parseFloat($('#Consultant_RetainerFee').val()) || 0;


            //var total = 0;


            //ttlVal = medicalamount + salary + hravalue;
            //var startperday = ttlVal / starttotaldays;
            //var endperday = ttlVal / endtotaldays;
            //var monthlyamt = ttlVal;

            //if (months > 0)
            //    total += monthlyamt * months;
            //if (days > 0) {
            //    total += startworingdays * startperday;
            //    total += endworkingdays * endperday;
            //}

            //if (isarrearpay == true)
            //    return total;


            //$('#TaxAmount').val(Math.round(total));
            var TaxAmount = parseFloat($('#TaxAmount').val()) || 0;
            $('#Consultant_RetainerFee').val(Math.round(salary));//Trigger keyup event
            //$('#BasicAmount').val(salary);
            $('#BasicAmount').val(TaxAmount);
            //$('#span_basicamt').html(parseFloat(salary).toFixed(2));
            $('#span_basicamt').html(parseFloat(TaxAmount).toFixed(2));
            var Basic = parseFloat($('#BasicAmount').val()) || 0;
            var GSTPercen = $('#GSTPercentage').val();
            //parseFloat((pcfamount * ohpercent) / 100);

            var Deduction = parseFloat($('#Deduction').val()) || 0;

            var GstValue = parseFloat(Basic - Deduction);


            var TotalGstValue = parseFloat((GstValue * GSTPercen) / 100);
            $('#spanGstValue').html(Math.round(TotalGstValue).toFixed(2));
            $('#GSTValue').val(Math.round(TotalGstValue).toFixed(2));
            //var GstValue = parseFloat($('#GSTValue').val()) || 0;

            InvoiceValue = (Basic - Deduction) + TotalGstValue;
            $('#spanIncValue').html(Math.round(InvoiceValue).toFixed(2));
            $('#InvoiceValue').val(Math.round(InvoiceValue).toFixed(2));
            var Addition = parseFloat($('#OtherPayment').val()) || 0;
            var BDAValue = parseFloat(Basic - Deduction) + Addition;
            //var GrossPay = parseFloat($('#spanGrossPay').val()) || 0;
            var TotalInvoice = parseFloat($('#spanIncValue').text()) || 0;
            var TotalGrossPay = 0;
            TotalGrossPay = TotalInvoice + Addition;
            //$('#spanGrossPay').val(TotalGrossPay);
            $('#GrossPay').val(Math.round(TotalGrossPay).toFixed(2));
            $('#spanGrossPay').html(Math.round(TotalGrossPay).toFixed(2));
            var NetPay = 0;
            var ITTDS = parseFloat($('#spanITTDS').text()) || 0;
            var TotalITTDS = parseFloat((BDAValue * ITTDS) / 100);
            //var ITTDSPercentage = parseFloat($('#ITTDSPercentage').val()) || 0;

            $('#spanITTDSValue').html(Math.round(TotalITTDS).toFixed(2));
            $('#ITTDSValue').val(Math.round(TotalITTDS).toFixed(2));
            var GSTTDSValue = parseFloat($('#spanGSTTDS').text()) || 0;
            var TotalGSTTDS = parseFloat((BDAValue * GSTTDSValue) / 100);
            $('#spanGSTTDSValue').html(Math.round(TotalGSTTDS).toFixed(2));
            $('#GSTTDSValue').val(Math.round(TotalGSTTDS).toFixed(2));
            NetPay = TotalGrossPay - TotalITTDS - TotalGSTTDS;
            $('#NetAmount').val(NetPay);
            $('#spanNetBal').html(Math.round(NetPay).toFixed(2));

        }
        else {
            //return;
        }



    };




    //$(document).on('change', 'select[id^="othdectype_"]', function () {
    //    //var projectnumber = $('#spanDeduction').text();
    //    //projectnumber = projectnumber.trim();
    //    UpdateTransactionDetails();
    //});


    $(document).on('change', '#othAmount_', function () {

        UpdateTransactionDetails();

    });


    </script>

<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
