@{
    ViewBag.Title = "Maternity Leave";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h3>Maternity Leave</h3>
        <ul class="nav nav-pills custom-nav-pills custom-spl-nav">
            <li class="active"><a data-toggle="tab" href="#tabJsMATSTE" class="brd-rd-md">Short term</a></li>
            <li><a data-toggle="tab" href="#tabJsMATOSG" class="brd-rd-md">OutSourcing</a></li>
           
        </ul>
    </div>
</div>

<div class="tab-content mt30">
    <div id="tabJsMATSTE" class="tab-pane fade in active">
        <div class="custom-jsgrid-normal">
            <div class="" id="gridDataSTE">
            </div>
        </div>
    </div>
    <div id="tabJsMATOSG" class="tab-pane fade">
        <div class="custom-jsgrid-normal">
            <div id="gridDataOSG">

            </div>
        </div>
    </div>
    
</div>
<div id="popup">

</div>
<script>
    loadedList = [];
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var alertMsg = '@TempData["alertMsg"]';
    $(document).ready(function () {
        applyAutoComplete($('#ProjectNo'), $('#ProjectID'), '@Url.Action("LoadProjectList","CoreAccounts")');
    });

    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        else if (alertMsg != '') {
            $('#alert').html(alertMsg);
            $('#Validation').modal('toggle');
        }
        //getData(1);
    });
    function searchData(href) {
        if (loadedList.indexOf(href) > -1)
            return false;
        if (href == "#tabJsMATOSG")
            $("#gridDataOSG").jsGrid("search");
        
    }
    $('a[href^="#tabJs"]').click(function () {
        var href = $(this).attr('href');
        searchData(href);
    });


    
    var DateField = function (config) {
        jsGrid.Field.call(this, config);
    };

    DateField.prototype = new jsGrid.Field({
        sorter: function (date1, date2) {
            return new Date(date1) - new Date(date2);
        },

        itemTemplate: function (value) {
            return new Date(value).toDateString();
        },

        filterTemplate: function () {
            var now = new Date();
            this._fromPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() - 1), changeYear: true });
            this._toPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() + 1), changeYear: true });
            return $("<div>").append(this._fromPicker).append(this._toPicker);
        },

        insertTemplate: function (value) {
            return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
        },

        editTemplate: function (value) {
            return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
        },

        insertValue: function () {
            return this._insertPicker.datepicker("getDate").toISOString();
        },

        editValue: function () {
            return this._editPicker.datepicker("getDate").toISOString();
        },

        filterValue: function () {
            return {
                from: this._fromPicker.datepicker("getDate"),
                to: this._toPicker.datepicker("getDate")
            };
        }
    });

    jsGrid.fields.date = DateField;
    $("#gridDataSTE").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 10,
        editing: false,
        filtering: true,
        pageLoading: true,
        autoload: true,
        controller: {
            loadData: function (filter) {
                var searchData = [];
                searchData = {
                    SearchInName: filter.Name || null,
                    SearchInCategory: filter.CategoryName || null,
                    SearchInDesignation: filter.Designation || null,
                    SearchInProjectNumber: filter.ProjectNumber || null,
                    SearchInEmployeeId: filter.EmployeeId || null,
                    SearchInStatus: filter.Status || null
                },
                filter.model = searchData;
                filter.Category = "STE";
                var deferred = $.Deferred();
                $.ajax({
                    type: "post",
                    url: "GetMaternityEmployeeLeaveList",
                    data: JSON.stringify(filter),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        var da = {
                            data: result.List,
                            itemsCount: result.TotalRecords
                        }
                        if (loadedList.indexOf("#tabJsMATSTE") == -1)
                            loadedList.push("#tabJsMATSTE");
                        deferred.resolve(da);
                    },
                    error: function (err) {
                        console.log("error : " + err);
                    }

                });
                return deferred.promise();
            }

        },

        fields: [
            { name: "SNo", title: "S.No", editing: false, width: 50 },
            { type: "number", name: "ID", title: "Id", visible: false },
            {
                type: "text", name: "EmployeeId", title: "Employee ID", editing: false,
                itemTemplate: function (item, name) {
                    return $("<td>").append(name.EmployeeId + "<span class='gd-msg-hgt'>" + name.CategoryName + "</span>");
                }
            },
            {
                type: "text", name: "Name", title: "Employee Name & Designation", editing: false, width: 150,
                itemTemplate: function (item, name) {
                    return $("<td>").append("<b>" + name.Name + "</b>" + "<br/>" + "<span>" + name.Designation + "</span>");
                }
            },
            { type: "text", name: "CategoryName", title: "Category", editing: false, visible: false },

            {
                type: "text", name: "ProjectNumber", title: "PI Name & Project Number", editing: false, width: 150,
                itemTemplate: function (item, name) {
                    return $("<td>").append(name.PIName + "<br/>" + "<span>(" + name.ProjectNumber + ")</span>");
                }
            },
            { type: "date", name: "FromDate", title: " Leave From Date", editing: false, width: 120 },
            { type: "date", name: "ToDate", title: "Leave To Date", editing: false, width: 120 },
            {
                type: "text", name: "Status", title: "Status", editing: false,
                cellRenderer: function (item, value) {
                    if (value.Status == "Open") {
                        return $("<td>").addClass("txt-bl").append(value.Status);
                    }
                    else if (value.Status == "Completed") {
                        return $("<td>").addClass("txt-gr").append(value.Status);
                    }
                    else if (value.Status == "Cancel") {
                        return $("<td>").addClass("txt-rd").append(value.Status);
                    }
                    else {
                        return $("<td>").append(value.Status);
                    }
                }
            },
             {
                 type: "control", editButton: false, deleteButton: false, width: 80, title: "Action",

                 itemTemplate: function (value, item) {
                     var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                     if (item.Status == "Open" || (item.Status == "Initiated" && item.Is_Clarified)) {
                         statusList = [{ id: "", name: "Action" }, { id: "Modify", name: "Modify" }]
                     }
                     else {
                         statusList = [{ id: "", name: "Action" }, { id: "View", name: "View" }]
                     }
                     var $customSelect;
                     $customSelect = $("<select>")
                          .attr("class", "form-control").prop("selectedIndex", "")
                     $.each(statusList, function (index, itemData) {
                         $customSelect.append($('<option/>', {

                             value: itemData.id,
                             text: itemData.name
                         }));
                     });
                     $customSelect.change(function (e) {
                         var selVal = $(this).val();
                         if (selVal == "Modify") {
                             var url = '@Url.Action("MaternityLeave", "Requirement")?appid=' + item.ID + '&apptype=' + item.CategoryName + '&orderid=' + item.OrderID + '&listf=ML';
                             window.location.href = url;
                         }
                         else if (selVal == "View") {
                             var url = '@Url.Action("MaternityLeaveView", "Requirement")?orderid=' + item.OrderID + '&listf=ML';
                             window.location.href = url;
                         }
                         $(this).val("");
                         return false;
                         e.stopPropagation();
                     });
                     return $result.add($customSelect);
                 },
                 _createFilterSwitchButton: function () {
                     return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                 }
             }


        ],

    });
    $("#gridDataOSG").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 10,
        editing: false,
        filtering: true,
        pageLoading: true,
        //autoload: true,
        controller: {
            loadData: function (filter) {
                var searchData = [];
                searchData = {
                    SearchInName: filter.Name || null,
                    SearchInCategory: filter.CategoryName || null,
                    SearchInDesignation: filter.Designation || null,
                    SearchInProjectNumber: filter.ProjectNumber || null,
                    SearchInEmployeeId: filter.EmployeeId || null,
                    SearchInStatus: filter.Status || null
                },
                filter.model = searchData;
                filter.Category = "OSG";
                var deferred = $.Deferred();
                $.ajax({
                    type: "post",
                    url: "GetMaternityEmployeeLeaveList",
                    data: JSON.stringify(filter),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        var da = {
                            data: result.List,
                            itemsCount: result.TotalRecords
                        }
                        if (loadedList.indexOf("#tabJsMATOSG") == -1)
                            loadedList.push("#tabJsMATOSG");
                        deferred.resolve(da);
                    },
                    error: function (err) {
                        console.log("error : " + err);
                    }

                });
                return deferred.promise();
            }

        },

        fields: [
            { name: "SNo", title: "S.No", editing: false, width: 50 },
            { type: "number", name: "ID", title: "Id", visible: false },
            {
                type: "text", name: "EmployeeId", title: "Employee ID", editing: false,
                itemTemplate: function (item, name) {
                    return $("<td>").append(name.EmployeeId + "<span class='gd-msg-hgt'>" + name.CategoryName + "</span>");
                }
            },
            {
                type: "text", name: "Name", title: "Employee Name & Designation", editing: false, width: 150,
                itemTemplate: function (item, name) {
                    return $("<td>").append("<b>" + name.Name + "</b>" + "<br/>" + "<span>" + name.Designation + "</span>");
                }
            },
            { type: "text", name: "CategoryName", title: "Category", editing: false, visible: false },

            {
                type: "text", name: "ProjectNumber", title: "PI Name & Project Number", editing: false, width: 150,
                itemTemplate: function (item, name) {
                    return $("<td>").append(name.PIName + "<br/>" + "<span>(" + name.ProjectNumber + ")</span>");
                }
            },
            { type: "date", name: "FromDate", title: " Leave From Date", editing: false, width: 120 },
            { type: "date", name: "ToDate", title: "Leave To Date", editing: false, width: 120 },
            {
                type: "text", name: "Status", title: "Status", editing: false,
                cellRenderer: function (item, value) {
                    if (value.Status == "Open") {
                        return $("<td>").addClass("txt-bl").append(value.Status);
                    }
                    else if (value.Status == "Completed") {
                        return $("<td>").addClass("txt-gr").append(value.Status);
                    }
                    else if (value.Status == "Cancel") {
                        return $("<td>").addClass("txt-rd").append(value.Status);
                    }
                    else {
                        return $("<td>").append(value.Status);
                    }
                }
            },
             {
                 type: "control", editButton: false, deleteButton: false, width: 80, title: "Action",

                 itemTemplate: function (value, item) {
                     var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                     if (item.Status == "Open" || (item.Status == "Initiated" && item.Is_Clarified)) {
                         statusList = [{ id: "", name: "Action" }, { id: "Modify", name: "Modify" }]
                     }
                     else {
                         statusList = [{ id: "", name: "Action" }, { id: "View", name: "View" }]
                     }
                     var $customSelect;
                     $customSelect = $("<select>")
                          .attr("class", "form-control").prop("selectedIndex", "")
                     $.each(statusList, function (index, itemData) {
                         $customSelect.append($('<option/>', {

                             value: itemData.id,
                             text: itemData.name
                         }));
                     });
                     $customSelect.change(function (e) {
                         var selVal = $(this).val();
                         if (selVal == "Modify") {
                             var url = '@Url.Action("MaternityLeave", "Requirement")?appid=' + item.ID + '&apptype=' + item.CategoryName + '&orderid=' + item.OrderID + '&listf=ML';
                             window.location.href = url;
                         }
                         else if (selVal == "View") {
                             var url = '@Url.Action("MaternityLeaveView", "Requirement")?orderid=' + item.OrderID + '&listf=ML';
                             window.location.href = url;
                         }
                         $(this).val("");
                         return false;
                         e.stopPropagation();
                     });
                     return $result.add($customSelect);
                 },
                 _createFilterSwitchButton: function () {
                     return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                 }
             }


        ],

    });
    $("#gridDataOSG,#gridDataSTE").jsGrid("option", "filtering", false);
</script>
