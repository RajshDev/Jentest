
@model IOAS.Models.ConsultantAppointmentModel
@using IOAS.GenericServices
@{
    ViewBag.Title = "ConsultantAppointment";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
    string Remark = RequirementService.GetRejectCommitment(Model.ApplicationNumber, 0);
}
<style>
    .modal-dialog {
        width: 850px;
    }

    .tab-cls-close {
        float: right;
        font-size: 24px;
        margin-top: 18px;
    }

    .rt-tb-scrl {
        width: 100%;
        height: 400px;
        overflow: auto;
    }

    .cls-a-wt {
        color: #ffffff;
    }

    .rc-tb-scrl {
        width: 100%;
        overflow: auto;
    }

        .rc-tb-scrl table {
            max-width: 2100px !important;
            width: 2000px;
        }

    .reg-no {
        z-index: 1 !important;
    }
</style>

@using (Html.BeginForm("ConsultantAppointment", "Requirement", FormMethod.Post, new { @class = "", role = "form", @id = "formConApp", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Consultant Appointment</b></h4>
            <ul class="nav nav-pills custom-nav-pills custom-spl-nav">
                <li class="active"><a href="javascript:void(0)"><span>01</span>Application Entry</a></li>
                <li><a href="javascript:void(0)"><span>02</span>Application Checklist</a></li>
                <a class="tab-cls-close" href="@Url.Action("ConsultantAppointmentList","Requirement")"><i class="ion-close-circled" style="color:white;"></i></a>
            </ul>
        </div>
    </div>

    <div class="row cts-mn-dts tabs">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                <label>Application Ref Number</label>
                                                @Html.TextBoxFor(m => m.ApplicationRefNo, new { @class = "form-control", @onpaste = "return false" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicationRefNo)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                @if (Model != null && !String.IsNullOrWhiteSpace(Model.EmployeeType) && Model.EmployeeType == "Old Employee")
                                                {
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "Old Employee", new { @id = "IsOld", @checked = "checked" })@:&nbsp;<label>Old Employee</label> <br>
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "New Employee", new { @id = "IsNew" })@:&nbsp;<label>New Employee</label> <br>
                                               }
                                                else
                                                {
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "Old Employee", new { @id = "IsOld" })@:&nbsp;<label>Old Employee</label> <br>
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "New Employee", new { @id = "IsNew", @checked = "checked" })@:&nbsp;<label>New Employee</label> <br>
                                                 }
                                            </div>
                                        </div>
                                        <div class="col-md-4 dis-none" id="divOld">
                                            <div class="form-group custom-form-group">
                                                <label>Old Employee Number</label>
                                                @Html.TextBoxFor(m => m.OldEmployeeNumber, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.OldEmployeeNumber)</div>
                                                @Html.HiddenFor(m => m.OldEmpId)
                                            </div>
                                        </div>
                                        <div class="col-md-4" id="divNew">
                                            <div class="form-group custom-form-group">
                                                <label>NID Number</label>
                                                @Html.TextBoxFor(m => Model.NIDNumber, new { @id = "NIDNo", @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.NIDNumber)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4" id="">
                                            <div class="form-group custom-form-group">
                                                <label>Resume</label> <br>
                                                @if (!string.IsNullOrEmpty(Model.ResumeFilePath))
                                                {
                                                    @Html.HiddenFor(m => m.ResumeFilePath)
                                                    @Html.HiddenFor(m => m.ResumeFileName)
                                                    <h4>@Html.ActionLink(Model.ResumeFileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.ResumeFilePath }, new { @name = "DocDownload", @target = "_blank" })</h4><br>
                                                    <input class="" type="file" name="Resume" style="width:190px;">
                                                }
                                                else
                                                {
                                                    <input class="" type="file" name="Resume" style="width:190px;">
                                                }
                                                <em style="color:red;font-size:12px;">upload .pdf and file size below 5MB</em>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Type of appointment </label>
                                                <h4>Consultant</h4>
                                                @Html.Hidden("ConsultantAppointmentId")
                                                @Html.HiddenFor(m => m.Status)
                                                @Html.HiddenFor(m => m.bccSaved)
                                                @Html.HiddenFor(m => m.isDraftbtn)
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                <label>Pay type</label>
                                                <h4>Retainer Fee</h4>
                                            </div>
                                        </div>

                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                <label>Photo (png,jpg,jpeg)</label> <br>
                                                @if (!string.IsNullOrEmpty(Model.PersonDocPath))
                                                {
                                                    <img id="displayImg" src="@Url.Action("ShowDocument", "Account", new { file = Model.PersonDocPath, filepath = "RCTEmployeeImages" })" width="30px" height="30px"><br>
                                                    <input class="" type="file" name="PersonDocImage">
                                                }
                                                else
                                                {
                                                    <img id="displayImg" src="~/Content/IOASContent/img/Image_placeholder.png" width="30px" height="30px"><br>
                                                    <input class="form-control" type="file" name="PersonDocImage" onchange="readURL(this);">

                                                }
                                                @Html.HiddenFor(m => m.PersonDocPath)
                                                <em style="color:red;font-size:12px;">upload [.jpeg,.png,.jpg] and file size below 1MB</em>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label class="required">Name </label>
                                                @Html.DropDownListFor(m => m.ProfessionalId, new SelectList(ViewBag.professional, "id", "name"), "Select")
                                                <div>@Html.ValidationMessageFor(m => m.ProfessionalId)</div>
                                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @style = "text-transform:uppercase", })
                                                <div>@Html.ValidationMessageFor(m => m.Name)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label class="required">Father’s / Husband’s Name</label>
                                                @Html.TextBoxFor(m => m.Nameoftheguardian, new { @class = "form-control", @style = "text-transform:uppercase" })
                                                <div>@Html.ValidationMessageFor(m => m.Nameoftheguardian)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label class="required">PAN No </label>
                                                <label id="lblPANNo"></label>
                                                @Html.TextBoxFor(m => m.PANNo, new { @class = "form-control", @style = "text-transform:uppercase" })
                                                <div>@Html.ValidationMessageFor(m => m.PANNo)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label class="required">Aadhaar Number</label>
                                                <label id="lblAadharnumber"></label>
                                                @Html.TextBoxFor(m => m.AadharNumber, new { @class = "form-control", @style = "text-transform:uppercase", @onkeypress = "return isNumberKey(event)" })
                                                <div>@Html.ValidationMessageFor(m => m.AadharNumber)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  ">
                                                <label class="required">Email ID</label>
                                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.Email)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  ">
                                                <label>Present Address </label>
                                                @Html.TextAreaFor(m => m.TemporaryAddress, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.TemporaryAddress)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  ">
                                                <label>@Html.CheckBoxFor(m => m.isSameasPermanentAddress) same as above	   <br>Permanent Address</label> <br>
                                                @Html.TextAreaFor(m => m.PermanentAddress, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label class="required">Contact No</label>
                                                @Html.TextBoxFor(m => m.ContactNumber, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                                <div>@Html.ValidationMessageFor(m => m.ContactNumber)</div>
                                            </div>
                                        </div>

                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Emergency Contact No</label>
                                                @Html.TextBoxFor(m => m.EmergencyContactNo, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                                <div>@Html.ValidationMessageFor(m => m.EmergencyContactNo)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Date of Birth</label>
                                                <label id="lblDateofBirth"></label>
                                                @Html.EditorFor(m => m.DateofBirth, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.DateofBirth)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Age</label>
                                                @Html.TextBoxFor(m => m.Age, new { @class = "form-control", @readonly = "readonly" })
                                                <div>@Html.ValidationMessageFor(m => m.Age)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  ">
                                                <label class="required">Sex</label><br>
                                                @Html.DropDownListFor(m => m.Sex, new SelectList(ViewBag.gender, "id", "name"), "Select", new { @class = "form-control" })
                                                <h4 id="lblSex" class="dis-none"></h4>
                                                <div>@Html.ValidationMessageFor(m => m.Sex)</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Application Receive Date</label>
                                                @Html.EditorFor(m => m.ApplicationReceiveDate, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicationReceiveDate)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label>Applicaton Entry Date</label>
                                                <h4>@string.Format("{0:dd-MMMM-yyyy}", Model.ApplicatonEntryDate)</h4>
                                                @Html.EditorFor(m => m.ApplicatonEntryDate, new { @class = "form-control dis-none" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicatonEntryDate)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  mb-sm">
                                                @if (Model != null && !String.IsNullOrWhiteSpace(Model.IsICSRStaff) && Model.StaffCategory == "ICSR")
                                                {
                                                    @Html.RadioButtonFor(M => M.IsICSRStaff, "ICSR", new { @checked = "checked" })@:&nbsp;<label>ICSR </label> <br>
                                                    @Html.RadioButtonFor(M => M.IsICSRStaff, "NON ICSR")@:&nbsp;<label>NON ICSR</label> <br>
                                                 }
                                                else
                                                {
                                                    @Html.RadioButtonFor(M => M.IsICSRStaff, "ICSR")@:&nbsp;<label>ICSR</label> <br>
                                                    @Html.RadioButtonFor(M => M.IsICSRStaff, "NON ICSR", new { @checked = "checked" })@:&nbsp;<label>NON ICSR</label> <br>
                                                 }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">IITM Pensioner / CSIR Staff :</label>
                                                @Html.DropDownListFor(m => m.IITMPensionerorCSIRStaff, new SelectList(ViewBag.PensionerorCSIR, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.IITMPensionerorCSIRStaff)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 dis-none" id="divPensionerNo">
                                            <div class="form-group custom-form-group">
                                                <label>PPO No :</label>
                                                @Html.TextBoxFor(m => m.PPONo, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.PPONo)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 dis-none" id="divCSIRStaff">
                                            <div class="form-group custom-form-group">
                                                <label>CSIR staff  :</label>
                                                @if (Model.ConsultantAppointmentId > 0)
                                                {
                                                    @Html.DropDownListFor(m => m.CSIRStaff, new SelectList(ViewBag.CSIRStaffPayMode, "id", "name", Model.CSIRStaff), "Select", new { @data_val = "false", @class = "form-control" })
                                                }
                                                else
                                                {
                                                    @Html.DropDownListFor(m => m.CSIRStaff, new SelectList(ViewBag.CSIRStaffPayMode, "id", "name"), "Select", new { @data_val = "false", @class = "form-control" })
                                                }
                                                <div>@Html.ValidationMessageFor(m => m.CSIRStaff)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div class="form-group custom-form-group ">
                                                <label>Remarks</label>
                                                @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row ">
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group">
                                        <label>Bank Account No </label>
                                        @Html.TextBoxFor(m => m.BankAccountNo, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                        <div>@Html.ValidationMessageFor(m => m.BankAccountNo)</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group">
                                        <label>Bank Name</label>
                                        @Html.TextBoxFor(m => m.BankName, new { @class = "form-control", @onpaste = "return false", @onblur = "changeBankName()" })
                                        <div>@Html.ValidationMessageFor(m => m.BankName)</div>
                                        @Html.Hidden("BankId")
                                    </div>
                                </div><div class="col-md-6">
                                    <div class="form-group custom-form-group">
                                        <label>IFSC </label>
                                        @Html.TextBoxFor(m => m.IFSCCode, new { @class = "form-control", @style = "text-transform:uppercase" })
                                        <div>@Html.ValidationMessageFor(m => m.IFSCCode)</div>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label class="required">Project Number</label>
                                                    @Html.TextBoxFor(m => m.ProjectNumber, new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.ProjectId)</div>
                                                    @Html.Hidden("ProjectId")
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4 id="lblPrjtitle"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Name of the Client / Sponsoring Agency</label>
                                                    <h4 id="lblAgency"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Type</label>
                                                    <h4 id="lblProjectType"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4 id="lblPIName"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4 id="lblPrjStartDate"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Closure Date</label>
                                                    <h4 id="lblPrjCloseDate"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Code</label>
                                                    <h4 id="lblPICode"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Email ID</label>
                                                    <h4 id="lblPIEmail"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Phone No</label>
                                                    <h4 id="lblPIPhoneNo"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department code </label>
                                                    <h4 id="lblDepartCode"></h4>

                                                </div>
                                            </div>
                                            <div class="col-md-8">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4 id="lblPIDepartName"></h4>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Designation Code</label>
                                                    @Html.TextBoxFor(m => m.Designation, new { @class = "form-control" })
                                                    @Html.Hidden("DesignationId")
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation Name</label>
                                                    @Html.TextBoxFor(m => m.DesignationName, new { @class = "form-control", @readonly = "readonly" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Appointment start date</label>
                                                    @Html.TextBoxFor(m => m.Appointmentstartdate, new { @class = "form-control", @readonly = "readonly" })
                                                    <div>@Html.ValidationMessageFor(m => m.Appointmentstartdate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Appointment End date</label>
                                                    @Html.TextBoxFor(m => m.AppointmentEndDate, new { @class = "form-control", @readonly = "readonly" })
                                                    <div>@Html.ValidationMessageFor(m => m.AppointmentEndDate)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            @*<div class="col-md-12">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Is GST applicable</label>
                                                        @Html.RadioButtonFor(m => m.IsGSTapplicable, "Yes", new { @id = "GST_yes" })<span></span> &nbsp;Yes
                                                        @Html.RadioButtonFor(m => m.IsGSTapplicable, "No", new { @id = "GST_no", @checked = "checked" })<span></span> &nbsp;No<br />
                                                        <div>@Html.ValidationMessageFor(m => m.IsGSTapplicable)</div>
                                                    </div>
                                                </div>*@
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">GST applicable</label>
                                                    @Html.DropDownListFor(m => m.GSTapplicable, new SelectList(ViewBag.GSTapplicable, "id", "name"), "Selec GST", new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.GSTapplicable)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Salary</label>
                                                    @Html.TextBoxFor(m => m.Salary, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                                    <div>@Html.ValidationMessageFor(m => m.Salary)</div>
                                                </div>
                                            </div>
                                            <div id="divGST" class="dis-none">
                                                <div class="col-md-4">
                                                    <div class="form-group custom-form-group">
                                                        <label>GST % </label>
                                                        @Html.TextBoxFor(m => m.GST, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                                        <div>@Html.ValidationMessageFor(m => m.GST)</div>
                                                    </div>
                                                </div>
                                            </div>
                                            @Html.HiddenFor(m => m.GSTapplicableValid)
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Total</label>
                                                    @Html.TextBoxFor(m => m.Total, new { @class = "form-control", @readonly = "readonly" })
                                                    <div>@Html.ValidationMessageFor(m => m.Total)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 reg-no custom-reg-no">
                                                <div class="form-group custom-form-group">
                                                    <label class="lblval">Commitment Amount</label>
                                                    <h4 id="lblCommitmentAmount" class="tatval"></h4>
                                                    @Html.TextBoxFor(m => m.CommitmentAmount, new { @class = "form-control dis-none" })
                                                    @Html.Hidden("PrjAviAvailableBalance")
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Form Type</label>
                                                    @Html.DropDownListFor(m => m.FormId, new SelectList(ViewBag.formtype, "id", "name"), "Select Form Type", new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.FormId)</div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-4" id="">
                                                <div class="form-group custom-form-group">
                                                    <label>Form Attachment</label> <br>
                                                    @if (!string.IsNullOrEmpty(Model.FormFilePath))
                                                    {
                                                        @Html.HiddenFor(m => m.FormFilePath)
                                                        @Html.HiddenFor(m => m.FormFileName)
                                                        <h4>@Html.ActionLink(Model.FormFileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.FormFilePath }, new { @class = "", @name = "DocDownload", @target = "_blank", @style = "color:white" })</h4>
                                                        <input class="" type="file" name="FormDocument" style="width:190px;">
                                                    }
                                                    else
                                                    {
                                                        <input class="" type="file" name="FormDocument" style="width:190px;">
                                                    }
                                                    <em style="color:red;font-size:12px;">upload .pdf and file size below 5MB</em>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Request received from PI</label>
                                                    @Html.TextBoxFor(m => m.AutoFillRequstedbyPI, new { @class = "form-control" })
                                                    @Html.HiddenFor(m => m.RequestedByPI)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <input type="button" class="btn btn-success" value="View Staff Allocation" data-toggle="modal" id="btnViewStaffAllocation">
                                                    <input type="button" class="btn btn-success" value="Project Fund Availability" id="btnfund">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <label>PI Justification Document [ .doc, .docx, .pdf ]</label> <br>
                                                <div id="divPIJustification">
                                                    <input class="form-control mb-sm" id="PIJustificationFile_0" type="file" name="PIJustificationFile[0]" value="">
                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger mb-sm removeFile" style="margin-bottom: 10px;"><i class="ion-android-close"></i></a>
                                                </div>
                                                <a href="javascript:void(0)" id="btnAddFile" class="btn btn-success mt-20 mb20">Add New</a>

                                                @if (Model.PIJustificationDocDetail != null)
                                                {
                                                    foreach (var item in Model.PIJustificationDocDetail)
                                                    {
                                                        if (item.PIJustificationDocumentPath != null)
                                                        {
                                                            if (item.PIJustificationDocumentPath != "")
                                                            {
                                                                <h4>
                                                                    @Html.ActionLink(item.PIJustificationDocument, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = item.PIJustificationDocumentPath }, new { @class = "cls-a-wt", @name = "DocDownload", @target = "_blank" })
                                                                    @if (Model.Status == "Draft" || Model.Status == "Open" || Model.Status.Contains("Note"))
                                                                    {
                                                                        <a class="rct-del-doc cls-a-wt" value="@item.PIJustificationDocumentPath">Delete</a>
                                                                    }
                                                                </h4>
                                                                <br>
                                                            }
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <label>PI Justification / Remarks </label>
                                                    @Html.TextAreaFor(m => m.PIJustificationRemarks, new { @class = "form-control" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="mt-20">
                        @Html.Partial("_EducationDetail", Model.EducationDetail)
                    </div>
                    @Html.Partial("ExperienceDetail", Model.ExperienceDetail)
                </div>
            </div>
        </div>
    </div>
    <div class="row cts-mn-dts tabs" style="display:none">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row ">
                                        @if (!string.IsNullOrEmpty(Model.ApplicationNumber))
                                        {
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Application No: </label>
                                                    <h4 id="lblAppNo"></h4>
                                                </div>
                                            </div>
                                        }
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Candidate Name: </label>
                                                <h4 id="lblCondiName"></h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>PI Name:</label> <br>
                                                <h4 id="lblPINamet2"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Departname:</label> <br>
                                                <h4 id="lblPIDeptNamet2"></h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Qualification: </label>
                                                <h4 id="lblQualification"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Experience: </label>
                                                <h4 id="lblExperience"></h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Pay: </label>
                                                <h4 id="lblPay"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>GST % :</label> <br>
                                                <h4 id="lblGST"></h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>DOB </label>
                                                <h4 id="lblDOB"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group  ">
                                                <label>Application Received Date</label>
                                                <h4 id="lblApplicationRecvDate"></h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Pay category:</label>
                                                <h4>Retainer Fee</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Staff category:</label>
                                                <h4 id="lblStaffCategory"></h4>
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                @if (Model.ConsultantAppointmentId != null && Model.PIJustificationDocDetail != null)
                                                {
                                                    if (Model.PIJustificationDocDetail.Count > 0)
                                                    {
                                                        <label>PI Justification Document</label> <br>
                                                        var SNo = 1;
                                                        foreach (var item in Model.PIJustificationDocDetail)
                                                        {
                                                            if (item.PIJustificationDocumentPath != null)
                                                            {
                                                                if (item.PIJustificationDocumentPath != "")
                                                                {
                                                                    <h4>@Html.ActionLink(item.PIJustificationDocumentPath, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = item.PIJustificationDocument }, new { @class = "cls-a-wt", @name = "DocDownload" })</h4><br>
                                                                    SNo++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                <div id="fileAppend">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Comments</label>
                                                @Html.TextAreaFor(m => m.Comments, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Number</label>
                                                    <h4 id="lblProjectNo"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4 id="lblPrjTitlet1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Name of the Client / Sponsoring Agency</label>
                                                    <h4 id="lblAgyNamet1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Type</label>
                                                    <h4 id="lblProjectTypet1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4 id="lblPINamet1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4 id="lblPrjStartDatet1"></h4>

                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Closure Date</label>
                                                    <h4 id="lblPrjCloseDatet1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Code</label>
                                                    <h4 id="lblPIcodet1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Email ID</label>
                                                    <h4 id="lblPIEmailt1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Phone No</label>
                                                    <h4 id="lbllblPIPhoneNot1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department code </label>
                                                    <h4 id="lblDepartCodet1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4 id="lblPIDepartNamet1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation Code</label>
                                                    <h4 id="lblDesignationName"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation Name</label>
                                                    <h4 id="lblDesignationNames"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment start date</label>
                                                    <h4 id="lblAppStartDate"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment End date</label>
                                                    <h4 id="lblAppEndDate"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Commitment Amount</label>
                                                    <h4 id="lblCommitmentAmt"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowofMail, "NP", new { @id = "IsNotePI" })<label class="ml-sm ">Note to PI</label>
                                                </div>
                                            </div>

                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowofMail, "Nd", new { @id = "IsNodeviation" })<label class="ml-sm ">No deviation</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="Deviation"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="bl-lg-panel-box pb-null">
                            <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                <div class="cmn-panel-box">
                                    <div class="row">
                                        <div class="col-md-4" id="devCMAdmin">
                                            <div class="form-group custom-form-group">
                                                @Html.RadioButtonFor(m => m.FlowApprover, "CMAdmin", new { @id = "IsNotetoCMAdmin" }) <label class="ml-sm ">Note to CM Admin</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" id="devNoteDean">
                                            <div class="form-group custom-form-group">
                                                @Html.RadioButtonFor(m => m.FlowApprover, "NDean", new { @id = "IsNotetoDean" }) <label class="ml-sm " id="lblNoteDean">Note to Dean</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="text-right" style="margin-bottom: 50px;">
        @if (Model.Status == "Draft" || Model.Status == null)
        {
            <input type="submit" class="cancel btn btn-danger" value="Save Draft" id="btnSave" />
        }
        else
        {
            <input type="submit" class="btn btn-success dis-none" value="Save" />
        }
        <button type="button" class="btn btn-default" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
        <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>

    </div>

    <div id="dialogConfirm" class="modal fade" role="dialog" data-backdrop="static" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header brd-bottom">
                    <button type="button" class="close" data-dismiss="modal">×</button>
                    <h4 class="modal-title">Mail Template</h4>
                </div>
                <div class="modal-body">
                    <div style="padding:10px;" id="divBcc">
                        <label>To mail</label>
                        @if (Model.ConsultantAppointmentId > 0 && Model.Status != "Draft")
                        {
                            <h4>@Model.ToMail</h4>
                        }
                        else
                        {
                            @Html.TextBoxFor(m => m.ToMail, new { @class = "form-control mb20" })
                            @Html.ValidationMessageFor(m => m.ToMail)
                        }
                        <label>Carbon Copy(CC)</label>
                        @if (Model.ConsultantAppointmentId > 0 && Model.Status != "Draft")
                        {
                            <h4>@Model.bcc</h4>
                        }
                        else
                        {
                            @Html.TextBoxFor(m => m.bcc, new { @class = "form-control", @placeholder = "Separate emails by comma" })
                            @Html.ValidationMessageFor(m => m.bcc)
                        }
                    </div>
                    <div style="padding:10px;overflow:auto" id="ShowDeviationND">

                    </div>
                    <div style="padding:10px;overflow:auto" id="ShowDeviationNP">

                    </div>
                </div>
                <div class="modal-footer brd-top">
                    <button type="button" class="btn btn-danger" id="isbtnConfirm">Confirm</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
}
<div class="loading-bg dis-none">
</div>
<div id="popup"></div>

<script>
    var Status = @Html.Raw(Json.Encode(Model.Status)) || '';

    $('.form-control').prop('autocomplete', "off");
    function noedit() {
        return false;
    }
    $('select[name="ProfessionalId"]').on('change', function () {
        Professional(parseInt($(this).val()))
    });


    function Professional(value) {
        $('#Sex').addClass('dis-none');
        $('#lblSex').addClass('dis-none');
        if (value == 1) {
            $('#Sex').val(1);
            $('#lblSex').removeClass('dis-none');
            $('#lblSex').text('Male');
            $('#Sex').addClass('dis-none');
        }
        else if (value == 2) {
            $('#Sex').val(2);
            $('#lblSex').removeClass('dis-none');
            $('#lblSex').text('Female');
            $('#Sex').addClass('dis-none');
        }
        else if (value == 3) {
            $('#Sex').val(2);
            $('#lblSex').removeClass('dis-none');
            $('#lblSex').text('Female');
            $('#Sex').addClass('dis-none');
        }
        else if (value == 4) {

            $('#lblSex').addClass('dis-none');
            $('#Sex').removeClass('dis-none');
            $('#Sex').prop('selectedIndex',0);
        }
        else if (value == 5) {
            $('#Sex').val(3);
            $('#lblSex').removeClass('dis-none');
            $('#lblSex').text('Others');
            $('#Sex').addClass('dis-none');
        }
        else
        {
            $('#Sex').removeClass('dis-none');
            $('#Sex').prop('selectedIndex',0);
        }
    }

    $("#DateofBirth").change(function () {
        calculateAge();
        FillyearandExpDate();
    });

    function calculateAge() {
        var now = new Date();
        var today = new Date(now.getFullYear() , now.getMonth() , now.getDate());
        var dobString = $('#DateofBirth').val() || "";
        if(dobString != "")
        {
            var birthDate = new Date(dobString.split('-').join('/'));
            var age = today.getFullYear() - birthDate.getFullYear();
            var m = today.getMonth() - birthDate.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            $('#Age').val(age);
        }
    }


    $('input[name="EmployeeType"]').on('change', function () {
        var value = $("input[name='EmployeeType']:checked").val();
        if (value == "Old Employee") {
            $('#divOld').removeClass('dis-none');
            $('#divNew').addClass('dis-none');
        }
        else {
            $('#divNew').removeClass('dis-none');
            $('#divOld').addClass('dis-none');
        }
    });
    var diff = 0;
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var alertMsg = '@TempData["alertMsg"]';
    $(document).ready(function () {
        $('#ApplicatonEntryDate').addClass('dis-none');

        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        else if (alertMsg != '') {
            $('#alert').html(alertMsg);
            $('#Validation').modal('toggle');
        }
        if ($("#ProjectId").val() != "" || $("#ProjectId").val() != null)
            ProjectSummary();
        $('#PaytypeId').prop('disabled',true);
        $('#TypeofappointmentId').prop('disabled',true);


        $('#lblAppNo').text(@Html.Raw(Json.Encode(Model.ApplicationNumber)));

        if ($('select[name="ProfessionalId"]').val() != "") {
            Professional($('select[name="ProfessionalId"]').val())
        }
        var flowApp = @Html.Raw(Json.Encode(Model.FlowApprover)) || '';

        if(flowApp == "CMAdmin")
        {
            $("input[name=FlowApprover][value=CMAdmin]").prop('checked', true);
            $("#devNoteDean").hide();
        }
        if(flowApp == "NDean")
        {
            $("input[name=FlowApprover][value=NDean]").prop('checked', true);
            $("#devCMAdmin").hide();
        }

        var CommitmentRemark = @Html.Raw(Json.Encode(Remark)) || '';
        if (CommitmentRemark != '') {
            $.confirm({
                title: 'Commitment rejected reason !',
                content:CommitmentRemark,
                type: 'orange',
                buttons: {
                    Close: function () {
                        //close
                    },
                },
            });
        }

        var currentdate = moment(new Date()).toDate();
        if($("#ConsultantAppointmentId").val()!=null)
        {
            var DateRD = "@string.Format("{0:dd/MMMM/yyyy}", Model.ApplicationReceiveDate)";
            var ApplicationRD = moment(DateRD.split('-').join('/')).toDate();
            $('#ApplicationReceiveDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", ApplicationRD);
        }
        else
        {
            $('#ApplicationReceiveDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", -185);
        }

        $('#DateofBirth').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "maxDate", currentdate);
    });

    $(document).on('change', 'input[name="PersonDocImage"]', function () {

        var file = $(this).val();
        if (file != "") {
            var file_size = $(this)[0].files[0].size;
            var extension = file.substr((file.lastIndexOf('.') + 1)).toLowerCase();
            switch (extension) {
                case 'png':
                case 'jpg':
                case 'jpeg':
                    isValidExten = true;
                    break;
                default:
                    isValidExten = false;
            }
            if (isValidExten == false) {
                $('#alert').html("Please upload any one of these type file [png, jpg, jpeg].");
                $('#Validation').modal('toggle');
                $(this).val('');

                return false;
            }
            else if (file_size > 1000000) {
                $('#alert').html("You can upload the file up to 1 MB.");
                $('#Validation').modal('toggle');
                $(this).val('');
                return false;
            }
            readURL(this);
        }
    });

    $(document).on('change', 'input[name^="PIJustificationFile"]', function () {

        var file = $(this).val();
        if (file != "") {
            var file_size = $(this)[0].files[0].size;
            var extension = file.substr((file.lastIndexOf('.') + 1)).toLowerCase();
            switch (extension) {
                case 'doc':
                case 'docx':
                case 'pdf':
                    isValidExten = true;
                    break;
                default:
                    isValidExten = false;
            }
            if (isValidExten == false) {
                $('#alert').html("Please upload any one of these type file [doc, docx, pdf].");
                $('#Validation').modal('toggle');
                $(this).val('');
                return false;
            }
            else if (file_size > 5242880) {
                $('#alert').html("You can upload the file up to 5 MB.");
                $('#Validation').modal('toggle');
                $(this).val('');
                return false;
            }
        }
    });

    $('#btnfund').click(function () {
        var ProjectId = $("#ProjectId").val();
        if (ProjectId>0) {
            $(".loading-bg").removeClass('dis-none');
            //var token = $("input[name=__RequestVerificationToken]").val();
            var searchData = { "ProjectId": ProjectId };
            $.ajax({
                url: "@Url.Action("_ProjectSummary", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                success: function (data) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(data);
                    $("#projectSummaryModal").modal('toggle');
                },
                error: function (err) {
                    $(".loading-bg").addClass('dis-none');
                    console.log("error : " + err);
                }
            });
        }


    });
    var addyear = 0;
    $(document).ready(function () {
        applyAutoComplete($('#ProjectNumber'), $('#ProjectId'), '@Url.Action("LoadProjectList","CoreAccounts")', 'ProjectSummary', true);

        applyAutoComplete($('#AutoFillRequstedbyPI'), $('#RequestedByPI'), '@Url.Action("LoadPIList", "Requirement")');

        applyAutoComplete($('#BankName'), $('#BankId'), '@Url.Action("LoadBankNameList", "Requirement")',);

    });

    function ProjectSummary() {
        var projectId = $("#ProjectId").val();
        if (projectId != "" || projectId != 0) {
            $(".loading-bg").removeClass('dis-none');
            $.getJSON("@Url.Action("LoadProjectDetails", "Requirement")", { ProjectId: projectId },
        function (result) {
            if (result.projectData.ProjectNumber != null) {
                $('#lblProjectNo').text(result.projectData.ProjectNumber);
                $('#lblPrjTitlet1,#lblPrjtitle').text(result.projectData.ProjectTitle);
                $('#lblAgency,#lblAgyNamet1').text(result.projectData.SponsoringAgency);
                $('#lblProjectType,#lblProjectTypet1').text(result.projectData.ProjectType);
                $('#lblPIName,#lblPINamet2,#lblPINamet1').text(result.projectData.PIName);
                $('#lblPrjStartDate,#lblPrjStartDatet1').text(result.projectData.ProjectStartDate);
                $('#lblPrjCloseDate,#lblPrjCloseDatet1').text(result.projectData.ProjectClosureDate);
                FillPIDetails(result);
                $('#PrjAviAvailableBalance').val(result.projectData.AvailableBalance);
                var setappstrdat = "";
                var defaultappstrFromDate = moment($('#lblPrjStartDate').text().split('-').join('/')).toDate();
                var defaultapptodateDate = moment($('#lblPrjCloseDate').text().split('-').join('/')).toDate();
                var currentdate = moment(new Date()).add(-1,'years').toDate();
                if(currentdate != '' && defaultappstrFromDate!='')
                {
                    if(defaultappstrFromDate <= currentdate)
                        setappstrdat=currentdate;
                    else
                        setappstrdat = defaultappstrFromDate;
                }
                $('#Appointmentstartdate').datepicker({
                    dateFormat: 'dd-MM-yy',
                    changeYear: true
                }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", defaultapptodateDate).datepicker("setDate",@Html.Raw(Json.Encode(Model.AppointMentStrDate)));

                var defaultFromDate = moment($('#Appointmentstartdate').val().split('-').join('/')).add(1, 'days').toDate();
                var defaultfromyear = moment($('#Appointmentstartdate').val().split('-').join('/')).add(1, 'year').toDate();
                var defaulttodateDate = moment($('#lblPrjCloseDate').text().split('-').join('/')).toDate();
                if($('#Appointmentstartdate').val() != "")
                {
                    $('#AppointmentEndDate').datepicker({
                        dateFormat: 'dd-MM-yy',
                        changeYear: true
                    }).datepicker("option", "maxDate", defaulttodateDate).datepicker("option", "minDate", defaultFromDate).datepicker("setDate",@Html.Raw(Json.Encode(Model.AppointMentEdDate)));
                }
                if ($('#Appointmentstartdate').val() != "" && $('#AppointmentEndDate').val()!="") {
                    calculatetaxTotal();
                }
                $(".loading-bg").addClass('dis-none');
            }
        });
        }
    }


    $(document).on('keypress', 'input[id="Designation"]', function () {
        applyAutoCompleteDesignation($('#Designation'), $('#DesignationId'),'@Url.Action("LoadDesignationConsultantList", "Requirement")','FillDesignation', true);
    });

    $('#GST').keyup(function () {
        calculatetaxTotal();
    });

    $('#Salary').keyup(function () {
        calculatetaxTotal();
    });

    function dateRange(startDate, endDate) {
        var start = startDate.split('-');
        var end = endDate.split('-');
        var startYear = parseInt(start[0]);
        var endYear = parseInt(end[0]);
        var months = [];
        for(var i = startYear; i <= endYear; i++) {
            var endMonth = i != endYear ? 11 : parseInt(end[1]) - 1;
            var startMon = i === startYear ? parseInt(start[1])-1 : 0;
            for(var j = startMon; j <= endMonth; j = j > 12 ? j % 12 || 11 : j+1) {
                var month = j+1;
                var displayMonth = month < 10 ? '0'+month : month;
                months.push([displayMonth]);
            }
        }
        return months;
    }

    function endOfMonth(date)
    {
        return new Date(date.getFullYear(), date.getMonth() + 1, 0);
    }

    function calculatetaxTotal() {

        var startdate = $('#Appointmentstartdate').val();
        var enddate = $('#AppointmentEndDate').val();
        if(startdate != "" && enddate != "")
        {
            var startdt = new Date(startdate.split('-').join('/'));
            var enddt = new Date(enddate.split('-').join('/'));
            //Month count
            var monthCount = [],count=0;
            var fromDate = getFormattedDate(startdt);
            var toDate = getFormattedDate(enddt);
            monthCount = dateRange(fromDate,toDate)
            for (var i=0; i < monthCount.length; i++)
            {
                var lastCount = monthCount.length - 1;
                if(i != 0 && i != lastCount)
                    count+=1;
            }
            //---end---


            //define moments for the startdate and enddate
            var startdateTotalDays = parseInt(endOfMonth(startdt).getDate());
            var enddateTotalDays = parseInt(endOfMonth(enddt).getDate());
            var startworkingdays = 0 , endworkingdays = 0;
            if(startdt.getMonth() == enddt.getMonth() && startdt.getFullYear() == enddt.getFullYear())
            {
                startworkingdays = parseInt(enddt.getDate()) - parseInt(startdt.getDate()) + 1;
            }
            else
            {
                startworkingdays = startdateTotalDays - parseInt(startdt.getDate()) + 1;
                endworkingdays = enddt.getDate();
            }
            //---end---
            var months = count || 0;
            var days = startworkingdays + endworkingdays;
            var ttlVal = 0;
            var Salary = parseFloat($('#Salary').val()) || 0;
            var baseVal = parseFloat($('#Salary').val()) || 0;
            var GSTapplicable = parseInt($('#GSTapplicable').val()) || 0;
            var taxVal = 0;
            var Tot = 0;
            if(GSTapplicable == 2)
                taxVal = parseFloat($('#GST').val()) || 0;
            ttlVal = baseVal + (baseVal * (taxVal / 100));
            var StartPerDay = ttlVal / startdateTotalDays;
            var EndPerDay = ttlVal / enddateTotalDays;
            var MonthlyAmt = ttlVal;

            if (months > 0)
            {
                Tot += MonthlyAmt * count;
            }
            if (days > 0)
            {
                Tot += startworkingdays * StartPerDay;
                Tot += endworkingdays * EndPerDay;
            }

            if(ttlVal > 0)
                $("#Total").val(ttlVal.toFixed(2));

            $('#CommitmentAmount').val(Math.round(Tot));
            $('#lblCommitmentAmount').text(Math.round(Tot));
        }
    }

    function getFormattedDate(date)
    {
        var year = date.getFullYear();
        var month = (1 + date.getMonth()).toString();
        var day = date.getDate().toString();
        return year + '-' + month + '-' + day;
    }

    function dateRange(startDate, endDate)
    {
        var start = startDate.split('-');
        var end = endDate.split('-');
        var startYear = parseInt(start[0]);
        var endYear = parseInt(end[0]);
        var months = [];
        for(var i = startYear; i <= endYear; i++) {
            var endMonth = i != endYear ? 11 : parseInt(end[1]) - 1;
            var startMon = i === startYear ? parseInt(start[1])-1 : 0;
            for(var j = startMon; j <= endMonth; j = j > 12 ? j % 12 || 11 : j+1) {
                var month = j+1;
                var displayMonth = month < 10 ? '0'+month : month;
                months.push([displayMonth]);
            }
        }
        return months;
    }



    $('#Appointmentstartdate').change(function () {
        var enddatepicker = "";
        $('#AppointmentEndDate').val('');
        if($(this).val() != "")
        {
            var closureDate = moment($('#txtProjectClosureDate').text().split('-').join('/')).toDate();
            if(closureDate != "")
            {
                var addedyear = "";
                var designationId = parseInt($('#DesignationId').val()) || 0;
                if(designationId == 1)
                    addedyear = moment($(this).val().split('-').join('/')).add(+6, 'months').toDate();
                else
                    addedyear = moment($(this).val().split('-').join('/')).add(+364, 'days').toDate();

                if(addedyear > closureDate)
                    enddatepicker = closureDate;
                else
                    enddatepicker = addedyear;
            }
            var startdatepicker = moment($(this).val().split('-').join('/')).add(+1, 'months').add(-1,'days').toDate();

            $('#AppointmentEndDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", startdatepicker).datepicker("option", "maxDate", enddatepicker);

            var maxdt = new Date($(this).val().split('-').join('/'));
            maxdt.setDate(maxdt.getDate() - 1);
            $('input[name$=".FromDate"]').each(function(){
                $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "maxDate", maxdt);
            });
            $('input[name$=".ToDate"]').each(function(){
                $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "maxDate", maxdt);
            });
        }
    });


    $("#Appointmentstartdate,#AppointmentEndDate").change(function () {
        calculatetaxTotal();
    });

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {

        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tabs");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            if(Status == "Open" || Status == "" || Status == "Draft" || Status.includes("Note") &&Status != "Note to Dean")
            {
                document.getElementById("nextBtn").style.display = "inline";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }
            else
            {
                document.getElementById("nextBtn").style.display = "none";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            document.getElementById("nextBtn").style.display = "inline";
        }
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tabs");
        // Exit the function if any field in the current tab is invalid:
        var v=n;
        if($('#nextBtn').text().includes("Send") || $('#nextBtn').text().includes("Submit")){
            v = 2;
        }
        var expinValid = validateExperiencedetail();
        if (expinValid) {
            $.confirm({
                title: 'Warning!',
                content: 'Please fill experience detail',
                type: 'orange',
                buttons: {
                    Ok: function () {
                        //close
                    },
                },
            });
            return false;
        }
        var val = $('select[name="ProfessionalId"]').val() || 0;
        var qualification = [];
        if (val == 4) {
            $(document).find('select[name $=".QualificationId"]').each(function () {
                var value = parseFloat($(this).val()) || 0;
                if (value != 0)
                    qualification.push(value);
            });
            if (qualification.length > 0) {
                if(arrayContains(3,qualification) == false) {
                    $('select[name="ProfessionalId"]').val('');
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: "Please select Doctorate degree for Salutation Dr.",
                        type: 'red'
                    });
                    return;
                }
            }
        }
        if (n > 0 && !validateForm(v)) {
            $.confirm({
                title: 'Warning!',
                content: 'Invalid data exist',
                type: 'orange',
                buttons: {
                    Ok: function () {
                        //close
                    },
                },
            });
            return false;
        }
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        }

        else {

            // ... the form gets submitted:
            var CheckedValue = [];
            $('#tbodyDEVCheckList').find('input[id^="DeviationCheckId_"]').each(function(){
                if($(this).is(':checked')){
                    var str =$(this).attr('name');
                    var matches = str.match(/(\d+)/);
                    var value=""
                    if(matches)
                        value =$('input[name="CheckListDetail['+matches[0]+'].CheckList"]').val();
                    CheckedValue.push(value);
                }
            });
            if(CheckedValue.length>0){
                $('#li-content').empty();
                for(var i=0;i<CheckedValue.length;i++){
                    var ele = document.createElement('li');
                    ele.setAttribute("id", "appendiv"+i);
                    ele.style ="width:100%; display:inline-block;";
                    $('#li-content').append(ele);
                    var html='<img src="https://icsris.iitm.ac.in//Content/IOASContent/img/check-mark-icon.png" width="25" height="25" style="margin-right:15px;float:left;margin-top: 3px;">';
                    html+='<span>'+CheckedValue[i]+'</span>';
                    $('#appendiv'+i).html(html);
                }
            }
            if(Status==""||Status=="Draft") {
                //$('#ToMail').val($('#lblPIEmail').text());
                $('#ToMail').val("icsrrecruitda1@icsrpis.iitm.ac.in");
            }
            if($('input[name="FlowofMail"]:checked').val() != "Nd") {
                if($('#Comments').val()!=""){
                    $('#tr-cmt').removeClass('dis-none');
                }
                else{
                    $('#tr-cmt').addClass('dis-none');
                }
                $('#txt-mail-comments').text($('#Comments').val());
                $('#ShowDeviationND').hide();
                $('#ShowDeviationNP').show();
                PopupConfirm()
            }
            else if($('input[name="FlowofMail"]:checked').val() == "Nd") {
                if(Status == ""|| Status == "Draft"){
                    $('#ShowDeviationND').empty();
                    $('#ShowDeviationNP').hide();
                    $('#ShowDeviationND').show();
                    AckowleadgementEmail()
                    PopupConfirm()
                }
                else
                    formSave();
            }
            else{
                formSave();
            }
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function EnableDisableReqClass(required)
    {
        if(required)
        {
            if($('input[name="EmployeeType"]:checked').val() == "Old Employee"){
                $('#OldEmployeeNumber').addClass("required");
            }
            //$('#ProfessionalId').addClass("required");
            //$("#Name").addClass("required");
            //$("#Nameoftheguardian").addClass("required");
            //$("#DateofBirth").addClass("required");
            //$("#Sex").addClass("required");
            //$("#ContactNumber").addClass("required");
            //$("#Email").addClass("required");
            //$('#TemporaryAddress').addClass("required");
            //$("#ApplicationReceiveDate").addClass("required");
            ////$("#BankAccountNo").addClass("required");
            ////$("#BankName").addClass("required");
            ////$("#IFSCCode").addClass("required");
            //$("#PANNo").addClass("required");
            //if($("#AadharNumber").val()!=""){
            //    $('#PANNo').removeClass("required");
            //}
            //else if($("#PANNo").val()!=""){
            //    $('#AadharNumber').removeClass("required");
            //}
            //else{
            //    $('#PANNo').addClass("required");
            //    $('#AadharNumber').addClass("required");
            //}
            ////$("#ProjectId").addClass("required");
            ////$("#DesignationId").addClass("required");
            //$("#Appointmentstartdate").addClass("required");
            //$("#AppointmentEndDate").addClass("required");
            //$("#CommitmentAmount").addClass("required");
            //$("#IITMPensionerCSIRStaff").addClass("required");
            //$("#FormId").addClass("required");
            //$('#tbodyEducation').find('select[name$=".QualificationId"]').each(function(){
            //    $(this).addClass("required");
            //});
            //$('#tbodyEducation').find('select[name$=".DisciplineId"]').each(function(){
            //    $(this).addClass("required");
            //});
            //$('#tbodyEducation').find('input[name$=".Institution"]').each(function(){
            //    $(this).addClass("required");
            //});
            //$('#tbodyEducation').find('select[name$=".YearofPassing"]').each(function(){
            //    $(this).addClass("required");
            //});
            //$('#tbodyEducation').find('input[name$=".Marks"]').each(function(){
            //    $(this).addClass("required");
            //});

            //$('#tbodyEducation').find('select[name$=".MarkType"]').each(function(){
            //    $(this).addClass("required");
            //});


        }
        else
        {
            $('#ProfessionalId').removeClass("required");
            $("#Name").removeClass("required");
            $("#Nameoftheguardian").removeClass("required");
            $("#DateofBirth").removeClass("required");
            $("#Sex").removeClass("required");
            $("#ContactNumber").removeClass("required");
            $("#Email").removeClass("required");
            $('#TemporaryAddress').removeClass("required");
            $("#ApplicationReceiveDate").removeClass("required");
            //$("#BankAccountNo").removeClass("required");
            //$("#BankName").removeClass("required");
            //$("#IFSCCode").removeClass("required");
            $("#PANNo").removeClass("required");
            $('#AadharNumber').removeClass("required");
            $("#ProjectNumber").removeClass("required");
            $("#ProjectId").removeClass("required");
            $("#DesignationId").removeClass("required");
            $("#Appointmentstartdate").removeClass("required");
            $("#AppointmentEndDate").removeClass("required");
            $("#CommitmentAmount").removeClass("required");
            $("#IITMPensionerCSIRStaff").removeClass("required");
            $("#FormId").removeClass("required");
            $('#tbodyEducation').find('select[name$=".QualificationId"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('select[name$=".DisciplineId"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('input[name$=".Institution"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('select[name$=".YearofPassing"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('input[name$=".Marks"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('select[name$=".MarkType"]').each(function(){
                $(this).removeClass("required");
            });
        }
    }

    function FillyearandExpDate()
    {
        var dobString = $('#DateofBirth').val() || "";
        if(dobString != "")
        {
            var dob = new Date(dobString.split('-').join('/'));
            var Curr = new Date();
            var year = parseInt(dob.getFullYear());
            year += 14;
            var minimumDt = new Date(year,dob.getMonth(),dob.getDate());
            if($("#ConsultantAppointmentId").val()!=null)
            {
                var maxdt = new Date($('#Appointmentstartdate').val().split('-').join('/'));
                maxdt.setDate(maxdt.getDate() - 1);
                $('input[name$=".FromDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate",minimumDt).datepicker("option", "maxDate", maxdt);
                });
                $('input[name$=".ToDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate", minimumDt).datepicker("option", "maxDate", maxdt);
                });
            }
            else
            {
                $('input[name$=".FromDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate",minimumDt);
                });
                $('input[name$=".ToDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate", minimumDt);
                });

            }
            $('select[name$=".YearofPassing"]').each(function(){
                $(this).empty().append($('<option/>', { value: "", text: "Select year" }));
                var curryear = @DateTime.Now.Year;
                for(var i = year;i <= curryear;i++){
                    $(this).append($('<option/>', { value: i, text: i }));
                }
            });
        }
    }

    function validateForm(n) {
        EnableDisableReqClass(true);
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tabs");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;
            // this can be used to perform other action if there are no steps
        }
        //else if (currentTab == 0)
        //{
        //    if ($('#Appointmentstartdate').val() != null && $('#AppointmentEndDate').val()!=null) {
        //        if ($('#DesignationId').val()>0 || $('#DesignationId').val()!="")
        //        {
        //            if($('#ProjectId').val()!=null)
        //            {
        //                checkDevation();
        //            }
        //        }
        //    }

        //    if ($('#ProjectId').val() != null || $('#ProjectId').val() != "") {
        //        FillData();
        //    }
        //}
        //else if (currentTab == 1) {


        //}

        $(stepElements).each(function (idx) {
            if (!$(this).is(':radio') && !$(this).is(':checkbox')) {
                isValid = $(this).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }
        });

        if($('input[name="EmployeeType"]:checked').val() == "Old Employee")
        {
            var oldid = $('#OldEmpId').val();
            if(oldid == "")
            {
                $.confirm({
                    title: 'Warning!',
                    content: 'Please select valid employee number',
                    type: 'orange',
                    buttons: {
                        Ok: function () {
                            $('#OldEmployeeNumber').val('');
                        },
                    },
                });
                return false;
            }
        }


        if(!hadError && n!= 2)
        {
            if ($('#DesignationId').val() != null || $('#DesignationId').val() != "")
            {
                //if(Status == "Open" || Status == "" || Status == "Draft" || Status.includes("Note") && Status != "Note to Dean")
                //{
                //    checkDevation();
                //}
                //else
                //{
                $("input[name=FlowofMail]").prop('checked', false);
                $("#Deviation").empty();
                $("input[name=FlowofMail][value=Nd]").prop('checked', true);
                document.getElementById("nextBtn").style.display = "none";
                //}
            }
            if ($('#ProjectId').val() != null || $('#ProjectId').val() != "")
            {
                FillData();
            }
        }

        return !hadError; // return the valid status
    }


    function PopupConfirm() {
        $('#dialogConfirm').modal('toggle');
    }
    $('#isbtnConfirm').click(function(){
        formSave()
    });
    function formSave() {
        var isValid = $('#formConApp').valid();
        if (!isValid)
            return false;
        var qualificationvalue = [];
        $('select[name$=".QualificationId"]').each(function (idx, val) { qualificationvalue.push($(val).val()); });
        qualificationvalue.sort();
        // duplicate check
        for (var k = 1; k < qualificationvalue.length; ++k) {
            if (qualificationvalue[k] == qualificationvalue[k - 1]) {
                $('#alert').html("Selected different Qualification");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        if (isValid)
            $('#formConApp').submit();
    }


    function FillData() {
        $('#lblCondiName').text($('#Name').val());
        var StaffCategory = $('input[name=IsICSRStaff]:checked').val();
        if ($('#IsMsPhd').is(':checked'))
            $('#lblPHD').text($('#PhdDetail').val());
        $('#lblPay').text($('#Salary').val());
        $('#lblGST').text($('#GST').val());
        $('#lblDOB').text($('#DateofBirth').val());
        $('#lblApplicationRecvDate').text($('#ApplicationReceiveDate').val());
        $('#lblDesignationName').text($('#Designation').val());
        $('#lblDesignationNames').text($('#DesignationName').val());
        //$('#lblDesignation').text($('#Designation').val());
        $('#lblAppStartDate').text($('#Appointmentstartdate').val());
        $('#lblAppEndDate').text($('#AppointmentEndDate').val());
        $('#lblCommitmentAmt').text($('#CommitmentAmount').val());
        if(StaffCategory != "")
            $('#lblStaffCategory').text(StaffCategory);
        var TotalExp = 0;
        diff = 0;
        $('#tbodyExperience tr').each(function () {
            var frmexpdate = $(this).find("input[name$='.FromDate']").val();
            var toexpdate = $(this).find("input[name$='.ToDate']").val();
            if(frmexpdate !="" && toexpdate != ""){
                getDateDifference(frmexpdate,toexpdate)
            }
        });

        $('#lblExperience').text(getDateFormattedDate());
        var Qualifications = "";
        $('#tbodyEducation tr').each(function () {
            var departmet = $(this).find("select[name$='.DisciplineId'] option:selected").text();
            if(departmet != "")
                Qualifications += departmet + ",";
        });
        $('#lblQualification').text(Qualifications);
    }

    function getDateDifference(startDate, endDate) {
        var date1 = Date.parse(startDate.split('-').join('/'));
        var endat = new Date(endDate.split('-').join('/'));
        endat.setDate(endat.getDate() + 1);
        var date2 = Date.parse(endat);
        diff += date2 - date1;
    }

    function getDateFormattedDate() {
        var day = 1000 * 60 * 60 * 24;
        var years = Math.floor(diff/31536000000);
        var months = Math.floor((diff % 31536000000)/2628000000);
        var days = Math.floor(((diff % 31536000000) % 2628000000)/86400000);
        return years + " Years " + months + " months " + days + " days";
    }

    $('input[name="isSameasPermanentAddress"]').on('click', function () {
        if ($(this).is(":checked"))
            $('#PermanentAddress').val($('#TemporaryAddress').val());
        else
            $('#PermanentAddress').val("");
    });

    $('textarea[name="TemporaryAddress"]').on('keyup', function () {
        var value = $(this).val();
        if ($('#isSameasPermanentAddress').is(":checked"))
            $('#PermanentAddress').val(value);
    });

    $('#IsNodeviation').click(function(){
        if ($(this).is(":checked")) {
            $('input[name$=".IsChecked"]').prop('checked',false);
            document.getElementById("nextBtn").innerHTML = "Send for approval";
        }
    });

    var gstapplicable = @Html.Raw(Json.Encode(Model.GSTapplicable));

    if (gstapplicable == 3)
        $('#divGST').addClass("dis-none");
    else
        $('#divGST').removeClass("dis-none");


    $('select[name="GSTapplicable"]').change(function () {
        var val = $(this).val();
        if (val != 3)
            $('#divGST').removeClass("dis-none");
        else
            $('#divGST').addClass("dis-none");
        calculatetaxTotal();
    });

    $("#Appointmentstartdate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        },
        beforeShowDay: function(date) {
            var day = date.getDay();
            return [day != 0,''];
        }
    });

    $("#AppointmentEndDate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        }
    });

    function checkDevation() {
        var qualifi = [];
        var descipid = [];
        var marks = [];
        var marksType = [];
        addyear = 0;
        var totaval = 0;
        var  Salary = 0,gst = 0;
        Salary = parseFloat($('#Salary').val());
        var txtto = parseFloat($('#GST').val()) || 0;
        totaval = Salary + (Salary * txtto / 100);

        $('#tbodyEducation select[name$=".QualificationId"]').each(function () {
            qualifi.push($(this).val() || 0);
        });
        $('#tbodyEducation select[name$=".DisciplineId"]').each(function () {
            descipid.push($(this).val() || 0);
        });
        $('#tbodyEducation input[name$=".Marks"]').each(function () {
            marks.push(parseFloat($(this).val()) || 0);
        });
        $('#tbodyEducation select[name$=".MarkType"]').each(function () {
            marksType.push(parseFloat($(this).val()) || 0);
        });

        var TotalExp = 0;
        $('#tbodyExperience tr').each(function () {
            var frmexpdate = $(this).find("input[name$='.FromDate']").val();
            var toexpdate = $(this).find("input[name$='.ToDate']").val();
            if(frmexpdate != "" && toexpdate != ""){
                var dateTo = new Date(toexpdate.split('-').join('/'));
                var dateFrom = new Date(frmexpdate.split('-').join('/'));
                var dtdiff = new Date(dateTo - dateFrom);
                dtdiff.setDate(dtdiff.getDate() + 1);
                var days = diff / 1000 / 60 / 60 / 24;
                TotalExp+=days;
            }
        });
        $('#ExpTotal').val(TotalExp);
        var Exp = parseFloat(TotalExp) / 365;
        var PersonName=$('#ProfessionalId option:selected').text()+''+$('#Name').val();
        var oldempno = "";
        if($('input[name="EmployeeType"]:checked').val() == "Old Employee")
            oldempno = $('#OldEmpId').val();
        var InputData = [];
        InputData = {
            DesignationId: $('#DesignationId').val() || null,
            QualificationId: qualifi,
            DisciplineId: descipid,
            MarksId: marks,
            CheckAge: $('#Age').val(),
            ChekSalary: $('#Salary').val(),
            Experience: Exp,
            Masrks: marks,
            AppointmentStartDate: $('#Appointmentstartdate').val(),
            AppointmentEndDate: $('#AppointmentEndDate').val(),
            StaffCatecory: $('input[name="IsICSRStaff"]:checked').val(),
            ProjectFund:0,
            CommitmentAmount:$('#CommitmentAmount').val()||0,
            PhysicallyChanged:null,
            PersonName:PersonName,
            ProjectID:$('#ProjectId').val(),
            Comments:$('#Comments').val(),
            AppointmentType:null,
            BasicPay:totaval,
            MasrksType:marksType,
            GateScore:null,
            AppType:"CON",
            TypeOfAppointment:null,
            DateOfBirth: $('#DateofBirth').val(),
            OldEmployee : oldempno,
        }
        $(".loading-bg").removeClass('dis-none');
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("CheckDeviationQualfication", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",

            success: function (result) {
                //console.log(result.output);
                $("#Deviation").html(result.output);
                $("#ShowDeviationNP").html(result.template);
                $("input[name=FlowofMail]").prop('checked', false);
                if(result.isRes){
                    if(currentTab==1)
                    {
                        $('input[name="FlowofMail"][value="NP"]').prop('checked',true);
                        document.getElementById("nextBtn").innerHTML = "Send to clarification";
                    }
                }
                else{
                    if(currentTab==1)
                    {
                        $('input[name="FlowofMail"][value="Nd"]').prop('checked',true);
                        document.getElementById("nextBtn").innerHTML = "Send for approval";
                    }
                }
                $(".loading-bg").addClass('dis-none');
            },
            error: function (err) {
                $(".loading-bg").addClass('dis-none');
                console.log("error : " + err);
            }
        });
    }

    function AckowleadgementEmail()
    {
        var PersonName = $('#ProfessionalId option:selected').text() + ' ' + $('#Name').val();
        var InputData = [];
        InputData = {
            DesignationId: $('#DesignationId').val() || null,
            AppointmentStartDate : $('#Appointmentstartdate').val(),
            AppointmentEndDate : $('#AppointmentEndDate').val(),
            PersonName : PersonName,
            ProjectID : parseInt($('#ProjectId').val()),
            BasicPay :  $('#Salary').val(),
        }
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("CONEmailProcess", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",
            beforeSend: function () {
                $(".loading-bg").removeClass('dis-none');
            },
            success: function (result) {
                $(".loading-bg").addClass('dis-none');
                $("#ShowDeviationND").html(result.output.Item2);
            },
            error: function (err) {
                $(".loading-bg").addClass('dis-none');
                console.log("error : " + err);
            }
        });
    }

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#displayImg')
                    .attr('src', e.target.result)
                    .width(30)
                    .height(30);
            };

            reader.readAsDataURL(input.files[0]);
        }
    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    $(document).on('click','#btnSave',function(e){

        e.preventDefault();
        $('#isDraftbtn').val(true);
        $('#formConApp').submit();
        $(".loading-bg").removeClass('dis-none');
    });

    $('#btnAddPIJus').click(function () {
        var cln = $('#tbodyPIDocDetail tr:first').clone().find("input,textarea").val("").end();
        var index = $('#tbodyPIDocDetail tr:last').find("input[name='PIJustificationDocDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='PIJustificationDocDetail.Index']").val(index);
        $(cln).find('a.dis-none').removeClass('dis-none');
        $(cln).find('a.doclink').addClass('dis-none');
        $(cln).find("input,textarea").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $('#tbodyPIDocDetail').append(cln);

    });

    $(document).on('click', 'a.removePIJusDetail', function () {
        if ($('#tbodyPIDocDetail tr').length != 1) {
            $(this).closest('tr').remove();
        }
    });

    $('#tbodyPIDocDetail tr').each(function(){
        var index = $(this).find("input[name='PIJustificationDocDetail.Index']").val();
        if(index > 0)
            $('a.dis-none').removeClass('dis-none');
        else
            $('a.dis-none').addClass('dis-none');
    });


    $(document).on('keyup','textarea,input[type="text"]',function(event) {
        if($(this).attr('id') != "Comments" && $(this).attr('id') != undefined){
            var input = event.target;
            var start = input.selectionStart;
            var end = input.selectionEnd;
            input.value = input.value.toLocaleUpperCase();
            input.setSelectionRange(start, end);
        }
    });


    $(document).on('keyup','input[name$=".Marks"]',function(){
        var value = parseInt($(this).val());
        if(isNaN(value))
        {
            $.alert({
                icon: 'ion-close-circled',
                title: 'Error Alert!',
                content: 'Enter valid input',
                type: 'red'
            });
            return false;
        }
        if(value > 100)
        {
            $.alert({
                icon: 'ion-close-circled',
                title: 'Error Alert!',
                content: 'Mark percentage should be between 0 and 100',
                type: 'red'
            });
            $(this).val('')
            return false;
        }
    });

    var innc=1;
    $("#btnAddFile").click(function () {
        var cln = $('div#divPIJustification:first').clone().find("input").val("").end();
        $(cln).find('a').removeClass('dis-none');
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, innc));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, innc));
        });
        $(cln).insertAfter("div#divPIJustification:last");
        innc++;
    });

    $(document).on('click', 'a.removeFile', function () {
        if ($('div#divPIJustification').length == 1) {
            $('div#divPIJustification').find("input").val("").end();
        }
        else{
            $(this).closest('div').remove();
            //UpdateUploadedDoc();
            $(document).find('input[name^="PIJustificationFile"]').each(function(idx,ele){
                $(this).attr("name", $(this).attr("name").replace(/\d+/, idx));
                if ($(this).attr("id"))
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, idx));
            });
            innc--;
        }
    });

    function UpdateUploadedDoc(){
        var form_data = new FormData();
        $('#fileAppend').empty();
        $(document).find('input[name^="PIJustificationFile"]').each(function(idx,ele){
            var val = $(this).val();
            var ID = $(this).attr('id');
            if(val!=""){
                var tmppath= URL.createObjectURL(document.getElementById(ID).files[0]);
                var fileN = document.getElementById(ID).files[0].name;
                var ele = document.createElement('a');
                var elebr = document.createElement('br');
                ele.href =tmppath
                ele.text=fileN;
                ele.name="DocDownload";
                document.getElementById('fileAppend').appendChild(ele);
                document.getElementById('fileAppend').appendChild(elebr);

            }
        });
    }
    $(document).on('change','input[name$=".IsChecked"]',function () {
        var isUnchecked = false;
        $('input[name$=".IsChecked"]').each(function () {
            if ($(this).is(':checked')) {
                isUnchecked = true;
            }
        });
        $("input[name=FlowofMail]").prop('checked', false);

        if (!isUnchecked) {
            $("input[name=FlowofMail][value=Nd]").prop('checked', true);
            $('#nextBtn').text('Send for approval');
        }
        else {
            $("input[name=FlowofMail][value=NP]").prop('checked', true);
            $('#nextBtn').text('Send for clarification');
        }
    });

    $(document).on('change','input[name="FlowofMail"]',function () {
        var isUnchecked = false;
        var value = $('input[name="FlowofMail"]:checked').val();
        if(value == "Nd") {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', false);
            });
            $('#nextBtn').text('Send for approval');
        }
        else {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', true);
            });
            $('#nextBtn').text('Send for clarification');
        }
    });

    $('select[name="IITMPensionerorCSIRStaff"]').on('change', function () {
        if (parseInt($(this).val()) == 1) {
            $('#divPensionerNo').removeClass('dis-none');
            $('#divCSIRStaff').addClass('dis-none');
            $('#divMSPHDDetails').addClass('dis-none');
            $('#IsMsPhd').prop('checked',false);
            $('#phdDetails').addClass('dis-none');

        }
        else if (parseInt($(this).val()) == 2) {
            $('#divPensionerNo').addClass('dis-none');
            $('#divCSIRStaff').removeClass('dis-none');
            $('#divMSPHDDetails').removeClass('dis-none');
        }
        else {
            $('#divPensionerNo').addClass('dis-none');
            $('#divCSIRStaff').addClass('dis-none');
            $('#divMSPHDDetails').removeClass('dis-none');
        }
    });

    var PensionerCSIStaff = parseInt($('select[name="IITMPensionerorCSIRStaff"]').val());
    if (PensionerCSIStaff == 1) {
        $('#divPensionerNo').removeClass('dis-none');
        $('#divCSIRStaff').addClass('dis-none');
        $('#divMSPHDDetails').addClass('dis-none');
        $('#IsMsPhd').prop('checked',false);
        $('#phdDetails').addClass('dis-none');
    }
    else if (PensionerCSIStaff == 2) {
        $('#divPensionerNo').addClass('dis-none');
        $('#divCSIRStaff').removeClass('dis-none');
        $('#divMSPHDDetails').removeClass('dis-none');
    }
    else {
        $('#divPensionerNo').addClass('dis-none');
        $('#divCSIRStaff').addClass('dis-none');
        $('#divMSPHDDetails').removeClass('dis-none');
    }

    var Isameaddress = @Html.Raw(Json.Encode(Model.isSameasPermanentAddress)) || false;
    if(Isameaddress == true)
        $('#isSameasPermanentAddress').prop('checked',true);
    else
        $('#isSameasPermanentAddress').prop('checked',false);

    $(document).on('click', '#btnViewSummary', function () {
        var projNo = $('#ProjectId').val() || 0;
        if (projNo > 0) {
            var searchData = { "ProjectId": projNo };
            $.ajax({
                url: "@Url.Action("_ProjectSummary", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                beforeSend: function () {
                    $(".loading-bg").removeClass('dis-none');
                },
                success: function (result) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(result);
                    $("#projectSummaryModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
    });

    $(document).on('click', '#btnViewStaffAllocation', function () {
        var projNo = $('#ProjectId').val() || 0;
        if (projNo > 0) {
            var searchData = { "ProjectId": projNo };
            $.ajax({
                url: "@Url.Action("_ViewStaffAllocation", "Requirement")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                beforeSend: function () {
                    $(".loading-bg").removeClass('dis-none');
                },
                success: function (result) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(result);
                    $("#myModal1").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                    $(".loading-bg").addClass('dis-none');
                }
            });
        }
    });

    $(document).on('keyup','input[name$=".Marks"]',function(){
        var value = parseInt($(this).val());
        var splitId = $(this).attr('id');
        var ID = splitId.split('_')[1];
        var MarkType = parseInt($('select[name="EducationDetail[' + ID + '].MarkType"]').val()) || 0;
        if(MarkType > 0)
        {
            if(MarkType == 1){
                if(isNaN(value))
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'Enter valid input',
                        type: 'red'
                    });
                    return false;
                }
                if(value > 100)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'Mark percentage should be between 0 and 100',
                        type: 'red'
                    });
                    $(this).val('')
                    return false;
                }
            }
            else
            {
                if(isNaN(value))
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'Enter valid input',
                        type: 'red'
                    });
                    return false;
                }
                if(value > 10)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'CGPA should be between 1 and 10',
                        type: 'red'
                    });
                    $(this).val('')
                    return false;
                }
            }
        }
        else
        {
            $.alert({
                icon: 'ion-close-circled',
                title: 'Error Alert!',
                content: 'Please select mark type',
                type: 'red'
            });
            $('input[name="EducationDetail[' + ID + '].MarkType"]').focus();
            $(this).val('')
            return false;
        }

    });

    $(document).on('change','select[name$=".MarkType"]',function(){
        var value=parseInt($(this).val());
        var name=$(this).attr('name');
        var ID=name.match(/\d+/)[0];
        var Mark= parseFloat($('input[name="EducationDetail[' + ID + '].Marks"]').val()) || 0;
        if(Mark > 0)
        {
            if(value == 1){
                if(Mark > 100)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'Mark percentage should be between 0 and 100',
                        type: 'red'
                    });
                    $('input[name="EducationDetail[' + ID + '].Marks"]').val('');
                    return false;
                }
            }
            else if(value == 2)
            {
                if(Mark > 10)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'CGPA should be between 1 and 10',
                        type: 'red'
                    });
                    $('input[name="EducationDetail[' + ID + '].Marks"]').val('');
                    return false;
                }
            }
            else
            {
                $.alert({
                    icon: 'ion-close-circled',
                    title: 'Error Alert!',
                    content: 'Please select valid input',
                    type: 'red'
                });
                return false;
            }
        }
    });

    function FillPIDetails(result) {
        if (result.projectData.ProjectNo != "") {
            $('#lblPICode,#lblPIcodet1').text(result.projectData.PICode);
            $('#lblPIEmail,#lblPIEmailt1').text(result.projectData.Email);
            $('#lblPIPhoneNo,#lbllblPIPhoneNot1').text(result.projectData.Phone);
            $('#lblDepartCode,#lblDepartCodet1').text(result.projectData.PIDepartmentCode);
            $('#lblPIDepartNamet1,#lblPIDepartName,#lblPIDeptNamet2').text(result.projectData.PIDepartmentName);
            if($('#AutoFillRequstedbyPI').val() == "") {
                $('#AutoFillRequstedbyPI').val(result.projectData.PIName);
                $('#RequestedByPI').val(result.projectData.PIId);
            }
        }
    }

    var desnid = $('#DesignationId').val();
    if(desnid != null)
        FillDesignation();

    function FillDesignation()
    {
        var designationId = $('#DesignationId').val();
        if (designationId > 0) {
            $(".loading-bg").removeClass('dis-none');
            $.getJSON("@Url.Action("LoadDesignationDetails", "Requirement")", { DesignationID: designationId },
            function (result) {
                $(".loading-bg").addClass('dis-none');
                if (result.DesignationData.DestinationID > 0) {
                    $('#Designation').val(result.DesignationData.DesignationCode);
                    $('#DesignationName').val(result.DesignationData.Designation);
                    $("#lblDesignationName").text(result.DesignationData.Designation);
                }
            });
        }
    }

    function changeBankName() {
        var bankname = $("#BankName").val();
        if (bankname == null || bankname == "")
            $('#BankId').val('');
    }


    function validateExperiencedetail()
    {
        var hasErr = true;
        var cln = $('#tbodyExperience');
        $(cln).find('select[name $=".ExperienceTypeId"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".Organisation"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".DesignationautoComplete"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".FromDate"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".ToDate"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".SalaryDrawn"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });

        if(!hasErr)
        {
            $(cln).find('select[name $=".ExperienceTypeId"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".Organisation"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".DesignationautoComplete"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".FromDate"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".ToDate"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".SalaryDrawn"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
        }
        else
            hasErr = false;

        return hasErr;
    };

    $('input[name="Resume"]').change(function (e) {
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        var fileName = e.target.files[0].name;
        var allowedExtensions = [".pdf"];
        var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
        var ImgFormat=allowedExtensions.includes('.'+extension);
        if(ImgFormat)
        {
            if(iSize > 5120){
                $('#alert').html('Resume size should be allow below 5MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            $('#alert').html('Resume should be allowd document type .pdf');
            $('#Validation').modal('toggle');
            $(this).val('');
            return;
        }
    });
    $('input[name="FormDocument"]').change(function (e) {
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        var fileName = e.target.files[0].name;
        var allowedExtensions = [".pdf"];
        var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
        var ImgFormat=allowedExtensions.includes('.'+extension);
        if(ImgFormat)
        {
            if(iSize > 5120){
                $('#alert').html('Form size should be allow below 5MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            $('#alert').html('Form should be allowd document type .pdf');
            $('#Validation').modal('toggle');
            $(this).val('');
            return;
        }
    });

    applyAutoComplete($('#OldEmployeeNumber'), $('#OldEmpId'), '@Url.Action("LoadRCTEmployeeList", "Requirement")?apptpye=CON','AddOldEmployeeDetails',true);
    applyAutoComplete($('#ApplicationRefNo'), $('#ApplicationRefNo'),'@Url.Action("LoadRCTApplicationNumberList", "Requirement")?apptype=CON','AddOldEmployeeDetails',true);


    function AddOldEmployeeDetails() {
        var oldEmp = $('#OldEmployeeNumber').val();
        var apprefno = $('#ApplicationRefNo').val();
        if(oldEmp != "" || apprefno != "")
        {
            var data = {"AppRefNo" : apprefno};
            if(oldEmp != "") {
                data = {"EmpNo" : oldEmp};
                $('#ApplicationRefNo').val("");
            }
            $(".loading-bg").removeClass('dis-none');
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetOldEmployeeDetails", "Requirement")",
                data: data,
                //traditional: true,
                dataType: "json",
                success: function (result) {

                    var origin = window.location.origin;
                    if(oldEmp != "") {
                        $('#IsNew').addClass('dis-none');
                        $('#lblNewEmployee').addClass('dis-none');
                    }
                    $('#ProfessionalId').val(result.ProfessionalId);
                    $('#Name').val(result.Name);
                    $('#Nameoftheguardian').val(result.Nameoftheguardian);
                    if(result.CandidatePhoto != "")
                    {
                        $('#PersonImagePath').val(result.CandidatePhoto)
                        $('#displayImg').attr("src",origin + "ShowDocument/Account?file=" + result.CandidatePhoto + "&filepath=RCTEmployeeImages");
                    }
                    if(result.aadharnumber!=null)
                    {
                        $('#lblAadharnumber').text(result.aadharnumber);
                        $('#AadharNumber').val(result.aadharnumber);
                        $('#AadharNumber').addClass('dis-none');
                    }
                    else
                    {
                        $('#lblAadharnumber').text('');
                        $('#AadharNumber').removeClass('dis-none');
                    }
                    if(result.PAN!=null)
                    {
                        $('#lblPANNo').text(result.PAN);
                        $('#PANNo').addClass('dis-none');
                        $('#PANNo').val(result.PAN);
                    }
                    else
                    {
                        $('#lblPANNo').text('');
                        $('#PANNo').removeClass('dis-none');
                    }
                    $('#DateofBirth').val(result.DateofBirth);
                    if(result.DateofBirth!="")
                    {
                        $('#DateofBirth').addClass("dis-none");
                        $('#lblDateofBirth').text(result.DateofBirth);
                    }
                    else
                    {
                        $('#DateofBirth').removeClass("dis-none");
                        $('#lblDateofBirth').text('');
                    }
                    $('#Age').val(result.Age);
                    $('#Sex').val(result.Gender);
                    $('#ContactNumber').val(result.ContactNumber);
                    $('#EmergencyContactNo').val(result.EmergencyContactno);
                    $('#Email').val(result.Email);
                    $('#TemporaryAddress').val(result.PresentAddress);
                    $('#isSameasPermanentAddress').val(result.isSameasPermanentAddress);
                    if(result.isSameasPermanentAddress==true)
                    {
                        $('input[name="isSameasPermanentAddress"]').prop('checked',true);
                    }
                    $('#PermanentAddress').val(result.PermanentAddress);
                    $('#IITMPensionerorCSIRStaff').val(result.IITMPensionerCSIRStaff);
                    $('#PhysicallyChallenged').val(result.PhysicallyChallenged);
                    $('#BankAccountNo').val(result.BankAccountNo);
                    $('#BankName').val(result.BankName);
                    $('#IFSCCode').val(result.IFSCCode);

                    $.each(result.ConEductiondetail, function (i, item) {
                        $('#tbodyEducation tr').not(':first').not(':last').remove();
                        if(i == 0)
                        {
                            var cln = $('#tbodyEducation tr:first');
                            var selectGroup = $(cln).find('select[name="EducationDetail[' + i + '].DisciplineId"]');
                            $.each(item.ddlList, function (index, itemData) {
                                $(selectGroup).append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name
                                }))
                            });
                            $(cln).find("input[name='EducationDetail.Index']").val(i);
                            $(cln).find('select[name$=".QualificationId"]').val(item.QualificationId);
                            $(selectGroup).val(item.DisciplineId);
                            $(cln).find("input[name$='.DivisionClassObtained']").val(item.DivisionClassObtained);
                            $(cln).find("input[name$='.Institution']").val(item.Institution);
                            $(cln).find("select[name$='.YearofPassing']").val(item.YearofPassing);
                            $(cln).find("select[name$='.MarkType']").val(item.MarkType);
                            $(cln).find("input[name$='.Marks']").val(item.Marks);
                            if(item.DocumentActualName != null)
                            {
                                $(cln).find("input[name$='.Certificate']").addClass("dis-none");
                                $(cln).find(".link1").text(item.DocumentActualName);
                                $(cln).find(".link1").attr("href","ShowFile?file=" + item.DocumentPath + "&filepath=~%2FContent%2FRequirement%2F");
                                $(cln).find("input[name$='.DocumentPath']").val(item.DocumentPath);
                                $(cln).find("input[name$='.DocumentActualName']").val(item.DocumentActualName);
                            }
                            $(cln).find("input[name$='.Remarks']").val(item.Remarks);

                        }
                        else
                        {

                            var clnnew = $('#tbodyEducation tr:first').clone().find("input,select").val("").end();
                            $(clnnew).find("input,select").each(function () {
                                if ($(this).attr("name") != undefined)
                                    $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                var letters = /^[0-9a-zA-Z]+$/;
                                if ($(this).attr("id") != undefined)
                                    $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(clnnew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });
                            var selectGroup = $(clnnew).find('select[name="EducationDetail[' + i + '].DisciplineId"]');
                            $.each(item.DisiplineList, function (index, itemData) {
                                $(selectGroup).append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name
                                }))
                            });
                            $(clnnew).find("input[name='EducationDetail.Index']").val(i);
                            $(clnnew).find('select[name$=".QualificationId"]').val(item.QualificationId);
                            $(selectGroup).val(item.DisciplineId);
                            $(clnnew).find("input[name$='.DivisionClassObtained']").val(item.DivisionClassObtained);
                            $(clnnew).find("input[name$='.Institution']").val(item.Institution);
                            $(clnnew).find("select[name$='.YearofPassing']").val(item.YearofPassing);
                            $(clnnew).find("select[name$='.MarkType']").val(item.MarkType);
                            $(clnnew).find("input[name$='.Marks']").val(item.Marks);
                            if(item.DocumentActualName!=null)
                            {
                                $(clnnew).find("input[name$='.Certificate']").addClass("dis-none");
                                $(clnnew).find(".link1").text(item.DocumentActualName);
                                $(clnnew).find(".link1").attr("href","ShowFile?file=" + item.DocumentPath + "&filepath=~%2FContent%2FRequirement%2F");
                                $(clnnew).find("input[name$='.CertificatePath']").val(item.DocumentPath);
                                $(clnnew).find("input[name$='.CertificateName']").val(item.DocumentActualName);
                            }
                            $(clnnew).find("input[name$='.Remarks']").val(item.Remarks);
                            $("#tbodyEducation").append(clnnew);

                        }
                    });
                    $.each(result.ConExpereience, function (i, item) {
                        $('#tbodyExperience tr').not(':first').remove();
                        if(i == 0)
                        {

                            var cln = $('#tbodyExperience tr:first');

                            $(cln).find('select[name$=".ExperienceTypeId"]').val(item.ExperienceTypeId);
                            $(cln).find("input[name$='.Organisation']").val(item.Organisation);
                            $(cln).find("input[name$='.DesignationautoComplete']").val(item.DesignationautoComplete);
                            $(cln).find("input[name$='.DesignationListId']").val(item.DesignationListId);
                            $(cln).find("input[name$='.FromDate']").val(item.strFromDate);
                            $(cln).find("input[name$='.ToDate']").val(item.strToDate);
                            $(cln).find("input[name$='.SalaryDrawn']").val(item.SalaryDrawn);
                            $(cln).find("input[name='ExperienceDetail.Index']").val(i);
                            if(item.DocumentActualName!=null)
                            {
                                $(cln).find("input[name$='.ExperienceFile']").addClass("dis-none");
                                $(cln).find(".link2").text(item.DocumentActualName);
                                $(cln).find(".link2").attr("href","ShowFile?file=" + item.DocumentPath + "&filepath=~%2FContent%2FRequirement%2F");
                                $(cln).find("input[name$='.ExperienceFilePath']").val(item.DocumentPath);
                                $(cln).find("input[name$='.ExperienceFileName']").val(item.DocumentActualName);
                            }

                            $(cln).find("input[name$='.Remarks']").val(item.Remarks);

                        }
                        else
                        {

                            var clnnew = $('#tbodyExperience tr:first').clone().find("select,input").val("").end();
                            $(clnnew).find('b').parent('a').remove();
                            $(clnnew).find('b').remove();
                            $(clnnew).find("input, select").each(function () {
                                $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                if ($(this).attr("id"))
                                    $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(clnnew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });
                            $(clnnew).find("input[name='ExperienceDetail.Index']").val(i);
                            $(clnnew).find('select[name$=".ExperienceTypeId"]').val(item.ExperienceTypeId);
                            $(clnnew).find("input[name$='.Organisation']").val(item.Organisation);
                            $(clnnew).find("input[name$='.DesignationautoComplete']").val(item.DesignationautoComplete);
                            $(clnnew).find("input[name$='.DesignationListId']").val(item.DesignationListId);
                            $(clnnew).find("input[name$='.FromDate']").val(item.strFromDate);
                            $(clnnew).find("input[name$='.ToDate']").val(item.strToDate);
                            $(clnnew).find("input[name$='.SalaryDrawn']").val(item.SalaryDrawn);
                            if(item.DocumentActualName!=null)
                            {
                                $(clnnew).find("input[name$='.ExperienceFile']").addClass("dis-none");
                                $(clnnew).find(".link2").text(item.DocumentActualName);
                                $(clnnew).find(".link2").attr("href","ShowFile?file=" + item.DocumentPath + "&filepath=~%2FContent%2FRequirement%2F");
                                $(clnnew).find("input[name$='.DocumentPath']").val(item.DocumentPath);
                                $(clnnew).find("input[name$='.DocumentActualName']").val(item.DocumentActualName);
                            }
                            $(clnnew).find("input[name$='.Remarks']").val(item.Remarks);
                            $('#tbodyExperience').append(clnnew);

                            var hdEle = $("input[name='ExperienceDetail[" + i + "].DesignationListId']");
                            var acEle = $("input[name='ExperienceDetail[" + i + "].DesignationautoComplete']");
                            $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
                                dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-35:+0'
                            });
                            applyAutoComplete(acEle, hdEle, '@Url.Action("LoadDesignationNameList", "Requirement")');
                        }
                    });
                },
                error: function (err) {
                    console.log("error : " + err);
                }

            });
            $(".loading-bg").addClass('dis-none');
        }
    }
</script>
<link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
