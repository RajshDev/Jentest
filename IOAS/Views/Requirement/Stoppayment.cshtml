@model IOAS.Models.StopaymentlosspayModel
@{
    ViewBag.Title = "Stop payment / Loss of pay ";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    .modal-dialog {
        width: 850px;
    }

    .reg-no {
        z-index: 1 !important;
    }
</style>
@using (Html.BeginForm("Stoppayment", "Requirement", FormMethod.Post, new { @class = "", role = "form", @id = "formRelieving", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        @Html.HiddenFor(m => m.ApplicationID)
        @Html.HiddenFor(m => m.OrderID)
        @Html.HiddenFor(m => m.OrderType)
        @Html.HiddenFor(m => m.Status)
        @Html.HiddenFor(m => m.TypeCode)
        @Html.HiddenFor(m => m.OrderRequestId)
        @Html.HiddenFor(m => m.InitByPI_f)
        @Html.HiddenFor(m => m.Appointmentdetails.AppointmentStartDate)
        <div class="col-md-12">
            @if (Model.OrderType == 7)
            {
                <h4><b>Stop payment</b></h4>
            }
            else
            {
                <h4><b>Loss of pay</b></h4>
            }
        </div>
    </div>

    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-2 ds-spl-bg">

            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">

                    <span>Request Reference</span>
                    @Html.DropDownListFor(m => m.RequestReference, new SelectList(ViewBag.ReferenceType, "id", "name"), "Select", new { @class = "form-control" })
                    <div>@Html.ValidationMessageFor(m => m.RequestReference)</div>
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(M => M.ReferenceNo, new { @class = "form-control" })
                    <div>@Html.ValidationMessageFor(M => M.ReferenceNo)</div>
                    @*@Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                        <div>@Html.ValidationMessageFor(M => M.SourceReferenceNumber)</div>*@
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>
            <div class="col-md-4">
            </div>
        </div>
    </div>
    <div class="row cts-mn-dts" id="tab-01">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">

                    <div class="row">
                        <div class="col-md-12">

                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row ">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Order Type</label>
                                                @if (Model.OrderType == 7)
                                                {
                                                    <h4>Stop payment</h4>
                                                }
                                                else
                                                {
                                                    <h4>Loss of pay</h4>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group custom-form-group">
                                                <label class="required">From Date</label>
                                                @if (Model.OrderID > 0 && Model.OrderRequestId == null)
                                                {
                                                    <h4 id="FromDate">@Html.DisplayFor(m => m.FromDateStr)</h4>
                                                    @Html.HiddenFor(m => m.FromDateStr)
                                                }
                                                else
                                                {
                                                    @Html.EditorFor(m => m.FromDate, new { @class = "form-control required" })
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.FromDate)</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-1 pdl-null">
                                            <div class="form-group custom-form-group mt-mlg">
                                                <label></label>
                                                @if (Model.OrderID > 0 && Model.OrderRequestId == null)
                                                {
                                                    <h4 id="txt-FromMeridiem">@Html.DisplayFor(m => m.lblFromMeridiem)</h4>
                                                    @Html.HiddenFor(m => m.FromMeridiem)
                                                }
                                                else
                                                {
                                                    @Html.DropDownListFor(m => m.FromMeridiem, new SelectList(ViewBag.Meridiem, "id", "name"), "Select", new { @class = "form-control" })
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.FromMeridiem)</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group custom-form-group">
                                                <label class="required">To Date</label>
                                                @if (Model.OrderID > 0 && Model.OrderRequestId == null)
                                                {
                                                    <h4 id="ToDate">@Html.DisplayFor(m => m.ToDateStr)</h4>
                                                    @Html.HiddenFor(m => m.ToDateStr)
                                                }
                                                else
                                                {
                                                    @Html.EditorFor(m => m.ToDate, new { @class = "form-control" })
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.ToDate)</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-1 pdl-null">
                                            <div class="form-group custom-form-group mt-mlg">
                                                <label></label>
                                                @if (Model.OrderID > 0 && Model.OrderRequestId == null)
                                                {
                                                    <h4 id="txt-ToMeridiem">@Html.DisplayFor(m => m.lblToMeridiem)</h4>
                                                    @Html.HiddenFor(m => m.ToMeridiem)
                                                }
                                                else
                                                {
                                                    @Html.DropDownListFor(m => m.ToMeridiem, new SelectList(ViewBag.Meridiem, "id", "name"), "Select", new { @class = "form-control" })
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.ToMeridiem)</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group custom-form-group">
                                                <label class="">PI Remarks</label>
                                                <h4>@Html.DisplayFor(m => m.PIRemarks)</h4>
                                            </div>
                                        </div>
                                        @*<div class="col-md-2">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Signature</label>
                                                    @if (Model.OrderID > 0)
                                                    {
                                                        <h4>@Html.DisplayFor(m => m.lblSignature)</h4>
                                                    }
                                                    else
                                                    {
                                                        @Html.DropDownListFor(m => m.Signature, new SelectList(ViewBag.Signature, "id", "name"), "Select", new { @class = "form-control" })
                                                        <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.Signature)</div>
                                                    }
                                                </div>
                                            </div>*@
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Employee Id</label>
                                                <h4>@Html.DisplayFor(m => m.EmployeeID)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Name </label>
                                                <h4>@Html.DisplayFor(m => m.Name)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Contact No</label>
                                                <h4>@Html.DisplayFor(m => m.ContactNumber)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>No.of Leave Days </label>
                                                <h4 id="NoLeave"></h4>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row ">
                                        @if (Model.Status == "Approved" || Model.Status == "Reversal" || Model.Status == "Completed")
                                        {
                                            @*<div class="col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <label>Rejoin order</label><br>
                                                        @if (Model.OrderID == 0)
                                                        {
                                                            @Html.CheckBoxFor(m => m.Rejoin)
                                                        }
                                                        else
                                                        {
                                                            @Html.CheckBoxFor(m => m.Rejoin, new { @checked = "checked", @id = "" })
                                                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.Rejoin)</div>
                                                        }
                                                    </div>
                                                </div>*@
                                            <div class="col-md-3" id="">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Release of payment w.e.f</label><br>
                                                    @Html.EditorFor(m => m.RejoinDate, new { @class = "form-control" })
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.RejoinDate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-3" id="">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Release of payment proof</label><br>
                                                    <input type="file" name="RejoiningLetter" class="pull-left" required>
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.RejoiningLetter)</div>
                                                    @if (Model.RejoiningLetterPath != null)
                                                    {
                                                        <b>@Html.ActionLink(Model.RejoiningLetterName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.RejoiningLetterPath }, new { @name = "DocDownload", @target = "_blank" })</b>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        <div class="col-md-3" id="">
                                            <div class="form-group custom-form-group">
                                                <label class="required">PI Approval Letter</label><br>
                                                @if (Model.OrderID > 0 && Model.OrderRequestId == null)
                                                {
                                                    if (Model.PILetterPath != null)
                                                    {
                                                        <b>@Html.ActionLink(Model.PILetterFileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.PILetterPath }, new { @name = "DocDownload", @target = "_blank" })</b>
                                                    }
                                                    else
                                                    {
                                                        <b>-</b>
                                                    }
                                                }
                                                else if (Model.OrderID > 0)
                                                {
                                                    if (Model.PILetterPath != null)
                                                    {
                                                        <b>@Html.ActionLink(Model.PILetterFileName, "ShowFile", new { Controller = "Requirement", filepath = "~/Content/Requirement", file = Model.PILetterPath }, new { @name = "DocDownload", @target = "_blank" })</b>
                                                    }
                                                    else
                                                    {
                                                        <input type="file" name="PILetter" class="pull-left">
                                                    }
                                                }
                                                else
                                                {
                                                    <input type="file" name="PILetter" class="pull-left" required>
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.PILetter)</div>
                                                }
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label class="required">Application Receive Date</label>
                                                @if (Model.OrderID > 0 && Model.OrderRequestId == null)
                                                {
                                                    <h4>@Html.DisplayFor(m => m.ApplicationRevDate)</h4>
                                                }
                                                else
                                                {
                                                    @Html.EditorFor(m => m.ApplicationReceiveDate, new { @class = "form-control", @required = "required" })
                                                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.ApplicationReceiveDate)</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        @*@if (Model.OrderType == 8)
                                            {*@
                                        <div class="col-md-2 reg-no">
                                            <div class="form-group custom-form-group">
                                                <label class="required">Withdraw amount</label>
                                                <h4 id="WithdrawalAmount">@Html.DisplayFor(m => m.WithdrawalAmount)</h4>
                                            </div>
                                        </div>
                                        @if (Model.Status == "Approved" || Model.Status == "Reversal" || Model.Status == "Completed")
                                        {
                                            <div class="col-md-2">
                                                <div class="form-group custom-form-group">
                                                    <label>Arrear till</label>
                                                    @Html.EditorFor(m => m.ArrearOrDeductionTillDate, new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group custom-form-group">
                                                    <label>Arrear Amount</label>
                                                    @Html.TextBoxFor(m => m.ArrearOrDeductionAmount, new { @class = "form-control", @readonly = "readonly" })
                                                </div>
                                            </div>
                                        }
                                        @* } *@
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Number</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.ProjectNumber)</h4>
                                                    @Html.Hidden("ProjectId", Model.Appointmentdetails.ProjectID)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4 id="txtProjectTitle">@Html.DisplayFor(m => m.Appointmentdetails.ProjectTitle)</h4>
                                                </div>
                                            </div>

                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4 id="txtPIName">@Html.DisplayFor(m => m.Appointmentdetails.PIName)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">

                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4 id="txtProjectStartDate">@Html.DisplayFor(m => m.Appointmentdetails.ProjectStartDate)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project End Date</label>
                                                    <h4 id="txtProjectClosureDate">@Html.DisplayFor(m => m.Appointmentdetails.ProjectClosureDate)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment start date</label>
                                                    <h4 id="txtAppointmentStartDate">@Html.DisplayFor(m => m.Appointmentdetails.AppointmentStartDate)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment End date</label>
                                                    <h4 id="txtAppointmentEndDate">@Html.DisplayFor(m => m.Appointmentdetails.AppointmentClosureDate)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.Designation)</h4>
                                                </div>
                                            </div>

                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation Code</label>
                                                    <h4 id="txtDepartmentCode">@Html.DisplayFor(m => m.Appointmentdetails.DesignationCode)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Salary Level Range <i class="ion-information-circled" data-toggle="tooltip" data-original-title="@Model.Appointmentdetails.SalaryLevelDescription"></i></label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.SalaryLevel)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4 id="txtDepartmentName">@Html.DisplayFor(m => m.Appointmentdetails.PIDepartmentName)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Commitment Balance</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.CommitmentBalance)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Salary</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.Salary)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>HRA</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.HRA)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Medical</label>
                                                    <h4>@Html.DisplayFor(m => m.Appointmentdetails.MedicalAmmount)</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group ">
                                                    <label>Requested By</label>
                                                    <h4>@Html.DisplayFor(m => m.RequestedfromPI)</h4>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 mb-lg text-center">
            <button type="button" class="btn btn-primary" id="btnSave">Submit</button>
            @Html.HiddenFor(m => m.List_f)
            @if (!string.IsNullOrEmpty(Model.List_f))
            {
                <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action(Model.List_f,"Requirement")';">Close</button>
            }
            else
            {
                <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action("EmployeeMaster","Requirement")';">Close</button>
            }
        </div>
    </div>
}

<div class="loading-bg dis-none">
</div>
<div id="popup">

</div>

<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var alertMsg = '@TempData["alertMsg"]';
    var OrderID = @Html.Raw(Json.Encode(Model.OrderID)) || 0;
    var OrderType = @Html.Raw(Json.Encode(Model.OrderType)) || 0;
    var Status = @Html.Raw(Json.Encode(Model.Status)) || "";
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        else if (alertMsg != '') {
            $('#alert').html(alertMsg);
            $('#Validation').modal('toggle');
        }

        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');

        var currentdate = moment(new Date()).toDate();

        $('#ApplicationReceiveDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", -185);


        if(OrderID > 0)
        {
            var DateRD = @Html.Raw(Json.Encode(Model.ApplicationReceiveDate)) || "";
            var ApplicationRD = moment(DateRD).toDate();
            var SourceEmailDate = @Html.Raw(Json.Encode(Model.SourceEmailDate)) || "";
            var SourceOfEmailDt = moment(SourceEmailDate).toDate();
            var StartDate = moment($('#FromDateStr').val().split('-').join('/')).toDate();
            var EndDate = moment($('#ToDateStr').val().split('-').join('/')).toDate();

            $('#ApplicationReceiveDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", ApplicationRD);

            $('#SourceEmailDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", SourceOfEmailDt);

            $('#ArrearOrDeductionTillDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", EndDate).datepicker("option", "minDate", StartDate);
        }
        else
        {
            $('#ApplicationReceiveDate,#SourceEmailDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", -185);
        }


        var setappstrdat = "";
        var strappointmentstartdt = @Html.Raw(Json.Encode(Model.Appointmentdetails.AppointmentStartDate)) || "";
        var strappointmentenddt = @Html.Raw(Json.Encode(Model.Appointmentdetails.AppointmentClosureDate)) || "";
        var AppointmentStartDate = moment(strappointmentstartdt.split('-').join('/')).toDate();
        var AppointmentEndDate = moment(strappointmentenddt.split('-').join('/')).toDate();
        currentdate = moment(new Date()).add(-currentdate.getDate(), 'days').add(+1,'days').toDate();
        if(currentdate >= AppointmentStartDate  && currentdate <= AppointmentEndDate)
            setappstrdat = currentdate;
        else
            setappstrdat = AppointmentStartDate;

        var defaultappstrToDate = moment($('#txtAppointmentEndDate').text().split('-').join('/')).add(-1, 'days').toDate();
        $('#FromDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", defaultappstrToDate);

    });
    var addyear = 0;


    $("#ApplicationReceiveDate,#ArrearOrDeductionTillDate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        }
    });



    $('#btnSave').click(function () {
        var isValid = false;
        var hadError = false;
        var tabs = $("#formRelieving");
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(tabs).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) // if there are not no reason to loop them
            return true;
        if(OrderID == 0){
            $(stepElements).each(function (idx) {
                if (!$(this).is(':radio') && !$(this).is(':checkbox')) {
                    console.log($(this).attr('id'));
                    isValid = $(this).valid();
                    if (!isValid) {
                        hadError = true;
                    }
                }
            });
        }
        if (!hadError) {
            $('.loading-bg').removeClass('dis-none');
            var isValid = $('#formRelieving').valid();
            if (!isValid){
                $('.loading-bg').addClass('dis-none');
                return false;
            }
            if (isValid)
                $('#formRelieving').submit();
        }
        else {
            $.confirm({
                title: 'Warning!',
                content: 'Invalid data exist',
                type: 'orange',
                buttons: {
                    Ok: function () {
                        //close
                    },
                },
            });
            return;
        }

    });


    $('input[name="PILetter"],input[name="RejoiningLetter"]').change(function (e) {
        var allowedExtensions = [".pdf", ".doc", ".docx"];
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        var fileName = e.target.files[0].name;
        var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
        var validFormat = allowedExtensions.includes('.' + extension);
        if (validFormat) {
            if (iSize > 5120) {
                $('#alert').html('Documents size should be allow below 5MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            $('#alert').html('Allowed document type [pdf,doc,docx]');
            $('#Validation').modal('toggle');
            $(this).val('');
            return;
        }
    });

    function FormDisabled() {
        $("#formRelieving").find("input, select, textarea").each(function () {
            var idDisabled = $(this).is(":disabled");
            var id = $(this).attr('id');
            if (!idDisabled) {
                $(this).attr("disabled", "disabled");
            }
        });
    }


    if (Status == "Completed" || Status == "Reversal") {
        $('#btnSave').remove();
        FormDisabled();
    }

    $(document).on('keyup','textarea,input[type="text"]',function(event) {
        var input = event.target;
        var start = input.selectionStart;
        var end = input.selectionEnd;
        input.value = input.value.toLocaleUpperCase();
        input.setSelectionRange(start, end);
    });

    $('#RequestReference').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNo").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });


    var selSource = $('#RequestReference').val();
    $("#divRefNum, #divRefEmailDate").addClass('dis-none');
    if (selSource == '1') {
        applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }
    else if (selSource == '3') {
        applyAutoComplete($('#ReferenceNo'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }
    else if (selSource == '2') {
        $('#divRefEmailDate').removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
    }
    else {
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }

    $('#ToDate').change(function () {
        if($("#FromDate").val() != "" && $("#ToDate").val() != "") {
            CalculateLeave();
            calWithdrawalAmount()
        }
    });


    $('#RejoinDate').change(function () {
        const monthNames = ["January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December"];
        CalculateLeave(true);
        var appid = @Html.Raw(Json.Encode(Model.ApplicationID)) || 0;
        var apptype = @Html.Raw(Json.Encode(Model.TypeCode)) || "";
        var rejoinDate = new Date($("#RejoinDate").val().split('-').join('/'));
        var fromdate = new Date($("#FromDateStr").val().split('-').join('/'));
        if($("#RejoinDate").val() == $("#FromDateStr").val()) {
            $('#WithdrawalAmount').text(0);
            return;
        }
        rejoinDate = rejoinDate.setDate(rejoinDate.getDate() - 1,'days');
        var fromdt = new Date(rejoinDate);
        var year = fromdt.getFullYear();
        var month = fromdt.getMonth();
        var day = fromdt.getDate().toString();
        if(day.length == 1)
            day = '0' + day;
        var strrejoindate =  day + '-' + monthNames[month] + '-' + year;
        var start = new Date($("#FromDateStr").val().split("-").join('/'));
        if($("#FromMeridiem").val() == 2)
            start.setHours(12);
        $.ajax({
            type: "POST",
            url: '@Url.Action("CalculateWithdrawalAmount", "Requirement")',
            data: {
                appid : appid,
                apptype : apptype,
                From : start.toISOString(),
                To :  strrejoindate,
            },
            success: function (result) {
                $('#WithdrawalAmount').text(Math.round(result));
            },
            error: function (err) {
                console.log("error1 : " + err);
            }
        });
    });

    $('#ArrearOrDeductionTillDate').change(function () {
        var appid = @Html.Raw(Json.Encode(Model.ApplicationID)) || 0;
        var apptype = @Html.Raw(Json.Encode(Model.TypeCode)) || "";
        $.ajax({
            type: "POST",
            url: '@Url.Action("CalculateWithdrawalAmount", "Requirement")',
            data: {
                appid : appid,
                apptype : apptype,
                From : $("#FromDateStr").val(),
                To :  $("#ArrearOrDeductionTillDate").val(),
                FromMeridiem : $("#FromMeridiem").val() || null,
                ToMeridiem : $("#ToMeridiem").val()  || null
            },
            success: function (result) {
                $('#ArrearOrDeductionAmount').val(Math.round(result));
            },
            error: function (err) {
                console.log("error1 : " + err);
            }
        });
    });

    function calWithdrawalAmount()
    {

        if($("#FromDate").val() != "" && $("#ToDate").val() != "") {
            var appid = @Html.Raw(Json.Encode(Model.ApplicationID)) || 0;
            var apptype = @Html.Raw(Json.Encode(Model.TypeCode)) || "";
            var start = new Date($("#FromDate").val().split("-").join('/'));
            var end   = new Date($("#ToDate").val().split("-").join('/'));
            if($("#FromMeridiem").val() == 2)
                start.setHours(12);
            if($("#ToMeridiem").val() == 1)
                end.setHours(12);
            //if($("#ToMeridiem").val() == 2)
            //    end.setHours(23,59,59,999);
            //if($("#ToMeridiem").val() == 2)
            //    end.setHours(24);
            $.ajax({
                type: "POST",
                url: '@Url.Action("calculateWithdrawalAmount", "Requirement")',
                data: {
                    appid : appid,
                    apptype : apptype,
                    From : start.toISOString(),
                    To :  end.toISOString()
                },
                success: function (result) {
                    $('#WithdrawalAmount').text(Math.round(result));
                },
                error: function (err) {
                    console.log("error1 : " + err);
                }
            });
        }
        else {
            $('#FailedAlert').html("Please enter from date and to date");
            $('#Failed').modal('toggle');
        }
    }

    CalculateLeave();

    $('#FromMeridiem,#ToMeridiem').change(function () {
        CalculateLeave();
        calWithdrawalAmount();
    });

    function CalculateLeave(rejoin_f)
    {
        var start = "";
        var end   = "";
        if(rejoin_f == undefined)
            rejoin_f = false;

        if($("#FromMeridiem").val() == "" || $("#ToMeridiem").val() == "")
            return;

        if(OrderID > 0&& @Html.Raw(Json.Encode(Model.InitByPI_f)) == false)
        {
            start = new Date($("#FromDateStr").val().split("-").join('/'));
            end   = rejoin_f == true ? new Date($("#RejoinDate").val().split("-").join('/')) : new Date($("#ToDate").text().split("-").join('/'));
        }
        else
        {
            if($("#FromDate").val() != "" && $("#ToDate").val() != "")
            {
                start = new Date($("#FromDate").val().split("-").join('/'));
                end   = new Date($("#ToDate").val().split("-").join('/'));
            }
            else
                return;
        }
        if($("#FromMeridiem").val() == 2)
            start.setHours(12);
        if($("#ToMeridiem").val() == 1)
            end.setHours(12);
        if($("#ToMeridiem").val() == 2)
            end.setHours(23,59,59,999);
        //if($("#ToMeridiem").val() == 2)
        //    end.setHours(24);
        var days = (end - start) / (1000 * 60 * 60 * 24);
        days = days.toFixed(1);
        $('#NoLeave').text(days);
    }

    function endOfMonth(date)
    {
        return new Date(date.getFullYear(), date.getMonth() + 1, 0);
    }

    $("#FromDate,#ToDate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        }
    });

    if (Status != "Initiated" && Status != "")
    {
        var start = new Date($("#FromDate").text().split("-").join('/'));
        var end = new Date($("#txtAppointmentEndDate").text().split("-").join('/'));
        if (start != "" && end != "")
        {
            $('#RejoinDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", start).datepicker("option", "maxDate", end);
        }
    }

    $('#FromDate').change(function () {
        $('#ToDate').val('');
        var endDate = moment($('#txtAppointmentEndDate').text().split('-').join('/')).toDate();
        var defaultstartDateDate = moment($('#FromDate').val().split('-').join('/')).toDate();
        $('#ToDate').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", defaultstartDateDate).datepicker("option", "maxDate", endDate);
    });

    $('#SourceEmailDate').change(function(){
        var value = $(this).val();
        $('#ApplicationReceiveDate').val(value);
    });

</script>
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>

