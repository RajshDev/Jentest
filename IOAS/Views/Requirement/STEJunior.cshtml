@model IOAS.Models.STEModel
@using IOAS.GenericServices
@{
    ViewBag.Title = "Short Term Engagement";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
    <link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
    string Remark = RequirementService.GetRejectCommitment(Model.ApplicationNo, 0);
}
<style>
    .modal-dialog {
        width: 850px;
    }

    .tab-cls-close {
        float: right;
        font-size: 24px;
        margin-top: 18px;
    }

    .cls-a-wt {
        color: #ffffff;
    }

    .rc-tb-scrl {
        width: 100%;
        overflow: auto;
    }

    .rc-tb-scrl table {
        max-width: 2100px !important;
        width: 2000px;
    }

    .reg-no {
        z-index: 1 !important;
    }
</style>
@using (Html.BeginForm("STEJunior", "Requirement", FormMethod.Post, new { @class = "", role = "form", @id = "formSTEJuniorApp", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Short Term Engagement</b></h4>
            <ul class="nav nav-pills custom-nav-pills custom-spl-nav">
                <li class="active"><a href="javascript:void(0)"><span>01</span>Application Entry</a></li>
                <li><a href="javascript:void(0)"><span>02</span>Application Checklist</a></li>
            </ul>
            <a class="tab-cls-close" href="@Url.Action("STEList","Requirement")"><i class="ion-close-circled" style="color:white;"></i></a>
        </div>
    </div>

    <div class="row cust-tab">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                <label>Application Ref Number</label>
                                                @Html.TextBoxFor(m => m.ApplicationRefNo, new { @class = "form-control", @onpaste = "return false" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicationRefNo)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                @Html.HiddenFor(m => m.STEId)
                                                @Html.HiddenFor(m => m.Status)
                                                @Html.HiddenFor(m => m.bccSaved)
                                                @Html.HiddenFor(m => m.isDraftbtn)
                                                @Html.HiddenFor(m => m.ApplicationNo)
                                                @if (Model != null && !String.IsNullOrWhiteSpace(Model.EmployeeType) && Model.EmployeeType == "Old Employee")
                                                {
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "Old Employee", new { @id = "IsOld", @checked = "checked" })@:&nbsp;<label>Old Employee</label> <br>
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "New Employee", new { @id = "IsNew" })@:&nbsp;<label>New Employee</label> <br>
                                                }
                                                else
                                                {
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "Old Employee", new { @id = "IsOld" })@:&nbsp;<label>Old Employee</label> <br>
                                                    @Html.RadioButtonFor(M => M.EmployeeType, "New Employee", new { @id = "IsNew", @checked = "checked" })@:&nbsp;<label>New Employee</label> <br>
                                                 }
                                                <div>@Html.ValidationMessageFor(m => m.EmployeeType)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 dis-none" id="divOld">
                                            <div class="form-group custom-form-group">
                                                <label>Old Employee Number</label>
                                                @Html.TextBoxFor(m => m.OldEmployeeNumber, new { @class = "form-control", @onpaste = "return false" })
                                                @Html.HiddenFor(m => m.OldEmpId)
                                                <div>@Html.ValidationMessageFor(m => m.OldEmployeeNumber)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4" id="divNew">
                                            <div class="form-group custom-form-group">
                                                <label>NID Number</label>
                                                @Html.TextBoxFor(m => m.NIDNumber, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.NIDNumber)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                <label>Resume</label> <br>
                                                @if (Model.STEId > 0 && !string.IsNullOrEmpty(Model.ResumeFilePath))
                                                {
                                                    <h4>@Html.ActionLink(Model.ResumeFileName, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = Model.ResumeFileName }, new { @name = "DocDownload" })</h4><br>
                                                    <input class="" type="file" name="Resume" style="width:190px;">
                                                }
                                                else
                                                {
                                                    <input class="" type="file" name="Resume" style="width:190px;">
                                                }
                                                <em style="color:red;font-size:12px;">upload .pdf and file size below 5MB</em>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label class="required">Type of appointment </label>
                                                @Html.DropDownListFor(m => m.TypeofappointmentId, new SelectList(ViewBag.Apptype, "id", "name"), "Select Appointment", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.TypeofappointmentId)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Photo</label> <br>
                                                @if (Model.STEId > 0 && !string.IsNullOrEmpty(Model.PersonImagePath))
                                                {
                                                    <img id="displayImg" src="@Url.Action("ShowDocument", "Account", new { file = Model.PersonImagePath, filepath = "RCTEmployeeImages" })" width="30px" height="30px"><br>
                                                    <input class="form-control" type="file" name="PersonImage" onchange="readURL(this);">
                                                }
                                                else
                                                {
                                                    <img id="displayImg" src="~/Content/IOASContent/img/Image_placeholder.png" width="30px" height="30px"><br>
                                                    <input class="form-control" type="file" name="PersonImage" onchange="readURL(this);">
                                                }
                                                @Html.HiddenFor(m => m.PersonImagePath)
                                                <em style="color:red;font-size:12px;">upload [.jpeg,.png,.jpg] and file size below 1MB</em>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label class="required">Name</label>
                                                @Html.DropDownListFor(m => m.ProfessionalId, new SelectList(ViewBag.Professional, "id", "name"), "Select")
                                                <div>@Html.ValidationMessageFor(m => m.ProfessionalId)</div>
                                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.Name)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label class="required">Father’s / Husband’s Name</label>
                                                @Html.TextBoxFor(m => m.Nameoftheguardian, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.Nameoftheguardian)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Aadhaar Number</label>
                                                <h4 id="lblAadharnumber"></h4>
                                                @Html.TextBoxFor(m => m.aadharnumber, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @onblur = "CheckEmployeeadhar()" })
                                                <div>@Html.ValidationMessageFor(m => m.aadharnumber)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label class="required">PAN No </label>
                                                <h4 id="lblPANNo"></h4>
                                                @Html.TextBoxFor(m => m.PAN, new { @class = "form-control", @onblur = "CheckEmployeepanno()" })
                                                <div>@Html.ValidationMessageFor(m => m.PAN)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Date of Birth</label>
                                                <h4 id="lblDateofBirth"></h4>
                                                @Html.EditorFor(m => m.DateofBirth, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.DateofBirth)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label>Age</label>
                                                @Html.TextBoxFor(m => m.Age, new { @class = "form-control", @readonly = "readonly" })
                                                <div>@Html.ValidationMessageFor(m => m.Age)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  ">
                                                <label class="required">Sex</label><br>
                                                @Html.DropDownListFor(m => m.Sex, new SelectList(ViewBag.Gender, "id", "name"), "Select", new { @class = "form-control" })
                                                <label id="lblSex"></label>
                                                <div>@Html.ValidationMessageFor(m => m.Sex)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Caste</label>
                                                @Html.DropDownListFor(m => m.Caste, new SelectList(ViewBag.Caste, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.Caste)</div>
                                            </div>
                                        </div>

                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label class="required">Contact No</label>
                                                @Html.TextBoxFor(m => m.ContactNumber, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                                <div>@Html.ValidationMessageFor(m => m.ContactNumber)</div>
                                            </div>
                                        </div>

                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Emergency Contact No</label>
                                                @Html.TextBoxFor(m => m.EmergencyContactNo, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                                <div>@Html.ValidationMessageFor(m => m.EmergencyContactNo)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  ">
                                                <label class="required">Email ID</label>
                                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.Email)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                <label class="required">Present Address </label>
                                                @Html.TextAreaFor(m => m.PresentAddress, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.PresentAddress)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  ">
                                                <label>
                                                    @Html.CheckBoxFor(m => m.isSameasPermanentAddress) same as present address	   <br>Permanent Address
                                                </label> <br>
                                                @Html.TextAreaFor(m => m.PermanentAddress, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>Blood Group</label>
                                                @Html.DropDownListFor(m => m.BloodGroup, new SelectList(ViewBag.BloodGroup, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.BloodGroup)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group mb-sm ">
                                                <label>RH</label>
                                                @Html.DropDownListFor(m => m.BloodGroupRH, new SelectList(ViewBag.BloodGroupRH, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.BloodGroupRH)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group  mb-sm">
                                                @if (Model != null && !String.IsNullOrWhiteSpace(Model.StaffCategory) && Model.StaffCategory == "ICSR Staff")
                                                {
                                                    @Html.RadioButtonFor(M => M.StaffCategory, "ICSR Staff", new { @id = "IsICSRStaff", @checked = "checked" })@:&nbsp;<label>ICSR Staff </label> <br>
                                                    @Html.RadioButtonFor(M => M.StaffCategory, "Non ICSR Staff", new { @id = "IsProjectStaff" })@:&nbsp;<label>Non ICSR Staff</label> <br>
                                                }
                                                else
                                                {
                                                    @Html.RadioButtonFor(M => M.StaffCategory, "ICSR Staff", new { @id = "IsICSRStaff" })@:&nbsp;<label>ICSR Staff </label> <br>
                                                    @Html.RadioButtonFor(M => M.StaffCategory, "Non ICSR Staff", new { @id = "IsProjectStaff", @checked = "checked" })@:&nbsp;<label>Non ICSR Staff</label> <br>
                                                }
                                                <div>@Html.ValidationMessageFor(m => m.StaffCategory)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row ">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Nationality</label>
                                                @Html.DropDownListFor(m => m.Nationality, new SelectList(ViewBag.Nationality, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.Nationality)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Physically Challenged</label>
                                                @Html.DropDownListFor(m => m.PhysicallyChallenged, new SelectList(ViewBag.YesNo, "id", "name"), "Select", new { @class = "form-control", @id = "PhysicallyChallenged" })
                                                <div>@Html.ValidationMessageFor(m => m.PhysicallyChallenged)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label>Are you related to any employee at IIT Madras? </label>
                                                @Html.DropDownListFor(m => m.RelatedIITMadras, new SelectList(ViewBag.YesNo, "id", "name"), "Select", new { @class = "form-control", @id = "RelatedIITMadras" })
                                                <div>@Html.ValidationMessageFor(m => m.RelatedIITMadras)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row dis-none" id="divRelationShip">
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group ">
                                                <label>(if yes) (a) Relationship</label>
                                                @Html.TextBoxFor(m => m.Relationship, new { @class = "form-control mt-mmd" })
                                                <div>@Html.ValidationMessageFor(m => m.Relationship)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group ">
                                                <label>(b) Name of the Faculty / Staff, Designation & Department</label>
                                                @Html.TextBoxFor(m => m.RelationshipName, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.RelationshipName)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Applicaton Entry Date</label>
                                                <label>@string.Format("{0:dd-MMMM-yyyy}", Model.ApplicationEntryDate)</label>
                                                @Html.EditorFor(m => m.ApplicationEntryDate, new { @class = "form-control dis-none" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicationEntryDate)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">Application Receive Date</label>
                                                @Html.EditorFor(m => m.ApplicationReceiveDate, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.ApplicationReceiveDate)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group">
                                                @if (Model != null && Model.ConsolidatedPay)
                                                {
                                                    @Html.RadioButtonFor(M => M.isConsolidatePay, "ConsolidatedPay", new { @id = "ConsolidatedPay", @checked = "checked" })@:&nbsp;<label>Consolidated pay</label><br />
                                                    @Html.RadioButtonFor(M => M.isConsolidatePay, "FellowshipPay", new { @id = "FellowshipPay" })@:&nbsp;<label>Fellowship</label>
                                                }
                                                else if (Model != null && Model.Fellowship)
                                                {
                                                    @Html.RadioButtonFor(M => M.isConsolidatePay, "ConsolidatedPay", new { @id = "ConsolidatedPay" })@:&nbsp;<label>Consolidated pay</label><br />
                                                    @Html.RadioButtonFor(M => M.isConsolidatePay, "FellowshipPay", new { @id = "FellowshipPay", @checked = "checked" })@:&nbsp;<label>Fellowship</label>
                                                }
                                                else
                                                {
                                                    @Html.RadioButtonFor(M => M.isConsolidatePay, "ConsolidatedPay", new { @id = "ConsolidatedPay" })@:&nbsp;<label>Consolidated pay</label><br />
                                                    @Html.RadioButtonFor(M => M.isConsolidatePay, "FellowshipPay", new { @id = "FellowshipPay" })@:&nbsp;<label>Fellowship</label>
                                                }
                                                <div>
                                                    @Html.ValidationMessageFor(M => M.isConsolidatePay)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label class="required">IITM Pensioner / CSIR Staff :</label>
                                                @Html.DropDownListFor(m => m.IITMPensionerCSIRStaff, new SelectList(ViewBag.IITMPensionerOrCSIRStaff, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.IITMPensionerCSIRStaff)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 dis-none" id="divPensionerNo">
                                            <div class="form-group custom-form-group">
                                                <label class="required">PPO No :</label>
                                                @Html.TextBoxFor(m => m.PPONo, new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.PPONo)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 dis-none" id="divCSIRStaff">
                                            <div class="form-group custom-form-group">
                                                <label class="required">CSIR staff  :</label>
                                                @Html.DropDownListFor(m => m.CSIRStaff, new SelectList(ViewBag.CSIRStaffPayMode, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.CSIRStaff)</div>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="row" id="divMSPHDDetails">
                                        <div class="col-md-4">
                                            <div class="form-group custom-form-group ">
                                                <label>M.S/Ph.D</label>
                                                @Html.DropDownListFor(m => m.MsPhdType, new SelectList(ViewBag.MsPhd, "id", "name"), "Select", new { @class = "form-control" })
                                                <div>@Html.ValidationMessageFor(m => m.MsPhdType)</div>
                                                @Html.HiddenFor(m => m.MsPhdTypeValid)
                                            </div>
                                        </div>
                                        <div class="dis-none" id="phdDetails">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group ">
                                                    <label>Roll Number</label>
                                                    @Html.TextBoxFor(m => m.PhdDetail, new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.PhdDetail)</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label class="required">Project Number</label>
                                                    @Html.TextBoxFor(m => m.ProjectNumber, new { @class = "form-control" })
                                                    @Html.HiddenFor(m => m.ProjectId)
                                                    <div>@Html.ValidationMessageFor(m => m.ProjectNumber)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4 id="lblProjecttitle"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Name of the Client / Sponsoring Agency</label>
                                                    <h4 id="lblClietAgency"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Type</label>
                                                    <h4 id="lblProjectType"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4 id="lblPIName"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4 id="lblProjectStartDate"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Closure Date</label>
                                                    <h4 id="lblProjectClosureDate"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Code</label>
                                                    <h4 id="lblPICode"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Email ID</label>
                                                    <h4 id="lblPIEmailID"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Phone No</label>
                                                    <h4 id="lblPIPhone"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department code </label>
                                                    <h4 id="lblDepartmentCode"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4 id="lblDepartmentName"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Medical</label> <br>
                                                    @Html.DropDownListFor(m => m.Medical, new SelectList(ViewBag.Medical, "id", "name"), "Select Medical", new { @class = "form-control" })
                                                    <h4 id="MedicalText" class="dis-none"></h4>
                                                    <div>@Html.ValidationMessageFor(m => m.Medical)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Designation Code</label>
                                                    @Html.TextBoxFor(m => m.DesignationCode, new { @class = "form-control", @autocomplete = "off" })
                                                    <div>@Html.ValidationMessageFor(m => m.DesignationCode)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Designation</label>
                                                    @Html.TextBoxFor(m => m.Designation, new { @class = "form-control", @readonly = "readonly" })
                                                    <div>@Html.ValidationMessageFor(m => m.Designation)</div>
                                                    @Html.HiddenFor(M => M.DesignationId)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Appointment start date</label>
                                                    @Html.EditorFor(m => m.Appointmentstartdate, new { @class = "form-control" })
                                                    <div>@Html.ValidationMessageFor(m => m.Appointmentstartdate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Appointment End date</label>
                                                    @Html.EditorFor(m => m.AppointmentEndDate, new { @class = "form-control", @readonly = "readonly" })
                                                    <div>@Html.ValidationMessageFor(m => m.AppointmentEndDate)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-4" id="divMedicalAmount">
                                                <div class="form-group custom-form-group">
                                                    <label>Medical Amount</label>
                                                    <h4 id="txtMedicalAmount"></h4>
                                                    @Html.HiddenFor(m => m.MedicalAmmount)
                                                    @Html.Hidden("isMedical", false)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Salary</label>
                                                    @Html.TextBoxFor(m => m.Salary, new { @class = "form-control required", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                    <div>@Html.ValidationMessageFor(m => m.Salary)</div>
                                                    @Html.HiddenFor(m => m.MinSalary)
                                                    @Html.HiddenFor(m => m.MaxSalary)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>HRA</label><br>
                                                    <h4 id="HRAText" class="dis-none">@Html.DisplayFor(m => m.HRA)</h4>
                                                    @Html.TextBoxFor(m => m.HRA, new { @class = "form-control", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                                    @Html.HiddenFor(m => m.isHRA)
                                                    @Html.HiddenFor(m => m.HRAPercentage)
                                                </div>
                                            </div>
                                            <div class="col-md-4 reg-no custom-reg-no">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Commitment Amount</label>
                                                    <h4 id="lblCommitmentAmount">@Html.DisplayFor(m => m.CommitmentAmount)</h4>
                                                    @Html.HiddenFor(m => m.CommitmentAmount, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.Hidden("PrjAviAvailableBalance")
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Request received from PI</label>
                                                    @Html.TextBoxFor(m => m.AutoFillRequstedbyPI, new { @class = "form-control" })
                                                    @Html.HiddenFor(m => m.RequestedByPI)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <input type="button" class="btn btn-success" value="View Staff Allocation" id="btnViewStaffAllocation">
                                                    <input type="button" class="btn btn-success" value="Project Fund Availability" id="btnViewSummary">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <label>Is the pay recommended higher than the norms</label>
                                                    @if (Model != null && !String.IsNullOrWhiteSpace(Model.SalaryPayHigh) && Model.SalaryPayHigh == "Yes")
                                                    {
                                                        @Html.RadioButtonFor(M => M.SalaryPayHigh, "Yes", new { @id = "IsYes", @checked = "checked" })@:&nbsp;<label>Yes</label>
                                                        @Html.RadioButtonFor(M => M.SalaryPayHigh, "No", new { @id = "IsNo" })@:&nbsp;<label>No</label>
                                                    }
                                                    else
                                                    {
                                                        @Html.RadioButtonFor(M => M.SalaryPayHigh, "Yes", new { @id = "IsYes" })@:&nbsp;<label>Yes</label>
                                                        @Html.RadioButtonFor(M => M.SalaryPayHigh, "No", new { @id = "IsNo", @checked = "checked" })@:&nbsp;<label>No</label>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <label>PI Justification Document [ .doc, .docx, .pdf ]</label> <br>
                                                <div id="divPIJustification">
                                                    <input class="form-control mb-sm" id="PIJustificationFile_0" type="file" name="PIJustificationFile[0]" value="">
                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger mb-sm removeFile" style="margin-bottom: 10px;"><i class="ion-android-close"></i></a>
                                                </div>
                                                <a href="javascript:void(0)" id="btnAddFile" class="btn btn-success mt-20 mb20">Add New</a>
                                                @foreach (var item in Model.PIJustificationDocDetail)
                                                {
                                                    if (!string.IsNullOrEmpty(item.PIJustificationDocumentPath))
                                                    {
                                                        <h4>
                                                            @Html.ActionLink(item.PIJustificationDocument, "ShowDocument", new { Controller = "Account", filepath = "Requirement", file = item.PIJustificationDocumentPath }, new { @class = "cls-a-wt", @name = "DocDownload" })
                                                            @if (Model.Status == "Draft" || Model.Status == "Open" || Model.Status.Contains("Note"))
                                                            {
                                                                <a class="rct-del-doc cls-a-wt" value="@item.PIJustificationDocumentPath">Delete</a>
                                                            }
                                                        </h4><br>
                                                    }
                                                }
                                            </div>
                                        </div>
                                        <div class="row  mt-20">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <label>PI Justification / Remarks </label>
                                                    @Html.TextAreaFor(m => m.PIJustificationRemarks, new { @class = "form-control" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group">
                                        <label class="">Bank Account No </label>
                                        @Html.TextBoxFor(m => m.BankAccountNo, new { @class = "form-control", @onkeypress = "return isOnlyNumericKey(event)" })
                                        <div>@Html.ValidationMessageFor(m => m.BankAccountNo)</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group">
                                        <label class="">Bank Name </label>
                                        @Html.TextBoxFor(m => m.BankName, new { @class = "form-control", @onpaste = "return false", @onblur = "changeBankName()" })
                                        @Html.Hidden("BankId")
                                        <div>@Html.ValidationMessageFor(m => m.BankName)</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group">
                                        <label class="">IFSC </label>
                                        @Html.TextBoxFor(m => m.IFSCCode, new { @class = "form-control" })
                                        <div>@Html.ValidationMessageFor(m => m.IFSCCode)</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @Html.Partial("_STEEducationDetail")
                    @Html.Partial("_STEExperienceDetail")
                </div>
            </div>
        </div>
    </div>
    <div class="row cust-tab" style="display:none;">
        <div class="page-wrapper mt30">
            <div>
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row ">
                                        @if (Model.STEId > 0)
                                        {
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Application No: </label>
                                                <h4>@Html.DisplayFor(M => M.ApplicationNo)</h4>
                                            </div>
                                        </div>
                                        }
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Candidate Name: </label>
                                                <h4 id="labelCandidate"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>PI Name:</label> <br>
                                                <h4 id="labelPIName"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Department name:</label> <br>
                                                <h4 id="labelDepartname"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>M.S/Ph.D:</label> <br>
                                                <h4 id="labelMsPhd"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Designation: </label>
                                                <h4 id="labelDesignation">@Html.DisplayFor(m => m.Designation)</h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Qualification: </label>
                                                <h4 id="labelQualification"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Experience: </label>
                                                <h4 id="labelExperience"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Pay: </label>
                                                <h4 id="labelPay"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Medical:</label> <br>
                                                <h4 id="labelMedical"></h4>

                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>DOB </label>
                                                <h4 id="labelDOB"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group  ">
                                                <label>Application Received Date</label>
                                                <h4 id="labelReceivedDate"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Pay category:</label>
                                                <h4 id="labelPaycategory"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group ">
                                                <label>IITM Pensioner / CSIR Staff :</label>
                                                <h4 id="labelIITMCSIR"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group mb-sm">
                                                <label>Staff category:</label>
                                                <h4 id="labelStaffCategory"></h4>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group custom-form-group">
                                                <label>Comments</label>
                                                @if (string.IsNullOrEmpty(Model.Status) || Model.Status == "Draft" || Model.Status == "Open" || Model.Status.Contains("Note"))
                                                {
                                                @Html.TextAreaFor(m => m.Comments, new { @class = "form-control" })
                                                }
                                                else
                                                {
                                                @Html.TextAreaFor(m => m.Comments, new { @class = "form-control", @readonly = "readonly" })
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="bl-lg-panel-box  pb-null">
                                <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Number</label>
                                                    <h4 id="labelProjectNumber">@Html.DisplayFor(M => M.ProjectNumber)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Title</label>
                                                    <h4 id="lblProjecttitle1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Name of the Client / Sponsoring Agency</label>
                                                    <h4 id="lblClietAgency1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Type</label>
                                                    <h4 id="lblProjectType1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Name</label>
                                                    <h4 id="lblPIName1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Start Date</label>
                                                    <h4 id="lblProjectStartDate1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Project Closure Date</label>
                                                    <h4 id="lblProjectClosureDate1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Code</label>
                                                    <h4 id="lblPICode1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Email ID</label>
                                                    <h4 id="lblPIEmailID1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>PI Phone No</label>
                                                    <h4 id="lblPIPhone1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department code </label>
                                                    <h4 id="lblDepartmentCode1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group mb-sm">
                                                    <label>Department Name</label>
                                                    <h4 id="lblDepartmentName1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Medical</label> <br>
                                                    <h4 id="txtMedical1"></h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Designation Code</label>
                                                    <h4 id="lblDesignationCode1">@Html.DisplayFor(m => m.DesignationCode)</h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Designation</label>
                                                    <h4 id="lblDesignationName1">@Html.DisplayFor(m => m.Designation)</h4>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment start date</label>
                                                    <h4 id="lblAppStartDate1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Appointment End date</label>
                                                    <h4 id="lblAppEndDate1"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Commitment Amount</label>
                                                    <h4 id="lblCommitmentAmt1"></h4>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Committee member</label>
                                                    @Html.TextBoxFor(m => m.CommiteeMember1, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.HiddenFor(m => m.CommiteeMemberId1)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label>Committee member</label>
                                                    @Html.TextBoxFor(m => m.CommiteeMember2, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.HiddenFor(m => m.CommiteeMemberId2)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label> Chairperson</label>
                                                    @Html.TextBoxFor(m => m.ChairpersonName, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.HiddenFor(m => m.ChairpersonNameId)
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowofMail, "NP", new { @id = "IsNotePI" }) <label class="ml-sm "> Note to PI</label>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    @Html.RadioButtonFor(m => m.FlowofMail, "Nd", new { @id = "IsNodeviation" }) <label class="ml-sm "> No deviation</label>
                                                </div>
                                            </div>
                                        </div>


                                        <div id="Deviation">

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="bl-lg-panel-box pb-null">
                            <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                <div class="cmn-panel-box">
                                    <div class="row">
                                        <div class="col-md-4" id="devCMAdmin">
                                            <div class="form-group custom-form-group">
                                                @Html.RadioButtonFor(m => m.FlowApprover, "CMAdmin", new { @id = "IsNotetoCMAdmin" }) <label class="ml-sm ">Note to CM Admin</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" id="devNoteDean">
                                            <div class="form-group custom-form-group">
                                                @Html.RadioButtonFor(m => m.FlowApprover, "NDean", new { @id = "IsNotetoDean" }) <label class="ml-sm " id="lblNoteDean">Note to Dean</label>
                                            </div>
                                        </div>
                                        @if (string.IsNullOrEmpty(Model.Status) || Model.Status == "Draft")
                                        {
                                        <div class="col-md-4" id="">
                                            <div class="form-group custom-form-group">
                                                <a id="clearFlow" style="color:#ffffff;">Clear</a>
                                            </div>
                                        </div>
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="text-right" style="margin-bottom: 50px;">
        @if (Model.Status == "Draft" || string.IsNullOrEmpty(Model.Status))
        {
            <input class="cancel btn btn-danger" type="submit" value="Save as draft" id="btnSave" />
        }
        <button type="button" class="btn btn-default" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
        <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
    </div>

    <div id="dialogConfirm" class="modal fade" role="dialog" data-backdrop="static" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header brd-bottom">
                    <button type="button" class="close" data-dismiss="modal">×</button>
                    <h4 class="modal-title">Mail Preview</h4>
                </div>
                <div class="modal-body">
                    <div style="padding:10px;margin-left: 10px;" id="divBcc">
                        <label>To mail</label>
                        @if (Model.STEId > 0 && Model.Status != "Draft")
                        {
                        <h4>@Html.DisplayFor(m => m.ToMail)</h4>
                        }
                        else
                        {
                        @Html.TextBoxFor(m => m.ToMail, new { @class = "form-control mb20" })
                        @Html.ValidationMessageFor(m => m.ToMail)
                        }
                        <label>Carbon Copy(CC) </label>
                        @if (Model.STEId > 0 && Model.Status != "Draft")
                        {
                        <h4>@Html.DisplayFor(m => m.bcc)</h4>
                        }
                        else
                        {
                        @Html.TextBoxFor(m => m.bcc, new { @class = "form-control", @placeholder = "Separate emails by comma" })
                        @Html.ValidationMessageFor(m => m.bcc)
                        }
                    </div>
                    <div style="padding:10px;overflow:auto" id="ShowDeviationNP">
                    </div>
                    <div style="padding:10px;overflow:auto" id="ShowDeviationND">
                    </div>
                </div>
                <div class="modal-footer brd-top">
                    <button type="button" class="btn btn-danger" id="isbtnConfirm">Confirm</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
}
@if (Model.STEId > 0)
{
    <input type="hidden" id="currentRefId" value="@Model.STEId" />
    <input type="hidden" id="processGuideLineId" value="@ViewBag.processGuideLineId" />
    @Html.Partial("_ProcessStatus")
}

<div id="popup">

</div>

<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var alertMsg = '@TempData["alertMsg"]';
    var Status = @Html.Raw(Json.Encode(Model.Status)) || '';
    var STEID = @Html.Raw(Json.Encode(Model.STEId)) || 0;
    var Medical = @Html.Raw(Json.Encode(Model.Medical)) || 0;
    var MedicalAmountglobal = @Html.Raw(Json.Encode(Model.MedicalAmmount)) || 0;
    var CommitmentRemark = @Html.Raw(Json.Encode(Remark)) || '';
    if(STEID > 0) {
        $('#Caste').val(@Html.Raw(Json.Encode(Model.Caste)));
        $('#BloodGroup').val(@Html.Raw(Json.Encode(Model.BloodGroup)));
        $('#BloodGroupRH').val(@Html.Raw(Json.Encode(Model.BloodGroupRH)));
        $('#Nationality').val(@Html.Raw(Json.Encode(Model.Nationality)));
        $('#Medical').val(Medical);
        $('#Sex').val(@Html.Raw(Json.Encode(Model.Sex)));
        $('#BloodGroup').val(@Html.Raw(Json.Encode(Model.BloodGroup)));
        $('#BloodGroupRH').val(@Html.Raw(Json.Encode(Model.BloodGroupRH)));
        $('#Nationality').val(@Html.Raw(Json.Encode(Model.Nationality)));
        $('#PhysicallyChallenged').val(@Html.Raw(Json.Encode(Model.PhysicallyChallenged)));
        $('#RelatedIITMadras').val(@Html.Raw(Json.Encode(Model.RelatedIITMadras)));
        $('#IITMPensionerCSIRStaff').val(@Html.Raw(Json.Encode(Model.IITMPensionerCSIRStaff)));
        $('#CSIRStaff').val(@Html.Raw(Json.Encode(Model.CSIRStaff)));
    }
    else {
        $('#Medical').val(2);
    }
    var diff = 0;
    var addyear = 0;
    var isGovAgencyFund = @Json.Encode(Model.isGovAgencyFund) || false;

    $(document).ready(function () {
        $('#ApplicationEntryDate').addClass('dis-none');
        if (CommitmentRemark != '') {
            $.confirm({
                title: 'Commitment rejected reason !',
                content:CommitmentRemark,
                type: 'orange',
                buttons: {
                    Close: function () {
                        //close
                    },
                },
            });
        }

        if(!$('.loading-bg').hasClass('dis-none')) {
            $('.loading-bg').addClass('dis-none');
        }

        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        else if (alertMsg != '') {
            $('#alert').html(alertMsg);
            $('#Validation').modal('toggle');
        }

        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');


        applyAutoComplete($('#BankName'), $('#BankId'), '@Url.Action("LoadBankNameList", "Requirement")');

        applyAutoComplete($('#ProjectNumber'), $('#ProjectId'), '@Url.Action("LoadProjectList","CoreAccounts")', 'ProjectSummary', true);

        applyAutoComplete($('#AutoFillRequstedbyPI'), $('#RequestedByPI'), '@Url.Action("LoadPIList", "Requirement")');


        $(document).on('keypress', 'input[id="DesignationCode"]', function () {
            var checkvalue = $('input[name="isConsolidatePay"]:checked').val() || "";
            if(checkvalue == "") {
                $.alert("Please select consolidated pay or fellowship pay.")
                return;
            }
            $('#Appointmentstartdate').val('');
            $('#AppointmentEndDate').val('');
            var ckvalue = checkvalue == "ConsolidatedPay" ? true : false;
            applyAutoCompleteDesignation($('#DesignationCode'), $('#DesignationId'),'@Url.Action("LoadDesignationList", "Requirement")?TypeCode=2&isConsolidatePay='+ckvalue, 'FillDesignation', true);
        });


        var currentdate = moment(new Date()).toDate();
        if(STEID > 0) {
            var DateRD = "@string.Format("{0:dd/MMMM/yyyy}", Model.ApplicationReceiveDate)";
            var ApplicationRD = moment(DateRD.split('-').join('/')).toDate();
            $('#ApplicationReceiveDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", ApplicationRD);
        }
        else {
            $('#ApplicationReceiveDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "maxDate", currentdate).datepicker("option", "minDate", -185);
        }

        $('#DateofBirth').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "maxDate", currentdate);


    });

    function changeBankName() {
        var bankname = $("#BankName").val();
        if (bankname == null || bankname == "") {
            $('#BankId').val('');
        }
    }

    $('#clearFlow').click(function() {
        $("input[name=FlowApprover]").prop('checked', false);
    });
    var flowApp = @Html.Raw(Json.Encode(Model.FlowApprover)) || '';
    if(flowApp == "CMAdmin")
    {
        $("input[name=FlowApprover][value=CMAdmin]").prop('checked', true);
        if(Status != "Draft")
            $("#devNoteDean").hide();
    }
    if(flowApp == "NDean")
    {
        $("input[name=FlowApprover][value=NDean]").prop('checked', true);
        if(Status != "Draft")
            $("#devCMAdmin").hide();
    }

    function FillDesignation()
    {
        var designationId = $('#DesignationId').val();
        if (designationId > 0) {
            $(".loading-bg").removeClass('dis-none');
            $.getJSON("@Url.Action("LoadDesignationDetails", "Requirement")", { DesignationID: designationId },
                       function (result) {
                           if (result.DesignationData.DestinationID > 0) {
                               $("#Designation").val(result.DesignationData.Designation);
                               $('#DesignationCode').val(result.DesignationData.DesignationCode);
                               $('#lblDesignationCode1').text(result.DesignationData.DesignationCode);
                               $('#lblDesignationName1').text(result.DesignationData.Designation);
                               $("#MinSalary").val(result.DesignationData.MinSalary);
                               $("#MaxSalary").val(result.DesignationData.MaxSalary);
                               var TypeOfAppointment = parseInt($('#TypeofappointmentId').val()) || 0;
                               var MsPhdType = parseInt($('#MsPhdType').val()) || 0;
                               if(result.DesignationData.Medical && MsPhdType == 0 && TypeOfAppointment != 2)
                               {
                                   MedicalAmountglobal = result.DesignationData.MedicalAmount;
                                   $('#isMedical').val(true);
                                   if(Medical > 0) {
                                       $('#MedicalAmmount').val(@Html.Raw(Json.Encode(Model.MedicalAmmount)) || 0);
                                       UpdateMedical(Medical);
                                   }
                                   else {
                                       $('#MedicalAmmount').val(MedicalAmountglobal);
                                       UpdateMedical(2);
                                   }
                               }
                               else
                               {
                                   MedicalAmountglobal = 0;
                                   $('#MedicalAmmount').val(0);
                                   $('#isMedical').val(false)
                                   UpdateMedical(3);
                               }

                               if (result.DesignationData.HRA == true && TypeOfAppointment != 2)
                               {
                                   $('#HRAText').addClass('dis-none');
                                   $('#HRA').removeClass('dis-none');
                                   $('#isHRA').val(true);
                                   $('#HRAPercentage').val(result.DesignationData.HRAPercentage)
                               }
                               else
                               {
                                   $('#HRAText').text('0');
                                   $('#isHRA').val(false);
                                   $('#HRA,#HRAPercentage').val(0);
                                   $('#HRAText').removeClass('dis-none');
                                   $('#HRA').addClass('dis-none');
                               }
                               $(".loading-bg").addClass('dis-none');

                               //Designation GateScore
                               if(result.DesignationData.GateScore)
                                   $("input[name=isHaveGateScore][value=Yes]").trigger('click');
                               calculatetaxTotal();
                               $(".loading-bg").addClass('dis-none');
                           }
                           else
                               $(".loading-bg").addClass('dis-none');
                       });
        }
    }

    $('#ProjectNumber').change(function() {
        $("#Appointmentstartdate, #AppointmentEndDate").val('');
    });

    function ProjectSummary() {
        var projectId = $("#ProjectId").val();
        if (projectId != "" || projectId != 0) {
            $(".loading-bg").removeClass('dis-none');
            $.getJSON("@Url.Action("LoadProjectDetails", "Requirement")", { ProjectId: projectId },
                   function (result) {
                       if (result.projectData.ProjectNumber != null) {
                           $('#labelProjectNumber').text(result.projectData.ProjectNumber);
                           $('#lblProjecttitle,#lblProjecttitle1').text(result.projectData.ProjectTitle);
                           $('#lblClietAgency,#lblClietAgency1').text(result.projectData.SponsoringAgency);
                           $('#lblProjectType,#lblProjectType1').text(result.projectData.ProjectType);
                           $('#lblPIName,#lblPIName1').text(result.projectData.PIName);
                           $('#lblProjectStartDate,#lblProjectStartDate1').text(result.projectData.ProjectStartDate);
                           $('#lblProjectClosureDate,#lblProjectClosureDate1').text(result.projectData.ProjectClosureDate);
                           $('#lblPICode,#lblPICode1').text(result.projectData.PICode);
                           $('#lblPIEmailID,#lblPIEmailID1').text(result.projectData.Email);
                           $('#lblPIPhone,#lblPIPhone1').text(result.projectData.Phone);
                           if($('#AutoFillRequstedbyPI').val() == "") {
                               $('#AutoFillRequstedbyPI').val(result.projectData.PIName);
                               $('#RequestedByPI').val(result.projectData.PIId);
                           }
                           if(Status == "" || Status == "Draft") {
                               $('#ToMail').val(result.projectData.Email);
                           }
                           $('#lblDepartmentCode,#lblDepartmentCode1').text(result.projectData.PIDepartmentCode);
                           $('#lblDepartmentName,#lblDepartmentName1').text(result.projectData.PIDepartmentName);
                           UpdateAppointmentDatePicker();
                           $(".loading-bg").addClass('dis-none');
                       }
                       else {
                           $(".loading-bg").addClass('dis-none');
                       }
                   });
        }
    }

    ProjectSummary()

    FillDesignation()

    function UpdateAppointmentDatePicker() {
        var setappstrdat = "";
        var strFromDate = moment($('#lblProjectStartDate').text().split('-').join('/')).toDate();
        var strToDate = moment($('#lblProjectClosureDate').text().split('-').join('/')).toDate();
        var currentdate = moment(new Date()).add(-15,'days').toDate();
        var value =  parseInt($('#MsPhdType').val()) || 0;
        if($('#TypeofappointmentId').val() == 4 || ($('#TypeofappointmentId').val() == 3 && value > 0)) {
            currentdate = moment(new Date()).add(-2,'years').add(+1,'days').toDate();
        }
        if(strFromDate !='' && strToDate !='')
        {
            if(strFromDate <= currentdate)
            {
                setappstrdat = currentdate;
                if(STEID > 0)
                {
                    var AppointmentDate = moment($("#Appointmentstartdate").val().split('-').join('/')).toDate();
                    if(AppointmentDate < currentdate) {
                        setappstrdat = AppointmentDate;
                    }
                }
            }
            else
            {
              setappstrdat = strFromDate
            }

            $('#Appointmentstartdate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", setappstrdat).datepicker("option", "maxDate", strToDate);
        }
    };

    $('#Designation').click(function () {
        applyAutoComplete($('#Designation'), $('#DesignationId'), "../RequirementMaster/LoadDesignationList");
    });

    $('#Salary').keyup(function () {
        calculatetaxTotal();
    });

    $('#HRA').change(function () {
        calculatetaxTotal();
    });


    function monthcount(startdate,enddate)
    {
        var MonthCount = [];
        MonthCount = dateRange(startdate.getFullYear() + '-' + parseInt(startdate.getMonth() + 1) + '-' + startdate.getDate(), enddate.getFullYear() + '-' + parseInt(enddate.getMonth() + 1) + '-' + enddate.getDate())
        var count = 0;
        for (var i = 0; i < MonthCount.length; i++) {
            var lastCount = MonthCount.length - 1;
            if (i != 0 && i != lastCount) {
                count += 1;
            }
        }
        return count;
    }

    function calculatetaxTotal()
    {
        var isNotHighSalary = false;
        var startdate = $('#Appointmentstartdate').val();
        var enddate = $('#AppointmentEndDate').val();
        var MsPhdType = parseInt($('#MsPhdType').val()) || 0;
        if(startdate != "" && enddate != "")
        {
            var startdt = new Date(startdate.split('-').join('/'));
            var enddt = new Date(enddate.split('-').join('/'));
            //Month count
            var count = monthcount(startdt,enddt);
            //define moments for the startdate and enddate
            var startdatemonthend = parseInt(endOfMonth(startdt).getDate());
            var enddatemonthend = parseInt(endOfMonth(enddt).getDate());
            var startworkingdays = 0 , endworkingdays = 0;
            if(startdt.getMonth() == enddt.getMonth() && startdt.getFullYear() == enddt.getFullYear())
            {
                startworkingdays = parseInt(enddt.getDate()) - parseInt(startdt.getDate()) + 1;
            }
            else
            {
                startworkingdays = startdatemonthend - parseInt(startdt.getDate()) + 1;
                endworkingdays = enddt.getDate();
            }
            //---end---

            var months = count || 0;
            var days = startworkingdays + endworkingdays;
            var HRAValue = 0,ttlVal = 0,Tot = 0;
            var MedicalAmt = MedicalAmountglobal || 0;
            var Salary = parseFloat($('#Salary').val()) || 0;
            var HRA = parseFloat($("#HRA").val()) || 0;
            //HRA Part
            if(HRA > 0)
            {
                var HRAPercentage = parseFloat($("#HRAPercentage").val()) || 0;
                HRAPercentage = HRAPercentage / 100;
                if (getBoolean($('#isHRA').val()))
                {
                    HRAValue = Salary * HRAPercentage;
                    $("#HRA").val(HRAValue.toFixed(2));
                }
                else
                {
                    $("#HRA").val(0);
                    HRAValue = 0;
                }
            }
            //---End---

            if (MsPhdType > 0 || $('#TypeofappointmentId').val() == 2)
            {
                MedicalAmt = 0;
                if($('#TypeofappointmentId').val() == 2)
                    HRAValue = 0;
            }
            else if (parseInt($('#Medical').val()) != 1)
                MedicalAmt = 0;

            //Calculation part
            ttlVal = MedicalAmt + Salary + HRAValue;
            var StartPerDay = ttlVal / startdatemonthend;
            var EndPerDay = ttlVal / enddatemonthend;
            var MonthlyAmt = ttlVal;
            if (months > 0)
            {
                Tot += MonthlyAmt * count;
            }
            if (days > 0)
            {
                Tot += startworkingdays * StartPerDay;
                Tot += endworkingdays * EndPerDay;
            }

            //Check salary creitera
            var MinSalary = parseFloat($('#MinSalary').val()) || 0;
            var MaxSalary = parseFloat($('#MaxSalary').val()) || 0;
            if (Salary <= MaxSalary)
            {
                isNotHighSalary = false;
            }
            else
            {
                isNotHighSalary = true;
            }

            if(parseInt($('#PhysicallyChallenged').val()) == 1)
            {
                isNotHighSalary = false;
            }

            $("input[name=SalaryPayHigh]").prop('checked', false);

            if (isNotHighSalary && Salary > 0)
            {
                $("input[name=SalaryPayHigh][value=Yes]").prop('checked', true);
            }
            else
            {
                $("input[name=SalaryPayHigh][value=No]").prop('checked', true);
            }

            //---end---


            //UpdateValue
            if ($('#TypeofappointmentId').val() == 2)
            {
                $('#MedicalAmmount').val(0);
                $("#HRA").val(0);
                $("#HRAText").text(0);
            }
            else if(MsPhdType > 0)
            {
                $('#MedicalAmmount').val(0);
            }
            else
            {
                if(parseInt($('#Medical').val()) == 1 || parseInt($('#Medical').val()) == 2)
                {
                    $('#MedicalAmmount').val(MedicalAmountglobal);
                }
            }
            $('#CommitmentAmount').val(Math.round(Tot));
            $('#lblCommitmentAmount').text(Math.round(Tot));

        }
    }

    function getFormattedDate(date)
    {
        var year = date.getFullYear();
        var month = (1 + date.getMonth()).toString();
        var day = date.getDate().toString();
        return year + '-' + month + '-' + day;
    }

    function dateRange(startDate, endDate)
    {
        var start = startDate.split('-');
        var end = endDate.split('-');
        var startYear = parseInt(start[0]);
        var endYear = parseInt(end[0]);
        var months = [];
        for(var i = startYear; i <= endYear; i++) {
            var endMonth = i != endYear ? 11 : parseInt(end[1]) - 1;
            var startMon = i === startYear ? parseInt(start[1])-1 : 0;
            for(var j = startMon; j <= endMonth; j = j > 12 ? j % 12 || 11 : j+1) {
                var month = j+1;
                var displayMonth = month < 10 ? '0'+month : month;
                months.push([displayMonth]);
            }
        }
        return months;
    }

    function endOfMonth(date)
    {
        return new Date(date.getFullYear(), date.getMonth() + 1, 0);
    }

    $("#Appointmentstartdate, #AppointmentEndDate").change(function () {
        ValidateDateDiff();
        calculatetaxTotal();
    });

    $('#Appointmentstartdate').change(function () {
        var endDate = "";
        $('#AppointmentEndDate').val('');
        if($(this).val() != "")
        {
            var closureDate = moment($('#lblProjectClosureDate').text().split('-').join('/')).toDate();
            if(closureDate != "") {
                var AddedEndYear = "";
                var DesigntionID = parseInt($('#DesignationId').val()) || 0;
                if(DesigntionID == 1) //Designtion 1 is trainee
                    AddedEndYear = moment($(this).val().split('-').join('/')).add(+6, 'months').add(-1,'days').toDate();
                else
                    AddedEndYear = moment($(this).val().split('-').join('/')).add(+364, 'days').toDate();

                if(AddedEndYear > closureDate)
                    endDate = closureDate;
                else
                    endDate = AddedEndYear;
            }
            var StartDate = moment($(this).val().split('-').join('/')).add(+1, 'months').add(-1,'days').toDate();

            $('#AppointmentEndDate').datepicker({
                dateFormat: 'dd-MM-yy',
                changeYear: true
            }).datepicker("option", "minDate", StartDate).datepicker("option", "maxDate", endDate);

            var maxdt = new Date($(this).val().split('-').join('/'));
            maxdt.setDate(maxdt.getDate() - 1);
            $('input[name$=".FromDate"]').each(function(){
                $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "maxDate", maxdt);
            });
            $('input[name$=".ToDate"]').each(function(){
                $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "maxDate", maxdt);
            });
        }

    });

    $("#DateofBirth").change(function () {
        calculateAge();
        FillyearandExpDate();
    });

    function calculateAge() {
        var now = new Date();
        var today = new Date(now.getFullYear() , now.getMonth() , now.getDate());
        var dobString = $('#DateofBirth').val();
        var birthDate = new Date(dobString.split('-').join('/'));
        var age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        $('#Age').val(age);
    }


    function FillyearandExpDate()
    {
        var dobString = $('#DateofBirth').val();
        if(dobString != "")
        {
            var dob = new Date(dobString.split('-').join('/'));
            var Curr = new Date();
            var year = parseInt(dob.getFullYear());
            year += 14;
            var minimumDt = new Date(year,dob.getMonth(),dob.getDate());
            if(STEID > 0)
            {
                var maxdt = new Date($('#Appointmentstartdate').val().split('-').join('/'));
                maxdt.setDate(maxdt.getDate() - 1);
                $('input[name$=".FromDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate",minimumDt).datepicker("option", "maxDate", maxdt);
                });
                $('input[name$=".ToDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate", minimumDt).datepicker("option", "maxDate", maxdt);
                });
            }
            else
            {
                $('input[name$=".FromDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate",minimumDt);
                });
                $('input[name$=".ToDate"]').each(function(){
                    $(this).datepicker({ dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("option", "minDate", minimumDt);
                });

            }

            $('select[name$=".YearofPassing"]').each(function(){
                $(this).empty().append($('<option/>', { value: "", text: "Select year" }));
                var curryear = @DateTime.Now.Year;
                for(var i = year;i <= curryear;i++){
                    $(this).append($('<option/>', { value: i, text: i }));
                }
            });
        }
    }


    function ValidateDateDiff()
    {
        var strDate = $("#Appointmentstartdate").val();
        var clsDate = $("#AppointmentEndDate").val();
        var AppStartDate = new Date(strDate.split('-').join('/'));
        var AppEndDate = new Date(clsDate.split('-').join('/'));
        var prjstartdate = $("#lblProjectStartDate").text();
        var prjenddate = $("#lblProjectClosureDate").text();
        if (prjstartdate == "" || prjenddate == "") {
            $("#Appointmentstartdate").val('')
            $("#AppointmentEndDate").val('')
            $.alert('Please enter project number');
            return;
        }
        prjstartdate = new Date(prjstartdate.split('-').join('/'));
        prjenddate = new Date(prjenddate.split('-').join('/'));
        if (strDate != '' && clsDate != '') {
            if (!(prjstartdate <= AppStartDate && AppEndDate <= prjenddate)) {
                $("#Appointmentstartdate").val('')
                $("#AppointmentEndDate").val('')
                $.alert('Appointment date must be between the project start date and project closure date.');
                return;
            }
        }
    }

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    function FillData()
    {
        var StaffCategory = $('input[name=StaffCategory]:checked').val();
        var IITMorCSIRStaf = parseInt($('#IITMPensionerCSIRStaff').val()) || 0;
        var MsPhdType = parseInt($('#MsPhdType').val()) || 0;
        $('#divCSIR').removeClass('dis-none');
        $('#labelCandidate').text($('#Name').val());
        $('#labelPIName').text($('#lblPIName').text());
        $('#labelDepartname').text($('#lblDepartmentName').text());
        if (MsPhdType > 0)
            $('#labelMsPhd').text($('#PhdDetail').val());
        else
            $('#labelMsPhd').text('-');
        $('#labelDesignation').text($('#Designation').val());
        $('#labelMedical').text($("#Medical option:selected").text());
        $('#labelPay').text($('#Salary').val());
        $('#labelDOB').text($('#DateofBirth').val());
        $('#labelReceivedDate').text($('#ApplicationReceiveDate').val());
        if ($('input[name="isConsolidatePay"]:checked').val() == "ConsolidatedPay") {
            $('#labelPaycategory').text('Consolidated Pay');
        }
        else if ($('input[name="isConsolidatePay"]:checked').val() == "FellowshipPay") {
            $('#labelPaycategory').text('Fellowship Pay');
        }
        $('#labelIITMCSIR').text($('#IITMPensionerCSIRStaff option:selected').text());
        $('#labelStaffCategory').text(StaffCategory);
        $('#lblAppStartDate1').text($('#Appointmentstartdate').val());
        $('#lblAppEndDate1').text($('#AppointmentEndDate').val());
        $('#lblCommitmentAmt1').text($('#CommitmentAmount').val());
        var TotalExp = 0;
        diff = 0;
        $('#tbodyExperience tr').each(function () {
            var frmexpdate = $(this).find("input[name$='.FromDate']").val();
            var toexpdate = $(this).find("input[name$='.ToDate']").val();
            if(frmexpdate != "" && toexpdate != ""){
                getDateDifference(frmexpdate,toexpdate)
            }
        });
        $('#labelExperience').text(getDateFormattedDate());
        var Qualifications = "";
        $('#tbodyEducation tr').each(function () {
            var departmet = $(this).find("select[name$='.DisciplineId'] option:selected").text();
            if(departmet != "") {
                Qualifications += departmet + ",";
            }
        });
        $('#labelQualification').text(Qualifications);
        //UpdateUploadedDoc();
    }

    //$('input[name="EmployeeType"]').on('change', function () {
    //    var value = $("input[name='EmployeeType']:checked").val();
    //    if (value == "Old Employee") {
    //        $('#divOld').removeClass('dis-none');
    //        $('#divNew').addClass('dis-none');
    //    }
    //    else {
    //        $('#divNew').removeClass('dis-none');
    //        $('#divOld').addClass('dis-none');
    //    }
    //});

    $('input[name="isSameasPermanentAddress"]').on('click', function () {
        if ($(this).is(":checked")) {
            $('#PermanentAddress').val($('#PresentAddress').val());
        } else {
            $('#PermanentAddress').val('');
        }
    });

    $('textarea[name="PresentAddress"]').on('keyup', function () {
        var value = $(this).val();
        if ($('#isSameasPermanentAddress').is(":checked")) {
            $('#PermanentAddress').val(value);
        }
    });

    $('select[name="RelatedIITMadras"]').on('change', function () {
        if ($(this).val() == 1) {
            $('#divRelationShip').removeClass('dis-none');
        } else {
            $('#divRelationShip').addClass('dis-none');
        }
    });

    $('select[name="IITMPensionerCSIRStaff"]').on('change', function () {
        if (parseInt($(this).val()) == 1) {
            $('#divPensionerNo').removeClass('dis-none');
            $('#divCSIRStaff').addClass('dis-none');
            $('#divMSPHDDetails').addClass('dis-none');
            $('#MsPhdType').val('');
            $('#phdDetails').addClass('dis-none');
        }
        else if (parseInt($(this).val()) == 2) {
            $('#divPensionerNo').addClass('dis-none');
            $('#divCSIRStaff').removeClass('dis-none');
            $('#divMSPHDDetails').removeClass('dis-none');
        }
        else {
            $('#divPensionerNo').addClass('dis-none');
            $('#divCSIRStaff').addClass('dis-none');
            $('#divMSPHDDetails').removeClass('dis-none');
        }
    });

    $('select[name="Medical"]').on('change', function () {
        $('#divMedicalAmount').removeClass('dis-none');
        UpdateMedical($(this).val());
        if ($(this).val() == 3) {
            $('#divMedicalAmount').addClass('dis-none');
        }
        calculatetaxTotal();
    });


    $("#Appointmentstartdate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        },
        beforeShowDay: function(date) {
            var day = date.getDay();
            return [day != 0,''];
        }
    });

    $("#AppointmentEndDate").datepicker({
        dateFormat: 'dd-MM-yy',
        showStatus: true,
        showWeeks: true,
        changeYear: true,
        yearRange: '1950:+30',
        highlightWeek: true,
        numberOfMonths: 1,
        showAnim: "scale",
        showOptions: {
            origin: ["top", "left"]
        }
    });



    function checkDevation() {
        var GateScore = parseFloat($('input[name="GateScore"]').val()) || 0;
        var SelectedMedical = parseInt($('#Medical').val()) || 0;
        var AppointmentType = parseInt($('#TypeofappointmentId').val()) || 0;
        var CSIRStaff = parseInt($('#CSIRStaff').val()) || 0;
        var PaymentthroughAgency = CSIRStaff == 2 ? true : false;
        var MsPhdType = parseInt($('#MsPhdType').val()) || 0;
        var IsMsorPhd = MsPhdType > 0 ? true : false;
        var  Salary = 0,MedicalAmt = 0,HRA = 0;
        Salary = parseFloat($('#Salary').val());
        if (AppointmentType == 2) {
            MedicalAmt = 0;
            HRA = 0;
        }
        if (MsPhdType > 0)
            MedicalAmt = 0;

        if (SelectedMedical == 1 && AppointmentType != 2 && MsPhdType == 0)
            MedicalAmt = $('#MedicalAmmount').val();//if Medical Exclude
        else
            MedicalAmt = 0;//if Medical include

        var BasicPay = Salary + HRA + MedicalAmt;
        var qualifi = [];
        var descipid = [];
        var marks = [];
        var marksType = [];
        addyear = 0;
        $('#tbodyEducation select[name$=".QualificationId"]').each(function () {
            qualifi.push($(this).val() || 0);
        });
        $('#tbodyEducation select[name$=".DisciplineId"]').each(function () {
            descipid.push($(this).val() || 0);
        });
        $('#tbodyEducation input[name$=".Marks"]').each(function () {
            marks.push(parseFloat($(this).val()) || 0);
        });
        $('#tbodyEducation select[name$=".MarkType"]').each(function () {
            marksType.push(parseFloat($(this).val()) || 0);
        });
        var TotalExp = 0;
        $('#tbodyExperience tr').each(function () {
            var frmexpdate = $(this).find("input[name$='.FromDate']").val();
            var toexpdate = $(this).find("input[name$='.ToDate']").val();
            if(frmexpdate != "" && toexpdate != "") {
                var dateTo = new Date(toexpdate.split('-').join('/'));
                var dateFrom = new Date(frmexpdate.split('-').join('/'));
                var dtdiff = new Date(dateTo - dateFrom);
                dtdiff.setDate(dtdiff.getDate() + 1);
                var days = dtdiff / 1000 / 60 / 60 / 24;
                TotalExp += days;
            }
        });
        $('#ExpTotal').val(TotalExp);
        var Exp = parseFloat(TotalExp) / 365;
        var oldempno = "";
        if($('input[name="EmployeeType"]:checked').val() == "Old Employee")
            oldempno = $('#OldEmpId').val();
        var PersonName = $('#ProfessionalId option:selected').text() +''+ $('#Name').val();
        var MsPhd_f = MsPhdType > 0 ? true : false
        var InputData = [];
        InputData = {
            DesignationId : $('#DesignationId').val() || null,
            QualificationId : qualifi,
            DisciplineId : descipid,
            CheckAge : $('#Age').val(),
            ChekSalary : $('#Salary').val(),
            Experience : Exp,
            Masrks : marks,
            AppointmentStartDate : $('#Appointmentstartdate').val(),
            AppointmentEndDate : $('#AppointmentEndDate').val(),
            StaffCatecory : $('input[name="StaffCategory"]:checked').val(),
            CommitmentAmount : $('#CommitmentAmount').val()||0,
            PhysicallyChanged : parseInt($('#PhysicallyChallenged').val())||0,
            PersonName : PersonName,
            ProjectID : parseInt($('#ProjectId').val()),
            Comments : $('#Comments').val(),
            AppointmentType : $('#TypeofappointmentId option:selected').text(),
            BasicPay : BasicPay,
            MasrksType : marksType,
            GateScore  :GateScore,
            AppType : "STE",
            TypeOfAppointment : $('#TypeofappointmentId').val(),
            DateOfBirth : $('#DateofBirth').val(),
            PaymentthroughAgency : PaymentthroughAgency,
            OldEmployee : oldempno,
            MsPhd : MsPhd_f,
            Experienceinwordings : $('#labelExperience').text() || "0 Years 0 Months 0 Days"
        }
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("CheckDeviationQualfication", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",
            //dataType: "json",
            beforeSend: function () {
                $(".loading-bg").removeClass('dis-none');
            },
            success: function (result) {
                $(".loading-bg").addClass('dis-none');
                $("input[name=FlowofMail]").prop('checked', false);
                if((Status == "Open" || Status == "" || Status == "Draft" || Status.includes("Note")) && Status != "Note to Dean" && !isGovAgencyFund)
                {
                    $("#Deviation").html(result.output);
                    $("#ShowDeviationNP").html(result.template);
                    if(result.isRes) {
                        $("input[name=FlowofMail][value=NP]").prop('checked', true);
                        document.getElementById("nextBtn").innerHTML = "Send for clarification";
                    }
                    else {
                        $("input[name=FlowofMail][value=Nd]").prop('checked', true);
                        document.getElementById("nextBtn").innerHTML = "Send for approval";
                    }

                    //Check is Selection AppointmentType
                    //if($('#TypeofappointmentId').val() == 3)
                    //{
                    //    $("#Deviation").empty();
                    //    $("#ShowDeviation").empty();
                    //    $("input[name=FlowofMail][value=Nd]").prop('checked', true);
                    //    document.getElementById("nextBtn").innerHTML = "Send for approval";
                    //}
                }
                else
                {
                    $("#Deviation").empty();
                    $("input[name=FlowofMail][value=Nd]").prop('checked', true);
                    document.getElementById("nextBtn").style.display = "none";
                }
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

    function AckowleadgementEmail() {
        var SelectedMedical = parseInt($('#Medical').val()) || 0;
        var AppointmentType = parseInt($('#TypeofappointmentId').val()) || 0;
        var MsPhdType = parseInt($('#MsPhdType').val()) || 0;
        var IsMsorPhd = MsPhdType > 0 ? true : false;
        var PersonName = $('#ProfessionalId option:selected').text() +''+ $('#Name').val();
        var  Salary = 0,MedicalAmt = 0,HRA = 0;
        Salary = parseFloat($('#Salary').val());
        //check is ConsolidatedPay or Part time appointment
        if (AppointmentType == 2) {
            MedicalAmt = 0;
            HRA = 0;
        }
        if (MsPhdType > 0)
            MedicalAmt = 0;

        if (SelectedMedical == 1 && AppointmentType != 2 && MsPhdType == 0)
            MedicalAmt = $('#MedicalAmmount').val();
        else
            MedicalAmt = 0;

        var BasicPay = Salary + HRA + MedicalAmt;
        var InputData = [];
        InputData = {
            AppointmentStartDate : $('#Appointmentstartdate').val(),
            AppointmentEndDate : $('#AppointmentEndDate').val(),
            DesignationId : $('#DesignationId').val() || null,
            Paytype : $('input[name="isConsolidatePay"]:checked').val() || "",
            PersonName : PersonName,
            AppointmentType : $('#TypeofappointmentId option:selected').text(),
            ProjectID : parseInt($('#ProjectId').val()),
            BasicPay : BasicPay
        }
        modelData = InputData;
        $.ajax({
            type: "POST",
            url: "@Url.Action("STEEmailProcess", "Requirement")",
            data: modelData,
            contentType: "application/x-www-form-urlencoded",
            beforeSend: function () {
                $(".loading-bg").removeClass('dis-none');
            },
            success: function (result) {
                $(".loading-bg").addClass('dis-none');
                $("#ShowDeviationND").html(result.output.Item2);
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("cust-tab");
        x[n].style.display = "block";

        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        }
        else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            if(Status == "Open" || Status == "" || Status == "Draft" || Status.includes("Note") &&Status != "Note to Dean")
            {
                document.getElementById("nextBtn").style.display = "inline";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }
            else
            {
                document.getElementById("nextBtn").style.display = "none";
                document.getElementById("nextBtn").innerHTML = "Submit";
            }
        }
        else {
            document.getElementById("nextBtn").innerHTML = "Next";
            document.getElementById("nextBtn").style.display = "inline";
        }
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("cust-tab");
        // Exit the function if any field in the current tab is invalid:
        var v = n;
        if($('#nextBtn').text().includes("Send") || $('#nextBtn').text().includes("Submit")) {
            v = 2;
        }
        var expinValid = validateExperiencedetail();
        if (expinValid) {
            $.confirm({
                title: 'Warning!',
                content: 'Please fill experience detail',
                type: 'orange',
                buttons: {
                    Ok: function () {
                        //close
                    },
                },
            });
            return false;
        }
        var val = $('select[name="ProfessionalId"]').val() || 0;
        var qualification = [];
        if (val == 4) {
            $(document).find('select[name $=".QualificationId"]').each(function () {
                var value = parseFloat($(this).val()) || 0;
                if (value != 0)
                    qualification.push(value);
            });
            if (qualification.length > 0) {
                if(arrayContains(3,qualification) == false) {
                    $('select[name="ProfessionalId"]').val('');
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: "Please select Doctorate degree for Salutation Dr.",
                        type: 'red'
                    });
                    return;
                }
            }
        }


        if (n > 0 && !validateForm(v)) {
            $.confirm({
                title: 'Warning!',
                content: 'Invalid data exist',
                type: 'orange',
                buttons: {
                    Ok: function () {
                        //close
                    },
                },
            });
            return false;
        }
        if($('#Comments').val() != '') {
            $('#txt-Comments').text($('#Comments').val());
        }
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        }
        else {
            // ... the form gets submitted:
            // ... Update checklist in the deviation
            var CheckedValue = [];
            $('#tbodyDEVCheckList').find('input[id^="DeviationCheckId_"]').each(function() {
                if($(this).is(':checked')){
                    var str =$(this).attr('name');
                    var matches = str.match(/(\d+)/);
                    var value = 0;
                    if(matches)
                        value = $('input[name="CheckListDetail[' + matches[0] + '].FunctionCheckListId"]').val();
                    CheckedValue.push(value);
                }
            });
            $('.CheckListBody').find('tr[class^="Checklist_"]').each(function() {
                $(this).addClass('dis-none');
            });

            if(CheckedValue.length > 0) {
                for(var i = 0;i < CheckedValue.length;i++)
                {
                    $('.Checklist_' + CheckedValue[i]).removeClass('dis-none');
                }
            }
            $('.CheckListBody').find('tr:not(.dis-none)').each(function(e) {
                $(this).find('.dyn-srl-No').text(parseInt(e));
            });

            //..... end ......

            if($('input[name="FlowofMail"]:checked').val() != "Nd") {
                if($('#Comments').val() != "") {
                    $('#tr-cmt').removeClass('dis-none');
                }
                else {
                    $('#tr-cmt').addClass('dis-none');
                }
                $('#txt-mail-comments').text($('#Comments').val());
                $('#ShowDeviationND').hide();
                $('#ShowDeviationNP').show();
                PopupConfirm()
            }
            else if($('input[name="FlowofMail"]:checked').val() == "Nd") {
                if(Status == "" || Status == "Draft")  {
                    $('#ShowDeviationND').empty();
                    $('#ShowDeviationNP').hide();
                    $('#ShowDeviationND').show();
                    AckowleadgementEmail()
                    PopupConfirm()
                }
                else {
                    formSave();
                }
            }
            else {
                formSave();
            }

            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {
        enableDisableReqClass(true);
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".cust-tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;
        }

        try
        {
            $(stepElements).each(function (idx)
            {
                if (!$(this).is(':radio') && !$(this).is(':checkbox'))
                {
                    isValid = $(this).valid(); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                    if (!isValid) {
                        hadError = true;
                    } // set our flag if there was an error
                }
            });
        }
        catch(err)
        {
            console.log(err.message);
        }



        if($('input[name="EmployeeType"]:checked').val() == "Old Employee")
        {
            var oldid = $('#OldEmpId').val();
            if(oldid == "")
            {
                $.confirm({
                    title: 'Warning!',
                    content: 'Please select valid employee number',
                    type: 'orange',
                    buttons: {
                        Ok: function () {
                            $('#OldEmployeeNumber').val('');
                        },
                    },
                });
                return false;
            }
        }

        if($("input[name='isHaveGateScore']:checked").val() == "Yes")
        {
            if($('#Score').val() == "")
            {
                $.confirm({
                    title: 'Warning!',
                    content: 'Please enter gate score',
                    type: 'orange',
                    buttons: {
                        Ok: function () {
                            //close
                        },
                    },
                });
                return false;
            }
        }
        if(!hadError && n != 2)
        {
            if ($('#ProjectId').val() != null || $('#ProjectId').val() != "")
            {
                FillData();
            }
            if ($('#DesignationId').val() != null || $('#DesignationId').val() != "")
            {
                if(Status == "Open" || Status == "" || Status == "Draft" || Status.includes("Note") && Status != "Note to Dean")
                {
                    var MinSalary = parseFloat($('#MinSalary').val()) || 0;
                    var Salary = parseFloat($('#Salary').val()) || 0;
                    var AppointmentType = parseInt($('#TypeofappointmentId').val()) || 0;
                    if(AppointmentType == 2 && MinSalary > 0) {
                        MinSalary = MinSalary / 2;
                    }

                    if(MinSalary > Salary)
                    {
                        $.confirm({
                            title: 'Warning!',
                            content: 'Salary mentioned is below the institution norms',
                            type: 'orange',
                            buttons: {
                                Ok: function () {
                                    //close
                                },
                            },
                        });
                        return false;
                    }
                    else
                    {
                        checkDevation();
                    }
                }
                else
                {
                    $("input[name=FlowofMail]").prop('checked', false);
                    $("#Deviation").empty();
                    $("input[name=FlowofMail][value=Nd]").prop('checked', true);
                    document.getElementById("nextBtn").style.display = "none";
                }
            }

        }
        return !hadError; // return the valid status
    }

    function PopupConfirm() {
        $('#dialogConfirm').modal('toggle');
    }

    $('#isbtnConfirm').click(function() {
        var ToMailId = $('#ToMail').val() || "";
        if((Status == "" || Status == "Draft") && ToMailId == "")
        {
            $.alert('Please enter to mail');
            return;
        }
        formSave()
    });

    function formSave() {
        $('#isDraftbtn').val(false);
        var isValid = $('#formSTEJuniorApp').valid();
        if (!isValid)
            return false;
        $('.loading-bg').removeClass('dis-none');
        if(Status == "Open" || Status == "" || Status == "Draft" || (Status.includes("Note") && Status != "Note to Dean"))
        {
            var MinSalary = parseFloat($('#MinSalary').val()) || 0;
            var Salary = parseFloat($('#Salary').val()) || 0;
            var AppointmentType = parseInt($('#TypeofappointmentId').val()) || 0;
            if(AppointmentType == 2) {
                MinSalary = MinSalary / 2;
            }

            if(MinSalary > Salary)
            {
                $.confirm({
                    title: 'Warning!',
                    content: 'Salary mentioned is below the institution norms',
                    type: 'orange',
                    buttons: {
                        Ok: function () {
                            //close
                        },
                    },
                });
                $('.loading-bg').addClass('dis-none');
                return false;
            }
            else
            {
                if (isValid)
                    $('#formSTEJuniorApp').submit();
            }
        }
        else
        {
            $('#FailedAlert').html('Something went wrong please contact administrator');
            $('#Failed').modal('toggle');
        }
    }

    function enableDisableReqClass(required) {
        if(required) {
            //if($('input[name="EmployeeType"]:checked').val() == "Old Employee"){
            //    $('#OldEmployeeNumber').addClass("required");
            //}
            //$("#TypeofappointmentId").addClass("required");
            //$("#ProfessionalId").addClass("required");
            //$("#Name").addClass("required");
            //$("#Nameoftheguardian").addClass("required");
            //$("#DateofBirth").addClass("required");
            //$("#Sex").addClass("required");
            //$("#Caste").addClass("required");
            //$("#ContactNumber").addClass("required");
            //$("#Email").addClass("required");
            //$("#PresentAddress").addClass("required");
            //$("#ApplicationReceiveDate").addClass("required");
            //$("#ProjectNumber").addClass("required");
            //$("#DesignationCode").addClass("required");
            //$("#Designation").addClass("required");
            //$("#Appointmentstartdate").addClass("required");
            //$("#AppointmentEndDate").addClass("required");
            //$("#CommitmentAmount").addClass("required");
            //$("#IITMPensionerCSIRStaff").addClass("required");
            ////$("#BloodGroup").addClass("required");
            ////$("#BloodGroupRH").addClass("required");
            //$("#Nationality").addClass("required");
            //$("#PhysicallyChallenged").addClass("required");
            //if($("#IITMPensionerCSIRStaff").val() == 1)
            //{
            //    $('#PPONo').addClass("required");
            //    $('#CSIRStaff').removeClass("required");
            //    $('#CSIRStaff').removeAttr("data-val");
            //    $('#CSIRStaff').attr('data-val',false);
            //}
            //else if($("#IITMPensionerCSIRStaff").val() == 2)
            //{
            //    $('#CSIRStaff').addClass("required");
            //    $('#PPONo').removeClass("required");
            //}
            //else
            //{
            //    $('#CSIRStaff').removeClass("required");
            //    $('#PPONo').removeClass("required");
            //}
            //if($("#aadharnumber").val() != "")
            //{
            //    $('#PAN').removeClass("required");
            //}
            //else if($("#PAN").val() != "")
            //{
            //    $('#aadharnumber').removeClass("required");
            //}
            //else
            //{
            //    $('#PAN').addClass("required");
            //    $('#aadharnumber').addClass("required");
            //}

            //var msphhhdval = $("#MsPhdType").val() || 0;
            //if(msphhhdval == 1 || msphhhdval == 2)
            //{
            //    $('#PhdDetail').addClass("required");
            //}

            $('#tbodyEducation').find('select[name$=".QualificationId"]').each(function(){
                $(this).addClass("required");
            });
            $('#tbodyEducation').find('select[name$=".DisciplineId"]').each(function(){
                $(this).addClass("required");
            });
            $('#tbodyEducation').find('input[name$=".Institution"]').each(function(){
                $(this).addClass("required");
            });
            $('#tbodyEducation').find('select[name$=".YearofPassing"]').each(function(){
                $(this).addClass("required");
            });
            $('#tbodyEducation').find('input[name$=".Marks"]').each(function(){
                $(this).addClass("required");
            });
            $('#tbodyEducation').find('select[name$=".MarkType"]').each(function(){
                $(this).addClass("required");
            });
            @*$('#tbodyEducation').find('input[name$=".Certificate"]').each(function(){
                if(@Model.STEId>0)
                    $(this).removeClass("required");
                else
                    $(this).addClass("required");
            });*@
            //$('#tbodyExperience').find('select[name$=".ExperienceTypeId"]').each(function(){
            //    $(this).addClass("required");
            //});
            //$('#tbodyExperience').find('input[name$=".FromDate"]').each(function(){
            //    $(this).addClass("required");
            //});
            //$('#tbodyExperience').find('input[name$=".ToDate"]').each(function(){
            //    $(this).addClass("required");
            //});
            @*$('#tbodyExperience').find('input[name$=".ExperienceFile"]').each(function(){
                if(@Model.STEId>0)
                    $(this).removeClass("required");
                else
                    $(this).addClass("required");
            });*@

            //$('#Salary').addClass("required");
        }
        else {
            var msphhhdval = $("#MsPhdType").val() || 0;
            if(msphhhdval == 1 || msphhhdval == 2)
            {
                $('#PhdDetail').removeClass("required");
            }
            $('#Salary').removeClass("required");
            $('#OldEmployeeNumber').removeClass("required");
            $('#NIDNumber').removeClass("required");
            $("#TypeofappointmentId").removeClass("required");
            $("#ProfessionalId").removeClass("required");
            $("#Name").removeClass("required");
            $("#Nameoftheguardian").removeClass("required");
            $("#DateofBirth").removeClass("required");
            $("#Sex").removeClass("required");
            $("#Caste").removeClass("required");
            $("#ContactNumber").removeClass("required");
            $("#Email").removeClass("required");
            $("#PresentAddress").removeClass("required");
            $("#ApplicationReceiveDate").removeClass("required");
            $("#ProjectNumber").removeClass("required");
            $("#DesignationCode").removeClass("required");
            $("#Designation").removeClass("required");
            $("#Appointmentstartdate").removeClass("required");
            $("#AppointmentEndDate").removeClass("required");
            $("#CommitmentAmount").removeClass("required");
            $("#IITMPensionerCSIRStaff").removeClass("required");
            //$("#BloodGroup").removeClass("required");
            //$("#BloodGroupRH").removeClass("required");
            $("#Nationality").removeClass("required");
            $("#PhysicallyChallenged").removeClass("required");
            $('#PPONo').removeClass("required");
            $('#CSIRStaff').removeClass("required");
            $('#PAN').removeClass("required");
            $('#aadharnumber').removeClass("required");
            $('#PAN').removeClass("required");
            $('#aadharnumber').removeClass("required");
            $('#tbodyEducation').find('select[name$=".QualificationId"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('select[name$=".DisciplineId"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('input[name$=".Institution"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('input[name$=".YearofPassing"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('input[name$=".Marks"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('select[name$=".MarkType"]').each(function(){
                $(this).removeClass("required");
            });
            $('#tbodyEducation').find('input[name$=".Certificate"]').each(function(){
                $(this).removeClass("required");
            });
            //$('#tbodyExperience').find('select[name$=".ExperienceTypeId"]').each(function(){
            //    $(this).removeClass("required");
            //});
            //$('#tbodyExperience').find('input[name$=".ExperienceFile"]').each(function(){
            //    $(this).removeClass("required");
            //});
            //$('#tbodyExperience').find('input[name$=".FromDate"]').each(function(){
            //    $(this).removeClass("required");
            //});
            //$('#tbodyExperience').find('input[name$=".ToDate"]').each(function(){
            //    $(this).removeClass("required");
            //});
        }
    }


    $(document).on('click', '#btnViewSummary', function () {
        var projNo = $('#ProjectId').val() || 0;
        if (projNo > 0) {
            var searchData = { "ProjectId": projNo };
            $.ajax({
                url: "@Url.Action("_ProjectSummary", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                beforeSend: function () {
                    $(".loading-bg").removeClass('dis-none');
                },
                success: function (result) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(result);
                    $("#projectSummaryModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
    });

    $(document).on('click', '#btnViewStaffAllocation', function () {
        var projNo = $('#ProjectId').val() || 0;
        if (projNo > 0) {
            var searchData = { "ProjectId": projNo };
            $.ajax({
                url: "@Url.Action("_ViewStaffAllocation", "Requirement")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                beforeSend: function () {
                    $(".loading-bg").removeClass('dis-none');
                },
                success: function (result) {
                    $(".loading-bg").addClass('dis-none');
                    $("#popup").html(result);
                    $("#myModal1").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                    $(".loading-bg").addClass('dis-none');
                }
            });
        }
    });


    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function isOnlyNumericKey(e) {
        //if the letter is not digit then display error and don't type anything
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            return false;
        }
    }

    $('select[name="ProfessionalId"]').on('change', function () {
        Professional(parseInt($(this).val()))
    });

    function Professional(value) {
        $('#Sex').removeClass('dis-none');
        $('#lblSex').removeClass('dis-none');
        if (value == 1) {
            $('#Sex').val(1)
            $('#lblSex').text('Male');
            $('#Sex').addClass('dis-none');
        }
        else if (value == 2) {
            $('#Sex').val(2)
            $('#lblSex').text('Female');
            $('#Sex').addClass('dis-none');
        }
        else if (value == 3) {
            $('#Sex').val(2)
            $('#lblSex').text('Female');
            $('#Sex').addClass('dis-none');
        }
        else if (value == 4) {
            $('#Sex').val('')
            $('#lblSex').addClass('dis-none');
            $('#Sex').removeClass('dis-none');
        }
        else if (value == 5) {
            $('#Sex').val(3)
            $('#lblSex').text('Others');
            $('#Sex').addClass('dis-none');
        }
        else{
            $('#lblSex').text('');
            $('#Sex').val('');
            $('#lblSex').addClass('dis-none');
            $('#Sex').removeClass('dis-none');
        }
    }


    if ($('select[name="ProfessionalId"]').val() != "") {
        if($('select[name="ProfessionalId"]').val() != 4)
            Professional($('select[name="ProfessionalId"]').val())
    }

    var EmployeeType = $("input[name='EmployeeType']:checked").val();
    if (EmployeeType == "Old Employee") {
        $('#divOld').removeClass('dis-none');
        $('#divNew').addClass('dis-none');
    }
    else {
        $('#divNew').removeClass('dis-none');
        $('#divOld').addClass('dis-none');
    }

    var IITRelation = $("select[name='RelatedIITMadras']").val() || 0;
    if (IITRelation == 1)
        $('#divRelationShip').removeClass('dis-none');
    else
        $('#divRelationShip').addClass('dis-none');


    $('#MsPhdType').change(function () {
        //Medical benefit and Hospital charges is not applicable for Part Time & MS/Phd candidates
        var value =  parseInt($(this).val()) || 0;
        var Typeofappointment =  parseInt($('#TypeofappointmentId').val()) || 0;

        $('#PhdDetail').val('');
        if (value > 0) {
            $('#MsPhdTypeValid').val(true);
            $('#phdDetails').removeClass('dis-none');
            UpdateMedical(3);
        }
        else {
            $('#MsPhdTypeValid').val(false);
            $('#phdDetails').addClass('dis-none');
            if($('#TypeofappointmentId').val() != 2)
                UpdateMedical(2);
            else
                UpdateMedical(3);
        }
        calculatetaxTotal();
        if(Typeofappointment == 3 && value > 0)
            UpdateAppointmentDatePicker()
    });

    var MsPhdTypeid = parseInt($('#MsPhdType').val()) || 0;
    if (MsPhdTypeid > 0)
        $('#phdDetails').removeClass('dis-none');
    else
        $('#phdDetails').addClass('dis-none');


    $('#TypeofappointmentId').change(function(){
        var value = 0;
        //Medical benefit and Hospital charges is not applicable for Part Time & MS/Phd candidates
        var MsPhdType = parseInt($('#MsPhdType').val()) || 0;
        if($('#TypeofappointmentId').val() == 2) {
            $('#HRAText').removeClass('dis-none');
            $('#HRAText').text(0);
            $('#HRA').addClass('dis-none');
            value = 3;
        }
        else {
            if(getBoolean($('#isHRA').val())) {
                $('#HRA').removeClass('dis-none');
                $('#HRAText').addClass('dis-none');
            }
            if(MsPhdType == 0 && getBoolean($('#isMedical').val()))
                value = 2
            else
                value = 3;
        }
        UpdateMedical(value);
        calculatetaxTotal();
        UpdateAppointmentDatePicker();
    });

    function UpdateMedical(value,isHaveMedical) {
        var CheckMedical = getBoolean($('#isMedical').val());
        $('#Medical').val(value);
        if(value == 1 || value == 2) {
            $('#Medical').removeClass('dis-none');
            $('#MedicalText').addClass('dis-none');
            $('#MedicalAmmount').val(MedicalAmountglobal);
        }
        else if(value == 3 && !CheckMedical) {
            $('#Medical').addClass('dis-none');
            $('#MedicalText').removeClass('dis-none');
            $('#MedicalAmmount').val(0);
        }
        else if(value == 3) {
            $('#Medical').removeClass('dis-none');
            $('#MedicalText').addClass('dis-none');
            $('#MedicalAmmount').val(0);
        }
        $('#MedicalText').text($("#Medical option:selected").text());
        $('#txtMedical1').text($("#Medical option:selected").text())
        $('#txtMedicalAmount').text($('#MedicalAmmount').val());
    }

    var PensionerCSIStaff = parseInt($('select[name="IITMPensionerCSIRStaff"]').val());
    if (PensionerCSIStaff == 1) {
        $('#divPensionerNo').removeClass('dis-none');
        $('#divCSIRStaff,#divMSPHDDetails,#phdDetails').addClass('dis-none');
        $('#MsPhdType').val('');
    }
    else if (PensionerCSIStaff == 2) {
        $('#divPensionerNo').addClass('dis-none');
        $('#divCSIRStaff,#divMSPHDDetails').removeClass('dis-none');
    }
    else {
        $('#divPensionerNo,#divCSIRStaff').addClass('dis-none');
        $('#divMSPHDDetails').removeClass('dis-none');
    }

    $(document).on('change','input[name$=".IsChecked"]',function () {
        var isUnchecked = false;
        $('input[name$=".IsChecked"]').each(function () {
            if ($(this).is(':checked')) {
                isUnchecked = true;
            }
        });
        $("input[name=FlowofMail]").prop('checked', false);

        if (!isUnchecked) {
            $("input[name=FlowofMail][value=Nd]").prop('checked', true);
            $('#nextBtn').text('Send for approval');
        }
        else {
            $("input[name=FlowofMail][value=NP]").prop('checked', true);
            $('#nextBtn').text('Send for clarification');
        }
    });

    $(document).on('change','input[name="FlowofMail"]',function () {
        var isUnchecked = false;
        var value=$('input[name="FlowofMail"]:checked').val();
        if(value == "Nd") {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', false);
            });
            $('#nextBtn').text('Send for approval');
        }
        else {
            $('input[name$=".IsChecked"]').each(function () {
                $(this).prop('checked', true);
            });
            $('#nextBtn').text('Send for clarification');
        }
    });

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#displayImg')
                    .attr('src', e.target.result)
                    .width(30)
                    .height(30);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

    $('input[name$=".Certificate"],input[name$=".ExperienceFile"]').change(function (e) {
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        var fileName = e.target.files[0].name;
        var allowedExtensions = [".jpeg", ".png", ".jpg",".gif"];
        var allowedExtensionsPdf =[".pdf", ".PDF"];
        var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
        var ImgFormat = allowedExtensions.includes('.' + extension);
        var DocFormat = allowedExtensionsPdf.includes('.' + extension);
        if(ImgFormat)
        {
            if(iSize>1024)
            {
                $('#alert').html('Image size should be allow below 1MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else if(DocFormat)
        {
            if(iSize>5120)
            {
                $('#alert').html('PDF size should be allow below 5MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            $('#alert').html('Certificates allowed document type [pdf,jpg,jpeg,gif]');
            $('#Validation').modal('toggle');
            $(this).val('');
            return;
        }
    });

    $('input[name="Resume"]').change(function (e) {
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        var fileName = e.target.files[0].name;
        var allowedExtensions = [".pdf"];
        var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
        var ImgFormat=allowedExtensions.includes('.'+extension);
        if(ImgFormat)
        {
            if(iSize > 5120){
                $('#alert').html('Resume size should be allow below 5MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            $('#alert').html('Resume should be allowd document type .pdf');
            $('#Validation').modal('toggle');
            $(this).val('');
            return;
        }
    });

    $('input[name="PersonImage"]').change(function (e) {
        var _size = this.files[0].size;
        var iSize = (_size / 1024);
        iSize = (Math.round(iSize * 100) / 100)
        var fileName = e.target.files[0].name;
        var allowedExtensions = [".jpeg", ".png", ".jpg",".gif", ".JPEG", ".PNG", ".JPG"];
        var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
        var ImgFormat=allowedExtensions.includes('.'+extension);
        if(ImgFormat) {
            if(iSize > 1024){
                $('#alert').html('Image size should be allow below 1MB');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
        else {
            $('#alert').html('Image should be allowd document type [.jpg,.jpeg,.png]');
            $('#Validation').modal('toggle');
            $(this).val('');
            return;
        }
    });

    $(document).on('change','input[name^="PIJustificationFile"]', function(event) {
        var id = $(this).attr('id');
        id = id.split('_')[1];
        if($(this).val() != "")
        {
            // Read selected files
            var allowedExtensions =[".pdf", ".doc",".docx"];
            var fileName = document.getElementById('PIJustificationFile_'+id).files[0].name;
            var extension = fileName.substr((fileName.lastIndexOf('.') + 1)).toLowerCase();
            var validFormat=allowedExtensions.includes('.'+extension);
            if(validFormat){
                var _size = document.getElementById('PIJustificationFile_'+id).files[0].size;
                var iSize = (_size / 1024);
                iSize = (Math.round(iSize * 100) / 100)
                if (iSize > 5120) {
                    $('#alert').html('Documents size should be allow below 5MB');
                    $('#Validation').modal('toggle');
                    $(this).val('');
                    return;
                }
            }
            else {
                $('#alert').html('PIJustification allowed document type [pdf,doc,docx]');
                $('#Validation').modal('toggle');
                $(this).val('');
                return;
            }
        }
    });

    var innc=1;
    $("#btnAddFile").click(function () {
        var cln = $('div#divPIJustification:first').clone().find("input").val("").end();
        $(cln).find('a').removeClass('dis-none');
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, innc));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, innc));
        });
        $(cln).insertAfter("div#divPIJustification:last");
        innc++;
    });

    $(document).on('click', 'a.removeFile', function () {
        if ($('div#divPIJustification').length == 1) {
            $('div#divPIJustification').find("input").val("").end();
        }
        else{
            $(this).closest('div').remove();
            $(document).find('input[name^="PIJustificationFile"]').each(function(idx,ele){
                $(this).attr("name", $(this).attr("name").replace(/\d+/, idx));
                if ($(this).attr("id"))
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, idx));
            });
            innc--;
        }
    });

    $('a[name="DocDownload"]').click(function (p) {
        p.preventDefault();
        var ref = $(this).attr('href');
        var win = window.open('', '_blank');
        win.location.href = ref;
    });

    $(document).on('click','#btnSave',function(e){
        e.preventDefault();
        $('#isDraftbtn').val(true);
        //enableDisableReqClass(false);
        $('#formSTEJuniorApp').submit();
        $(".loading-bg").removeClass('dis-none');
    });

    var findtabs = $(".cust-tab");
    $(findtabs[0]).find('textarea,input[type="text"]').each(function(){
        var id = $(this).attr('id');
        var name = $(this).attr('name').split('.')[1];
        var noexpid = ["DesignationCode" , "ProjectNumber" , "Comments" , "PIJustificationRemarks"];
        var noexpname = ["DesignationautoComplete"];
        if(!noexpid.includes(id) && !noexpname.includes(name)){
            $(this).attr('style','text-transform:uppercase');
        }
    });

    $(document).on('keyup','textarea,input[type="text"]',function(event) {
        if($(this).attr('id') != "Comments" && $(this).attr('id') != "PIJustificationRemarks" && $(this).attr('id') != undefined) {
            var input = event.target;
            var start = input.selectionStart;
            var end = input.selectionEnd;
            input.value = input.value.toLocaleUpperCase();
            input.setSelectionRange(start, end);
        }
    });


    $(document).on('keyup','input[name$=".Marks"]',function(){
        var value = parseInt($(this).val());
        var splitId = $(this).attr('id');
        var id = splitId.split('_')[1];
        var MarkType= parseInt($('select[name="EducationDetail[' + id + '].MarkType"]').val()) || 0;
        if(MarkType > 0)
        {
            if(MarkType == 1) {
                if(isNaN(value))
                    return false;
                if(value > 100)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'Mark percentage should be between 0 and 100',
                        type: 'red'
                    });
                    $(this).val('')
                    return false;
                }
            }
            else {
                if(isNaN(value))
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'Enter valid input',
                        type: 'red'
                    });
                    return false;
                }
                if(value > 10)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'CGPA should be between 1 and 10',
                        type: 'red'
                    });
                    $(this).val('')
                    return false;
                }
            }
        }
        else
        {
            $.alert({
                icon: 'ion-close-circled',
                title: 'Error Alert!',
                content: 'Please select mark type',
                type: 'red'
            });
            $('input[name="EducationDetail[' + id + '].MarkType"]').focus();
            $(this).val('')
            return false;
        }

    });

    $(document).on('change','select[name$=".MarkType"]',function(){
        var value = parseInt($(this).val());
        var name = $(this).attr('name');
        var id = name.match(/\d+/)[0];
        var Mark = parseFloat($('input[name="EducationDetail[' + id + '].Marks"]').val()) || 0;
        if(Mark > 0)
        {
            if(value == 1)
            {
                if(Mark > 100)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'Mark percentage should be between 0 and 100',
                        type: 'red'
                    });
                    $('input[name="EducationDetail[' + id + '].Marks"]').val('');
                    return false;
                }
            }
            else if(value == 2)
            {
                if(Mark > 10)
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: 'CGPA should be between 1 and 10',
                        type: 'red'
                    });
                    $('input[name="EducationDetail[' + id + '].Marks"]').val('');
                    return false;
                }
            }
            else
            {
                $.alert({
                    icon: 'ion-close-circled',
                    title: 'Error Alert!',
                    content: 'Please select valid input',
                    type: 'red'
                });
                return false;
            }
        }
    });

    $(document).on("change", "input[name$='.FromDate']",function () {
        var name = $(this).attr('name');
        var SplitName = name.split('.');
        var value = $(this).val();
        value = value.split('-').join('/')
        var defaultFromDate = moment(value).add(+1, 'days').toDate();
        $('input[name="' + SplitName[0] + '.ToDate"]').datepicker({
            dateFormat: 'dd-MM-yy',
            changeYear: true
        }).datepicker("option", "minDate", defaultFromDate);
    });

    $(document).on('change', 'select[name$=".ExperienceTypeId"]', function () {
        var value = parseInt($(this).val());
        var name = $(this).attr('name');
        var id = name.match(/\d+/)[0];
        if (value == 1) {
            $('input[name="ExperienceDetail[' + id + '].Organisation"]').val("IIT Madras");
        }
        else {
            $('input[name="ExperienceDetail[' + id + '].Organisation"]').val("");
        }
    });

    function FormDisabled() {
        $("#formSTEJuniorApp").find("input, select, textarea").each(function () {
            var idDisabled = $(this).is(":disabled");
            var id = $(this).attr('id');
            if (idDisabled == false)
                $(this).attr("disabled", "disabled");
        });
    }

    var isDisabledStatus = ["", "Open", "Note to PI", "Draft"];
    if (!isDisabledStatus.includes(Status) || isGovAgencyFund) {
        FormDisabled();
        $('#btnViewSummary').removeAttr('disabled');
        $('#btnViewStaffAllocation').removeAttr('disabled');
    }

    if(isGovAgencyFund && Status == "Open") {
        FormDisabled();
        $('#btnViewSummary').removeAttr('disabled');
        $('#btnViewStaffAllocation').removeAttr('disabled');
    }

    function getBoolean(value){
        switch(value){
            case true:
            case "true":
            case "True":
            case 1:
            case "1":
            case "on":
            case "yes":
                return true;
            default:
                return false;
        }
    }

    $('#Name,#Nameoftheguardian').keypress(function (e) {
        var regex = new RegExp("^[a-zA-Z ]+$");
        var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
        if (regex.test(str)) {
            return true;
        }
        else {
            e.preventDefault();
            return false;
        }
    });


    $('#BankName').keypress(function (e) {
        var regex = new RegExp("^[a-zA-Z ,-@@&]+$");
        var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
        if (regex.test(str)) {
            return true;
        }
        else {
            e.preventDefault();
            return false;
        }
    });

    $('input[name$=".DivisionClassObtained"]').keypress(function (e) {
        var regex = new RegExp("^[a-zA-Z ]+$");
        var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
        if (regex.test(str)) {
            return true;
        }
        else {
            e.preventDefault();
            return false;
        }
    });


    function getDateDifference(startDate, endDate) {
        var date1 = Date.parse(startDate.split('-').join('/'));
        var endat = new Date(endDate.split('-').join('/'));
        endat.setDate(endat.getDate() + 1);
        var date2 = Date.parse(endat);
        diff += date2 - date1;
    }

    function getDateFormattedDate() {
        var day = 1000 * 60 * 60 * 24;
        var years = Math.floor(diff / 31536000000);
        var months = Math.floor((diff % 31536000000) / 2628000000);
        var days = Math.floor(((diff % 31536000000) % 2628000000) / 86400000);
        return years + " Years " + months + " months " + days + " days";
    }

    $('input[name="isConsolidatePay"]').change(function(){
        $('#DesignationCode').val("");
    });

    $('input[name="EmployeeType"]').on('change', function () {
        var value = $("input[name='EmployeeType']:checked").val();
        if (value == "Old Employee") {
            $('#divOld').removeClass('dis-none');
            $('#divNew').addClass('dis-none');
            $('#NIDNumber').val('');
        }
        else {
            $('#OldEmployeeNumber').val('');
            $('#divNew').removeClass('dis-none');
            $('#divOld').addClass('dis-none');
        }
    });

    applyAutoComplete($('#OldEmployeeNumber'), $('#OldEmpId'),'@Url.Action("LoadRCTEmployeeList", "Requirement")?apptype=STE','AddOldEmployeeDetails',true);

    applyAutoComplete($('#ApplicationRefNo'), $('#ApplicationRefNo'),'@Url.Action("LoadRCTApplicationNumberList", "Requirement")?apptype=STE','AddOldEmployeeDetails',true);


    function AddOldEmployeeDetails() {
        var oldEmp = $('#OldEmployeeNumber').val();
        var apprefno = $('#ApplicationRefNo').val();
        if(oldEmp != "" || apprefno != "")
        {
            var data = {"AppRefNo" : apprefno};
            if(oldEmp != "") {
                data = {"EmpNo" : oldEmp};
                $('#ApplicationRefNo').val("");
            }
            $(".loading-bg").removeClass('dis-none');
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetOldEmployeeDetails", "Requirement")",
                data: data,
                //traditional: true,
                dataType: "json",
                success: function (result) {
                    var origin = window.location.origin;
                    if(oldEmp != "") {
                        $('#IsNew').addClass('dis-none');
                        $('#lblNewEmployee').addClass('dis-none');
                    }
                    $('#ProfessionalId').val(result.ProfessionalId);
                    $('#Name').val(result.Name);
                    $('#Nameoftheguardian').val(result.Nameoftheguardian);
                    if(result.CandidatePhoto != "")
                    {
                        $('#PersonImagePath').val(result.CandidatePhoto)
                        $('#displayImg').attr("src","/Account/ShowDocument?file=" + result.CandidatePhoto + "&filepath=RCTEmployeeImages");
                    }
                    if(result.aadharnumber!=null)
                    {
                        $('#lblAadharnumber').text(result.aadharnumber);
                        $('#aadharnumber').val(result.aadharnumber);
                        $('#aadharnumber').addClass('dis-none');
                    }
                    else
                    {
                        $('#lblAadharnumber').text('');
                        $('#aadharnumber').removeClass('dis-none');
                    }
                    if(result.PAN!=null)
                    {
                        $('#lblPANNo').text(result.PAN);
                        $('#PAN').addClass('dis-none');
                        $('#PAN').val(result.PAN);
                    }
                    else
                    {
                        $('#lblPANNo').text('');
                        $('#PAN').removeClass('dis-none');
                    }
                    $('#DateofBirth').val(result.DateofBirth);
                    if(result.DateofBirth != "")
                    {
                        $('#DateofBirth').addClass("dis-none");
                        $('#lblDateofBirth').text(result.DateofBirth);
                        calculateAge();
                        FillyearandExpDate();
                    }
                    else
                    {
                        $('#DateofBirth').removeClass("dis-none");
                        $('#lblDateofBirth').text('');
                    }
                    //$('#Age').val(result.Age);
                    $('#Sex').val(result.Gender);
                    $('#Caste').val(result.Caste);
                    $('#ContactNumber').val(result.ContactNumber);
                    $('#EmergencyContactNo').val(result.EmergencyContactno);
                    $('#Email').val(result.Email);
                    $('#PresentAddress').val(result.PresentAddress);
                    $('#isSameasPermanentAddress').val(result.isSameasPermanentAddress);
                    if(result.isSameasPermanentAddress==true)
                    {
                        $('input[name="isSameasPermanentAddress"]').prop('checked',true);
                    }
                    $('#PermanentAddress').val(result.PermanentAddress);
                    $('#BloodGroup').val(result.BloodGroup);
                    $('#BloodGroupRH').val(result.BloodGroupRH);
                    $('#Nationality').val(result.Nationality);
                    $('#PhysicallyChallenged').val(result.PhysicallyChallenged);
                    $('#RelatedIITMadras').val(result.RelatedIITMadras);
                    $('#IITMPensionerCSIRStaff').val(result.IITMPensionerCSIRStaff);
                    if(result.MsPhd == true)
                    {
                        $('#IsMsPhd').prop('checked',true);
                        $('#MsPhdType').val(result.MsPhdType);
                        $('#phdDetails').removeClass('dis-none');
                        $('#PhdDetail').val(result.PhdDetail);
                    }
                    else
                    {
                        $('#IsMsPhd').prop('checked',false);
                        $('#MsPhdType').val("");
                        $('#PhdDetail').val("");
                        $('#phdDetails').addClass('dis-none');
                        $('#PhdDetail').val(result.PhdDetail);
                    }
                    $('#BankAccountNo').val(result.BankAccountNo);
                    $('#BankName').val(result.BankName);
                    $('#IFSCCode').val(result.IFSCCode);
                    if(result.IsGateScore == true)
                    {
                        $('#isYesGateScore').prop('checked',true);
                        $('#divScore').removeClass('dis-none');
                        $('#Score').val(result.GateScore);
                    }
                    else
                    {
                        $('#divScore').addClass('dis-none');
                        $("input[name=isHaveGateScore][value=No]").prop('checked',true);
                        $('#Score').val("");
                    }

                    $.each(result.EducationDetail, function (i, item) {
                        //$('#tbodyEducation tr').not(':first').not(':last').remove();
                        if(i == 0)
                        {
                            var cln = $('#tbodyEducation tr:first');
                            var selectGroup = $(cln).find('select[name="EducationDetail[' + i + '].DisciplineId"]');
                            $.each(item.DisiplineList, function (index, itemData) {
                                $(selectGroup).append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name
                                }))
                            });
                            $(cln).find("input[name='EducationDetail.Index']").val(i);
                            $(cln).find('select[name$=".QualificationId"]').val(item.QualificationId);
                            $(selectGroup).val(item.DisciplineId);
                            $(cln).find("input[name$='.DivisionClassObtained']").val(item.DivisionClassObtained);
                            $(cln).find("input[name$='.Institution']").val(item.Institution);
                            $(cln).find("select[name$='.YearofPassing']").val(item.YearofPassing);
                            $(cln).find("select[name$='.MarkType']").val(item.MarkType);
                            $(cln).find("input[name$='.Marks']").val(item.Marks);
                            if(item.CertificateName != null)
                            {
                                $(cln).find("input[name$='.Certificate']").addClass("dis-none");
                                $(cln).find(".link1").text(item.CertificateName);
                                $(cln).find(".link1").attr("href","/Account/ShowDocument?filepath=Requirement&file=" + item.CertificatePath);
                                $(cln).find("input[name$='.CertificatePath']").val(item.CertificatePath);
                                $(cln).find("input[name$='.CertificateName']").val(item.CertificateName);
                            }
                            $(cln).find("input[name$='.Remarks']").val(item.Remarks);

                        }
                        else
                        {

                            var clnnew = $('#tbodyEducation tr:first').clone().find("input,select").val("").end();
                            $(clnnew).find("input,select").each(function () {
                                if ($(this).attr("name") != undefined)
                                    $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                var letters = /^[0-9a-zA-Z]+$/;
                                if ($(this).attr("id") != undefined)
                                    $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(clnnew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });
                            var selectGroup = $(clnnew).find('select[name="EducationDetail[' + i + '].DisciplineId"]');
                            $.each(item.DisiplineList, function (index, itemData) {
                                $(selectGroup).append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name
                                }))
                            });
                            $(clnnew).find("input[name='EducationDetail.Index']").val(i);
                            $(clnnew).find('select[name$=".QualificationId"]').val(item.QualificationId);
                            $(selectGroup).val(item.DisciplineId);
                            $(clnnew).find("input[name$='.DivisionClassObtained']").val(item.DivisionClassObtained);
                            $(clnnew).find("input[name$='.Institution']").val(item.Institution);
                            $(clnnew).find("select[name$='.YearofPassing']").val(item.YearofPassing);
                            $(clnnew).find("select[name$='.MarkType']").val(item.MarkType);
                            $(clnnew).find("input[name$='.Marks']").val(item.Marks);
                            if(item.CertificateName!=null)
                            {
                                $(clnnew).find("input[name$='.Certificate']").addClass("dis-none");
                                $(clnnew).find(".link1").text(item.CertificateName);
                                $(clnnew).find(".link1").attr("href","/Account/ShowDocument?filepath=Requirement&file=" + item.CertificatePath);
                                $(clnnew).find("input[name$='.CertificatePath']").val(item.CertificatePath);
                                $(clnnew).find("input[name$='.CertificateName']").val(item.CertificateName);
                            }
                            $(clnnew).find("input[name$='.Remarks']").val(item.Remarks);
                            $(clnnew).insertBefore("#tbodyEducation #ScoreDetails");

                        }
                    });
                    $.each(result.ExperienceDetail, function (i, item) {
                        //$('#tbodyExperience tr').not(':first').remove();
                        if(i == 0)
                        {

                            var cln = $('#tbodyExperience tr:first');
                            $(cln).find("input[name='ExperienceDetail.Index']").val(i);
                            $(cln).find('select[name$=".ExperienceTypeId"]').val(item.ExperienceTypeId);
                            $(cln).find("input[name$='.Organisation']").val(item.Organisation);
                            $(cln).find("input[name$='.DesignationautoComplete']").val(item.DesignationautoComplete);
                            $(cln).find("input[name$='.DesignationListId']").val(item.DesignationListId);
                            $(cln).find("input[name$='.FromDate']").val(item.strFromDate);
                            $(cln).find("input[name$='.ToDate']").val(item.strToDate);
                            $(cln).find("input[name$='.SalaryDrawn']").val(item.SalaryDrawn);
                            if(item.ExperienceFileName!=null)
                            {
                                $(cln).find("input[name$='.ExperienceFile']").addClass("dis-none");
                                $(cln).find(".link2").text(item.ExperienceFileName);
                                $(cln).find(".link2").attr("href","/Account/ShowDocument?filepath=Requirement&file=" + item.ExperienceFilePath);
                                $(cln).find("input[name$='.ExperienceFilePath']").val(item.ExperienceFilePath);
                                $(cln).find("input[name$='.ExperienceFileName']").val(item.ExperienceFileName);
                            }

                            $(cln).find("input[name$='.Remarks']").val(item.Remarks);

                        }
                        else
                        {

                            var clnnew = $('#tbodyExperience tr:first').clone().find("select,input").val("").end();
                            $(clnnew).find('b').parent('a').remove();
                            $(clnnew).find('b').remove();
                            $(clnnew).find("input, select").each(function () {
                                $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                if ($(this).attr("id"))
                                    $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(clnnew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });
                            $(clnnew).find("input[name='ExperienceDetail.Index']").val(i);
                            $(clnnew).find('select[name$=".ExperienceTypeId"]').val(item.ExperienceTypeId);
                            $(clnnew).find("input[name$='.Organisation']").val(item.Organisation);
                            $(clnnew).find("input[name$='.DesignationautoComplete']").val(item.DesignationautoComplete);
                            $(clnnew).find("input[name$='.DesignationListId']").val(item.DesignationListId);
                            $(clnnew).find("input[name$='.FromDate']").val(item.strFromDate);
                            $(clnnew).find("input[name$='.ToDate']").val(item.strToDate);
                            $(clnnew).find("input[name$='.SalaryDrawn']").val(item.SalaryDrawn);
                            if(item.ExperienceFileName!=null)
                            {
                                $(clnnew).find("input[name$='.ExperienceFile']").addClass("dis-none");
                                $(clnnew).find(".link2").text(item.ExperienceFileName);
                                $(clnnew).find(".link2").attr("href","/Account/ShowDocument?filepath=Requirement&file=" + item.ExperienceFilePath);
                                $(clnnew).find("input[name$='.ExperienceFilePath']").val(item.ExperienceFilePath);
                                $(clnnew).find("input[name$='.ExperienceFileName']").val(item.ExperienceFileName);
                            }
                            $(clnnew).find("input[name$='.Remarks']").val(item.Remarks);
                            $('#tbodyExperience').append(clnnew);

                            var hdEle = $("input[name='ExperienceDetail[" + i + "].DesignationListId']");
                            var acEle = $("input[name='ExperienceDetail[" + i + "].DesignationautoComplete']");
                            $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
                                dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-35:+0'
                            });
                            applyAutoComplete(acEle, hdEle, '@Url.Action("LoadDesignationNameList", "Requirement")');
                        }
                    });
                },
                error: function (err) {
                    console.log("error : " + err);
                }

            });
            $(".loading-bg").addClass('dis-none');
        }
    }

    function CheckEmployeeadhar() {
        var adhar = $('#aadharnumber').val() || null;
        var data = {};		
        if(adhar != null && adhar.length == 12)
        {
		    var apprefNo = null;
            if($('#ApplicationNo').val() != "")
                apprefNo = $('#ApplicationNo').val()
			data = { adharno : adhar , apptype : "STE", appref : apprefNo};
            if($('#OldEmployeeNumber').val() != "")
            {
                data = { adharno : adhar , oldId : $('#OldEmployeeNumber').val() , apptype : "STE", appref : apprefNo };
            }
            $.ajax({
                url: '@Url.Action("CheckPreviousEmployeeAdhar", "Requirement")',
                type: "Get",
                dataType: "JSON",
                data: data,
                success: function (result) {
                    if(result!="")
                    {
                        $('#alert').html("This Aadhaar Number is linked to  " +result);
                        $('#Validation').modal('toggle');
                        $('#aadharnumber').val('');
                        $('#aadharnumber').focus();
                    }
                }
            });
        }
    }
    function CheckEmployeepanno() {
        var pnno = $('#PAN').val() || null;
		var data = {};
        if(pnno != null && pnno.length == 10) {
		    var apprefNo = null;
            if($('#ApplicationNo').val() != "")
                apprefNo = $('#ApplicationNo').val()
			data = { Panno : pnno , apptype : "STE" , appref : apprefNo};
            if($('#OldEmployeeNumber').val() != "")
            {
                data = { Panno : pnno , oldId : $('#OldEmployeeNumber').val() , apptype : "STE" , appref : apprefNo};
            }
            $.ajax({
                url: '@Url.Action("CheckPreviousEmployeePan", "Requirement")',
                type: "Get",
                dataType: "JSON",
                data: data,
                success: function (result) {
                    if(result!="")
                    {
                        $('#alert').html("This Pan number is linked to  " +result);
                        $('#Validation').modal('toggle');
                        $('#PAN').val('');
                        $('#PAN').focus();
                    }
                }
            });
        }
    }


    function validateExperiencedetail() {
        var hasErr = true;
        var cln = $('#tbodyExperience');
        $(cln).find('select[name $=".ExperienceTypeId"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".Organisation"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".DesignationautoComplete"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".FromDate"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".ToDate"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });
        $(cln).find('input[name $=".SalaryDrawn"]').each(function () {
            var value = $(this).val() || "";
            if (value != "")
                hasErr = false;
        });

        if(!hasErr)
        {
            $(cln).find('select[name $=".ExperienceTypeId"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".Organisation"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".DesignationautoComplete"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".FromDate"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".ToDate"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
            $(cln).find('input[name $=".SalaryDrawn"]').each(function () {
                var value = $(this).val() || "";
                if (value == "")
                    hasErr = true;
            });
        }
        else
            hasErr = false;

        return hasErr;
    };


    $(document).on('change', 'select[name="ProfessionalId"]', function () {
        var value = parseInt($(this).val()) || 0;
        var qualification = [];
        if (value == 4) {
            $(document).find('select[name $=".QualificationId"]').each(function () {
                var value = parseFloat($(this).val()) || 0;
                if (value != 0) {
                    qualification.push(value);
                }
            });
            if (qualification.length > 0) {
                if(arrayContains(3,qualification) == false) {
                    $('select[name="ProfessionalId"]').val('');
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: "Please select Doctorate degree for Salutation Dr.",
                        type: 'red'
                    });
                    return;
                }
            }

        }
    });

    function arrayContains(needle, arrhaystack) {
        return (arrhaystack.indexOf(needle) > -1);
    }


    $(document).on('click', 'a[class="rct-del-doc cls-a-wt"]', function () {
        if (STEID > 0) {
            var $this = $(this);
            var Filepath = $this.attr("value");
            $(".loading-bg").removeClass('dis-none');
            $.getJSON("@Url.Action("DeleteDocument", "Requirement")", { Appid : STEID, Apptype : "STE", Doctype : "PI Justification Document", File : Filepath },
            function (result) {
                if(result == true)
                {
                    $this.parent('h4').remove();
                    $.alert({
                        title: 'Success Alert!',
                        content: "PI Justification document deleted.",
                        type: 'green'
                    });
                    $(".loading-bg").addClass('dis-none');
                }
                else
                {
                    $.alert({
                        icon: 'ion-close-circled',
                        title: 'Error Alert!',
                        content: "PI Justification document not deleted.",
                        type: 'red'
                    });
                    $(".loading-bg").addClass('dis-none');
                }
            });
        }
    });
</script>
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>

