@model IOAS.Models.StatutoryModel
@{
    ViewBag.Title = "StatutoryMaster";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h4><b>Statutory Master Entry</b></h4>

    </div>
</div>
@using (Html.BeginForm("StatutoryMaster", "RequirementMaster", FormMethod.Post, new { @class = "", role = "form", @id = "formSM", enctype = "multipart/form-data" }))

{
<div class="row cts-mn-dts">
    <div class="page-wrapper mt30">
        <div>
            <div class="col-md-12">

                <div class="row">
                    <div class="col-md-12">

                        <div class="bl-lg-panel-box pb-null">
                            <div class="cmn-panel-box">
                                <div class="row ">
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">PF-Employee Percentage</label>
                                            @Html.TextBoxFor(m => m.PFEmployeePercentage, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.PFEmployeePercentage)</div>
                                            @Html.HiddenFor(m=>m.StatutoryId)
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">PF-Employer Percentage </label>
                                            @Html.TextBoxFor(m => m.PFEmployerPercentage, new { @class = "form-control" , @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.PFEmployerPercentage)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">PF-Slab</label>
                                            @Html.TextBoxFor(m => m.PFEmployeeAmount, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.PFEmployeeAmount)</div>
                                        </div>
                                    </div>



                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">ESIC- Employee Percentage </label>
                                            @Html.TextBoxFor(m => m.ESICEmployeePercentage, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.ESICEmployeePercentage)</div>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">ESIC- Employer Percentage </label> <br>
                                            @Html.TextBoxFor(m => m.ESICEmployerPercentage, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.ESICEmployerPercentage)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">ESIC- General Slab </label> <br>
                                            @Html.TextBoxFor(m => m.ESICGeneralAmount, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.ESICGeneralAmount)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">ESIC-P/H Slab </label> <br>
                                            @Html.TextBoxFor(m => m.ESICPhysicalAmount, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.ESICPhysicalAmount)</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row ">
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">LWF-Employee Contribution</label>
                                            @Html.TextBoxFor(m => m.LWFEmployeeContribution, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.LWFEmployeeContribution)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">LWF-Employer Contribution </label>
                                           @Html.TextBoxFor(m => m.LWFEmployerContribution, new { @class = "form-control", @onkeypress = "return isNumberKey(event)" })
                                            <div>@Html.ValidationMessageFor(m => m.LWFEmployerContribution)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group custom-form-group">
                                            <label class="required">Value Date </label>
                                          @Html.EditorFor(m => m.ValueDate, new { @class = "form-control" })
                                            <div>@Html.ValidationMessageFor(m => m.ValueDate)</div>
                                        </div>
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12 mb-lg text-center">
        <input type="submit" class="btn btn-primary" value="Submit" name="Button" id="btnStMas" />
        <input type="button" onclick="window.location.href='@Url.Action("StatutoryMasterList", "RequirementMaster")';" class="btn btn-default" value="Close" id="btnclose" />
    </div>
</div>
}
<script>
    $('#ValueDate').datepicker({ minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    $('#PFEmployeePercentage,#PFEmployerPercentage,#PFEmployeeAmount,#ESICEmployeePercentage,#ESICEmployerPercentage,#ESICGeneralAmount,#ESICPhysicalAmount,#LWFEmployeeContribution,#LWFEmployerContribution').keypress(function (e) {

        var $this = $(this);
        if ((event.which != 46 || $this.val().indexOf('.') != -1) &&
           ((event.which < 48 || event.which > 57) &&
           (event.which != 0 && event.which != 8))) {
            event.preventDefault();
        }

    });
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>