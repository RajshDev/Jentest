@model IOAS.Models.HeadCreditModel
@{
    ViewBag.Title = "Head Credit";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("HeadCredit", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formHC", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Head Credit</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">

            <div class="col-md-3 col-md-offset-9">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.HeadCreditNumber)</h4>
                        @Html.HiddenFor(m => m.HeadCreditId)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                </ul>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Category</label>
                                                    @Html.DropDownListFor(m => m.Category, new SelectList(ViewBag.CategoryList, "id", "name"), "Select any", new { @class = "form-control", @id = "categorydropdown" })
                                                    @Html.ValidationMessageFor(m => m.Category)
                                                </div>
                                            </div>
                                            <div class="col-md-6" id="modediv">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Mode Of Credit</label>
                                                    @Html.DropDownListFor(m => m.ModeOfCredit, new SelectList(ViewBag.ModeOfReceiptList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.ModeOfCredit)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Ref. Number</label>
                                                    @Html.TextBoxFor(m => m.RefNo, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.RefNo)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Ref. Date</label>
                                                    @Html.EditorFor(m => m.RefDate, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.RefDate)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @rows = "3" })
                                                    @Html.ValidationMessageFor(m => m.Remarks)

                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Attachement</label>
                                                    <input type="file" id="file" name="file">
                                                    @Html.ValidationMessage("Document")
                                                    <a href="@Url.Action("ShowDocument","Project",new { file = Model.DocumentName, filepath = Model.DocumentPath })" target="_blank">@Model.DocumentActualName</a>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div id="divProj" class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Project</label>
                                                    @Html.TextBoxFor(m => m.Project, new { @class = "form-control" })
                                                    @Html.TextBoxFor(m => m.ProjectId, new { @class = "form-control dis-none" })
                                                    @Html.ValidationMessageFor(m => m.ProjectId)
                                                </div>
                                            </div>
                                            @*<div class="col-md-6">
                                                <label class="required">Bank</label>
                                                @Html.DropDownListFor(m => m.BankId, new SelectList(ViewBag.BankHeadList, "id", "name"), "Select any", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.BankId)
                                                @Html.HiddenFor(m => m.BankHeadId)
                                            </div>*@
                                        </div>
                                        <div class="row mb-lg mt-lg gray-bg">
                                            <div class="col-md-12 ">
                                                <table class="table table-bordered mb-null">
                                                    <thead>
                                                        <tr>
                                                            <th>Head</th>
                                                            <th>Amount</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="tbodyCr">
                                                        @if (Model.CrDetail != null && Model.CrDetail.Count() > 0)
                                                        {
                                                            var count = 0;
                                                            foreach (var item in Model.CrDetail)
                                                            {
                                                                var head = "CrDetail[" + count + "].BudgetHeadId";
                                                                var amount = "CrDetail[" + count + "].Amount";
                                                                <tr>
                                                                    <td>
                                                                        @Html.DropDownList(@head, new SelectList(ViewBag.BudgetHeadId, "id", "name", item.BudgetHeadId), "Select any", new { @class = "form-control required", @onchange = "BudgetHeadChange(this);" })
                                                                        @Html.ValidationMessage(@head)
                                                                        @Html.Hidden("CrDetail.Index", @count)
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBox(@amount, item.Amount, new { @class = "form-control required", @onblur = "CalculateTotal()", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                        @Html.ValidationMessage(@amount)
                                                                    </td>
                                                                    <td>
                                                                        <a href="javascript:void(0)" class="btn-sm btn btn-danger removeCrDetail"><i class="ion-android-close"></i></a>
                                                                    </td>
                                                                </tr>
                                                                count++;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            <tr>
                                                                <td>
                                                                    @Html.DropDownList("CrDetail[0].BudgetHeadId", new SelectList(ViewBag.BudgetHeadId, "id", "name"), "Select any", new { @class = "form-control required", @onchange = "BudgetHeadChange(this);" })
                                                                    @Html.ValidationMessage("CrDetail[0].BudgetHeadId")
                                                                    @Html.Hidden("CrDetail.Index", 0)
                                                                </td>
                                                                <td>
                                                                    @Html.TextBox("CrDetail[0].Amount", "", new { @class = "form-control required", @onblur = "CalculateTotal()", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                    @Html.ValidationMessage("CrDetail[0].Amount")
                                                                </td>
                                                                <td>
                                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger removeCrDetail"><i class="ion-android-close"></i></a>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                                <div class="row p-b-sm">
                                                    <div class="col-md-12 text-center mt-md">
                                                        <button type="button" id="btnAddCrDetail" class="btn-primary btn">Add New</button>

                                                    </div>
                                                </div>

                                            </div>
                                            <div class="row">                                                
                                                <div class="col-md-offset-9 col-md-3 mt-md">
                                                    <div class="form-group custom-form-group ">
                                                        <label>Total Credit <span class="cr">(Cr)</span> :</label>
                                                        <input value="" name="HeadCreditAmount" id="ttlCr" class="form-control" readonly="readonly" type="text">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="">Bill Ref. Number</label>
                                                    @Html.TextBoxFor(m => m.BillRefNoAC, new { @class = "form-control" })
                                                    @Html.TextBoxFor(m => m.BillRefNo, new { @class = "form-control dis-none" })
                                                    @Html.ValidationMessageFor(m => m.BillRefNo)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row mb-lg mt-lg gray-bg">
                                            <div class="col-md-12 ">
                                                <table class="table table-bordered mb-null">
                                                    <thead>
                                                        <tr>
                                                            <th>Invoice No.</th>
                                                            <th>Reversed Inv. Amount</th>
                                                            <th>Reversed Inv. GST Amount</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="tbodyInv">
                                                        @if (Model.InvDetail != null && Model.InvDetail.Count() > 0)
                                                        {
                                                            var count = 0;
                                                            foreach (var item in Model.InvDetail)
                                                            {
                                                                var inv = "InvDetail[" + count + "].InvoiceNo";
                                                                var invAmount = "InvDetail[" + count + "].ReversedInvoiceAmt";
                                                                var gstAmount = "InvDetail[" + count + "].ReversedGSTAmt";
                                                                <tr>
                                                                    <td>
                                                                        @Html.DropDownList(inv, new SelectList(ViewBag.InvList, "name", "name", item.InvoiceNo), "Select any", new { @class = "form-control" })
                                                                        @*@Html.TextBox(@inv, item.InvoiceNo, new { @class = "form-control" })*@
                                                                        @Html.ValidationMessage(@inv)
                                                                        @Html.Hidden("InvDetail.Index", @count)
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBox(@invAmount, item.ReversedInvoiceAmt, new
                                                                   {
                                                                       @class = "form-control",
                                                                       @onkeypress = "return ValidateDecimalOnly(event)"
                                                                   })
                                                                        @Html.ValidationMessage(@invAmount)
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBox(@gstAmount, item.ReversedGSTAmt, new
                                                                   {
                                                                       @class = "form-control",
                                                                       @onkeypress = "return ValidateDecimalOnly(event)"
                                                                   })
                                                                        @Html.ValidationMessage(@invAmount)
                                                                    </td>
                                                                    <td>
                                                                        <a href="javascript:void(0)" class="btn-sm btn btn-danger removeInvDetail"><i class="ion-android-close"></i></a>
                                                                    </td>
                                                                </tr>
                                                                count++;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            <tr>
                                                                <td>
                                                                    @Html.DropDownList("InvDetail[0].InvoiceNo", new SelectList(ViewBag.InvList, "name", "name"), "Select any", new { @class = "form-control" })
                                                                    @*@Html.TextBox("InvDetail[0].InvoiceNo", "", new { @class = "form-control" })*@
                                                                    @Html.ValidationMessage("InvDetail[0].InvoiceNo")
                                                                    @Html.Hidden("InvDetail.Index", 0)
                                                                </td>
                                                                <td>
                                                                    @Html.TextBox("InvDetail[0].ReversedInvoiceAmt", "", new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                    @Html.ValidationMessage("InvDetail[0].ReversedInvoiceAmt")
                                                                </td>
                                                                <td>
                                                                    @Html.TextBox("InvDetail[0].ReversedGSTAmt", "", new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                    @Html.ValidationMessage("InvDetail[0].ReversedGSTAmt")
                                                                </td>
                                                                <td>
                                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger removeInvDetail"><i class="ion-android-close"></i></a>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                                <div class="row p-b-sm">
                                                    <div class="col-md-12 text-center mt-md">
                                                        <button type="button" id="btnAddInvDetail" class="btn-primary btn">Add New</button>

                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bank</label>
                                                    @Html.DropDownListFor(m => m.Bank, new SelectList(ViewBag.BankList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.Bank)
                                                    @Html.HiddenFor(m => m.BankHeadId)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Amount</label>
                                                    @Html.TextBoxFor(m => m.BankAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateTxTotal()", @autocomplete = "off" })
                                                    @Html.ValidationMessageFor(m => m.BankAmount)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="gray-bg br-rd">
                                            <h3 class="mt-null col-md-6"></h3>
                                            <div class="col-md-6 text-right mb-md">
                                                <a href="javascript:void(0)" id="btnAddExpense" class="btn btn-primary">Add New</a>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="m-b-sm">
                                                        <table class="table table-bordered">
                                                            <thead>
                                                                <tr>
                                                                    <th>Account Group</th>
                                                                    <th>Account Head</th>
                                                                    <th>Transaction Type</th>
                                                                    <th style="width:200px;">Amount</th>
                                                                    <th>Category</th>
                                                                    <th>Name</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="tbodyExpenseList">
                                                                @if (Model.ExpenseDetail != null && Model.ExpenseDetail.Count() > 0)
                                                                {
                                                                    var count = 0;
                                                                    foreach (var item in Model.ExpenseDetail)
                                                                    {
                                                                        var accountGroup = "ExpenseDetail[" + count + "].AccountGroupId";
                                                                        var accountHead = "ExpenseDetail[" + count + "].AccountHeadId";
                                                                        var expDetailId = "ExpenseDetail[" + count + "].BillExpenseDetailId";
                                                                        var transType = "ExpenseDetail[" + count + "].TransactionType";
                                                                        var amt = "ExpenseDetail[" + count + "].Amount";
                                                                        var catId = "ExpenseDetail[" + count + "].CategoryId";
                                                                        var uId = "ExpenseDetail[" + count + "].UserId";
                                                                        var name = "ExpenseDetail[" + count + "].Name";
                                                                        var autoComp = "ExpenseDetail[" + count + "].autoComplete";
                                                                        <tr>
                                                                            <td>
                                                                                @Html.DropDownList(@accountGroup, new SelectList(ViewBag.AccountGroupList, "id", "name", item.AccountGroupId), new { @class = "form-control required" })
                                                                                @Html.ValidationMessage(@accountGroup)
                                                                                @Html.Hidden("ExpenseDetail.Index", @count)
                                                                                @Html.Hidden(@expDetailId, item.BillExpenseDetailId)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@accountHead, new SelectList(item.AccountHeadList, "id", "name", item.AccountHeadId), new { @class = "form-control required" })
                                                                                @Html.ValidationMessage(@accountHead)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@transType, new SelectList(ViewBag.TransactionTypeList, "name", "name", item.TransactionType), new { @class = "form-control required", @onchange = "CalculateTxTotal()" })
                                                                                @Html.ValidationMessage(@transType)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@amt, item.Amount, new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateTxTotal()", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@amt)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@catId, new SelectList(ViewBag.PayerCategoryList, "id", "name", item.CategoryId), "Select any", new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@catId)
                                                                            </td>
                                                                            <td class="tdDDLUser">
                                                                                @Html.TextBox(@autoComp, item.Name, new { @class = "form-control" })
                                                                                @Html.TextBox(@uId, item.UserId, new { @class = "form-control dis-none" })
                                                                                @Html.ValidationMessage(@uId)
                                                                            </td>
                                                                            <td class="tdTxtName dis-none">
                                                                                @Html.TextBox(@name, item.Name, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@name)
                                                                            </td>
                                                                            <td>
                                                                                <a href="javascript:void(0)" class="removeExpense btn-circle"><i class="ion-close-round"></i></a>
                                                                            </td>
                                                                        </tr>
                                                                        count++;

                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <tr>
                                                                        <td>
                                                                            @Html.DropDownList("ExpenseDetail[0].AccountGroupId", new SelectList(ViewBag.AccountGroupList, "id", "name"), "Select any", new { @class = "form-control required" })
                                                                            @Html.ValidationMessage("ExpenseDetail[0].AccountGroupId")
                                                                            @Html.Hidden("ExpenseDetail.Index", "0")
                                                                            @Html.Hidden("ExpenseDetail[0].BillExpenseDetailId")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("ExpenseDetail[0].AccountHeadId", new SelectList(ViewBag.AccountHeadList, "id", "name"), "Select any", new { @class = "form-control required" })
                                                                            @Html.ValidationMessage("ExpenseDetail[0].AccountHeadId")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("ExpenseDetail[0].TransactionType", new SelectList(ViewBag.TransactionTypeList, "name", "name"), "Select any", new { @class = "form-control required", @onchange = "CalculateTxTotal()" })
                                                                            @Html.ValidationMessage("ExpenseDetail[0].TransactionType")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("ExpenseDetail[0].Amount", "", new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateTxTotal()", @autocomplete = "off" })
                                                                            @Html.ValidationMessage("ExpenseDetail[0].Amount")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("ExpenseDetail[0].CategoryId", new SelectList(ViewBag.PayerCategoryList, "id", "name"), "Select any", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("ExpenseDetail[0].CategoryId")
                                                                        </td>
                                                                        <td class="tdDDLUser">
                                                                            @Html.TextBox("ExpenseDetail[0].autoComplete", "", new { @class = "form-control" })
                                                                            @Html.TextBox("ExpenseDetail[0].UserId", "", new { @class = "form-control dis-none" })
                                                                            @Html.ValidationMessage("ExpenseDetail[0].UserId")
                                                                        </td>
                                                                        <td class="tdTxtName dis-none">
                                                                            @Html.TextBox("ExpenseDetail[0].Name", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("ExpenseDetail[0].Name")
                                                                        </td>
                                                                        <td>
                                                                            <a href="javascript:void(0)" class="removeExpense btn-circle"><i class="ion-close-round"></i></a>
                                                                        </td>
                                                                    </tr>
                                                                }


                                                            </tbody>
                                                        </table>

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-3  col-md-offset-6">
                                                    <div class="form-group custom-form-group ">
                                                        <label>Total Credit <span class="cr">(Cr)</span> :</label>
                                                        @Html.TextBoxFor(m => m.CreditAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                                                    </div>
                                                </div>
                                                <div class="col-md-3 ">
                                                    <div class="form-group custom-form-group ">
                                                        <label>Total Debit <span class="dr">(Dr)</span> :</label>
                                                        @Html.TextBoxFor(m => m.DebitAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        @*<div class="gray-bg br-rd">
                                                <h3 class="mt-null">Taxes</h3>
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="m-b-sm">
                                                            <table class="table table-bordered">
                                                                <thead>
                                                                    <tr>
                                                                        <th>Group</th>
                                                                        <th>Account Head</th>
                                                                        <th>Amount</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody id="tbodyDeductionList">
                                                                    @if (Model.DeductionDetail != null && Model.DeductionDetail.Count() > 0)
                                                                    {
                                                                        var count = 0;
                                                                        foreach (var item in Model.DeductionDetail)
                                                                        {
                                                                            var amt = "DeductionDetail[" + count + "].Amount";
                                                                            var groupId = "DeductionDetail[" + count + "].AccountGroupId";
                                                                            var headId = "DeductionDetail[" + count + "].DeductionHeadId";
                                                                            var deductDetailId = "DeductionDetail[" + count + "].BillDeductionDetailId";
                                                                            var deductionHead = "DeductionDetail[" + count + "].DeductionHead";
                                                                            var accountGroup = "DeductionDetail[" + count + "].AccountGroup";
                                                                    <tr>
                                                                        <td>@item.AccountGroup</td>
                                                                        <td>@item.DeductionHead</td>
                                                                        <td>
                                                                            @Html.TextBox(@amt, item.Amount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateTxTotal()", @autocomplete = "off" })
                                                                            @Html.Hidden(@groupId, item.AccountGroupId)
                                                                            @Html.Hidden(@headId, item.DeductionHeadId)
                                                                            @Html.Hidden(@deductDetailId, item.BillDeductionDetailId)
                                                                            @Html.Hidden(@deductionHead, item.DeductionHead)
                                                                            @Html.Hidden(@accountGroup, item.AccountGroup)
                                                                        </td>
                                                                    </tr>
                                                                            count++;

                                                                        }
                                                                    }
                                                                </tbody>
                                                            </table>

                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-3  col-md-offset-6">
                                                        <div class="form-group custom-form-group ">
                                                            <label>Total Credit <span class="cr">(Cr)</span> :</label>
                                                            @Html.TextBoxFor(m => m.CreditAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3 ">
                                                        <div class="form-group custom-form-group ">
                                                            <label>Total Debit <span class="dr">(Dr)</span> :</label>
                                                            @Html.TextBoxFor(m => m.DebitAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row text-center mb-lg">
                                                    <button type="submit" id="btnSave" class="btn btn-primary">Submit</button>
                                                    <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action("OtherReceiptList", "CoreAccounts")';">Close</button>
                                                </div>
                                            </div>*@
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                        </div>
                    </div>
                </div>
                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("HeadCreditList", "CoreAccounts")';">Close</button>
                </div>
            </div>
        </div>
    </div>


}

<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#srchFromDate, #srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        $('#RefDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy' });
        //  applyAutoComplete($('#Project'), $('#ProjectId'), "@Url.Action("LoadProjectList", "CoreAccounts")");
        applyAutoComplete($('#Project'), $('#ProjectId'), '@Url.Action("LoadProjectNumber","CoreAccounts")');
        applyAutoComplete($('#BillRefNoAC'), $('#BillRefNo'), '@Url.Action("LoadRefernceNumber", "CoreAccounts")', 'loadInvNumber', true, true);

        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }


        CalculateTxTotal();
        CalculateTotal();
        $('#tbodyCr tr').each(function (idx, trval) {
            FirAccHead = ($(this).find('select[name$=".BudgetHeadId"]').val());           
            GetFreezeFirstValue(FirAccHead);
        });
        GetFreezeFirstValue();

        

        var BankId = $('#BankId :selected').val();

        if (BankId != '')
        {                         
            $.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankId },
        function (locationdata) {
            var select = $("#srchProjectNumber");
            select.empty();

            $.each(locationdata, function (index, itemData) {

                select.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name

                }));
            });
            select.selectpicker('refresh');
        });

        }
    });

    $(document).on('change', '#tbodyExpenseList select[name$=".CategoryId"]', function () {
        paymentCategoryChange($(this));
    });
    $('#tbodyExpenseList').find('select[name$=".CategoryId"]').each(function () {
        paymentCategoryChange($(this), 'U');
    });
    function loadInvNumber(){
        var refNo = $('#BillRefNo').val();
        if (refNo != '') {
            $.getJSON("@Url.Action("LoadInvoiceNumber", "CoreAccounts")", { "refNo": refNo },
            function (locationdata) {
                $('#tbodyInv select[name$=".InvoiceNo"]').each(function (i, select) {
                    $(select).empty();
                    $(select).append($('<option/>', {
                        value: "",
                        text: "Select any",
                    }));
                    $.each(locationdata, function (index, itemData) {
                        $(select).append($('<option/>', {
                            value: itemData.name,
                            text: itemData.name,
                        }));
                    });
                });
            });
        }
    }
    @*function ProjectSummary() {
        $('.loading-bg').removeClass('dis-none');
        var projectId = $("#ProjectId").val();
        if (projectId != "" || projectId != 0) {
            $.getJSON("@Url.Action("LoadProjectDetails", "Account")", { ProjectId: projectId },
        function (result) {
            if (result.projectData.ProjectNo != null) {
                $("#Receipt").text(result.projectData.TotalGrantReceived);
            }
        });
        }
        $('.loading-bg').addClass('dis-none');
    }*@
    function CalculateTxTotal() {
        var ttlDrVal = parseFloat($('#BankAmount').val()) || 0;
        var ttlExpVal = 0;
        $('#tbodyExpenseList select[name$=".TransactionType"]').each(function (i, rowEle) {
            if ($(this).val() == 'Credit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val()) || 0;
                if (!isNaN(parseVal)) {

                    ttlExpVal = ttlExpVal + parseVal;
                }
            } else if ($(this).val() == 'Debit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val()) || 0;
                if (!isNaN(parseVal)) {
                    ttlDrVal = ttlDrVal + parseVal;

                }
            }
        });
        var deductionAmt = 0;
        //$('#tbodyDeductionList input[name$=".Amount"]').each(function (i, rowEle) {
        //    var parseVal = parseFloat($(this).val()) || 0;
        //    deductionAmt += parseVal;
        //    if (!isNaN(parseVal))
        //        ttlExpVal = ttlExpVal + parseVal;
        //});

        $('#DebitAmount').val(ttlDrVal.toFixed(2));
        $('#CreditAmount').val(ttlExpVal.toFixed(2));
    }
    function CalculateTotal() {
        var ttlCrVal = 0;
        $('#tbodyCr input[name$=".Amount"]').each(function (i, rowEle) {
            var parseVal = parseFloat($(this).val()) || 0;
            ttlCrVal = ttlCrVal + parseVal;
            GetFreezeValueData();
        });
        $('#ttlCr').val(ttlCrVal);
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var bankDrVal = parseFloat($('#BankAmount').val()) || 0;
        var hdCrAmt = parseFloat($('#ttlCr').val()) || 0;
        var ttlCrAmt = parseFloat($('#CreditAmount').val()) || 0; 0
        var ttlDrAmt = parseFloat($('#DebitAmount').val()) || 0;
        if (ttlCrAmt != ttlDrAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        //if (hdCrAmt != ttlDrAmt) {
        //    msg = 'Not a valid entry. Head credit value and debit value are not equal.';
        //}
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
            hdList.push($(val).val());
        });
        hdList.sort();
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }

    function formSave() {
        var validationMsg = ValidateCommitment();
        if (validationMsg != 'valid') {
            $("#alert").text(validationMsg);
            $('#Validation').modal('show');
            return false;
        }

        var isValid = $('#formHC').valid();
        if (!isValid)
            return false;
        if (isValid) {
            $('#formHC').submit(function () {
                var id = $(this).attr('Id');
                $('button[type="submit"],input[type="submit"],#nextBtn,#btnSave').attr('disabled', 'true');
            });
            $('#formHC').submit();
        }
    }
    $('#formHC').submit(function () {
        $('.loading-bg').removeClass('dis-none');
    });
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
        var bankDrVal = parseFloat($('#BankAmount').val()) || 0;
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (commitmentAmt >0 && bankDrVal != commitmentAmt) {
            msg = 'There is a mismatch between the credit value and allocated commitment value. Please update the value to continue.';
        }
        return msg;
    }
    $('input[name$="Amount"]').on("copy cut paste drop", function () {
        return false;
    });

    $(document).on('change', 'select[name$=".AccountGroupId"]', function () {
        var groupId = $(this).val();
        var ele = $(this).closest('tr');
        var select = ele.find("select[name$='.AccountHeadId']");
        select.empty();
        select.append($('<option/>', {
            value: "",
            text: "Select any",
        }));
        if (groupId != '') {
            $.getJSON("@Url.Action("GetAccountHead", "CoreAccounts")", { "accountGroupId": groupId, "isBank": false },
             function (locationdata) {
                 $.each(locationdata, function (index, itemData) {
                     select.append($('<option/>', {
                         value: itemData.id,
                         text: itemData.name,
                     }));
                 });
             });
        }
    });
    $('#btnAddExpense').click(function () {
        var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
        var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name$='.autoComplete'],input[name$='.UserId'],input[name$='.Name']").removeClass('required');
        $(cln).find("input[name='ExpenseDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });

        var selectHead = $(cln).find("select[name$='.AccountHeadId']");
        selectHead.empty();
        selectHead.append($('<option/>', {
            value: "",
            text: "Select any",
        }));
        $('#tbodyExpenseList').append(cln);
    });
    $(document).on('click', 'a.removeExpense', function () {
        if ($('#tbodyExpenseList tr').length != 1) {
            $(this).closest('tr').remove();
            CalculateTxTotal();
        }
    });
    $(document).on('click', 'a.removeInvDetail', function () {
        if ($('#tbodyInv tr').length != 1) {
            $(this).closest('tr').remove();
        }
    });

    //$(document).on('change', '#categorydropdown', function () {
    //    var ttlExpVal = 0; var ttlDrVal = 0;
    //    $('#BankAmount').val(0);
    //    $('#DebitAmount').val(0);
    //    $('#CreditAmount').val(0);
    //    if ($('#categorydropdown').val() == "15") {
    //        $('#modediv').addClass('dis-none');
    //    } else {
    //        $('#modediv').removeClass('dis-none');
    //    }
    //    if ($('#categorydropdown').val() == "1") {
    //        $('#divProj').addClass('dis-none');

    //    } else {
    //        $('#divProj').removeClass('dis-none');
    //    }
    //});
    $(document).on('click', 'a.removeCrDetail', function () {
        if ($('#tbodyCr tr').length != 1) {
            $(this).closest('tr').remove();
            CalculateTotal();
            GetFreezeValueData();
        }
    });
    $('#btnAddInvDetail').click(function () {
        var cln = $('#tbodyInv tr:first').clone().find("select,input").val("").end();
        var index = $('#tbodyInv tr:last').find("input[name='InvDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='InvDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $('#tbodyInv').append(cln);
    });
    $('#btnAddCrDetail').click(function () {
        var cln = $('#tbodyCr tr:first').clone().find("select,input").val("").end();
        var index = $('#tbodyCr tr:last').find("input[name='CrDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='CrDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
            $(this).attr("Amount",$(this).removeAttr('readonly'));
            //$('input[name$="Amount"]').removeAttr('readonly');

        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $('#tbodyCr').append(cln);
    });

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var validationMsg = ValidateTransaction()

           
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            var cate = $('#PaymentCategory').val();
            if (content == '') {
                searchCommitment();
            }

            $('#tbodyCr tr').each(function (idx, trval) {
                AccHead = ($(this).find('select[name$=".BudgetHeadId"]').val());
                console.log(AccHead);
                GetFreezeValueData(AccHead)
                GetFreezeFirstValue(AccHead);
            });
            removeCommitmentValidation();
        }
        $(stepElements).each(function (idx, ele) {
            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();
                if (!isValid) { hadError = true; }
            }
        });
        return !hadError; // return the valid status

    }

    $("#Project").change(function () {
        var ProjId = $("#ProjectId").val();
        
        if (ProjId == null || ProjId == '' || ProjId == undefined) {
            ProjId = 0;
        }
        $.getJSON("@Url.Action("Loadbankbyproject", "Project")", { ProjectId: ProjId },
       function (locationdata) {
           var select = $("#Bank");
           select.empty();
           select.append($('<option/>', {
               value: 0,
               text: 'Select any'

           }))
           $.each(locationdata, function (index, itemData) {

               select.append($('<option/>', {
                   value: itemData.id,
                   text: itemData.name

               }));
           });
           select.selectpicker('refresh');
       });

    });


    $('#Bank').on("change", function () {
        var BankHeadId = $(this).val();
        $("#BankHeadId").val(BankHeadId);
        $("#srchProjectType").val(1);
        EmptyCommitmentSrchList()
        EmptyCommitmentSelList()

        $.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankHeadId },
        function (locationdata) {
            var select = $("#srchProjectNumber");
            select.empty();
          
            $.each(locationdata, function (index, itemData) {

                select.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name

                }));
            });
            select.selectpicker('refresh');
        });

    });
    
    function EmptyCommitmentSelList() {
        $('#tbodyCommitmentSelList tr').not(':first').remove();
        $('#tbodyCommitmentSelList tr td').not(':last').not(':nth-last-child(2)').html('');
        //$('#tbodyCommitmentSelList tr td:last').find("input").val("");
        $('#tbodyCommitmentSelList tr').find("input[name!='CommitmentDetail.Index']").val("");
        $('#CommitmentAmount').val('');
    }
    function EmptyCommitmentSrchList() {
        $('#tbodyCommitmentSrchList tr').not(':first').remove();
        $('#tbodyCommitmentSrchList tr td').not(':first').html('');
        $('#tbodyCommitmentSrchList tr td:first input').val('');
    }    

    function GetFreezeValueData(AccHead) {
        var ProjectId = $("#ProjectId").val();        
        var isFreezeDataValid = 0;
        $.ajax({
            type: "GET",
            async: false,
            url: '@Url.Action("GetFreezeAndAllocationData", "Project")',
            data: {
                "ProjectId": ProjectId, "AllocationId": AccHead},
            dataType: "json",
            success: function (result) {
                isFreezeDataValid = result;                
                }
        });
        return isFreezeDataValid;
    }


    function GetFreezeFirstValue(FirAccHead) {
        var ProjectId = $("#ProjectId").val();        
        var isFreezeFirstDataValid = 0;
        $.ajax({
            type: "GET",
            async: false,
            url: '@Url.Action("GetFreezeProjectData", "Project")',
            data: {
                "ProjectId": ProjectId},
            dataType: "json",
            success: function (result) {
                isFreezeDataValid = result;

        
                $('#tbodyCr tr').each(function (idx, trval) {
                    FirAccHead = ($(this).find('select[name$=".BudgetHeadId"]').val());
                  //  GetFreezeFirstValue(FirAccHead);
                
                $.each(isFreezeDataValid, function (index, value) {

                    $('#tbodyCr tr').each(function (idx, trval) {
                        FirAccHead = ($(this).find('select[name$=".BudgetHeadId"]').val());
                        ele = ($(this).find('select[name$=".BudgetHeadId"]'));
                        if (FirAccHead == value.AllocationHead) {
                            console.log(ele.name);
                        }
                       // GetFreezeFirstValue(FirAccHead);
                    });
                    
                        //messageBox('Allocation Head Freezed', "warning");
                        //var FirAccHead
                        //$('#BudgetHeadId').attr('readonly', 'readonly');
                        //$('#BudgetHeadId').attr('readonly', true);
                        //$('#Amount').attr('readonly', 'readonly')
                        //$('#AllocationValue').attr('readonly');
                });
                });
            }
        });
        return isFreezeFirstDataValid;
    }
   
    function BudgetHeadChange(ele) {

        var firstmessfreeze = GetFreezeValueData(ele.value);
        if (firstmessfreeze == 1) {
            //var selectedText = ele.options[ele.selectedIndex].text;
            messageBox('Allocation Head Freezed', "warning");           
            ele.selectedIndex = -1;             
        } 
    }
    
</script>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
