@model IOAS.Models.BillEntryModel
@{
    ViewBag.Title = "Settlement / After supply";
    ViewBag.DocmentTypeList = ViewBag.DocmentTypeList;
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
    }
</style>
@using (Html.BeginForm("SettlementBillPayment", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formADV", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Settlement / After supply Bill</b> @*<em>(123asdf123123123)</em>*@</h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.BillId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @*@Html.DropDownListFor(m => m.SourceReferenceNumber, new SelectList(ViewBag.SourceRefNumberList, "id", "name"), "Select any",
                        new { @class = "form-control" })*@
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                    @Html.Hidden("TransactionTypeCode", "STM")
                    @Html.Hidden("varProjectClearingPayable")
                    @Html.Hidden("varProjectCreditors_Dr")
                    @Html.Hidden("varProjectCreditors_Cr")
                    @Html.Hidden("varTDSGST_Payable")
                    @Html.Hidden("varTDSIT_Payable")
                    @Html.Hidden("varCGSTInput")
                    @Html.Hidden("varSGSTInput")
                    @Html.Hidden("varIGSTInput")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>
            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.BillNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="form-group custom-form-group">
                                <div class="pull-left pl-md">
                                    <label class="required">Payment Type</label>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(m => m.PaymentType, new SelectList(ViewBag.PaymentTypeList, "id", "name"), "Select any",
new { @class = "form-control required" })
                                    @Html.ValidationMessageFor(m => m.PaymentType)
                                    @*@Html.HiddenFor(m => m.PaymentType, new {@id= "hiddenPaymentType" })*@
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBoxFor(m => m.ICSROverHead_f)
                                    <span></span>
                                    ICSR Overhead
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBoxFor(m => m.RCM_f)
                                    <span></span>
                                    RCM
                                </div>
                            </div>

                        </div>

                        <div class="row">

                            <div class="col-md-12">
                                <div class="bl-lg-panel-box pb-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Vendor</label>
                                                    @Html.DropDownListFor(m => m.VendorId, new SelectList(ViewBag.VendorList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.VendorId)
                                                    @if (Model.VendorId != null)
                                                    {
                                                    <label id="lblisGSTVendor" class="dis-none" style="color:red"></label><br />
                                                    <a href="javascript:void(0)" id="lnkBillHistory">View previous bill history</a>
                                                    }
                                                    else
                                                    {
                                                    <label id="lblisGSTVendor" class="dis-none" style="color:red"></label><br />
                                                    <a href="javascript:void(0)" id="lnkBillHistory" class="dis-none">View previous bill history</a>
                                                    }

                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Type of PO</label>
                                                    @Html.DropDownListFor(m => m.POType, new SelectList(ViewBag.POTypeList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.POType)
                                                    @Html.HiddenFor(m => m.POType, new { @id = "hiddenPOType" })
                                                </div>

                                            </div>
                                            <div id="divPOTxt" class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PO Number</label>
                                                    @Html.TextBoxFor(m => m.PONumber, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PONumber)
                                                </div>

                                            </div>
                                            <div id="divPODDL" class="col-md-3 dis-none">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PO Number</label>
                                                    @Html.DropDownListFor(m => m.selPONumber, new SelectList(ViewBag.PONumberList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.selPONumber)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>TDS Section</label>
                                                    @Html.DropDownListFor(m => m.VendorTDSDetailId, new SelectList(ViewBag.VendorTDSList, "id", "name"), "Select any", new { @class = "form-control selectpicker" })
                                                    @Html.ValidationMessageFor(m => m.VendorTDSDetailId)
                                                </div>
                                            </div>



                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PO Date</label>
                                                    @Html.EditorFor(m => m.PODate, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PODate)
                                                    @Html.HiddenFor(m => m.PODate, new { @id = "hiddenPODate" })
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bill Type</label>
                                                    @Html.DropDownListFor(m => m.BillType, new SelectList(ViewBag.BillTypeList, "id", "name"), "Select any",
                                                    new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.BillType)
                                                    @Html.HiddenFor(m => m.BillType, new { @id = "hiddenBillType" })
                                                </div>

                                            </div>
                                            @*<div class="col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Invoice Number</label>
                                                        @Html.TextBoxFor(m => m.InvoiceNumber, new { @class = "form-control required" })
                                                        @Html.ValidationMessageFor(m => m.InvoiceNumber)
                                                    </div>

                                                </div>
                                                <div class="col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Invoice Value</label>
                                                        @Html.TextBoxFor(m => m.InvoiceAmount, new { @class = "form-control required", onblur = "CalculatePOValue()", onkeypress = "return ValidateDecimalOnly(event)" })
                                                        @Html.ValidationMessageFor(m => m.InvoiceAmount)
                                                    </div>

                                                </div>*@

                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bank</label>
                                                    @Html.DropDownListFor(m => m.BankHead, new SelectList(ViewBag.BankHeadList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.BankHead)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="">TDS IT Basic Value </label>
                                                    @Html.TextBoxFor(m => m.TDSBasicAmt, new { @class = "form-control", onkeypress = "return ValidateDecimalOnly(event)" })
                                                    @Html.ValidationMessageFor(m => m.TDSBasicAmt)
                                                </div>

                                            </div>


                                        </div>
                                        @* <div class="row">
                                            <div class="col-md-3">
                                                 <div class="form-group custom-form-group">
                                                     <label class="required">Tax Value</label>
                                                     @Html.TextBoxFor(m => m.InvoiceTaxAmount, new { @class = "form-control", onblur = "CalculatePOValue()", onkeypress = "return ValidateDecimalOnly(event)" })
                                                     @Html.ValidationMessageFor(m => m.InvoiceTaxAmount)
                                                 </div>

                                             </div>
                                             <div class="col-md-3">
                                                 <div class="form-group custom-form-group">
                                                     <label class="required">Invoice Date</label>
                                                     @Html.EditorFor(m => m.InvoiceDate, new { @class = "form-control" })
                                                     @Html.ValidationMessageFor(m => m.InvoiceDate)
                                                 </div>

                                             </div>



                                                                                </div>*@
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="">TDS GST Basic Value </label>
                                                    @Html.TextBoxFor(m => m.TDSGSTBasicAmt, new { @class = "form-control", onkeypress = "return ValidateDecimalOnly(event)" })
                                                    @Html.ValidationMessageFor(m => m.TDSGSTBasicAmt)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="">Bank Guarantee Amount </label>
                                                    @Html.TextBoxFor(m => m.BankGuaranteeAmount, new { @class = "form-control", onkeypress = "return ValidateDecimalOnly(event)" })
                                                    @Html.ValidationMessageFor(m => m.BankGuaranteeAmount)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Bank Guarantee Remarks</label>
                                                    @Html.TextAreaFor(m => m.BankGuaranteeRemarks, new { @class = "form-control", @rows = "2" })
                                                    @Html.ValidationMessageFor(M => M.BankGuaranteeRemarks)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @rows = "2" })
                                                    @Html.ValidationMessageFor(M => M.Remarks)
                                                </div>

                                            </div>


                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>PAN</label>
                                                    <h4 id="lblVendorPAN"></h4>
                                                    <label id="lblStateCode" class="dis-none"></label>
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>GSTIN</label>
                                                    <h4 id="lblVendorGSTIN"></h4>
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Address</label>
                                                    <h4 id="lblVendorAddr"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Bank Details</label>
                                                    <h4 id="lblBankDetails"></h4>
                                                </div>
                                            </div>


                                        </div>
                                    </div>

                                </div>
                            </div>



                        </div>
                        <div class="row">
                            <div class="col-md-12">

                                @Html.Partial("_VendorInvoiceBreakup", Model.InvoiceBreakDetail)
                            </div>
                            
                        </div>
                        <div class="row">
                            <div class="form-group custom-form-group">
                                <div class="col-md-10 dis-none">
                                    <div class="adv-bg-adj gray-bg">
                                        <label class="radio chkbox-adj">
                                            @Html.RadioButton("GST", "Eligible", true)
                                            @*<input type="radio" name="GST" checked value="Eligible">*@
                                            <span></span> Eligible for GST offset<br>
                                        </label>
                                        <label class="radio chkbox-adj">
                                            @Html.RadioButton("GST", "PartiallyEligible")
                                            @*<input type="radio" name="GST" value="PartiallyEligible">*@
                                            <span></span> Partially eligible for GST offset<br>
                                        </label>
                                        <label class="radio chkbox-adj">
                                            @Html.RadioButton("GST", "NotEligible")
                                            @*<input type="radio" name="GST" value="NotEligible">*@
                                            <span></span> This bill is not eligible for GST offset
                                        </label>
                                        @Html.Hidden("ExpenseRequired", "True")
                                        @Html.Hidden("isHaveElgGST")
                                        @Html.HiddenFor(m => m.GST, new { @id = "hiddenGST" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="gray-bg br-rd">
                            <div class="row">
                                <div class="col-md-12">
                                    @Html.Partial("_PODetails", Model.PODetail)
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="tb-bl-dts wht-bg">
                                                <h3>PO Value</h3>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group ">
                                                            <label>Total PO Value :</label>
                                                            <h4 id="lblPOTtlAmt"></h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total TAX :</label>
                                                            <h4 id="lblPOTtlTaxAmt"></h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total:</label>
                                                            <h4 id="lblPONetAmt"></h4>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="divAdvSummary" class="tb-bl-dts wht-bg dis-none">
                                                <h3>Advance Value</h3>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group ">
                                                            <label>Total Advance Value :</label>
                                                            <h4 id="lblPreAdvTtlAmt"></h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total TAX :</label>
                                                            <h4 id="lblPreAdvTtlTaxAmt"></h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total:</label>
                                                            <h4 id="lblPreAdvNetAmt"></h4>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="tb-bl-dts alter-bg">
                                                <h3>Settlement Value</h3>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group ">
                                                            <label>Total Settlement Value :</label>
                                                            <h4 id="lblAdvTtlAmt"></h4>
                                                            @Html.HiddenFor(m => m.hiddenSettAmt)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-5">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total TAX for Settlement :</label>
                                                            <h4><span id="lblAdvTtlTaxAmt"></span> <i id="taxTT" class="ion-information-circled" data-toggle="tooltip" data-html="true" data-placement="top" title="<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br><span>IGST  :<b>0.00</b></span><br>"></i></h4>
                                                            @Html.HiddenFor(m => m.hiddenSettTaxAmt)

                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="form-group custom-form-group">
                                                            <label>Net Bill Total:</label>
                                                            <h4 id="lblAdvNetAmt"></h4>
                                                           
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group ">
                                                            <label>GST Eligible Value :</label>
                                                            <h4 id="lblTaxEligibleAmt"></h4>
                                                            @Html.HiddenFor(m => m.hiddenTaxEligibleAmt)
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group custom-form-group">
                                        <p> * Commitment shall be booked for an amount <label style="color:black; font-weight: bold" id="lblcommitamt"></label> (Net Payable Amount - Eligible Tax Amount) </p>
                                    </div>
                                </div>
                            </div>
                        </div>



                    </div>
                </div>

                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>

                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("SettlementBillPaymentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>
}

@Html.AntiForgeryToken()
<div id="popup"></div>

<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });
    $('.selectpicker').selectpicker({
        liveSearch: true
    });
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    var isCalPerformed = false;
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        var selSource = $('#Source').val();
        var vendorId = $('#VendorId').val();
        var TotalInvoice = $("#TotalInvoiceValue").val();
        var CurrentValue = $("#lblPONetAmt").val();

        $('#btnAddExpense').addClass('dis-none');
        if (vendorId != '') {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
                data: { "vendorId": vendorId },
                dataType: "json",
                success: function (result) {
                    $('#lblVendorPAN').text(result.PAN);
                    $('#lblVendorGSTIN').text(result.GSTIN);
                    $('#lblVendorAddr').text(result.Address);
                    $('#lblStateCode').text(result.StateCode);
                    $('#lblBankDetails').text(result.BankName + "-" + result.AccountNumber);
                    if (result.isGSTVendor_f) {
                        $('#lblisGSTVendor').removeClass('dis-none');
                        $('#lblisGSTVendor').text('HOLD GST FOR THIS VENDOR');
                        $('#alert').html("HOLD GST FOR THIS VENDOR");
                        $('#Validation').modal('toggle');
                    }
                    else {
                        $('#lblisGSTVendor').addClass('dis-none');
                        $('#lblisGSTVendor').text('');
                    }


                    // 1st Open Alert Popup
                    if (result.TDSLimit === '' || result.TDSLimit === null)
                        result.TDSLimit = 0;
                    if (TotalInvoice === '' || TotalInvoice === null)
                        TotalInvoice = 0;
                    if (CurrentValue === '' || CurrentValue === null)
                        CurrentValue = 0;
                    if (parseFloat((result.TDSLimit - TotalInvoice) + CurrentValue) > 5000000) {
                        messageBox("The Total paid / payable is" + " Rs: " + result.TDSLimit.toFixed(2) + " hence 194Q is applicable for goods. ", "warning");
                        //$('#FailedAlert').html("The Total paid / payable is" + " Rs: " + result.TDSLimit.toFixed(2) + " hence 194Q is applicable for goods. ");
                        //$('#Failed').modal('show');
                        //hideTdsAmount.hide();
                    }
                    UpdateGSTSplitUp()
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }

$("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
             }
        var offsetValue = $("input[name='GST']:checked").val();
        if (offsetValue == 'NotEligible') {
            $('#ExpenseRequired').val('False');
        }
        resetByPaymentType();
        if ($('#PaymentType').val() == 2) {
            $('#selPONumber option').map(function () {
                if ($(this).text() == $('#PONumber').val()) return this;
            }).attr('selected', 'selected');
            $('#divAdvSummary').removeClass('dis-none');
        }

        if ($('#hiddenSettAmt').val() == '0') {
            //$('select[name="ExpenseDetail[0].AccountGroupId"],select[name="ExpenseDetail[0].AccountHeadId"],input[name="ExpenseDetail[0].Amount"]').removeClass('required');
            //$("input[name='ExpenseDetail.Index']").val('');
        } else {
            var ttlAdv = parseFloat($('#hiddenSettAmt').val()) || 0;
            var ttlTax = parseFloat($('#hiddenSettTaxAmt').val()) || 0;
            $('#lblPreAdvTtlAmt').text(ttlAdv.toFixed(2));
            $('#lblPreAdvTtlTaxAmt').text(ttlTax.toFixed(2));
            netAdvVal = (ttlAdv + ttlTax).toFixed(2);
            $('#lblPreAdvNetAmt').text(netAdvVal);
            //$('select[name="ExpenseDetail[0].AccountGroupId"],select[name="ExpenseDetail[0].AccountHeadId"],input[name="ExpenseDetail[0].Amount"]').addClass('required');
        }
        $('#lblVendorName').html($('#VendorId option:selected').text());
        CalculatePOValue();
        CalculatePaymentValue();
        CalculateDeductionTotal();
        $('#NeedUpdateTransDetail').val('false');
        var BankHead = $('#BankHead :selected').val();

        if (BankHead != '') {
            $.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankHead },
                function (locationdata) {
                    var select = $("#srchProjectNumber");
                    select.empty();

                    $.each(locationdata, function (index, itemData) {

                        select.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name

                        }));
                    });
                    select.selectpicker('refresh');
                });
        }
    });


$('#lnkBillHistory').click(function () {
var vendorId = $('#VendorId').val();
if (vendorId != '') {
var token = $("input[name=__RequestVerificationToken]").val();
var searchData = { "__RequestVerificationToken": token, "vendorId": vendorId };
    $.ajax({
            url: "@Url.Action("_PreviousBillHistory", "CoreAccounts")",
    type: "POST",
    data: searchData,
    contentType: "application/x-www-form-urlencoded",
    success: function (data) {
        $("#popup").html(data);
        $("#preBillHistoryModal").modal('toggle');
        },
    error: function (err) {
        console.log("error : " + err);
            }
        });
        }
});

$('#PODate').change(function () {
    $('#hiddenPODate').val($(this).val());
    });
    $(document).on('change', 'input[type="checkbox"][name$=".IsTaxEligible"]', function () {
    $('#NeedUpdateTransDetail').val('true');
    });
    $('#BillType').change(function () {
    $('#NeedUpdateTransDetail').val('true');
    EmptyPODetails();
    applyACToTypeOfService();
    })

    $('#PaymentType').change(function () {
    EmptyPODetails();
    resetVendor();
    $('#VendorTDSDetailId').val('').selectpicker('refresh');
    resetPOMasterDetails();
    $('#VendorId').val('');
    resetByPaymentType();
    });
    function resetByPaymentType() {
    var pType = $('#PaymentType').val();
    if (pType == '2') {
    $('table .bg-blue,.tdNetAmt,.tdTaxAmt,.tdAdvAmt,.tdAdvPct,#btnAddPO,.removePOItem').addClass('dis-none');
    $('#divPODDL,#divAdvSummary').removeClass('dis-none');
    //  $('#VendorTDSDetailId').prop("disabled", true).selectpicker('refresh')
    $('#divPOTxt').addClass('dis-none');
    $('#BillType').prop("disabled", true);
    $('#POType').prop("disabled", true);
    $('#tbodyPO tr').find('select,input').each(function (i, rowEle) {
        if ($(rowEle).is('select')) {
            $(rowEle).addClass("ronly");
        } else if ($(rowEle).is(':checkbox')) {
            $(rowEle).addClass("ronly");
        } else if ($(rowEle).is(':visible')) {
            $(rowEle).prop("readonly", true);
            }
        });
    }
        else {
        $('table .bg-blue,.tdNetAmt,.tdTaxAmt,.tdAdvAmt,.tdAdvPct,#btnAddPO,.removePOItem').removeClass('dis-none');
        $('#divPOTxt').removeClass('dis-none');
        $('#divPODDL,#divAdvSummary').addClass('dis-none');
        // $('#VendorTDSDetailId').prop("disabled", false).selectpicker('refresh');
        $('#BillType').prop("disabled", false);
        $('#POType').prop("disabled", false);
        $('#tbodyPO tr').find('select,input').each(function (i, rowEle) {
            if ($(rowEle).is('select')) {
                $(rowEle).attr("disabled", false);
            } else if ($(rowEle).is(':checkbox')) {
                // $(rowEle).prop("disabled", false);
            } else if ($(rowEle).is(':visible')) {
                $(rowEle).prop("readonly", false);
                }
            });
        }
    }
//var preSelVal = '';
//$(document).on('mousedown', '.ronly', function (e) {
//    //if ($(this).is(':checkbox'))
//    //    return false;
//    preSelVal = $(this).val();
//}).on('change', function () {
//    $(this).val(preSelVal);
//    CalculatePOValue();
//});
    $('#Source').change(function () {
    var selSource = $(this).val();
    $("#SourceReferenceNumber,#ReferenceNumber").val('');
    $("#divRefNum, #divRefEmailDate").addClass('dis-none');
    $("#SourceTapalOrWorkflow").val('False');
    if (selSource == '1') {
    applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    } else if (selSource == '3') {
        applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
    }
    else if (selSource == '2') {
        $('#divRefEmailDate').removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
    } else {
        $("#divRefNum").removeClass('dis-none');
        $("#SourceTapalOrWorkflow").val('True');
        }
    });
function resetVendor() {
    $('#lblVendorPAN, #lblVendorGSTIN, #lblVendorAddr, #lblStateCode,#lblBankDetails,#lblisGSTVendor').text('');
//$('#divPreBill').addClass('dis-none');
}
function resetPOMasterDetails() {
$('#PONumber, #selPONumber, #PODate, #hiddenPODate, #InvoiceNumber, #InvoiceDate, #BillType, #hiddenBillType, #POType, #hiddenPOType').val('');
//$('#divPreBill').addClass('dis-none');
}
function parseDate(s) {
var months = {
    january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
    july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
};
var p = s.split('-');
return new Date(p[2], months[p[1].toLowerCase()], p[0]);
}
$('#selPONumber').change(function () {
EmptyPODetails();
var id = $(this).val();
var settId = $('#BillId').val() || 0;
$('#NeedUpdateTransDetail').val('true');
if (id != '') {
    $.ajax({
        type: "GET",
        url: "@Url.Action("GetBillPODetails", "CoreAccounts")",
    data: { "billId": id, "isSettlement": true, "settlId": settId },
    dataType: "json",
    traditional: true,
    success: function (result) {
        $('#hiddenSettAmt').val(result.settAmt);
        $('#hiddenSettTaxAmt').val(result.settTaxAmt);
        $('#InvoiceAmount').val(result.billAmt);
        $('#InvoiceTaxAmount').val(result.billTaxAmt);

        $('#lblPreAdvTtlAmt').text(result.settAmt.toFixed(2));
        $('#lblPreAdvTtlTaxAmt').text(result.settTaxAmt.toFixed(2));
        netAdvVal = (result.settAmt + result.settTaxAmt).toFixed(2);
        $('#lblPreAdvNetAmt').text(netAdvVal);
        var data = result.data;
        fillPODetail(data.PODetail);
        var poDate = new Date(parseInt(data.PODate.replace(/(^.*\()|([+-].*$)/g, '')));
        $('#hiddenPODate').val(poDate);
        $("#PODate").datepicker('setDate', poDate);
        $('#BillType').val(data.BillType);
        $('#hiddenBillType').val(data.BillType);
        $('#POType').val(data.POType);
        $('#hiddenPOType').val(data.POType);
        $('#hiddenGST').val(data.GST);
        if (data.VendorTDSDetailId != null) {
            $('#VendorTDSDetailId').val(data.VendorTDSDetailId).selectpicker('refresh');
        } else {
            $('#VendorTDSDetailId').val('').selectpicker('refresh');
        }

    },
    error: function (err) {
        console.log("error : " + err);
            }
        });
    }
});
$('#ICSROverHead_f').click(function () {
$('#NeedUpdateTransDetail').val('true');
});
$('#RCM_f').click(function () {
if ($(this).is(':checked')) {
$('#NeedUpdateTransDetail').val('true');
$('#tbodyPO tr input[type="checkbox"]').prop('checked', true);
$('#tbodyInvoiceBU tr input[type="checkbox"]').prop('checked', true);
$('#tbodyPO tr input[type="checkbox"]').attr("readonly", true);
$('#tbodyInvoiceBU  tr input[type="checkbox"]').attr("readonly", true);
} else {
$('#tbodyPO tr input[type="checkbox"]').prop('checked', false);
$('#tbodyInvoiceBU tr input[type="checkbox"]').prop('checked', false);
$('#tbodyPO tr input[type="checkbox"]').attr("readonly", false);
$('#tbodyInvoiceBU tr input[type="checkbox"]').attr("readonly", false);
    }

});
$('#VendorId').change(function () {
resetVendor();
var vendorId = $(this).val();
$('#NeedUpdateTransDetail').val('true');
var ele = $('#VendorTDSDetailId');
$('#lblVendorName').html($('#VendorId option:selected').text());
var selPO = $('#selPONumber');
selPO.empty();
var TotalInvoice = $("#TotalInvoiceValue").val();
var CurrentValue = $("#lblPONetAmt").val();

if (vendorId != '') {
$('#lnkBillHistory').removeClass('dis-none');
$.ajax({
    type: "GET",

    url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
     data: { "vendorId": vendorId, "poNumberRequired": true, "transTypeCode": 'ADV', "TDSRequired": true },
    dataType: "json",
    success: function (result) {
        $('#lblVendorPAN').text(result.PAN);
        $('#lblVendorGSTIN').text(result.GSTIN);
        $('#lblVendorAddr').text(result.Address);
        $('#lblStateCode').text(result.StateCode);
        $('#lblBankDetails').text(result.BankName + "-" + result.AccountNumber);
        if (result.isGSTVendor_f) {
            $('#lblisGSTVendor').removeClass('dis-none');
            $('#lblisGSTVendor').text('HOLD GST FOR THIS VENDOR');
            $('#alert').html("HOLD GST FOR THIS VENDOR");
            $('#Validation').modal('toggle');
        }
        else {
            $('#lblisGSTVendor').addClass('dis-none');
            $('#lblisGSTVendor').text('');
        }
        fillMasterDropDown(selPO, result.PONumberList, true);
        console.log(result.TDSLimit);
        // Edit Vendor InputBox Alert Popup
        if (result.TDSLimit === '' || result.TDSLimit === null)
            result.TDSLimit = 0;
        if (TotalInvoice === '' || TotalInvoice === null)
            TotalInvoice = 0;
        if (CurrentValue === '' || CurrentValue === null)
            CurrentValue = 0;
        if (parseFloat((result.TDSLimit - TotalInvoice) + CurrentValue) > 5000000) {
            messageBox("The Total paid / payable is" + " Rs: " + result.TDSLimit.toFixed(2) + " hence 194Q is applicable for goods.", "warning");
            //$('#FailedAlert').html("The Total paid / payable is" + " Rs: " + result.TDSLimit.toFixed(2) + " hence 194Q is applicable for goods. ");
            //$('#Failed').modal('show');
        }
        UpdateGSTSplitUp();
        ele.empty();
        ele.append($('<option/>', {
            value: "",
            text: "Select any",
        }));
        $.each(result.TDSList, function (index, itemData) {
            ele.append($('<option/>', {
                value: itemData.id,
                text: itemData.name,
            }));
        });
        ele.selectpicker('refresh');
    },
    error: function (err) {
        console.log("error : " + err);
    }
});
} else {
$('#lnkBillHistory').addClass('dis-none');
    }
});

    //10616
    $('#txtRoundOfAdjustment').change(function () {
        //isCalPerformed = false;
        validateRoundOfAdjustment();
        //var roundOffAdjustment = $(this).val();
        calculateAmount();
        CalculatePOValue();
        //if (roundOffAdjustment != "") {
        //    isCalPerformed = CalculateRoundingOffAdjustment(roundOffAdjustment, isCalPerformed);
        //}
        //resetRoundoff($(this).val());

    });

    function validateRoundOfAdjustment() {
        var msg = 'valid';
        var number = parseFloat($("#txtRoundOfAdjustment").val());
        if ((!isNaN(number) && number > -10 && number < 10) || number == "") {
        } else {
            msg = 'Please enter a number between -10 and 10.';
        }
        return msg;
    }

    function AddNewExpense() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        var subcode = $('#SubCode').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "STM", "tSubCode": subcode },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

    function GetTransactionDetails() {
        var icsrOH = $('#ICSROverHead_f').is(':checked');
        var rcm = $('#RCM_f').is(':checked');
        var stateCode = $('#lblStateCode').html();
        var interstate = IsInterState(stateCode);
        var tdsSel = $("#VendorTDSDetailId").val();
        var subcode = GetIndirectPaymentSubCodeByTDSSection(tdsSel, icsrOH, rcm);
        $('#SubCode').val(subcode);
        var invAmt = parseFloat($('#InvoiceAmount').val()) || 0;
        var invTaxAmt = parseFloat($('#InvoiceTaxAmount').val()) || 0;
        var ttlAmt = invAmt + invTaxAmt;
        var invElgTaxAmt = parseFloat($('#hiddenTaxEligibleAmt').val()) || 0;
        var selTdsSection = $("#VendorTDSDetailId option:selected").text();
        var pct = selTdsSection.substring(selTdsSection.lastIndexOf('-') + 1, selTdsSection.lastIndexOf('%'))
        var pctParse = parseFloat(pct) || 0;
        var tdsITAmt = 0, tdsGSTAmt = 0;
        var tdsITBasicAmt = parseFloat($('#TDSBasicAmt').val()) || 0;
        if (tdsITBasicAmt > 0 && pctParse > 0)
            tdsITAmt = (tdsITBasicAmt * pctParse) / 100;
        tdsITAmt = Math.ceil(tdsITAmt);
        var tdsGSTBasicAmt = parseFloat($('#TDSGSTBasicAmt').val()) || 0;
        if (tdsGSTBasicAmt > 0) {
            tdsGSTAmt = (tdsGSTBasicAmt * 2) / 100;
            if (!interstate && tdsGSTAmt > 0) {
                var splitGstAmt = Math.ceil(tdsGSTAmt / 2);
                tdsGSTAmt = splitGstAmt * 2;
            } else if (tdsGSTAmt > 0) {
                tdsGSTAmt = Math.ceil(tdsGSTAmt);
            }
        }
        var ttlTds = tdsITAmt + tdsGSTAmt;
        $("#varProjectClearingPayable").val((round(ttlAmt) - invElgTaxAmt).toFixed(2));
        if (rcm)
            //$("#varProjectCreditors_Cr").val((ttlAmt - invElgTaxAmt).toFixed(2));
            $("#varProjectCreditors_Cr").val(round(ttlAmt - invElgTaxAmt));
        else
            //$("#varProjectCreditors_Cr").val(ttlAmt.toFixed(2));  //10616
            $("#varProjectCreditors_Cr").val(round(ttlAmt));
        $("#varProjectCreditors_Dr").val(ttlTds.toFixed(2));
        $("#varTDSGST_Payable").val(tdsGSTAmt.toFixed(2));
        $("#varTDSIT_Payable").val(tdsITAmt.toFixed(2));
        if (!interstate && invElgTaxAmt > 0) {
            var splitGstAmt = invElgTaxAmt / 2;
            $("#varCGSTInput").val(splitGstAmt.toFixed(2));
            $("#varSGSTInput").val(splitGstAmt.toFixed(2));
        } else if (invElgTaxAmt > 0) {
            /**/
            $("#varIGSTInput").val(invElgTaxAmt.toFixed(2));
        }
        FillTransactionDetails();
        //var roundOffAdjustment = $("#txtRoundOfAdjustment").val();
        //if (roundOffAdjustment != "") {
        //    debugger;
        //    isCalPerformed = CalculateRoundingOffAdjustment(roundOffAdjustment, false);
        //}
@*var stateCode = $('#lblStateCode').html();
        var interstate = IsInterState(stateCode);
        var BillType = $('#BillType').val();
        var tdsSel = $("#VendorTDSDetailId").val();// $("#VendorTDSDetailId option:selected").text();
        var icsrOH = $('#ICSROverHead_f').is(':checked');
        var subcode = GetIndirectPaymentSubCodeByTDSSection(tdsSel, icsrOH);
        $('#SubCode').val(subcode);
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "deductionCategoryId": BillType, "interstate_f": interstate, "typeCode": "STM", "tSubCode": subcode },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                if ($('#isHaveElgGST').val().toLowerCase() == 'true') {
                    $.each(result.DeductionDetail, function (i, item) {
                        var expensRequired = $('#ExpenseRequired').val();
                        var ttlAdvTax = parseFloat($('#InvoiceTaxAmount').val());
                        var splitAmt = (ttlAdvTax / 2).toFixed(2);
                        var stateCode = $('#lblStateCode').html();
                        if (i == 0) {
                            var trEle = $('#tbodyDeductionList tr:first');
                            $(trEle).find('input').val('');
                            var amtEle = $(trEle).find('input[name$=".Amount"]');
                            if (expensRequired == 'True') {
                                amtEle.addClass('required');
                                if (BillType != 3) {
                                    if (stateCode == "33" && (item.DeductionHead.includes("CGST") || item.DeductionHead.includes("SGST"))) {
                                        amtEle.val(splitAmt);
                                    } else if (item.DeductionHead.includes("IGST")) {
                                        amtEle.val(ttlAdvTax);
                                    }
                                }
                            } else {
                                amtEle.removeClass('required');
                            }
                            $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                            $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                            $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                            $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                            $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                            $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                        } else {
                            var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                            $(trEleNew).find("input").each(function () {
                                $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });
                            var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                            if (expensRequired == 'True') {
                                amtEle.addClass('required');
                                if (BillType != 3) {
                                    if (stateCode == "33" && (item.DeductionHead.includes("CGST") || item.DeductionHead.includes("SGST"))) {
                                        amtEle.val(splitAmt);
                                    } else if (item.DeductionHead.includes("IGST")) {
                                        amtEle.val(ttlAdvTax);
                                    }
                                }
                            } else {
                                amtEle.removeClass('required');
                            }
                            $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                            $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                            $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                            $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                            $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                            $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                            $('#tbodyDeductionList').append(trEleNew);
                        }
                    });
                }
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();
            },
            error: function (err) {
        /**/
        console.log("error : " + err);
    }

});*@
    }

function UpdateGSTSplitUp() {
var ttlAdvTax = parseFloat($('#InvoiceTaxAmount').html());
var stateCode = $('#lblStateCode').html();
if (stateCode == '33') {
    if (ttlAdvTax > 0) {
        var splitAmt = (ttlAdvTax / 2).toFixed(2);
        $('#taxTT').attr('data-original-title', '<span>CGST :<b>' + splitAmt + '</b></span><br><span>SGST  :<b>' + splitAmt + '</b></span><br>')
    } else {
        $('#taxTT').attr('data-original-title', '<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br>');
    }
} else {
    if (ttlAdvTax > 0) {
        $('#taxTT').attr('data-original-title', '<span>IGST :<b>' + ttlAdvTax.toFixed(2) + '</b></span><br>')
    } else {
        $('#taxTT').attr('data-original-title', '<span>IGST :<b>0.00</b></span><br>')
    }
}
}
    function CalculatePOValue() {
        if ($('#PaymentType').val() != '2') {
            var advPct = 100;
            var ttlPOVal = 0, ttlPOTaxVal = 0, netPOVal = 0, ttlAdvVal = 0, ttlAdvTaxVal = 0, netAdvVal = 0;
            var elgF = false;
            var ttlGSTElgAmt = 0;
            //10616 - RoundOff Feature
            var adjVal = parseFloat($("#txtRoundOfAdjustment").val()) || 0; console.log('adjVal :' + adjVal);
            $('#tbodyPO tr').not(':first').each(function (i, rowEle) {
                var amt = parseFloat($(rowEle).find('input[name$=".TotalAmount"]').val());
                var chckElg = $(rowEle).find('input[type="checkbox"][name$=".IsTaxEligible"]').prop('checked');
                if (chckElg)
                    elgF = true;
                if (!isNaN(amt))
                    ttlPOVal = ttlPOVal + amt;
                if (amt > 0) {
                    var taxPct = parseFloat($(rowEle).find('select[name$=".TaxPct"]').val());
                    if (isNaN(taxPct))
                        taxPct = 0;
                    var advTaxVal = 0, advAmt = 0, netAdvAmt = 0;
                    advAmt = amt * advPct / 100;

                    ttlAdvVal = ttlAdvVal + advAmt;
                    if (taxPct > 0) {
                        var taxAmt = amt * taxPct / 100;
                        ttlPOTaxVal = ttlPOTaxVal + taxAmt;

                        advTaxVal = advAmt * taxPct / 100;
                        ttlAdvTaxVal = ttlAdvTaxVal + advTaxVal;
                        if (chckElg)
                            ttlGSTElgAmt = ttlGSTElgAmt + advTaxVal;
                    }
                    advAmt = advAmt;
                    netAdvAmt = advAmt + advTaxVal;
                    //var poTaxVal = amt * taxPct / 100;
                    //ttlPOTaxVal = ttlPOTaxVal + poTaxVal;
                    $(rowEle).find('.tdAdvPct').html(advPct.toFixed(2));
                    //$(rowEle).find('.tdAdvAmt').html(advAmt.toFixed(2));
                    $(rowEle).find('.tdAdvAmt').html(advAmt.toFixed(2));
                    //$(rowEle).find('.tdTaxAmt').html(advTaxVal.toFixed(2));
                    //$(rowEle).find('.tdNetAmt').html(netAdvAmt.toFixed(2));
                    $(rowEle).find('.tdTaxAmt').html(advTaxVal);
                    $(rowEle).find('.tdNetAmt').html(round(netAdvAmt).toFixed(2));

                }
            });
            if (elgF)
                $('#isHaveElgGST').val('true');
            else
                $('#isHaveElgGST').val('false');



            if (typeof adjVal === 'undefined') {
                adjVal = 0;
            } else
                adjVal;
            var poVal = ttlPOVal + Number(adjVal);



            $('#lblPOTtlAmt').text((poVal).toFixed(2));
            //$('#lblPOTtlTaxAmt').text(round(ttlPOTaxVal));
            $('#lblPOTtlTaxAmt').text(ttlPOTaxVal.toFixed(2));
            netPOVal = (ttlPOVal + ttlPOTaxVal + adjVal).toFixed(2);
            $('#lblPONetAmt').text(round(netPOVal).toFixed(2));

            var invAmt = parseFloat($('#InvoiceAmount').val()) || 0;
            var invTaxAmt = parseFloat($('#InvoiceTaxAmount').val()) || 0;
            //$('#lblAdvTtlAmt').text(invAmt.toFixed(2));
            $('#lblAdvTtlAmt').text(invAmt.toFixed(2));
            $('#lblAdvTtlTaxAmt').text(invTaxAmt.toFixed(2));
            //$('#lblAdvTtlTaxAmt').text(round(invTaxAmt));
            $('#hiddenTaxEligibleAmt').val(ttlGSTElgAmt.toFixed(2));
            $('#lblTaxEligibleAmt').text(ttlGSTElgAmt.toFixed(2));
            //$('#lblTaxEligibleAmt').text(round(ttlGSTElgAmt));
            netAdvVal = (invTaxAmt + invAmt);
            //$('#lblAdvNetAmt').text(netAdvVal.toFixed(2));
            $('#lblAdvNetAmt').text(round(netAdvVal));


            UpdateGSTSplitUp();
            var roundValItc = $('#hiddenTaxEligibleAmt').val() || 0;
            var validCmtAmt = (round(netAdvVal) - roundValItc).toFixed(2);
             var vCmtAmt = Number(validCmtAmt);

            if (vCmtAmt > 0)
                $('#lblcommitamt').html(vCmtAmt);
            else
            $('#lblcommitamt').html(0);

            if ($('#TotalInvoiceValue').val() == 0 && $('#BillId').val() != "0") {
                $('#TotalInvoiceValue').val(validCmtAmt);
                var SettleAmt = $('#lblAdvNetAmt').text() || 0;
                var vendorid = $('#VendorId').val() || 0;
                var TotalInvoice = $("#TotalInvoiceValue").val() || 0;
                //validatetds(vendorid, SettleAmt, TotalInvoice);
            }
        }
        else {

            var ttlPOVal = 0, ttlPOTaxVal = 0, netPOVal = 0;
            var elgF = false;
            var ttlGSTElgAmt = 0;
            $('#tbodyPO tr').not(':first').each(function (i, rowEle) {
                var amt = parseFloat($(rowEle).find('input[name$=".TotalAmount"]').val());
                var chckElg = $(rowEle).find('input[type="checkbox"][name$=".IsTaxEligible"]').prop('checked');
                if (chckElg)
                    elgF = true;
                if (!isNaN(amt))
                    ttlPOVal = ttlPOVal + amt;
                if (amt > 0) {
                    var taxPct = parseFloat($(rowEle).find('select[name$=".TaxPct"]').val());
                    if (isNaN(taxPct))
                        taxPct = 0;
                    if (taxPct > 0) {
                        var taxAmt = amt * taxPct / 100;
                        ttlPOTaxVal = ttlPOTaxVal + taxAmt;
                        if (chckElg)
                            ttlGSTElgAmt = ttlGSTElgAmt + taxAmt;
                    }
                }
            });
            //$('#lblPOTtlAmt').text(ttlPOVal.toFixed(2));
            $('#lblPOTtlTaxAmt').text(ttlPOTaxVal.toFixed(2));


            if (typeof adjVal === 'undefined') {
                adjVal = 0;
            } else
                adjVal;
            var poVal = ttlPOVal + Number(adjVal);

            $('#lblPOTtlAmt').text((poVal).toFixed(2));
            //$('#lblPOTtlTaxAmt').text(round(ttlPOTaxVal));
            netPOVal = (ttlPOVal + ttlPOTaxVal + adjVal).toFixed(2);
            $('#lblPONetAmt').text(round(netPOVal));
            //if ($('#TotalInvoiceValue').val() == 0) { $('#TotalInvoiceValue').val(netPOVal); }
            if (elgF)
                $('#isHaveElgGST').val('true');
            else
                $('#isHaveElgGST').val('false');
            var ttlAdv = parseFloat($('#hiddenSettAmt').val()) || 0;
            var ttlTax = parseFloat($('#hiddenSettTaxAmt').val()) || 0;
            var invAmt = parseFloat($('#InvoiceAmount').val()) || 0;
            var invTaxAmt = parseFloat($('#InvoiceTaxAmount').val()) || 0;
            $('#hiddenTaxEligibleAmt').val(ttlGSTElgAmt.toFixed(2));
            $('#lblTaxEligibleAmt').text(ttlGSTElgAmt.toFixed(2));
            var setAmt = invAmt - ttlAdv;
            var setTaxAmt = invTaxAmt - ttlTax;
            //$('#lblAdvTtlAmt').text(setAmt.toFixed(2));

            $('#lblAdvTtlAmt').text(setAmt);
            $('#lblAdvTtlTaxAmt').text(setTaxAmt.toFixed(2));
            netAdvVal = (setAmt + setTaxAmt).toFixed(2);
            netAdvVal = netAdvVal;
            $('#lblAdvNetAmt').text(round(netAdvVal));

            UpdateGSTSplitUp();
            var roundValItc = $('#hiddenTaxEligibleAmt').val() || 0;
            console.log('roundValItc : ' + roundValItc);
            var validCmtAmt = (round(netAdvVal) - roundValItc).toFixed(2);
            var vCmtAmt = Number(validCmtAmt);

            if (vCmtAmt > 0)
                $('#lblcommitamt').html(vCmtAmt);
            else
                $('#lblcommitamt').html(0);

            if ($('#TotalInvoiceValue').val() == 0 && $('#BillId').val() != "0") {
                $('#TotalInvoiceValue').val(validCmtAmt);
                var SettleAmt = $('#lblAdvNetAmt').text() || 0;
                var vendorid = $('#VendorId').val() || 0;
                var TotalInvoice = $("#TotalInvoiceValue").val() || 0;
                //validatetds(vendorid, SettleAmt, TotalInvoice);
            }
        }
    }
$('#CommitmentAmount, #CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
return false;
});

/* Tab Sections Start*/
var currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the crurrent tab
function showTab(n) {
// This function will display the specified tab of the form...
var x = document.getElementsByClassName("tab");
x[n].style.display = "block";
$(".custom-nav-pills li:eq(" + n + ")").addClass("active");
//... and fix the Previous/Next buttons:
if (n == 0) {
    document.getElementById("prevBtn").style.display = "none";
} else {
    document.getElementById("prevBtn").style.display = "inline";
}
if (n == (x.length - 1)) {
    document.getElementById("nextBtn").innerHTML = "Submit";
} else {
    document.getElementById("nextBtn").innerHTML = "Next";
}
//... and run a function that will display the correct step indicator:
//fixStepIndicator(n)
}

function nextPrev(n) {
// This function will figure out which tab to display
var x = document.getElementsByClassName("tab");
// Exit the function if any field in the current tab is invalid:
if (n > 0 && !validateForm(n)) return false;
if (currentTab + n < x.length) {
    // Hide the current tab:
    x[currentTab].style.display = "none";
    $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
} else {
    // ... the form gets submitted:
    formSave();
    return false;
}
// Increase or decrease the current tab by 1:
currentTab = currentTab + n;

// Otherwise, display the correct tab:
showTab(currentTab);
}
function formSave() {
var isValid = $('#formADV').valid();
if (!isValid)
    return false;
var doctypevalues = [];
$('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
doctypevalues.sort();
// duplicate check
for (var k = 1; k < doctypevalues.length; ++k) {
    if (doctypevalues[k] == doctypevalues[k - 1]) {
        $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
        $('#Validation').modal('toggle');
        return false;
    }
    isValid = true;
}
if (isValid)
    $('#formADV').submit();
}
    function ValidateCommitment() {
    var msg = 'valid';
    var commitmentAmt = parseFloat($('#CommitmentAmount').val());
    var netAdvAmt = parseFloat($('#lblAdvNetAmt').html()) || 0;
    var ttlGSTElgAmt = parseFloat($('#hiddenTaxEligibleAmt').val()) || 0;

var validCmtAmt = (netAdvAmt - ttlGSTElgAmt).toFixed(2);
commitmentAmt = commitmentAmt.toFixed(2);
$("#tbodyCommitmentSelList tr").each(function () {
    var elePayment = $(this).find("input[name$='.PaymentAmount']");
    var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
    var parseVal = parseFloat($(elePayment).val()) || 0;
    var avlBal = parseFloat($(eleAvlBal).val()) || 0;
    if (parseVal > avlBal)
        msg = "Commitment payment value should not be greater than available balance."
    });

    var vCmtAmt = Number(validCmtAmt);

    if (vCmtAmt > 0)
        vCmtAmt = vCmtAmt;
    else
        vCmtAmt = 0;

    if (vCmtAmt != commitmentAmt){
    msg = 'There is a mismatch between the settlement value and allocated commitment value. Please update the value to continue.';
}
return msg;
}
function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        //var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        //var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var ttlAdvAmt = parseFloat($('#InvoiceAmount').val()) || 0;
        var invTaxAmt = parseFloat($('#InvoiceTaxAmount').val()) || 0;
        var ttlJVExpVal = parseFloat($('#ttlJVDr').val()) || 0;
        var ttlJVDrVal = parseFloat($('#ttlJVCr').val()) || 0;
        var netAdvAmt = round(ttlAdvAmt + invTaxAmt);
        var netDrAmt = parseFloat($('#ttlDr').val()) || 0; // ttlExpAmt + ttldeductAmt;
        var offsetValue = $("input[name='GST']:checked").val();
        var TransAmt = (crAmt - ttlJVExpVal);
        var TransCrAmt = (netCrAmt + ttlJVExpVal).toFixed(2);
        var rcm = $('#RCM_f').is(':checked');
            if (isNaN(netCrAmt)) {
            return 'Total Credit Value is not valid.';
            }
            if (ttlJVExpVal != ttlJVDrVal) {
            msg = 'Not a valid entry. Credit and Debit value of JV are not equal.';
            }
            if ((netDrAmt != crAmt) || (TransCrAmt != crAmt)) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }

        if (TransAmt != netAdvAmt && !rcm) {
            msg = 'There is a mismatch between the credit value and invoice value. Please update the value to continue.';
            }
            //if (offsetValue == "Eligible") {
            //    if (isNaN(ttlExpAmt) || isNaN(commitmentAmt)) {
            //        msg = 'The expense value / allocated commitment value is not a valid entry.';
            //    } else if (ttlExpAmt != commitmentAmt) {
            //        msg = 'There is a mismatch between the expense value and allocated commitment value. Please update the value to continue.';
            //    }
            //}else if (offsetValue == "NotEligible") {
            //    if (isNaN(netCrAmt) || isNaN(commitmentAmt)) {
            //        msg = 'Total Credit Value / Total Commitment Value is not a valid entry';
            //    } else if (netCrAmt != commitmentAmt) {
            //        msg = 'Total Credit and Total Commitment Values are not equal.';
            //    }
            //}
        var hdList = [];
        var hdJVList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
        var jv = $(this).closest('tr').find("input[name$='.IsJV']").val();
        if (jv.toLowerCase() == "true")
            hdJVList.push($(val).val());
        else
            hdList.push($(val).val());
        });
        hdList.sort();
        hdJVList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
        if (hdList[k] == hdList[k - 1]) {
            msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        //for (var k = 1; k < hdJVList.length; ++k) {
        //    if (hdJVList[k] == hdJVList[k - 1]) {
        //        msg = "Duplicate account head exist in expense details. Please select a different head.";
        //    }
        //}
        return msg;
    }
 function validatetds(vendorId, settlementamt, TotalInvoice) {
    retval = true;
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
            data: { "vendorId": vendorId, "poNumberRequired": true, "transTypeCode": 'ADV', "TDSRequired": true },
            dataType: "json",
            success: function (result) {
                if (result.TDSLimit === '' || result.TDSLimit === null)
                    result.TDSLimit = 0;
                if (TotalInvoice === '' || TotalInvoice === null)
                    TotalInvoice = 0;
                if (settlementamt === '' || settlementamt === null)
                    settlementamt = 0;
                var tdsCal = 0;
                payType = $('#PaymentType').val();
                if (payType === "1")
                { tdsCal = ((parseFloat(result.TDSLimit) - parseFloat(TotalInvoice)) + parseFloat(settlementamt)); }
                else
                {
                    tdsCal = ((parseFloat(result.TDSLimit) - parseFloat(TotalInvoice)) + parseFloat(settlementamt));
                    // tdsCal = (parseFloat(result.TDSLimit)  + parseFloat(settlementamt))
                }

                if (tdsCal > 5000000) {
                    retval = false;
                    messageBox("The Total payment is" + " Rs: " + tdsCal.toFixed(2) + " hence 194Q is applicable for goods.", "warning");
                    //$('#FailedAlert').html("The Total payment is" + " Rs: " + tdsCal.toFixed(2) + " hence 194Q is applicable for goods.");
                    //$('#Failed').modal('show');
                }
            }
        });
    return retval;
    };
function validateForm(n) {
// This function deals with validation of the form fields
var isValid = false;
var hadError = false;
var tabs = $(".tab");
var currentTabEle = tabs[currentTab];
var inputs = $(":input, textarea, select"); // get all the form inputs and selects
var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
var count = stepElements.length; // check that there are inputs
if (count <= 0) {                // if there are not no reason to loop them
    return true;                 // this can be used to perform other action if there are no steps
}
else if (currentTab == 0) {

    var content = $('#tbodyCommitmentSrchList tr td:last').html();
    var poTaxEleAmt = $('#hiddenTaxEligibleAmt').val() || 0;
    var invTaxEleAmt = $('#InvoiceTaxEligibleAmount').val() || 0;

    var SettleAmt = $('#lblAdvNetAmt').text() || 0;
    var vendorid = $('#VendorId').val() || 0;
    var TotalInvoice = $("#TotalInvoiceValue").val() || 0;
    validatetds(vendorid, SettleAmt, TotalInvoice);


    if (poTaxEleAmt != invTaxEleAmt) {
        hadError = true;
        $("#alert").text('There is a mismatch between the PO Eligible Tax Amount and Invoice Eligible Tax Amount. Please update the value to continue.');
        $('#Validation').modal('show');
    } else if (content == '') {
        var icsrOH = $('#ICSROverHead_f').is(':checked');
        if (icsrOH) {
            $('#srchHiddenProjectClassification').val(4);
            searchCommitment(0, 0, 4);
        }
        else
            searchCommitment();
    }
    var validationMsg = validateRoundOfAdjustment()
    if (validationMsg != 'valid') {
        hadError = true;
        $("#alert").text(validationMsg);
        $('#Validation').modal('show');
    }
} else if (currentTab == 1) {
    var validationMsg = ValidateCommitment()
    if (validationMsg != 'valid') {
        hadError = true;
        $("#alert").text(validationMsg);
        $('#Validation').modal('show');
    } else {
        if ($('#NeedUpdateTransDetail').val() == 'true') {
            GetTransactionDetails();
        }
        var invAmt = parseFloat($('#InvoiceAmount').val()) || 0;
        var invTaxAmt = parseFloat($('#InvoiceTaxAmount').val()) || 0;
        var rcm = $('#RCM_f').is(':checked');
        var invElgTaxAmt = parseFloat($('#hiddenTaxEligibleAmt').val()) || 0;
        if (rcm) {
           // $("#CreditorAmount").val(invAmt.toFixed(2));
            $("#CreditorAmount").val(round(invAmt));
        } else {
            //$("#CreditorAmount").val((invAmt + invTaxAmt).toFixed(2)); //10616
            $("#CreditorAmount").val(round(invAmt + invTaxAmt));
        }
        //if($("#AdvancePercentage").val() == 100){
        //    $("#CreditorAmount, #ttlCr").val($('#lblAdvTtlAmt').text());
        //}else{
        //}
        //$("#DeductionAmount, #ttlDr, #ExpenseAmount").val('');

    }
} else if (currentTab == 2) {
    var validationMsg = ValidateTransaction()
    if (validationMsg != 'valid') {
        hadError = true;
        $("#alert").text(validationMsg);
        $('#Validation').modal('show');
    }
} else if (currentTab == 3) {
    if ($('#CheckListVerified_By').val() == '') {
        hadError = true;
        $("#alert").text('Checklist is not verified.');
        $('#Validation').modal('show');
    }
}
$(stepElements).each(function (idx, ele) {

    if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && $(ele).is(':visible')) {
        isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
        if (!isValid) { hadError = true; } // set our flag if there was an error
    }

});
return !hadError; // return the valid status

}


$('#BankHead').on("change", function () {
var BankHeadId = $(this).val();

$("#BankHead").val(BankHeadId);
$("#srchProjectType").val(1);
EmptyCommitmentSrchList();
EmptyCommitmentSelList();

$.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankHeadId },

        function (locationdata) {
            var select = $("#srchProjectNumber");
            select.empty();

            $.each(locationdata, function (index, itemData) {
                select.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name

                }));
            });
            select.selectpicker('refresh');
        });

});
    function EmptyCommitmentSelList() {
        $('#tbodyCommitmentSelList tr').not(':first').remove();
        $('#tbodyCommitmentSelList tr td').not(':last').not(':nth-last-child(2)').html('');
        //$('#tbodyCommitmentSelList tr td:last').find("input").val("");
        $('#tbodyCommitmentSelList tr').find("input[name!='CommitmentDetail.Index']").val("");
        $('#CommitmentAmount').val('');
    }
    function EmptyCommitmentSrchList() {

        $('#tbodyCommitmentSrchList tr').not(':first').remove();
        $('#tbodyCommitmentSrchList tr td').not(':first').html('');
        $('#tbodyCommitmentSrchList tr td:first input').val('');
    }

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
