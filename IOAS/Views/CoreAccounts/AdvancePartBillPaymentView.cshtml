@model IOAS.Models.BillEntryModelViewModel
@{
    ViewBag.Title = "AdvancePartBillPayment";
    ViewBag.DocmentTypeList = ViewBag.DocmentTypeList;
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
    }
</style>
<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h4><b>Advance Part Bill</b></h4>
    </div>
</div>
<div class="row">
    <div class="white-bg ad-navbar">
        <div class="col-md-3 ds-spl-bg">
            <div class="ds-icn">
                <i class="ion-ios-list-outline "></i>
            </div>
            <div class="ds-tt">
                <span>Request Reference</span><br />
                <span>@Html.DisplayFor(m => m.SourceName)</span>
                @Html.HiddenFor(m => m.Source, new { @id = "Source" })
                @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                @Html.HiddenFor(m => m.BillId)
            </div>
        </div>
        <div class="col-md-3 ds-spl-bg">
            <div class="ds-icn">
                <i class="ion-ios-calendar-outline"></i>
            </div>
            @if (Model.ReferenceNumber != null)
            {
                <div class="ds-tt">
                    <span>Ref Number (WF / Tapal)</span>
                    <span>@Html.DisplayFor(m => m.ReferenceNumber)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                     @Html.HiddenFor(m => m.SubCode)
                     @Html.Hidden("TransactionTypeCode", "PTM")
                    @Html.Hidden("varProjectClearingPayable")
                    @Html.Hidden("varProjectCreditors_Dr")
                    @Html.Hidden("varProjectCreditors_Cr")
                    @Html.Hidden("varTDSGST_Payable")
                    @Html.Hidden("varTDSIT_Payable")
                    @Html.Hidden("varCGSTInput")
                    @Html.Hidden("varSGSTInput")
                    @Html.Hidden("varIGSTInput")
                </div>
            }
            else
            {
                <div class="ds-tt">
                    <span>Email Date</span><br />
                    <span>@Html.DisplayFor(m => m.SourceBillEmailDate)</span>
                </div>
            }


        </div>
        <div class="col-md-3 col-md-offset-3">
            <div class="reg-no custom-reg-no">
                <div class="form-group custom-form-group">
                    <label>Number</label>
                    <h4>@Html.DisplayFor(m => m.BillNumber)</h4>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="vw-dts-bg">
    <div class="row">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th colspan="4">Payment Details</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <label>Vendor</label>
                        <h4>@Html.DisplayFor(m => m.VendorName)</h4>
                        @Html.HiddenFor(m => m.VendorId)
                        @if (Model.VendorId != null)
                        {
                            <a href="javascript:void(0)" id="lnkBillHistory">View previous bill history</a>
                        }
                        else
                        {
                            <a href="javascript:void(0)" id="lnkBillHistory" class="dis-none">View previous bill history</a>
                        }
                    </td>
                    <td>
                        <label>TDS Section</label>
                        <h4>@Html.DisplayFor(m => m.TdsSection)</h4>
                    </td>
                    <td>
                        <label>Type of PO</label>
                        <h4>@Html.DisplayFor(m => m.PoType)</h4>
                    </td>
                    <td>
                        <label>PO Number</label>
                        <h4>@Html.DisplayFor(m => m.PoNumber)</h4>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>PO Date</label>
                        <h4>@Html.DisplayFor(m => m.BillPoDate)</h4>
                    </td>
                    <td>
                        <label>Invoice Number</label>
                        <h4>@Html.DisplayFor(m => m.InvoiceNumber)</h4>
                    </td>
                    <td>
                        <label>Invoice Date</label>
                        <h4>@Html.DisplayFor(m => m.ProInvoiceDate)</h4>
                    </td>
                    <td>
                        <label>Bill Type</label>
                        <h4>@Html.DisplayFor(m => m.BillType)</h4>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Bank</label>
                        <h4>@Html.DisplayFor(m => m.BankHeadName)</h4>
                    </td>
                    <td>
                        <label>TDS IT Basic Value</label>
                        <h4>@Html.DisplayFor(m => m.TDSBasicAmt)</h4>
                    </td>
                    <td>
                        <label>TDS GST Basic Value</label>
                        <h4>@Html.DisplayFor(m => m.TDSGstBasicValue)</h4>
                    </td>
                    <td>
                        <label>Bank Guarantee Amount</label>
                        <h4>@Html.DisplayFor(m => m.BankGuaranteeAmount)</h4>
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <label>Bank Guarantee Remarks</label>
                        <h4>@Html.DisplayFor(m => m.BankGuaranteeRemarks)</h4>
                    </td>
                    <td colspan="2">
                        <label>Remarks</label>
                        <h4>@Html.DisplayFor(m => m.Remarks)</h4>
                    </td>
                    
                </tr>
                <tr>
                    <td>
                        <label>PAN</label>
                        <h4>@Html.DisplayFor(m => m.PanNumber)</h4>
                        <label id="lblStateCode" class="dis-none"></label>
                    </td>
                    <td>
                        <label>GSTIN</label>
                        <h4>@Html.DisplayFor(m => m.GstinNumber)</h4>
                    </td>
                    <td colspan="2">
                        <label>Address</label>
                        <h4>@Html.DisplayFor(m => m.Address)</h4>
                    </td>
                </tr>
                <tr>
                    <td class="reg-no">
                        <label>% of payment</label>
                        @Html.HiddenFor(m => m.AdvancePercentage, new { @class = "form-control", @onkeypress = "return ValidateNumberOnly(event)" })
                        <h4>@Html.DisplayFor(m=>m.AdvancePercentage)</h4>
                        <label id="lbl100Pct" class="dis-none alert-danger">Tax value will not be booked now since the advance is 100%.</label>
                        <div class="dis-none">
                            @Html.CheckBoxFor(m => m.InclusiveOfTax_f)
                            <span></span>
                            With tax
                        </div>
                        <div class="col-md-10 dis-none">
                            <div class="adv-bg-adj gray-bg">
                                <label class="radio chkbox-adj">
                                    @Html.RadioButton("GST", "Eligible", true)
                                    @*<input type="radio" name="GST" checked value="Eligible">*@
                                    <span></span> Eligible for GST offset<br>
                                </label>
                                <label class="radio chkbox-adj">
                                    @Html.RadioButton("GST", "PartiallyEligible")
                                    @*<input type="radio" name="GST" value="PartiallyEligible">*@
                                    <span></span> Partially eligible for GST offset<br>
                                </label>
                                <label class="radio chkbox-adj">
                                    @Html.RadioButton("GST", "NotEligible")
                                    @*<input type="radio" name="GST" value="NotEligible">*@
                                    <span></span> This bill is not eligible for GST offset
                                </label>

                                @Html.Hidden("ExpenseRequired", "True")
                                @Html.Hidden("isHaveElgGST")
                            </div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col-md-12">
            @Html.Partial("_PODetailsView", Model.PODetail)
        </div>
    </div>
    <div class="row mt-20">
        <div class="col-md-6">
            <div class="tb-bl-dts wht-bg">
                <h3>PO Value</h3>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group custom-form-group ">
                            <label>Total PO Value :</label>
                            <h4 id="lblPOTtlAmt"></h4>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label>Total TAX :</label>
                            <h4 id="lblPOTtlTaxAmt"></h4>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label>Total:</label>
                            <h4 id="lblPONetAmt"></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="tb-bl-dts alter-bg">
                <h3>Payable Details</h3>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group custom-form-group ">
                            <label>Part Payment Value :</label>
                            <h4 id="lblAdvTtlAmt"></h4>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="form-group custom-form-group">
                            <label>Tax Payable :</label>
                            <h4><span id="lblAdvTtlTaxAmt"></span> <i id="taxTT" class="ion-information-circled" data-toggle="tooltip" data-html="true" data-placement="top" title="<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br><span>IGST  :<b>0.00</b></span><br>"></i></h4>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group custom-form-group">
                            <label>Part Payment Total :</label>
                            <h4 id="lblAdvNetAmt"></h4>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group custom-form-group ">
                            <label>GST Eligible Value :</label>
                            <h4 id="lblTaxEligibleAmt"></h4>
                            @Html.HiddenFor(m => m.hiddenTaxEligibleAmt)
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-12">
            @Html.Partial("_CommitmentDetailsView", Model.CommitmentDetail)
            @Html.Partial("_TransactionDetailsView", Model)
        </div>
    </div>
</div>
<div class="vw-dts-bg">
    <div class="row">

        <div class="col-md-12">
            <div>
                @Html.Partial("_CheckListDetailView", Model.CheckListDetail)
            </div>
            <table class="table table-bordered mb-null">
                <tbody>
                    <tr>

                        <td>
                            @Html.HiddenFor(m => m.CheckListVerified_By, new { @disabled = "disabled" })
                            @Html.HiddenFor(m => m.CheckListVerifierName, new { @disabled = "disabled" })
                            <label>Verified by</label>
                            <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                        </td>
                    </tr>
                </tbody>
            </table>
           
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @Html.Partial("_DocumentDetailView", Model.DocumentDetail)
        </div>
    </div>
</div>
<div class="row">
    @if (Model.PFInit != true)
    {
        <div class="col-md-12 text-center pd-tb-30">

            <input type="button" onclick="window.location.href='@Url.Action("PartBillPaymentList", "CoreAccounts")';" class="btn btn-default" value="Close" id="btnclose" />
        </div>
    }
    else
    {
        <div class="col-md-12 text-center pd-tb-30">

            <input type="button" onclick="window.location.href='@Url.Action("Dashboard", "Home")';" class="btn btn-default" value="Close" id="btnclose" />
        </div>
    }
</div>

@Html.AntiForgeryToken()
<div id="popup"></div>
<input type="hidden" id="currentRefId" value="@Model.BillId" />
<input type="hidden" id="processGuideLineId" value="@ViewBag.processGuideLineId" />
@Html.Partial("_ProcessStatus")
<script>
    
   $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });
    $('.selectpicker').selectpicker({
        liveSearch: true
    });
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#SourceEmailDate, #PODate, #srchFromDate, #srchToDate, #InvoiceDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);

    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        var selSource = $('#Source').val();
        var vendorId = $('#VendorId').val();
        $('#btnAddExpense').addClass('dis-none');
        if(vendorId != ''){
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
                data: { "vendorId": vendorId },
                dataType: "json",
                success: function (result) {
                    $('#lblVendorPAN').text(result.PAN);
                    $('#lblVendorGSTIN').text(result.GSTIN);
                    $('#lblVendorAddr').text(result.Address);
                    $('#lblStateCode').text(result.StateCode);
                    UpdateGSTSplitUp()
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }

        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }

        var offsetValue = parseFloat($("#hiddenTaxEligibleAmt").val()) || 0;
        if (offsetValue == 0 || !$('#InclusiveOfTax_f').is(':checked')) {
            $('#ExpenseRequired').val('False');
        }

        $('#lblVendorName').html($('#VendorId option:selected').text())
        CalculatePOValue();
        CalculatePaymentValue();
        CalculateDeductionTotal();
        $('#NeedUpdateTransDetail').val('false');
    });
    $('#lnkBillHistory').click(function(){
        var vendorId = $('#VendorId').val();
        if (vendorId != '') {
            var token = $("input[name=__RequestVerificationToken]").val();
            var searchData = { "__RequestVerificationToken": token, "vendorId": vendorId };
            $.ajax({
                url: "@Url.Action("_PreviousBillHistory", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                success: function (data) {
                    $("#popup").html(data);
                    $("#preBillHistoryModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
    });

    $('#BillType').change(function(){
        $('#NeedUpdateTransDetail').val('true');
        EmptyPODetails();
        applyACToTypeOfService();
    })
    $('#hiddenTaxEligibleAmt').change(function () {
        $('#NeedUpdateTransDetail').val('true');
        updateExpenseRequired();
    });
    function updateExpenseRequired(){
        var offsetValue = parseFloat($("#hiddenTaxEligibleAmt").val()) || 0;
        var taxReq = $('#InclusiveOfTax_f').is(':checked');
        if(offsetValue == 0 || !taxReq){
            $('#ExpenseRequired').val('False');
            $('#tbodyDeductionList').find('input[name$=".Amount"]').removeClass('required');
        }else{
            $('#ExpenseRequired').val('True');
            $('#tbodyDeductionList').find('input[name$=".Amount"]').addClass('required');
        }
    }
    $("#AdvancePercentage").blur(function () {
        $('#NeedUpdateTransDetail').val('true');
        CalculatePOValue();
    });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function resetVendor() {
        $('#lblVendorPAN, #lblVendorGSTIN, #lblVendorAddr, #lblStateCode').text('');
        //$('#divPreBill').addClass('dis-none');
    }


    //$('#srchFromDate').change(function () {
    //    $('#srchToDate').val('');
    //    var minDate = parseDate($(this).val());
    //    var maxDate = moment(minDate).add(10, 'days').toDate();
    //    $("#srchToDate").datepicker("option", "minDate", minDate);
    //    $("#srchToDate").datepicker("option", "maxDate", maxDate);
    //});

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }
    $('#VendorTDSDetailId').change(function (){
        $('#NeedUpdateTransDetail').val('true');
    });
    $('#VendorId').change(function () {
        resetVendor();
        var vendorId = $(this).val();
        $('#NeedUpdateTransDetail').val('true');
        var ele = $('#VendorTDSDetailId');
        $('#lblVendorName').html($('#VendorId option:selected').text());
        if (vendorId != '') {
            $('#lnkBillHistory').removeClass('dis-none');
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
                data: { "vendorId": vendorId ,"TDSRequired" : true},
                dataType: "json",
                success: function (result) {
                    $('#lblVendorPAN').text(result.PAN);
                    $('#lblVendorGSTIN').text(result.GSTIN);
                    $('#lblVendorAddr').text(result.Address);
                    $('#lblStateCode').text(result.StateCode);
                    UpdateGSTSplitUp();
                    ele.empty();
                    ele.append($('<option/>', {
                        value: "",
                        text: "Select any",
                    }));
                    $.each(result.TDSList, function (index, itemData) {
                        ele.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    ele.selectpicker('refresh');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }else{
            $('#lnkBillHistory').addClass('dis-none');
        }
    });

    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        subcode = $('#SubCode').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "PTM","tSubCode" : subcode},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
    function GetTransactionDetails() {
        var stateCode = $('#lblStateCode').html();
        var interstate = IsInterState(stateCode);
        var BillType = $('#BillType').val();
        //var tdsDetailId = $('#VendorTDSDetailId').val() || null;
        var tdsSel = $("#VendorTDSDetailId").val();//$("#VendorTDSDetailId option:selected").text();
        var subcode = GetIndirectPaymentSubCodeByTDSSection(tdsSel,undefined);
        $('#SubCode').val(subcode);
        var ttlAmt = parseFloat($('#lblAdvTtlAmt').text()) || 0;
        var invTaxAmt = parseFloat($('#hiddenTaxEligibleAmt').val()) || 0;

        var selTdsSection = $("#VendorTDSDetailId option:selected").text();
        var pct = selTdsSection.substring(selTdsSection.lastIndexOf('-') + 1, selTdsSection.lastIndexOf('%'))
        var pctParse = parseInt(pct) || 0;
        var tdsITAmt = 0, tdsGSTAmt = 0;
        var tdsITBasicAmt = parseFloat($('#TDSBasicAmt').val()) || 0;
        if (tdsITBasicAmt > 0 && pctParse > 0)
            tdsITAmt = (tdsITBasicAmt * pctParse) / 100;
        var tdsGSTBasicAmt = parseFloat($('#TDSGSTBasicAmt').val()) || 0;
        if (tdsGSTBasicAmt > 0)
            tdsGSTAmt = (tdsGSTBasicAmt * 2) / 100;
        var ttlTds = tdsITAmt + tdsGSTAmt;
        $("#varProjectClearingPayable").val((ttlAmt - invTaxAmt).toFixed(2));
        $("#varProjectCreditors_Cr").val(ttlAmt.toFixed(2));
        $("#varProjectCreditors_Dr").val(ttlTds.toFixed(2));
        $("#varTDSGST_Payable").val(tdsGSTAmt.toFixed(2));
        $("#varTDSIT_Payable").val(tdsITAmt.toFixed(2));
        if (!interstate && invTaxAmt > 0) {
            var splitGstAmt = invTaxAmt / 2;
            $("#varCGSTInput").val(splitGstAmt.toFixed(2));
            $("#varSGSTInput").val(splitGstAmt.toFixed(2));
        } else if (invTaxAmt > 0) {
            $("#varIGSTInput").val(invTaxAmt.toFixed(2));
        }
        FillTransactionDetails();
    }

    function UpdateGSTSplitUp() {
        var ttlAdvTax = parseFloat($('#lblAdvTtlTaxAmt').html());
        var stateCode = $('#lblStateCode').html();
        if (stateCode == '33') {
            if (ttlAdvTax > 0) {
                var splitAmt = (ttlAdvTax / 2).toFixed(2);
                $('#taxTT').attr('data-original-title', '<span>CGST :<b>' + splitAmt + '</b></span><br><span>SGST  :<b>' + splitAmt + '</b></span><br>')
            } else {
                $('#taxTT').attr('data-original-title', '<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br>');
            }
        } else {
            if (ttlAdvTax > 0) {
                $('#taxTT').attr('data-original-title', '<span>IGST :<b>' + ttlAdvTax.toFixed(2) + '</b></span><br>')
            } else {
                $('#taxTT').attr('data-original-title', '<span>IGST :<b>0.00</b></span><br>')
            }
        }
    }
    function CalculatePOValue() {
        var advPct = parseInt($("#AdvancePercentage").val());
        if (isNaN(advPct))
            advPct = 0;
        var ttlPOVal = 0, ttlPOTaxVal = 0, netPOVal = 0, ttlAdvVal = 0, ttlAdvTaxVal = 0, netAdvVal = 0;
        var elgF = false;
        var ttlGSTElgAmt = 0;
        if (advPct > 0) {
            $('#tbodyPO tr').not(':first').each(function (i, rowEle) {
                var amt = parseFloat($(rowEle).find('input[name$=".TotalAmount"]').val());
                var chckElg = $(rowEle).find('input[type="checkbox"][name$=".IsTaxEligible"]').prop('checked');
                if (chckElg)
                    elgF = true;
                if (!isNaN(amt))
                    ttlPOVal = ttlPOVal + amt;
                if (amt > 0) {
                    var taxPct = parseFloat($(rowEle).find('input[name$=".TaxPct"]').val());
                    if (isNaN(taxPct))
                        taxPct = 0;
                    var advTaxVal = 0, advAmt = 0, netAdvAmt = 0;
                    advAmt = amt * advPct / 100;
                    ttlAdvVal = ttlAdvVal + advAmt;
                    if (taxPct > 0) {
                        var taxAmt = amt * taxPct / 100;
                        ttlPOTaxVal = ttlPOTaxVal + taxAmt;

                        advTaxVal = advAmt * taxPct / 100;
                        ttlAdvTaxVal = ttlAdvTaxVal + advTaxVal;
                        if (chckElg)
                            ttlGSTElgAmt = ttlGSTElgAmt + advTaxVal;
                    }
                    netAdvAmt = advAmt + advTaxVal;
                    //var poTaxVal = amt * taxPct / 100;
                    //ttlPOTaxVal = ttlPOTaxVal + poTaxVal;
                    $(rowEle).find('.tdAdvPct').html(advPct.toFixed(2));
                    $(rowEle).find('.tdAdvAmt').html(advAmt.toFixed(2));
                    $(rowEle).find('.tdTaxAmt').html(advTaxVal.toFixed(2));
                    //$(rowEle).find('.tdNetAmt').html(netAdvAmt.toFixed(2));
                    $(rowEle).find('.tdNetAmt').html(netAdvAmt.toFixed(2));
                }
            });
            if (elgF)
                $('#isHaveElgGST').val('true');
            else
                $('#isHaveElgGST').val('false');
            $('#lblPOTtlAmt').text(ttlPOVal.toFixed(2));
            $('#lblPOTtlTaxAmt').text(ttlPOTaxVal.toFixed(2));
            netPOVal = (ttlPOVal + ttlPOTaxVal).toFixed(2);
            $('#lblPONetAmt').text(netPOVal);
            $('#lblAdvTtlAmt').text(ttlAdvVal.toFixed(2));
            $('#lblAdvTtlTaxAmt').text(ttlAdvTaxVal.toFixed(2));
            $('#hiddenTaxEligibleAmt').val(ttlGSTElgAmt.toFixed(2)).trigger('change');
            $('#lblTaxEligibleAmt').text(ttlGSTElgAmt.toFixed(2));
            netAdvVal = (ttlAdvVal + ttlAdvTaxVal).toFixed(2);
            $('#lblAdvNetAmt').text(round(netAdvVal));
            UpdateGSTSplitUp();
            var roundValItc = $('#hiddenTaxEligibleAmt').val() || 0;
            var validCmtAmt = (netAdvVal - roundValItc).toFixed(2);
            $('#lblcommitamt').html(validCmtAmt);
        } else
            $('#lblcommitamt').html(0);
    }

    //Round off calculation // 10616
    function round(total) {

        if (!isNaN(total)) {
           
            var valToBeRounded = parseFloat(total);
            var decimalPart = valToBeRounded % 1;

            console.log(valToBeRounded);
            if (decimalPart > 0.5) {
                // Round up the number
                var roundUpNumber = Math.ceil(valToBeRounded);
                value = roundUpNumber;
            }
            else {
                // Round off the number
                var roundOffNumber = Math.round(valToBeRounded);
                value = roundOffNumber;
            }
            return value;
        }
    }

    $('#CommitmentAmount, #CreditorAmount, #ExpenseAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });

    ///* Tab Sections Start*/
    //var currentTab = 0; // Current tab is set to be the first tab (0)
    //showTab(currentTab); // Display the crurrent tab
    //function showTab(n) {
    //    // This function will display the specified tab of the form...
    //    var x = document.getElementsByClassName("tab");
    //    x[n].style.display = "block";
    //    $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
    //    //... and fix the Previous/Next buttons:
    //    if (n == 0) {
    //        document.getElementById("prevBtn").style.display = "none";
    //    } else {
    //        document.getElementById("prevBtn").style.display = "inline";
    //    }
    //    if (n == (x.length - 1)) {
    //        document.getElementById("nextBtn").innerHTML = "Submit";
    //        $('#nextBtn').hide();
    //    } else {
    //        document.getElementById("nextBtn").innerHTML = "Next";
    //        $('#nextBtn').show();
    //    }
    //    //... and run a function that will display the correct step indicator:
    //    //fixStepIndicator(n)
    //}

    //function nextPrev(n) {
    //    // This function will figure out which tab to display
    //    var x = document.getElementsByClassName("tab");
    //    // Exit the function if any field in the current tab is invalid:
    //    //if (n > 0 && !validateForm(n)) return false;
    //    if (currentTab + n < x.length) {
    //        // Hide the current tab:
    //        x[currentTab].style.display = "none";
    //        $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
    //    } else {
    //        // ... the form gets submitted:
    //        formSave();
    //        return false;
    //    }
    //    // Increase or decrease the current tab by 1:
    //    currentTab = currentTab + n;

    //    // Otherwise, display the correct tab:
    //    showTab(currentTab);
    //}
    //function formSave() {
    //    var isValid = $('#formADV').valid();
    //    if (!isValid)
    //        return false;
    //    var doctypevalues = [];
    //    $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
    //    doctypevalues.sort();
    //    // duplicate check
    //    for (var k = 1; k < doctypevalues.length; ++k) {
    //        if (doctypevalues[k] == doctypevalues[k - 1]) {
    //            $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
    //            $('#Validation').modal('toggle');
    //            return false;
    //        }
    //        isValid = true;
    //    }
    //    if (isValid)
    //        $('#formADV').submit();
    //}
    //function ValidateCommitment() {
    //    var msg = 'valid';
    //    var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
    //    var netAdvAmt = parseFloat($('#lblAdvNetAmt').html());
    //    var advPct = parseInt($("#AdvancePercentage").val());
    //    var ttlGSTElgAmt = parseFloat($('#hiddenTaxEligibleAmt').val()) || 0;
    //    var validCmtAmt = netAdvAmt - ttlGSTElgAmt;
    //    $("#tbodyCommitmentSelList tr").each(function(){
    //        var elePayment = $(this).find("input[name$='.PaymentAmount']");
    //        var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
    //        var parseVal = parseFloat($(elePayment).val()) || 0;
    //        var avlBal = parseFloat($(eleAvlBal).val()) || 0;
    //        if (parseVal > avlBal)
    //            msg = "Commitment payment value should not be greater than available balance."
    //    });
    //    if (validCmtAmt != commitmentAmt) {
    //            msg = 'There is a mismatch between the part payment total value and allocated commitment value. Please update the value to continue.';
    //        }
    //    return msg;
    //}
    //function ValidateTransaction() {
    //    var msg = 'valid';
    //    var netCrAmt = parseFloat($('#CreditorAmount').val());
    //    var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
    //    var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
    //    var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
    //    var crAmt = parseFloat($('#ttlCr').val()) || 0;
    //    var netAdvAmt = parseFloat($('#lblAdvNetAmt').html());
    //    var ttlAdvAmt = parseFloat($('#lblAdvTtlAmt').html());
    //    var ttlJVExpVal = parseFloat($('#ttlJVDr').val()) || 0;
    //    var ttlJVDrVal = parseFloat($('#ttlJVCr').val()) || 0;
    //    var TransAmt = ttlExpAmt - ttlJVExpVal;
    //    var netDrAmt = ttlExpAmt + ttldeductAmt;
    //    var ttlGSTElgAmt = parseFloat($('#hiddenTaxEligibleAmt').val()) || 0;
    //    var validCmtAmt = netAdvAmt - ttlGSTElgAmt;
    //    var offsetValue = $("input[name='GST']:checked").val();
    //    if (isNaN(netCrAmt)) {
    //        return 'The Credit value is not a valid entry.';
    //    }
    //    if(ttlJVExpVal != ttlJVDrVal) {
    //        msg = 'Not a valid entry. Credit and Debit value of JV are not equal.';
    //    }
    //    if(netDrAmt != crAmt || (netCrAmt + ttlJVExpVal ) != crAmt ) {
    //        msg = 'Not a valid entry. Credit and Debit value are not equal.';
    //    }
    //    if (isNaN(TransAmt) || isNaN(commitmentAmt)) {
    //        msg = 'The expense value / allocated commitment value is not valid.';
    //    } else if (TransAmt != commitmentAmt) {
    //        msg = 'There is a mismatch between the expense value and allocated commitment value. Please update the value to continue.';
    //    }

    //    var hdList = [];
    //    var hdJVList = [];
    //    $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
    //        var jv = $(this).closest('tr').find("input[name$='.IsJV']").val();
    //        if (jv.toLowerCase()== "true")
    //            hdJVList.push($(val).val());
    //        else
    //            hdList.push($(val).val());
    //    });
    //    hdList.sort();
    //    hdJVList.sort();
    //    // duplicate check
    //    for (var k = 1; k < hdList.length; ++k) {
    //        if (hdList[k] == hdList[k - 1]) {
    //            msg = "Duplicate account head exist in expense details. Please select a different head.";
    //        }
    //    }
    //    //for (var k = 1; k < hdJVList.length; ++k) {
    //    //    if (hdJVList[k] == hdJVList[k - 1]) {
    //    //        msg = "Duplicate account head exist in expense details. Please select a different head.";
    //    //    }
    //    //}
    //    return msg;
    //}
    //function validateForm(n) {
    //    // This function deals with validation of the form fields
    //    var isValid = false;
    //    var hadError = false;
    //    var tabs = $(".tab");
    //    var currentTabEle = tabs[currentTab];
    //    var inputs = $(":input, textarea, select"); // get all the form inputs and selects
    //    var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
    //    var count = stepElements.length; // check that there are inputs
    //    if (count <= 0) {                // if there are not no reason to loop them
    //        return true;                 // this can be used to perform other action if there are no steps
    //    } else if (currentTab == 0) {
    //        var content = $('#tbodyCommitmentSrchList tr td:last').html();
    //        if (content == '') {
    //            searchCommitment()
    //        }
    //    } else if (currentTab == 1) {
    //        var validationMsg = ValidateCommitment()
    //        if (validationMsg != 'valid') {
    //            hadError = true;
    //            $("#alert").text(validationMsg);
    //            $('#Validation').modal('show');
    //        } else {
    //            if($('#NeedUpdateTransDetail').val() == 'true'){
    //                GetTransactionDetails();
    //            }
    //            var offsetValue = parseFloat($("#hiddenTaxEligibleAmt").val()) || 0;
    //            if ($('#ExpenseRequired').val() == 'True' || offsetValue == 0) {
    //                $("#CreditorAmount").val($('#lblAdvNetAmt').text());

    //            } else {
    //                $("#CreditorAmount").val($('#lblAdvTtlAmt').text());
    //            }
    //            //$("#DeductionAmount, #ttlDr, #ExpenseAmount").val('');
    //        }
    //    } else if (currentTab == 2) {
    //        var validationMsg = ValidateTransaction()
    //        if (validationMsg != 'valid') {
    //            hadError = true;
    //            $("#alert").text(validationMsg);
    //            $('#Validation').modal('show');
    //        }
    //    }else if (currentTab == 3) {
    //        if ($('#CheckListVerified_By').val() == '') {
    //            hadError = true;
    //            $("#alert").text('Checklist is not verified.');
    //            $('#Validation').modal('show');
    //        }
    //    }
    //    $(stepElements).each(function (idx, ele) {

    //        if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
    //            isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
    //            if (!isValid) { hadError = true; } // set our flag if there was an error
    //        }

    //    });
    //    return !hadError; // return the valid status

    //}

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
