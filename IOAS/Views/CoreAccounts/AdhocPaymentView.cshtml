@model IOAS.Models.AdhocPaymentModel
@{
    ViewBag.Title = "Reimbursement Payment";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}


<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h4><b>Reimbursement</b> </h4>
    </div>
</div>
<div class="row">
    <div class="white-bg ad-navbar">
        <div class="col-md-3 ds-spl-bg">
            <div class="ds-icn">
                <i class="ion-ios-list-outline "></i>
            </div>
            <div class="ds-tt">
                <span>Request Reference</span>
                <h4>@Model.SourceName</h4>
                @Html.HiddenFor(m => m.Source, new { @id = "Source" })
                @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                @Html.HiddenFor(m => m.AdhocId)
                @Html.Hidden("SourceTapalOrWorkflow", "True")
                @Html.HiddenFor(m => m.SubCode)
            </div>
        </div>
        <div class="col-md-3 ds-spl-bg">
            <div class="ds-icn">
                <i class="ion-ios-calendar-outline"></i>
            </div>
            @if (Model.ReferenceNumber != null)
            {
                <div class="ds-tt">
                    <span>Ref Number (WF / Tapal)</span>
                    <span>@Html.DisplayFor(m => m.ReferenceNumber)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                </div>
            }
            @if (Model.SourceEmailDate != null)
            {
                <div class="ds-tt">
                    <span>Email Date</span>
                    <h4>@Html.DisplayFor(m => m.SourceEmail)</h4>
                </div>
            }
        </div>


        <div class="col-md-3 col-md-offset-3">
            <div class="reg-no custom-reg-no">
                <div class="form-group custom-form-group">
                    <label>Number</label>
                    <h4>@Html.DisplayFor(m => m.AdhocPaymentNumber)</h4>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="vw-dts-bg">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-bordered mb-null">
                <thead>
                    <tr>
                        <th>Payment Type</th>
                        <th>Payee Type</th>
                        <th>Payee Name</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <h4>@Model.PayeeTypeName</h4>
                        </td>
                        <td>
                            <h4>@Model.PaymentTypeName</h4>
                        </td>
                        <td>
                            <h4>@Model.Name</h4>
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h3>Payment Details</h3>
            <div class="m-b-sm scrl-table scrl-table-po-bl">
                <table class="table table-bordered mb-null">
                    <tbody id="tbodyPO">
                        <tr>

                            <td>Vendor Name</td>
                            <td>Invoice Number </td>
                            <td>SAC / HSN</td>
                            <td>Invoice Date</td>
                            <td>Description</td>
                            <td>Amount</td>
                            <td>Tax %</td>
                            <td>Tax Amount</td>
                            <td>Total Amount</td>
                            <td style="width: 300px;">GSTIN</td>
                            <td>Tax Eligible</td>
                            <td>Interstate</td>


                        </tr>
                        @if (Model.PaymentDetails != null)
                        {
                            var count = 0;
                            foreach (var item in Model.PaymentDetails)
                            {
                                var detailId = "PaymentDetails[" + count + "].AdhocDetailId";
                                var vendor = "PaymentDetails[" + count + "].Vendor";
                                var invoicenumber = "PaymentDetails[" + count + "].InvoiceNumber";
                                var hsnCode = "PaymentDetails[" + count + "].HSNCode";
                                var hsn = "PaymentDetails[" + count + "].TypeOfServiceOrCategory";
                                var invoicedate = "PaymentDetails[" + count + "].InvDate";
                                var description = "PaymentDetails[" + count + "].Description";
                                var amount = "PaymentDetails[" + count + "].Amount";
                                var taxpercent = "PaymentDetails[" + count + "].TaxablePercentage";
                                var taxvalue = "PaymentDetails[" + count + "].TaxValue";
                                var totalvalue = "PaymentDetails[" + count + "].TotalValue";
                                var gstin = "PaymentDetails[" + count + "].GSTIN";
                                var taxEligible = "PaymentDetails[" + count + "].IsTaxEligible";
                                var interstate = "PaymentDetails[" + count + "].IsInterstate";
                                count++;
                                <tr id="trdetails" class="p-b-sm">
                                    <td>

                                        @item.Vendor
                                    </td>
                                    <td>
                                        @item.InvoiceNumber
                                        @Html.Hidden("PaymentDetails.Index", @count)
                                        @Html.TextBox(@detailId, item.AdhocDetailId, new { @class = "form-control dis-none" })
                                    </td>
                                    <td>
                                        @item.HSNCode
                                        @Html.TextBox(@hsn, item.TypeOfServiceOrCategory, new { @class = "form-control dis-none" })

                                    </td>
                                    <td>
                                        @item.InvDate
                                    </td>
                                    <td>
                                        @item.Description
                                    </td>
                                    <td>
                                        @item.Amount
                                        @Html.Hidden(@amount, item.Amount, new { @class = "form-control" })

                                    </td>
                                    <td>
                                        @item.TaxablePercentage
                                        @Html.Hidden(@taxpercent, item.TaxablePercentage, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })

                                    </td>
                                    <td>
                                        @Html.Hidden(@taxvalue, item.TaxValue, new { @class = "form-control", @readonly = true, @id = "InternToDate", @autocomplete = "off" })
                                        @item.TaxValue
                                    </td>
                                    <td>
                                        @Html.Hidden(@totalvalue, item.TotalValue, new { @class = "form-control", @readonly = true, @id = "Totalvalue", @autocomplete = "off" })
                                        @item.TotalValue
                                    </td>
                                    <td>
                                        @Html.Hidden(@gstin, item.GSTIN, new { @class = "form-control", @onchange = "calculateamount()" })
                                        @item.GSTIN
                                    </td>
                                    <td>
                                        @Html.Hidden(@taxEligible, item.IsTaxEligible)
                                        @if (item.IsTaxEligible == true)
                                        {
                                            <h4>Yes</h4>
                                        }
                                        else
                                        {
                                            <h4>No</h4>
                                        }
                                    </td>
                                    <td>
                                        @Html.Hidden(@interstate, item.IsInterstate)
                                        @if (item.IsInterstate == true)
                                        {
                                            <h4>Yes</h4>
                                        }
                                        else
                                        {
                                            <h4>No</h4>
                                        }
                                    </td>

                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <table class="table table-bordered mb-null">
                <tr>
                    <td colspan="4">
                        <label>Source Bank</label>
                        <h4>@Model.BankHeadName</h4>
                    </td>
                </tr>
                <tr>
                    <td colspan="4">
                        <label>Remarks</label>
                        <h4>@Model.Remark</h4>
                    </td>
                    
                </tr>
                <tr>
                    <td>
                        <label>Mode of Payment</label>
                        <h4>@Model.PaymentModeName</h4>
                    </td>
                    <td colspan="3">
                        <label>Description</label>
                        <h4>@Model.Description</h4>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Bank Name</label>
                        <h4>@Model.BankName</h4>
                    </td>
                    <td>
                        <label>Branch</label>
                        <h4>@Model.BranchName</h4>
                    </td>
                    <td>
                        <label>Account Number</label>
                        <h4>@Model.AccountNumber</h4>
                    </td>
                    <td>
                        <label>IFSC</label>
                        <h4>@Model.IFSCCode</h4>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Eligible Tax Amount</label>
                        <h4>@Model.EligibleTaxValue</h4>
                    </td>
                    <td>
                        <label>Total Tax Amount</label>
                        <h4>@Model.TotalTaxValue</h4>
                    </td>
                    <td>
                        <label>Total Payment Amount</label>
                        <h4>@Model.TotalAdhocPayValue</h4>
                    </td>
                    <td class="reg-no">
                        <label class="lblval">Net Payable Amount</label>
                        <h4 class="tatval">@Model.NetPayableValue</h4>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h3>Commitment Details</h3>
            @Html.Partial("_CommitmentDetailsView", Model.CommitmentDetail)
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @Html.Partial("_TransactionDetailsView", Model)
        </div>
    </div>
    <div class="row">

        <div class="col-md-12">
            <div>
                @Html.Partial("_CheckListDetailView", Model.CheckListDetail)
            </div>
            <table class="table table-bordered mb-null">
                <tbody>
                    <tr>

                        <td>
                            @Html.HiddenFor(m => m.CheckListVerified_By, new { @disabled = "disabled" })
                            @Html.HiddenFor(m => m.CheckListVerifierName, new { @disabled = "disabled" })
                            <label>Verified by</label>
                            <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                        </td>
                    </tr>
                </tbody>
            </table>

        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @Html.Partial("_DocumentDetailView", Model.DocumentDetail)
        </div>
    </div>
</div>
<div class="row">
    @if (Model.PFInit != true)
    {
        <div class="col-md-12 text-center pd-tb-30">

            <input type="button" onclick="window.location.href='@Url.Action("AdhocPaymentList", "CoreAccounts")';" class="btn btn-default" value="Close" id="btnclose" />
        </div>
    }
    else
    {
        <div class="col-md-12 text-center pd-tb-30">

            <input type="button" onclick="window.location.href='@Url.Action("Dashboard", "Home")';" class="btn btn-default" value="Close" id="btnclose" />
        </div>
    }
</div>




@Html.AntiForgeryToken()
<div id="popup"></div>
<input type="hidden" id="currentRefId" value="@Model.AdhocId" />
<input type="hidden" id="processGuideLineId" value="@ViewBag.processGuideLineId" />
@Html.Partial("_ProcessStatus")
<script>

    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
   // $('#TravelToDate, #TravelFromDate').datepicker({ minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('input[name$=".InvDate"]').datepicker({maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
            CalculateDeductionTotal();
            GetTransactionDetails();
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
        $('select[name="PaymentMode"]').val(@Model.PaymentMode);
        $('select[name="PaymentType"]').val(@Model.PaymentType);
        $('#txtpaymentmode').each(function () {
            var paymentmode = $(this).val();
            if(paymentmode == "" || paymentmode == "Select any")
            {
                $('#bankdetails').hide();
            }
            if(paymentmode == 1)
            {
                $('#bankdetails').hide();
            }
            if(paymentmode == 2)
            {
                $('#bankdetails').show();
            }
        });
        $(document).on('change', 'select[name="CategoryId"]', function () {
            categoryChange($(this));
            var category = $(this).val();
            var type = "";
            if(category == 1)
            {
                type = "PI";
            }
            if(category == 2)
            {
                type = "Student";
            }
            if(category == 3)
            {
                type = "Others";
            }
            $("input[name='CreditorType']").val(type);
        });
        $('#tbodyPaymentBU').find('select[name="CategoryId"]').each(function () {
            categoryChange($(this),'U');
            var category = $(this).val();
            var type = "";
            if(category == 1)
            {
                type = "PI";
            }
            if(category == 2)
            {
                type = "Student";
            }
            if(category == 3)
            {
                type = "Others";
            }
            $("input[name='CreditorType']").val(type);

        });
        $('#tbodyPO tr').each(function () {
            var index = $(this).find("input[name='PaymentDetails.Index']").val();
            var hdEle = $("input[name='PaymentDetails[" + index + "].TypeOfServiceOrCategory']");
            var acEle = $("input[name='PaymentDetails[" + index + "].HSNCode']");
            applyAutoComplete(acEle, hdEle, '@Url.Action("LoadTypeOfServiceList")');
        });
        //$('#btnAddPayment input[name$=".HSNCode"]').each(function () {
        //    if ($(this).val() != '') {
        //        $(this).closest('tr').find('input').not('input[name$=".Description"],input[name$=".IsTaxEligible"],input[name$=".IsInterstate"],input[name$=".GSTIN"]').addClass('required');
        //    } else {
        //        $(this).closest('tr').find('input').not('input[name$=".Description"],input[name$=".IsTaxEligible"],input[name$=".IsInterstate"],input[name$=".GSTIN"]').removeClass('required');
        //    }
        //});
        $(document).on('keyup', 'input[name$=".HSNCode"]', function () {
            if ($(this).val() != '') {
                $(this).closest('tr').find('input').not('input[name$=".Description"],input[name$=".IsTaxEligible"],input[name$=".IsInterstate"],input[name$=".GSTIN"],input[name$=".AdhocDetailId"]').addClass('required');
            } else {
                $(this).closest('tr').find('input').not('input[name$=".Description"],input[name$=".IsTaxEligible"],input[name$=".IsInterstate"],input[name$=".GSTIN"],input[name$=".AdhocDetailId"]').removeClass('required');
               // $(this).closest('tr').find('input[name$=".IsInterstate"],input[name$=".IsTaxEligible"]').attr("checked", false);
            }
        });
        var paymentDetails = @Html.Raw(Json.Encode(Model.PaymentDetails));
        //$.each(paymentDetails, function (i, result) {
        //    if (i == 0) {
        //        var trEle = $('#tbodyPO tr:nth-child(2)');
        //        $('#tbodyPO tr').not(':first,:nth-child(2)').remove();
        //        $(trEle).find("input[name='PaymentDetails.Index']").val(i);
        //        //trEle.find("input[name='PaymentDetails.Index']");
        //        //trEle.find('select[name$=".CategoryId"]');
        //      //  paymentCategoryChange(trEle);
        //      ////  trEle.find('select[name$=".Department"]').val(result.Department);
        //      //  trEle.find('input[name$=".autoComplete"]').val(result.Name);
        //      //  trEle.find('input[name$=".Name"]').val(result.Name);
        //      //  if(result.Name != "")
        //      //  {
        //      //      trEle.find('input[name$=".UserId"]').val("0");
        //      //  }

        //        trEle.find('input[name$=".AdhocDetailId"]').val(result.AdhocDetailId);
        //        trEle.find('input[name$=".Vendor"]').val(result.Vendor);
        //        trEle.find('input[name$=".InvoiceNumber"]').val(result.InvoiceNumber);
        //        trEle.find('input[name$=".InvDate"]').val(result.InvDate);
        //        trEle.find('input[name$=".Description"]').val(result.Description);


        //        trEle.find('input[name$=".Amount"]').val(result.Amount);
        //        trEle.find('input[name$=".TaxablePercentage"]').val(result.TaxablePercentage);
        //        trEle.find('input[name$=".TaxValue"]').val(result.TaxValue);
        //        trEle.find('input[name$=".TotalValue"]').val(result.Amount + result.TaxValue);
        //        trEle.find('input[name$=".GSTIN"]').val(result.GSTIN);
        //        trEle.find('input[name$=".HSNCode"]').val(result.HSNCode);
        //        trEle.find('input[name$=".TypeOfServiceOrCategory"]').val(result.TypeOfServiceOrCategory);
        //        if (result.IsTaxEligible == true)
        //        {
        //            trEle.find('input[name$=".IsTaxEligible"]').prop('checked', true);
        //        }
        //        if (result.IsTaxEligible == false)
        //        {
        //            trEle.find('input[name$=".IsTaxEligible"]').prop('checked', false);
        //        }
        //        if (result.IsInterstate == true)
        //        {
        //            trEle.find('input[name$=".IsInterstate"]').prop('checked', true);
        //        }
        //        if (result.IsInterstate == false)
        //        {
        //            trEle.find('input[name$=".IsInterstate"]').prop('checked', false);
        //        }
        //        //else if (result.IsTaxEligible == false)
        //        //{
        //        //    trEle.find('input[name$=".IsTaxEligible"]').removeAttribute("checked");
        //        //}

        //    } else {
        //        var trEleNew = $('#tbodyPO tr:nth-child(2)').clone();
        //        $(trEleNew).find('a.dis-none').removeClass('dis-none');
        //        $(trEleNew).find("input[name='PaymentDetails.Index']").val(i);
        //        $(trEleNew).find("input, select").each(function () {
        //            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
        //            //$(this).attr("id", $(this).attr("id").replace(/\d+/, i));
        //            //$(this).attr("code", $(this).attr("id").replace(/\d+/, i));
        //        });
        //        $(trEleNew).find("span[data-valmsg-for]").each(function () {
        //            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
        //        });
        //      //  trEle.find("input[name='PaymentDetails.Index']");
        //      //  DepartmentChange(trEle);
        //      ////  trEle.find('select[name$=".Department"]').val(result.Department);
        //      //  trEle.find('input[name$=".autoComplete"]').val(result.Name);
        //      //  trEle.find('input[name$=".Name"]').val(result.Name);
        //      //  if(result.Name != "")
        //      //  {
        //      //      trEle.find('input[name$=".UserId"]').val("0");
        //      //  }
        //        trEleNew.find('input[name$=".AdhocDetailId"]').val(result.AdhocDetailId);
        //        trEleNew.find('input[name$=".Vendor"]').val(result.Vendor);
        //        trEleNew.find('input[name$=".InvoiceNumber"]').val(result.InvoiceNumber);
        //        trEleNew.find('input[name$=".InvDate"]').val(result.InvDate);
        //        trEleNew.find('input[name$=".Description"]').val(result.Description);


        //        trEleNew.find('input[name$=".Amount"]').val(result.Amount);
        //        trEleNew.find('input[name$=".TaxablePercentage"]').val(result.TaxablePercentage);
        //        trEleNew.find('input[name$=".TaxValue"]').val(result.TaxValue);
        //        trEleNew.find('input[name$=".TotalValue"]').val(result.Amount + result.TaxValue);
        //        trEleNew.find('input[name$=".GSTIN"]').val(result.GSTIN);
        //        trEleNew.find('input[name$=".HSNCode"]').val(result.HSNCode);
        //        trEleNew.find('input[name$=".TypeOfServiceOrCategory"]').val(result.TypeOfServiceOrCategory);
        //        if (result.IsTaxEligible == true)
        //        {
        //            trEleNew.find('input[name$=".IsTaxEligible"]').prop('checked', true);
        //        }
        //        if (result.IsTaxEligible == false)
        //        {
        //            trEleNew.find('input[name$=".IsTaxEligible"]').prop('checked', false);
        //        }
        //        if (result.IsInterstate == true)
        //        {
        //            trEleNew.find('input[name$=".IsInterstate"]').prop('checked', true);
        //        }
        //        if (result.IsInterstate == false)
        //        {
        //            trEleNew.find('input[name$=".IsInterstate"]').prop('checked', false);
        //        }
        //        $(trEleNew).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
        //            dateFormat: 'dd-MM-yy', changeYear: true
        //        })

        //        $('#tbodyPO').append(trEleNew);
        //    }
        //});
       // calcDateDiff();
        var piname = $('input[name="Name"]').val();
        $('#lblVendorName').html(piname);
       // $('#lblVendorName').html($('#txtPI option:selected').text());
        //var stipendAmt = parseFloat($('#txtTotalStipendValue').val());
        //$("#CreditorAmount").val(stipendAmt);
        CalculatePaymentValue();
        CalculateDeductionTotal();
        calculateeligibletaxamount();
        $('#NeedUpdateTransDetail').val('false');
    });

    //$('#fromdate, #todate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-10:+30' });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });


    function aplyAutoComplete(ele, url, setId) {
        $(ele).autocomplete({
            select: function (event, ui) {
                event.preventDefault();
                $(ele).val(ui.item.label);
                //$(ele).closest('tr').find(".lblSelId").text(ui.item.label);
                if (setId == true) {
                    $(ele).closest('tr').find("input[name='UserId']").val(ui.item.value);
                    $(ele).closest('tr').find("input[name='Name']").val(ui.item.label);
                } else {
                    $(ele).closest('tr').find("input[name='UserId']").val('0');
                    $(ele).closest('tr').find("input[name='Name']").val(ui.item.label);
                }
            },
            focus: function (event, ui) {
                event.preventDefault();
                $(ele).val(ui.item.label);
            },
            source: function (request, response) {
                $.getJSON(url, { term: request.term },
                 function (locationdata) {
                     response(locationdata);
                 });
            },
            minLength: 3
        });
    }
    function categoryChange(el, mode) {
        var selCat = $(el).val();
        if (mode != 'U') {
            $(el).closest('tr').find("input[name='UserId'],input[name='Name']").val('');
            //$(el).closest('tr').find("input[name='autoComplete'],input[name='UserId'],input[name='Name']").val('');
        }
        if (selCat == 1) {
            $(el).closest('tr').find("input[name='UserId']").addClass('required');
            var ele = $(el).closest('tr').find("input[name='Name']");
           // $(el).addClass('required');
            $(el).closest('tr').find("input[name='Name']").addClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadPIList", true)
        } else if (selCat == 2) {
            $(el).closest('tr').find("input[name='UserId']").addClass('required');
            var ele = $(el).closest('tr').find("input[name='Name']");
            //$(el).addClass('required');
            $(el).closest('tr').find("input[name='Name']").addClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadStudentList", false);
        } else if (selCat == 3) {
               $(el).closest('tr').find("input[name='UserId']").removeClass('required');
              // var ele = $(el).closest('tr').find("input[name='Name']");
               $(el).removeClass('required');
               $(el).closest('tr').find("input[name='Name']").removeClass('required');
            //   applyAutoComplete(ele, "../CoreAccounts/LoadClearanceAgentList", true)

        }
    }
     $(document).on('change', 'input[name="Name"]', function () {
        var name = $(this).val();
        var user = $(this).closest('tr').find("input[name='UserId']");
        var userid = $(this).closest('tr').find("input[name='UserId']").val();
        var category = $(this).closest('tr').find("select[name='CategoryId']");
        var categoryid = $(this).closest('tr').find("select[name='CategoryId']").val();
        if(categoryid == 1)
        {
            if(userid != "")
            {
                $.getJSON("@Url.Action("LoadPIDetailsbyName", "CoreAccounts")", { Name: name },
                            function (locationdata) {
                                // $(select).selectpicker("destroy");
                                $.each(locationdata, function (index, itemData) {
                                    if(itemData.code == "")
                                    {
                                        user.val('');
                                        $(this).val('');
                                        categoryChange(category);
                                        $('#MsgValidation').html("Name does not exist. Please select a valid name");
                                        $('#ValidationModal').modal('toggle');
                                        return false;
                                    }
                                });

                            });
            }
            else if (userid == "")
            {
                $(this).val('');
                categoryChange(category);
                $('#MsgValidation').html("Name does not exist. Please select a valid name");
                $('#ValidationModal').modal('toggle');
                return false;
            }
        }
        if(categoryid == 2)
        {
            if(userid != "")
            {
                $.getJSON("@Url.Action("LoadStudentDetails", "CoreAccounts")", { RollNo: name },
                            function (locationdata) {
                                // $(select).selectpicker("destroy");
                                $.each(locationdata, function (index, itemData) {
                                    if(itemData.code == "")
                                    {
                                        user.val('');
                                        $(this).val('');
                                        categoryChange(category);
                                        $('#MsgValidation').html("Student Name does not exist. Please select a valid name");
                                        $('#ValidationModal').modal('toggle');
                                        return false;
                                    }
                                });

                            });
            }
            else if (userid == "")
            {
                $(this).val('');
                categoryChange(category);
                $('#MsgValidation').html("Name does not exist. Please select a valid name");
                $('#ValidationModal').modal('toggle');
                return false;
            }
        }
         var Name =  $("input[name='Name']").val();
         // $("#CreditorAmount").val(StipendAmt);
         $('#lblVendorName').html(Name);
    });
    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    $('#StipendValueperMonth, #TotalStipendValue, #NoOfTraveller').on("copy cut paste drop", function () {
        return false;
    });

    $(document).on('change', 'input[name$=".Amount"]', function () {
        calculateamount();
        calculateeligibletaxamount();
    });

    $(document).on('change', 'input[name$=".TaxablePercentage"]', function () {
        var value = $(this).val();
        if(value > 100)
        {
            $('#MsgValidation').html("Percentage value cannot be greater than 100. Please enter a value less than 100");
            $('#ValidationModal').modal('toggle');
            return false;
        }

        calculateamount();
        calculateeligibletaxamount();
    });

    $(document).on('change', 'input[name$=".TaxValue"]', function () {
        calculateamount();
        calculateeligibletaxamount();
    });
    $(document).on('click', 'a.removeDetail', function () {
        $(this).closest('tr').remove();
        calculateamount();
        calculateeligibletaxamount();
    });

    $('#txtpaymenttype').change(function () {
        $('#NeedUpdateTransDetail').val('true');
        var PaymentType = $(this).val();
        $.getJSON("@Url.Action("GetTransactionTypecode", "CoreAccounts")", { Paymenttype: PaymentType },
                    function (locationdata) {
                        $.each(locationdata, function (index, itemData) {
                            $('#TransactionTypeCode').val(itemData.name);
                            $("input[name='TransactionTypeCode']").val(itemData.name);
                        });
                    });
    });
    $('#txtpaymentmode').change(function () {
        var paymentmode = $(this).val();
        if(paymentmode == "" || paymentmode == "Select any")
        {
            $('#bankdetails').hide();
        }
        if(paymentmode == 1)
        {
            $('#bankdetails').hide();
            $("input[name='BankName']").removeClass('required')
            $("input[name='BranchName']").removeClass('required')
            $("input[name='AccountNumber']").removeClass('required')
            $("input[name='IFSCCode']").removeClass('required')
            $('input[name="BankName"]').val('');
            $('input[name="BranchName"]').val('');
            $('input[name="AccountNumber"]').val('');
            $('input[name="IFSCCode"]').val('');
        }
        if(paymentmode == 2)
        {
            $('#bankdetails').show();
            $("input[name='BankName']").addClass('required')
            $("input[name='BranchName']").addClass('required')
            $("input[name='AccountNumber']").addClass('required')
            $("input[name='IFSCCode']").addClass('required')
            fillbankdetails();
        }

    });

    $('#btnAddPayment').click(function () {
        var cln = $('#tbodyPO tr:nth-child(2)').clone().find("select, input, textarea, input[type!='checkbox']").val("").end();
        // $(cln).find('.tdAdvAmt, .tdTaxAmt, .tdNetAmt, .tdTaxCode').text('');
       // $(cln).find('input[type="hidden"][name$=".IsTaxEligible"]').val('false');
        //$(cln).find('input[name$=".IsTaxEligible"]').prop('checked', false);
        $(cln).find('a.dis-none').removeClass('dis-none');
        var index = $('#tbodyPO tr:last').find("input[name='PaymentDetails.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='PaymentDetails.Index']").val(index);
        $(cln).find('input[name$=".IsInterstate"],input[name$=".IsTaxEligible"]').prop('checked', false);
       // $(cln).find('input[type="hidden"][name$=".IsInterstate"],input[type="hidden"][name$=".IsTaxEligible"]').val('false');
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
           // $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
           // $(this).attr("code", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
            maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true
        })

        $('#tbodyPO').append(cln);
        var hdEle = $("input[name='PaymentDetails[" + index + "].TypeOfServiceOrCategory']");
        var acEle = $("input[name='PaymentDetails[" + index + "].HSNCode']");
        applyAutoComplete(acEle, hdEle, '@Url.Action("LoadTypeOfServiceList")')

    });
    function calculateamount() {
        var totalamount = 0;
        var totaltax = 0;
        var eligibletaxtotal = 0;
        var netpayabletotal = 0;
        $('#tbodyPO tr').each(function (idx, val) {
            var amount = parseFloat($(this).closest('tr').find('input[name$=".Amount"]').val());
            var taxpercent = parseFloat($(this).closest('tr').find('input[name$=".TaxablePercentage"]').val());
            var taxvalue = parseFloat($(this).closest('tr').find('input[name$=".TaxValue"]').val());
            var taxamount = parseFloat((amount * taxpercent)/100);

            if (!isNaN(taxamount)) {
                $(this).find('input[name$=".TaxValue"]').val(taxamount);
                totaltax += taxamount;
            }
            if (!isNaN(amount)) {
                totalamount += amount;
            }
        });
        totalamount = parseFloat((totalamount).toFixed(0));
        totaltax = parseFloat((totaltax).toFixed(0));
        netpayabletotal = totalamount + totaltax;
        if (!isNaN(netpayabletotal)) {
            $("#txtNetPayableValue").val((netpayabletotal).toFixed(0));
           // $("#CreditorAmount").val(netpayabletotal.toFixed(0));
        }
        if (!isNaN(totaltax)) {
            $("#txtTotalTaxValue").val((totaltax).toFixed(0));
        }
        if (!isNaN(totalamount)) {
            $("#txtAdhocPayValue").val((totalamount).toFixed(0));
        }
    }
    function fillbankdetails() {
        var CategoryId = $('select[name="CategoryId"]').val();
        if(CategoryId == 1)
        {
            type = "Professor";
        }
        if(CategoryId == 2)
        {
            type = "Student";
        }
        if(CategoryId == 3)
        {
            type = "Others";
        }
        var UserId = $('input[name="UserId"]').val();

        $.getJSON("@Url.Action("GetBankDetailsbyCategory", "CoreAccounts")", { Category: type, Id: UserId},
                    function (locationdata) {
                        $.each(locationdata, function (index, itemData) {
                            $('#TransactionTypeCode').val(itemData.name);
                            $("input[name='TransactionTypeCode']").val(itemData.name);
                        });
                    });
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetBankDetailsbyCategory", "CoreAccounts")",
            data: { "Category": type, "UsrId": UserId },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $('input[name="BankName"]').val(result.BankName);
                $('input[name="BranchName"]').val(result.BranchName);
                $('input[name="AccountNumber"]').val(result.AccountNumber);
                $('input[name="IFSCCode"]').val(result.IFSCCode);
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });

    }
    $(document).on('click', 'input[name$=".IsTaxEligible"]', function () {
        calculateeligibletaxamount();
        var ele = $(this).closest('tr').find('input[name$=".IsTaxEligible"]')
        if ($(this).prop('checked'))
        {
            var gstin = $(this).closest('tr').find('input[name$=".GSTIN"]');
            $(gstin).addClass('required');
        }
        else
        {
            var gstin = $(this).closest('tr').find('input[name$=".GSTIN"]');
            $(gstin).removeClass('required');
        }

    });

    function calculateeligibletaxamount() {
        var eligibletaxtotal = 0;
        $('#tbodyPO input[name$=".IsTaxEligible"]:checked').each(function (idx, val) {

               // var taxeligible = $('#tbodyPO input[name$=".IsTaxEligible"]:checked');
                var taxeligiblevalue = parseFloat($(this).closest('tr').find('input[name$=".TaxValue"]').val());
                if (!isNaN(taxeligiblevalue)) {
                    eligibletaxtotal += taxeligiblevalue;
                }
                $(this).val(true);
                if($(this).not(':checked'))
                {
                    var gstin = $(this).closest('tr').find('input[name$=".GSTIN"]');
                    $(gstin).removeClass('required');
                }
        });
        if (!isNaN(eligibletaxtotal)) {
            $("#txtEligibleTaxValue").val(eligibletaxtotal.toFixed(0));
            var netpayamt = parseFloat($('#txtNetPayableValue').val());
            var commitamt = (netpayamt - eligibletaxtotal).toFixed(0);
            $('#lblcommitamt').html(commitamt);
        }
    }

    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        var typecode = $('#TransactionTypeCode').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": typecode, "tSubCode" : "1"},
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                $(cln).find('#lblTransType').text(item.TransactionType);
                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }
    function GetTransactionDetails() {
        var interstate_f = false;
        var typecode = $('#TransactionTypeCode').val();
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": typecode, "tSubCode" : "1", },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                //var amt = 0;
                //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                //    var parseVal = parseFloat($(elePayment).val());
                //    if (!isNaN(parseVal))
                //        amt = amt + parseVal;
                //});
                if (i == 0) {
                    var trEle = $('#tbodyExpenseList tr:first');
                    $(trEle).find('input[name$=".Amount"]').val('');
                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEle).find('#lblTransType').text(item.TransactionType);
                    $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                } else {
                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".Amount"]').val('');
                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEleNew).find("input,Select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });

                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(trEleNew);
                }
            });
            $.each(result.DeductionDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyDeductionList tr:first');
                    $(trEle).find('input').val('');
                    var amtEle = $(trEle).find('input[name$=".Amount"]');
                    amtEle.removeClass('required');
                    $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                } else {
                    var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find("input").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });
                    var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                    amtEle.removeClass('required');
                    $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                    $('#tbodyDeductionList').append(trEleNew);
                }
            });
            var Name =  $("input[name='Name']").val();
            // $("#CreditorAmount").val(StipendAmt);
            $('#lblVendorName').html(Name);
            $('#NeedUpdateTransDetail').val('false');
            CalculateDeductionTotal();
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    //}
    }

    $('#CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });

    function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if (valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        } else {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }



    var selectPickerApiElement = function (el, choice, options, select) {
        $(el).find('select').selectpicker({
            liveSearch: true
        });
        $(el).children().eq(2).siblings().remove();
        if (choice == "add") {
            $(el).find('.selectpicker').append("<option>" + options + "</option>");
        } else if (choice == "all" && select != '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
            $(el).find('.selectpicker option[value=' + select + ']').attr('selected', 'selected');
        } else if (choice == "all" && select == '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
        } else if (choice == "empty") {
            $(el).find('.selectpicker').children().remove();
            $(el).find('.selectpicker').append("<option value=''>Select any</option>");
        } else {
            var selectOptionsLength = $(el).find('.selectpicker').children().length;
            for (var i = 1 ; i <= selectOptionsLength ; i++) {
                if (options == $(el).find('.selectpicker').children().eq(i).val()) {
                    $(el).find('.selectpicker').children().eq(i).remove();
                    break;
                } else {
                    continue;
                }

            }

        }
        $(el).find('select').selectpicker('refresh');
        return $(el).children().first().unwrap();

    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
