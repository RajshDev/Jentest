@model IOAS.Models.ForeignRemittanceModel
@{
    ViewBag.Title = "Foreign Remittance";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("ForeignRemittance", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formFRM", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Foreign Remittance</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.ForeignRemittanceId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @*@Html.DropDownListFor(m => m.SourceReferenceNumber, new SelectList(ViewBag.SourceRefNumberList, "id", "name"), "Select any",
                        new { @class = "form-control"})*@
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                    @Html.Hidden("TransactionTypeCode", "FRM")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>

            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.ForeignRemitNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Remittance Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">

                        <div class="row">

                            <div class="col-md-6">
                                <div class="bl-lg-panel-box pb-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-12">

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Beneficiary</label>
                                                            @Html.DropDownListFor(m => m.Beneficiary, new SelectList(ViewBag.Supplier, "id", "name"), "Select any", new { @class = "form-control selectpicker", @required = "required", @id = "txtBeneficiary" })
                                                            @Html.ValidationMessageFor(m => m.Beneficiary)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Remittance Date</label>
                                                            @Html.TextBoxFor(m => m.RemitDate, new { @class = "form-control", @id = "txtRemittanceDate", @required = "required", @readonly = true })
                                                            @Html.ValidationMessageFor(m => m.RemitDate)
                                                        </div>
                                                    </div>

                                                </div>

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>PO Number</label>
                                                            @Html.TextBoxFor(m => m.PONumber, new { @class = "form-control", @id = "txtPONumber" })
                                                            @Html.ValidationMessageFor(m => m.PONumber)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Type of Payment</label>
                                                            @Html.DropDownListFor(m => m.TypeofPayment, new SelectList(ViewBag.TypeofPayment, "id", "name"), "Select any", new { @class = "form-control", @required = "required", @id = "txtTypeofPayment" })
                                                            @Html.ValidationMessageFor(m => m.TypeofPayment)

                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Payment Bank</label>
                                                            @Html.DropDownListFor(m => m.PaymentBank, new SelectList(ViewBag.PaymentBank, "id", "name"), "Select any", new { @class = "form-control", @id = "txtPaymentBank", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.PaymentBank)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Project Number</label>
                                                            @*@Html.DropDownListFor(m => m.ProjectNumber, new SelectList(ViewBag.ProjectNumberList, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "txtProjectNumber", @required = "required" })*@
                                                            @Html.TextBoxFor(m => m.ProjectNumber, new { @class = "form-control", @id = "txtProjectNumber" })
                                                            @Html.TextBoxFor(m => m.ProjectId, new { @class = "form-control dis-none" })
                                                            @Html.ValidationMessageFor(m => m.ProjectNumber)
                                                        </div>
                                                    </div>

                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Portfolio Name</label>
                                                            @Html.DropDownListFor(m => m.PortfolioName, new SelectList(ViewBag.PortfolioName, "id", "name"), "Select any", new { @class = "form-control", @id = "txtPortfolioName", @required = "required", @disabled = true })
                                                            @Html.ValidationMessageFor(m => m.PortfolioName)
                                                            @Html.HiddenFor(m => m.PortfolioName)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Commitment Number</label>
                                                            @Html.DropDownListFor(m => m.CommitmentNumber, new SelectList(ViewBag.CommitmentNumberList, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "txtCommitmentNumber", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.CommitmentNumber)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Foreign Currency Equivalent to INR </label>
                                                            @Html.DropDownListFor(m => m.ForgnCurrncyEqualtoINR, new SelectList(ViewBag.Currencyequalantstatus, "id", "name"), "Select any", new { @class = "form-control", @id = "txtForgnCurrencyequaltoinr", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.ForgnCurrncyEqualtoINR)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Remittance Amount</label>
                                                            @Html.TextBoxFor(m => m.ForeignRemittanceAmount, new { @class = "form-control", @id = "txtForeignRemitAmt", @required = "required", @onchange = "getAmtInWords();" })
                                                            @Html.ValidationMessageFor(m => m.ForeignRemittanceAmount)
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    @Html.TextBoxFor(m => m.RemittanceAmountinWords, new { @class = "form-control dis-none", @id = "txtForeignRemitAmtinwords" })
                                                    @*<div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">Remittance Amount in Words</label>
                                                                @Html.TextAreaFor(m => m.RemittanceAmountinWords, new { @class = "form-control", @id = "txtForeignRemitAmtinwords", @required = "required" })
                                                                @Html.ValidationMessageFor(m => m.RemittanceAmountinWords)
                                                            </div>
                                                        </div>*@
                                                    <div class="col-md-12">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Remittance Currency</label>
                                                            @Html.DropDownListFor(m => m.RemittanceCurrency, new SelectList(ViewBag.Currency, "id", "name"), "Select any", new { @class = "form-control", @id = "txtRemittanceCurrency", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.RemittanceCurrency)
                                                            @Html.HiddenFor(m => m.RemittanceCurrencyCode)
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Invoice Number</label>
                                                            @Html.TextBoxFor(m => m.InvoiceNumber, new { @class = "form-control", @id = "txtInvoiceNumber", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.InvoiceNumber)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Invoice Date</label>
                                                            @Html.TextBoxFor(m => m.InvDate, new { @class = "form-control", @id = "txtInvoiceDate", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.InvDate)
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Correspondent/Intermediary Bank Name</label>
                                                            @Html.TextBoxFor(m => m.IntermediaryBank, new { @class = "form-control", @id = "txtIntermediaryBank" })
                                                            @Html.ValidationMessageFor(m => m.IntermediaryBank)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Correspondent/Intermediary Bank Address</label>
                                                            @Html.TextBoxFor(m => m.IntermediaryBankAddress, new { @class = "form-control", @id = "txtIntermediaryBankaddress" })
                                                            @Html.ValidationMessageFor(m => m.IntermediaryBankAddress)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Account to be Debited</label>
                                                            @Html.TextBoxFor(m => m.AccountNumber, new { @class = "form-control", @id = "txtAccountNumber", @required = "required", @readonly = true })
                                                            @Html.ValidationMessageFor(m => m.AccountNumber)
                                                            @Html.HiddenFor(m => m.AccountHeadId)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Account to be Debited for Charges</label>
                                                            @Html.TextBoxFor(m => m.AccountNumberDebitedforCharges, new { @class = "form-control", @id = "txtAccountNumberforCharges", @required = "required", @readonly = true })
                                                            @Html.ValidationMessageFor(m => m.AccountNumberDebitedforCharges)
                                                            @Html.HiddenFor(m => m.ChargesAccountHeadId)
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="bl-lg-panel-box  pb-null">
                                    <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                        <div class="cmn-panel-box">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Swift Code / ABA / Routing No / Sort Code</label>
                                                        @Html.TextBoxFor(m => m.IntermediaryBankCodeNumber, new { @class = "form-control", @id = "txtifsccode" })
                                                        @Html.ValidationMessageFor(m => m.IntermediaryBankCodeNumber)
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Foreign Bank Charges Type</label>
                                                        @Html.DropDownListFor(m => m.ForeignBankChargesType, new SelectList(ViewBag.ForgnBankChargesType, "id", "name"), "Select any", new { @class = "form-control mt20", @id = "txtRemittanceCurrency", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.ForeignBankChargesType)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <h4><b>Shipment Details</b> </h4>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Expected Date of Despatch / Download (Software)</label>
                                                        @Html.TextBoxFor(m => m.ExpectedDateofDespatch, new { @class = "form-control", @id = "txtExpecteddateofdespatch", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.ExpectedDateofDespatch)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Port of Despatch</label>
                                                        @Html.TextBoxFor(m => m.PortofDespatch, new { @class = "form-control mt-20", @id = "txtPortofDespatch" })
                                                        @Html.ValidationMessageFor(m => m.PortofDespatch)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Destination Port</label>
                                                        @Html.TextBoxFor(m => m.DestinationPort, new { @class = "form-control", @id = "txtExpecteddateofdispatch" })
                                                        @Html.ValidationMessageFor(m => m.DestinationPort)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Country of Origin of Goods</label>
                                                        @Html.DropDownListFor(m => m.CountryofOriginofGoods, new SelectList(ViewBag.CountryList, "CountryID", "CountryName"), "Select any", new { @class = "form-control", @id = "txtCountryofOriginofGoods" })
                                                        @Html.ValidationMessageFor(m => m.CountryofOriginofGoods)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Purpose of Remittance</label>
                                                        @Html.DropDownListFor(m => m.PurposeofRemittance, new SelectList(ViewBag.PurposeofRemit, "id", "name"), "Select any", new { @class = "form-control mt20", @id = "txtPurposeofRemittance", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.PurposeofRemittance)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Name of the Shipping Company / Airlines</label>
                                                        @Html.TextAreaFor(m => m.DestinationPort, new { @class = "form-control", @id = "txtExpecteddateofdispatch" })
                                                        @Html.ValidationMessageFor(m => m.DestinationPort)
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Goods Description</label>
                                                        @Html.TextBoxFor(m => m.GoodsDescription, new { @class = "form-control", @id = "txtGoodsDescription" })
                                                        @Html.ValidationMessageFor(m => m.GoodsDescription)
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>HS Classification Code</label>
                                                        @Html.TextBoxFor(m => m.HSClassificationCode, new { @class = "form-control", @id = "txtHSClassificationCode" })
                                                        @Html.ValidationMessageFor(m => m.HSClassificationCode)
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Import License Details</label>
                                                        @Html.TextBoxFor(m => m.ImportLicenseDetails, new { @class = "form-control mt20", @id = "txtImportLicenseDetails" })
                                                        @Html.ValidationMessageFor(m => m.ImportLicenseDetails)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Rate / contract booked with treasury (if any)</label>
                                                        @Html.TextBoxFor(m => m.RateorContractBookedDetails, new { @class = "form-control", @id = "txtRateorContractDetails" })
                                                        @Html.ValidationMessageFor(m => m.RateorContractBookedDetails)
                                                    </div>
                                                </div>
                                                @*<div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Expenses Head</label>
                                                            @Html.DropDownListFor(m => m.ExpensesHead, new SelectList(ViewBag.ExpensesHead, "id", "name"), "Select any", new { @class = "form-control", @id = "txtExpensesHead", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.ExpensesHead)
                                                        </div>
                                                    </div>*@
                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Special Reference No. to be Mentioned in SWIFT</label>
                                                        @Html.TextBoxFor(m => m.SpecialReferenceNumber, new { @class = "form-control", @id = "txtIntermediaryBank" })
                                                        @Html.ValidationMessageFor(m => m.SpecialReferenceNumber)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Payment Mode</label>
                                                        @Html.DropDownListFor(m => m.PaymentMode, new SelectList(ViewBag.PaymentMode, "id", "name"), "Select any", new { @class = "form-control mt20", @id = "txtPurposeofRemittance", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.PaymentMode)
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group custom-form-group">
                                                        <label>Comments to Bank</label>
                                                        @Html.TextBoxFor(m => m.CommentstoBank, new { @class = "form-control", @id = "txtHSClassificationCode" })
                                                        @Html.ValidationMessageFor(m => m.CommentstoBank)
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                    @if (Model.ForeignRemittanceId > 0)
                    {
                        <div class="col-md-12 col-sm-12 m-b-sm">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="bl-lg-panel-box pb-null">
                                        <div class="cmn-panel-box">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="row">
                                                        <div class="col-md-12">
                                                            <h4><b>Payment Details</b> </h4>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label>Payment Date</label>
                                                                @Html.TextBoxFor(m => m.PayDate, new { @class = "form-control", @id = "txtPaymentDate" })
                                                                @Html.ValidationMessageFor(m => m.PayDate)
                                                            </div>
                                                        </div>

                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">FOTT Reference Number</label>
                                                                @Html.TextBoxFor(m => m.FottReferenceNumber, new { @class = "form-control", @id = "txtReferenceNumber" })
                                                                @Html.ValidationMessageFor(m => m.FottReferenceNumber)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">User Reference Number</label>
                                                                @Html.TextBoxFor(m => m.UserReferenceNumber, new { @class = "form-control", @id = "txtReferenceNumber" })
                                                                @Html.ValidationMessageFor(m => m.UserReferenceNumber)
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">FX Rate</label>
                                                                @Html.TextBoxFor(m => m.FXRate, new { @class = "form-control", @id = "txtFXRate", @onkeypress = "return ValidateDecimalOnly(event)", @onchange = "calculateamount()" })
                                                                @Html.ValidationMessageFor(m => m.FXRate)
                                                            </div>
                                                        </div>

                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">Bill Amount</label>
                                                                @Html.TextBoxFor(m => m.BillAmount, new { @class = "form-control", @id = "txtBillAmount", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = true })
                                                                @Html.ValidationMessageFor(m => m.BillAmount)
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">Bill Commission</label>
                                                                @Html.TextBoxFor(m => m.BillCommission, new { @class = "form-control", @id = "txtBillCommission", @onkeypress = "return ValidateDecimalOnly(event)", @onchange = "calculateamount()" })
                                                                @Html.ValidationMessageFor(m => m.BillCommission)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">CGST</label>
                                                                @Html.TextBoxFor(m => m.BillCGST, new { @class = "form-control", @id = "txtBillCGST", @onkeypress = "return ValidateDecimalOnly(event)", @onchange = "calculateamount()" })
                                                                @Html.ValidationMessageFor(m => m.BillCGST)
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">SGST</label>
                                                                @Html.TextBoxFor(m => m.BillSGST, new { @class = "form-control", @id = "txtBillSGST", @onkeypress = "return ValidateDecimalOnly(event)", @onchange = "calculateamount()" })
                                                                @Html.ValidationMessageFor(m => m.BillSGST)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">Total Amount Debited to Project </label>
                                                                @Html.TextBoxFor(m => m.TotalAmountDebitedtoProject, new { @class = "form-control", @id = "txtTotalAmountDebitedtoProject", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = true })
                                                                @Html.ValidationMessageFor(m => m.TotalAmountDebitedtoProject)
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="bl-lg-panel-box  pb-null">
                                        <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                            <div class="cmn-panel-box">
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <h4><b>Statutory and Taxation</b> </h4>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Bill of Entry No</label>
                                                            @Html.TextBoxFor(m => m.BillofEntryNo, new { @class = "form-control", @id = "txtBillofEntryNo" })
                                                            @Html.ValidationMessageFor(m => m.BillofEntryNo)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Bill of Entry Date</label>
                                                            @Html.TextBoxFor(m => m.BillofEntryDate, new { @class = "form-control", @id = "txtBillofEntryDate" })
                                                            @Html.ValidationMessageFor(m => m.BillofEntryDate)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Customs Duty</label>
                                                            @Html.TextBoxFor(m => m.CustomsDuty, new { @class = "form-control", @id = "txtCustomsDuty", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                            @Html.ValidationMessageFor(m => m.CustomsDuty)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Demurrage Charges</label>
                                                            @Html.TextBoxFor(m => m.DemurrageCharges, new { @class = "form-control", @id = "txtDemurrageCharges", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                            @Html.ValidationMessageFor(m => m.DemurrageCharges)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Airport Authority Duty</label>
                                                            @Html.TextBoxFor(m => m.AirportAuthorityDuty, new { @class = "form-control", @id = "txtCustomsDuty", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                            @Html.ValidationMessageFor(m => m.AirportAuthorityDuty)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Clearing Charges</label>
                                                            @Html.TextBoxFor(m => m.ClearingCharges, new { @class = "form-control", @id = "txtClearingCharges", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                            @Html.ValidationMessageFor(m => m.ClearingCharges)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Others (if any)</label>
                                                            @Html.TextBoxFor(m => m.OthersifAny, new { @class = "form-control", @id = "txtOthersifany", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                            @Html.ValidationMessageFor(m => m.OthersifAny)
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>

                    @if (Model.ForeignRemittanceId == 0)
                    {
                        <button type="button" class="btn btn-primary pull-right" onclick="formSubmit()">Save</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    }
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("ForeignRemittanceList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}
<input type="hidden" id="currentRefId" value="@Model.ForeignRemittanceId" />
<input type="hidden" id="processGuideLineId" value="@ViewBag.processGuideLineId" />
@Html.Partial("_ProcessStatus")
<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<script>
    var dis = '@ViewBag.disabled';
    if (dis != "") {
        $('.form-control').prop('disabled', true);
        $('.ion-trash-a').removeClass();
        $('#btnAddPO').hide();
        $('#btnAddPayment').hide();
        $("input[type='radio']").prop('disabled', true);
        $('#selectCommitment').hide();
        $('#btnReset,#btnbookcommitment,#btnbookcommitment,#btnCollapseSrchCommit').hide();
        $('input[type="checkbox"]').prop('disabled', true);
        $('input[type="file"],#btnAddAttachment').hide();
        $('#ProcessStatusContainer .form-control').prop('disabled', false);
        $('#btnAddExpense').hide();
        $('.btn-circle').removeClass();
        $('.ion-close-round').removeClass();
    }
                                var errMsg = '@TempData["errMsg"]';
                                var succMsg = '@TempData["succMsg"]';

                                $('#SourceEmailDate, #srchFromDate, #srchToDate, #txtInvoiceDate, #txtBillofEntryDate, #txtPaymentDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
                                $('#txtRemittanceDate, #txtExpecteddateofdespatch').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true });
                                $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
                                var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
                                $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
                                $(document).ready(function () {
                                    if (succMsg != '') {
                                        $('#alertSuccess').html(succMsg);
                                        $('#Success').modal('toggle');
                                    }
                                    else if (errMsg != '') {
                                        $('#FailedAlert').html(errMsg);
                                        $('#Failed').modal('toggle');
                                        CalculateDeductionTotal();
                                        GetTransactionDetails();
                                    }

                                    var selSource = $('#Source').val();
                                    $("#divRefNum, #divRefEmailDate").addClass('dis-none');
                                    if (selSource == '1') {
                                        $("#divRefNum").removeClass('dis-none');
                                        applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
                                    } else if (selSource == '3') {
                                        $("#divRefNum").removeClass('dis-none');
                                        applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
                                    }
                                    else if (selSource == '2') {
                                        $('#divRefEmailDate').removeClass('dis-none');
                                    } else {
                                        $("#divRefNum").removeClass('dis-none');
                                    }
                                    $('select[name="TypeofPayment"]').val(@Model.TypeofPayment);
                                    $('select[name="PaymentBank"]').val(@Model.PaymentBank);
                                    $('select[name="PortfolioName"]').val(@Model.PortfolioName);
                                    $('select[name="ExpensesHead"]').val(@Model.ExpensesHead);
                                    $('select[name="PaymentMode"]').val(@Model.PaymentMode);
                                    @*$('select[name="ProjectNumber"]').val(@Model.ProjectNumber);*@
                                    var ForgnAmt = $('#CommitmentAmount').val();
                                    $("#CreditorAmount").val(ForgnAmt);
                                    $('#lblVendorName').html($('#txtBeneficiary option:selected').text())
                                    $('.selectpicker').selectpicker({
                                        liveSearch: true
                                    });
                                    $('.selectpicker').selectpicker('refresh');
                                    if(@Model.ForeignRemittanceId > 0)
                                    {
                                        $('input[name="FXRate"]').attr("required", true);
                                        $('input[name="BillCommission"]').attr("required", true);
                                        $('input[name="BillCGST"]').attr("required", true);
                                        $('input[name="BillSGST"]').attr("required", true);
                                        $('input[name="BillAmount"]').attr("required", true);
                                        $('input[name="UserReferenceNumber"]').attr("required", true);
                                        $('input[name="FottReferenceNumber"]').attr("required", true);
                                    }
                                    else{
                                        $('input[name="FXRate"]').removeAttr('required');
                                        $('input[name="BillCommission"]').removeAttr('required');
                                        $('input[name="BillCGST"]').removeAttr('required');
                                        $('input[name="BillSGST"]').removeAttr('required');
                                        $('input[name="BillAmount"]').removeAttr('required');
                                        $('input[name="UserReferenceNumber"]').removeAttr('required');
                                        $('input[name="FottReferenceNumber"]').removeAttr('required');
                                    }
                                    CalculatePaymentValue();
                                    CalculateDeductionTotal();
                                    $("input[name='ProjectNumber']").each(function () {
                                        projectChange($(this), 'U');

                                    });
                                    //$('#NeedUpdateTransDetail').val('false');
                                });


                                $('#Source').change(function () {
                                    var selSource = $(this).val();
                                    //var select = $("#SourceReferenceNumber");
                                    //select.empty();
                                    $("#SourceReferenceNumber,#ReferenceNumber").val('');
                                    $("#divRefNum, #divRefEmailDate").addClass('dis-none');
                                    $("#SourceTapalOrWorkflow").val('False');
                                    if (selSource == '1') {
                                        @*$.getJSON("@Url.Action("GetWorkflowRefNumber","Proposal")",
                                         function (locationdata) {
                                             fillMasterDropDown(select, locationdata);
                                         });*@
                                        applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
                                        $("#divRefNum").removeClass('dis-none');
                                        $("#SourceTapalOrWorkflow").val('True');
                                    } else if (selSource == '3') {
                                        @*$.getJSON("@Url.Action("GetTapalRefNumber","Proposal")",
                                        function (locationdata) {
                                            fillMasterDropDown(select, locationdata);
                                        });*@
                                        applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
                                        $("#divRefNum").removeClass('dis-none');
                                        $("#SourceTapalOrWorkflow").val('True');
                                    }
                                    else if (selSource == '2') {
                                        $('#divRefEmailDate').removeClass('dis-none');
                                        $("#SourceTapalOrWorkflow").val('False');
                                    } else {
                                        $("#divRefNum").removeClass('dis-none');
                                        $("#SourceTapalOrWorkflow").val('True');
                                    }
                                });
                                function calculateamount() {
                                    var totalamountdebit = 0;
                                    var billamount = 0;
                                    var remittanceamt = parseFloat($('input[name="ForeignRemittanceAmount"]').val()) || 0;
                                        var fxrate = parseFloat($('input[name="FXRate"]').val()) || 0;
                                        var billamount = parseFloat($('input[name="BillAmount"]').val()) || 0;
                                        var billcommission = parseFloat($('input[name="BillCommission"]').val()) || 0;
                                        var billcgst = parseFloat($('input[name="BillCGST"]').val()) || 0;
                                        var billsgst = parseFloat($('input[name="BillSGST"]').val()) || 0;
                                        billamount = parseFloat((remittanceamt * fxrate).toFixed(2));
                                        totalamountdebit = billamount + billcommission + billcgst + billsgst;
                                        $('input[name="BillAmount"]').val(billamount);
                                        $('input[name="TotalAmountDebitedtoProject"]').val(totalamountdebit);

                                    //if (!isNaN(totalstudentsstipend)) {
                                    //    $("#txtTotalStipendValue").val(totalstudentsstipend);
                                    //    $("#CreditorAmount").val(totalstudentsstipend);
                                    //}
                                }
                                function formSave() {
                                    var isValid = $('#formFRM').valid();
                                    if (!isValid)
                                        return false;
                                    var doctypevalues = [];
                                    $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
                                    doctypevalues.sort();
                                    // duplicate check
                                    for (var k = 1; k < doctypevalues.length; ++k) {
                                        if (doctypevalues[k] == doctypevalues[k - 1]) {
                                            $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                                            $('#Validation').modal('toggle');
                                            return false;
                                        }
                                        isValid = true;
                                    }

                                    if (isValid)
                                        $('#formFRM').submit();
                                }

                                function formSubmit() {
                                    var isValid = $('#formFRM').valid();
                                    if (!isValid)
                                        return false;

                                    if (isValid)
                                        $('#formFRM').submit();
                                }
                                function aplyProjectAutoComplete(ele, url, setId) {
                                    $(ele).autocomplete({
                                        select: function (event, ui) {
                                            event.preventDefault();
                                            $(ele).val(ui.item.label);
                                            //$(ele).closest('tr').find(".lblSelId").text(ui.item.label);
                                            if (setId == true) {
                                                $("input[name='ProjectId']").val(ui.item.value);
                                                $("input[name='ProjectNumber']").val(ui.item.label);
                                            } else {
                                                $(ele).closest('tr').find("input[name='ProjectId']").val('');
                                                $(ele).closest('tr').find("input[name='ProjectNumber']").val('');
                                            }
                                        },
                                        focus: function (event, ui) {
                                            event.preventDefault();
                                            $(ele).val(ui.item.label);
                                        },
                                        source: function (request, response) {
                                            $.getJSON(url, { term: request.term },
                                             function (locationdata) {
                                                 response(locationdata);
                                             });
                                        },
                                        minLength: 3
                                    });
                                }
                                function projectChange(el, mode) {
                                    var selProj = $("input[name='ProjectNumber']");
                                    if (mode != 'U') {
                                        $("input[name='ProjectId'], input[name='ProjectNumber']").val('');
                                        //$(el).closest('tr').find("input[name='autoComplete'],input[name='UserId'],input[name='Name']").val('');
                                    }
                                    $("input[name='ProjectId']").addClass('required');
                                    $("input[name='ProjectNumber']").addClass('required');
                                    aplyProjectAutoComplete(selProj, "../CoreAccounts/LoadProjectList", true)

                                }
                                $('input[name="ProjectNumber"]').change(function () {
                                    var PjctId = $('input[name="ProjectId"]').val();
                                    $.ajax({
                                        type: "POST",
                                        url: "@Url.Action("GetFRMDetailsbyProject", "CoreAccounts")",
                                        data: { "ProjectId": PjctId },
                                        traditional: true,
                                        dataType: "json",
                                        success: function (result) {
                                            $('select[name="PortfolioName"]').val(result.PortfolioName);
                                            $('input[name="PortfolioName"]').val(result.PortfolioName);
                                            $("#txtAccountNumber").val(result.AccountNumber);
                                            $('input[name="AccountHeadId"]').val(result.AccountHeadId);
                                            $("#txtAccountNumberforCharges").val(result.AccountNumberDebitedforCharges);
                                            $('input[name="ChargesAccountHeadId"]').val(result.ChargesAccountHeadId);

                                            var select = $("#txtCommitmentNumber");
                                            select.empty();

                                            $.each(result.CommitmentList, function (index, itemData) {
                                                select.append($('<option/>', {
                                                    value: itemData.id,
                                                    text: itemData.name
                                                }));
                                            });
                                            select.selectpicker('refresh');

                                        },
                                        error: function (err) {
                                            console.log("error : " + err);
                                        }
                                    });
                                });

                                $('select[name="RemittanceCurrency"]').change(function () {
                                    var Id = $(this).val();
                                    $.ajax({
                                        type: "POST",
                                        url: "@Url.Action("GetCurrencybyId", "CoreAccounts")",
                                        data: { "CurrencyId": Id },
                                    traditional: true,
                                    dataType: "json",
                                    success: function (result) {
                                        $('input[name="RemittanceCurrencyCode"]').val(result);
                                        //$.each(result, function (index, itemData) {
                                        //    $('input[name="RemittanceCurrencyCode"]').val(itemData.name);
                                        //});

                                    },
                                    error: function (err) {
                                        console.log("error : " + err);
                                    }
                                });
                                });

                                @*$('select[name="PortfolioName"]').change(function () {
                            var portfolio = $(this).val();
                            var Classificationcode = 0;
                            var Category = null;
                            var ProjectType = 0;
                            var ProjectScheme = 0;
                            if (portfolio == 1)
                            {
                                Classificationcode = 1;
                                Category = 'NON-PFMS';
                            }
                            if (portfolio == 2) {
                                Classificationcode = 1;
                                Category = 'PFMS';
                            }
                            if (portfolio == 3) {
                                Classificationcode = 1;
                                ProjectType = 2;
                            }
                            if (portfolio == 4) {
                                Classificationcode = 4;
                            }
                            if (portfolio == 5) {
                                Classificationcode = 2;
                            }
                            if (portfolio == 6) {
                                Classificationcode = 3;
                            }
                            if (portfolio == 7) {
                                Classificationcode = 1;
                                Category = 'NON-PFMS';
                                ProjectScheme = 1;
                            }
                            if (Category == "") {
                                Category = null;
                            }
                            $.getJSON("@Url.Action("GetBankbyPortfolio", "CoreAccounts")", { "classificationcode": Classificationcode, "category": Category, "projectscheme": ProjectScheme, "projecttype": ProjectType },
                                         function (locationdata) {
                                             $.each(locationdata, function (index, itemData) {
                                                 //select.append($('<option/>', {
                                                 //    value: itemData.id,
                                                 //    text: itemData.name,
                                                 //}));
                                                 $("#txtAccountNumber").val(itemData.name);
                                                 $('input[name="AccountHeadId"]').val(itemData.id);
                                                 $("#txtAccountNumberforCharges").val('( ) on us A/c No: ' + itemData.name);
                                                 $('input[name="ChargesAccountHeadId"]').val(itemData.id);
                                             });
                                         });
                            $("#txtAccountNumber").val('');
                            $('input[name="AccountHeadId"]').val('');
                            $("#txtAccountNumberforCharges").val('');
                            $('input[name="ChargesAccountHeadId"]').val('');
                            //var num = parseFloat($('#txtForeignRemitAmt').val());
                            //$("#CreditorAmount").val(num);
                            //$('#lblVendorName').html($('#txtBeneficiary option:selected').text())

                            //var str = inWords(document.getElementById('txtForeignRemitAmt').value);

                            //document.getElementById('txtForeignRemitAmtinwords').onkeyup = function () {

                            //};
                        });*@
                                function parseDate(s) {
                                    var months = {
                                        january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
                                        july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
                                    };
                                    var p = s.split('-');
                                    return new Date(p[2], months[p[1].toLowerCase()], p[0]);
                                }

                                $('#txtForeignRemitAmt').change(function () {
                                    var num = parseFloat($('#txtForeignRemitAmt').val());
                                    $("#CreditorAmount").val(num);
                                    $('#lblVendorName').html($('#txtBeneficiary option:selected').text())

                                    var str = inWords(num);
                                    var dec = RsPaise(num*100/100);
                                    //if (dec != null)
                                    //{
                                    //    $("#txtForeignRemitAmtinwords").val(dec);
                                    //}
                                    //else {
                                    //    $("#txtForeignRemitAmtinwords").val(str);
                                    //}

                                    //document.getElementById('txtForeignRemitAmtinwords').onkeyup = function () {

                                    //};
                                });

                                function inWords(amount){
                                    var words = new Array();
                                    words[0] = 'Zero';words[1] = 'One';words[2] = 'Two';words[3] = 'Three';words[4] = 'Four';words[5] = 'Five';words[6] = 'Six';words[7] = 'Seven';words[8] = 'Eight';words[9] = 'Nine';words[10] = 'Ten';words[11] = 'Eleven';words[12] = 'Twelve';words[13] = 'Thirteen';words[14] = 'Fourteen';words[15] = 'Fifteen';words[16] = 'Sixteen';words[17] = 'Seventeen';words[18] = 'Eighteen';words[19] = 'Nineteen';words[20] = 'Twenty';words[30] = 'Thirty';words[40] = 'Forty';words[50] = 'Fifty';words[60] = 'Sixty';words[70] = 'Seventy';words[80] = 'Eighty';words[90] = 'Ninety';var op;
                                    amount = amount.toString();
                                    var atemp = amount.split(".");
                                    var number = atemp[0].split(",").join("");
                                    var n_length = number.length;
                                    var words_string = "";
                                    if(n_length <= 9){
                                        var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
                                        var received_n_array = new Array();
                                        for (var i = 0; i < n_length; i++){
                                            received_n_array[i] = number.substr(i, 1);}
                                        for (var i = 9 - n_length, j = 0; i < 9; i++, j++){
                                            n_array[i] = received_n_array[j];}
                                        for (var i = 0, j = 1; i < 9; i++, j++){
                                            if(i == 0 || i == 2 || i == 4 || i == 7){
                                                if(n_array[i] == 1){
                                                    n_array[j] = 10 + parseInt(n_array[j]);
                                                    n_array[i] = 0;}}}
                                        value = "";
                                        for (var i = 0; i < 9; i++){
                                            if(i == 0 || i == 2 || i == 4 || i == 7){
                                                value = n_array[i] * 10;} else {
                                                value = n_array[i];}
                                            if(value != 0){
                                                words_string += words[value] + " ";}
                                            if((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)){
                                                words_string += "Crores ";}
                                            if((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)){
                                                words_string += "Lakhs ";}
                                            if((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)){
                                                words_string += "Thousand ";}
                                            if(i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)){
                                                words_string += "Hundred and ";} else if(i == 6 && value != 0){
                                                    words_string += "Hundred ";}}
                                        words_string = words_string.split(" ").join(" ");}
                                    return words_string;}
                                function RsPaise(n){
                                    var currencycode = $('input[name="RemittanceCurrencyCode"]').val();
                                    nums = n.toString().split('.')
                                    var whole = inWords(nums[0])
                                    if(nums[1]==null)nums[1]=0;
                                    if(nums[1].length == 1 )nums[1]=nums[1]+'0';
                                    if(nums[1].length> 2){nums[1]=nums[1].substring(2,length - 1)}
                                    if(nums.length == 2){
                                        if(nums[0]<=9){nums[0]=nums[0]*10} else {nums[0]=nums[0]};
                                        var fraction = inWords(nums[1])
                                        if(whole=='' && fraction==''){op= 'Zero only';}
                                        if(whole=='' && fraction!=''){op= fraction + ' Cents' + ' only';}
                                        if(whole!='' && fraction==''){op= whole + ' only';}
                                        if(whole!='' && fraction!=''){op= whole + 'And '+ fraction + 'Cents' + ' only';}
                                        amt=$('#txtForeignRemitAmt').val();
                                        if(amt > 999999999.99){op='Oops!!! The amount is too big to convert';}
                                        if(isNaN(amt) == true ){op='Error : Amount in number appears to be incorrect. Please Check.';}
                                        $("input[name='RemittanceAmountinWords']").val(op);}}

                                function AddNewExpense() {
                                    //var stateCode = $('#lblStateCode').html();
                                    //var BillType = $('#BillType').val();
                                    $.ajax({
                                        type: "GET",
                                        url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
                                        data: { "typeCode": "FRM", "tSubCode": "1" },
                                        traditional: true,
                                        dataType: "json",
                                        success: function (result) {
                                            $.each(result.ExpenseDetail, function (i, item) {
                                                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                                                $(cln).find('a.dis-none').removeClass('dis-none');
                                                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                                                index = parseInt(index) + 1;
                                                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                                                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                                                $(cln).find('#lblTransType').text(item.TransactionType);
                                                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                                                $(cln).find("input, select").each(function () {
                                                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                                                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                                                });
                                                $(cln).find("span[data-valmsg-for]").each(function () {
                                                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                                                });

                                                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                                                selectGroup.empty();
                                                $.each(item.AccountGroupList, function (index, itemData) {
                                                    selectGroup.append($('<option/>', {
                                                        value: itemData.id,
                                                        text: itemData.name,
                                                    }));
                                                });

                                                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                                                selectHead.empty();
                                                $.each(item.AccountHeadList, function (index, itemData) {
                                                    selectHead.append($('<option/>', {
                                                        value: itemData.id,
                                                        text: itemData.name,
                                                    }));
                                                });
                                                $('#tbodyExpenseList').append(cln);
                                            });
                                        },
                                        error: function (err) {
                                            console.log("error : " + err);
                                        }
                                    });
                                }
                                function GetTransactionDetails() {

                                    var interstate_f = false;

                                    EmptyExpenseDeductionDetails();
                                    $.ajax({
                                        type: "GET",
                                        url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
                                        data: { "typeCode": "FRM", "tSubCode": "1", },
                                        traditional: true,
                                        dataType: "json",
                                        success: function (result) {
                                            $.each(result.ExpenseDetail, function (i, item) {
                                                //var amt = 0;
                                                //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                                                //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                                                //    var parseVal = parseFloat($(elePayment).val());
                                                //    if (!isNaN(parseVal))
                                                //        amt = amt + parseVal;
                                                //});
                                                if (i == 0) {
                                                    var trEle = $('#tbodyExpenseList tr:first');
                                                    $(trEle).find('input[name$=".Amount"]').val('');
                                                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                                                    $(trEle).find('#lblTransType').text(item.TransactionType);
                                                    $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                                                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                                                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                                                    selectGroup.empty();
                                                    $.each(item.AccountGroupList, function (index, itemData) {
                                                        selectGroup.append($('<option/>', {
                                                            value: itemData.id,
                                                            text: itemData.name,
                                                        }));
                                                    });

                                                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                                                    selectHead.empty();
                                                    $.each(item.AccountHeadList, function (index, itemData) {
                                                        selectHead.append($('<option/>', {
                                                            value: itemData.id,
                                                            text: itemData.name,
                                                        }));
                                                    });
                                                } else {
                                                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                                                    $(trEleNew).find('input[name$=".Amount"]').val('');
                                                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                                                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                                                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                                                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                                                    $(trEleNew).find("input,Select").each(function () {
                                                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                                                    });
                                                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                                                    });

                                                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                                                    selectGroup.empty();
                                                    $.each(item.AccountGroupList, function (index, itemData) {
                                                        selectGroup.append($('<option/>', {
                                                            value: itemData.id,
                                                            text: itemData.name,
                                                        }));
                                                    });

                                                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                                                    selectHead.empty();
                                                    $.each(item.AccountHeadList, function (index, itemData) {
                                                        selectHead.append($('<option/>', {
                                                            value: itemData.id,
                                                            text: itemData.name,
                                                        }));
                                                    });
                                                    $('#tbodyExpenseList').append(trEleNew);
                                                }
                                            });


                                            $('#NeedUpdateTransDetail').val('false');
                                            CalculateDeductionTotal();
                                        },
                                        error: function (err) {
                                            console.log("error : " + err);
                                        }
                                    });
                                    //}
                                }

                                $('#CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
                                    return false;
                                });

                                function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
                                    if (fillDafaultText !== undefined) {
                                        ele.append($('<option/>', {
                                            value: '',
                                            text: 'Select any',
                                        }));
                                    }
                                    if (valueAsName !== undefined) {
                                        $.each(data, function (index, itemData) {
                                            ele.append($('<option/>', {
                                                value: itemData.name,
                                                text: itemData.name,
                                            }));
                                        });
                                    } else {
                                        $.each(data, function (index, itemData) {
                                            ele.append($('<option/>', {
                                                value: itemData.id,
                                                text: itemData.name,
                                            }));
                                        });
                                    }
                                }


                                /* Tab Sections Start*/
                                var currentTab = 0; // Current tab is set to be the first tab (0)
                                showTab(currentTab); // Display the crurrent tab
                                function showTab(n) {
                                    // This function will display the specified tab of the form...
                                    var x = document.getElementsByClassName("tab");
                                    x[n].style.display = "block";
                                    $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
                                    //... and fix the Previous/Next buttons:
                                    if (n == 0) {
                                        document.getElementById("prevBtn").style.display = "none";
                                    } else {
                                        document.getElementById("prevBtn").style.display = "inline";
                                    }
                                    if (n == (x.length - 1)) {
                                        document.getElementById("nextBtn").innerHTML = "Submit";
                                        $('#nextBtn').hide();
                                    } else {
                                        document.getElementById("nextBtn").innerHTML = "Next";
                                        $('#nextBtn').show();
                                    }
                                    //... and run a function that will display the correct step indicator:
                                    //fixStepIndicator(n)
                                }

                                function nextPrev(n) {
                                    // This function will figure out which tab to display
                                    var x = document.getElementsByClassName("tab");
                                    // Exit the function if any field in the current tab is invalid:
                                    //if (n > 0 && !validateForm(n)) return false;
                                    if (currentTab + n < x.length) {
                                        // Hide the current tab:
                                        x[currentTab].style.display = "none";
                                        $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
                                    } else {
                                        // ... the form gets submitted:
                                        formSave();
                                        return false;
                                    }
                                    // Increase or decrease the current tab by 1:
                                    currentTab = currentTab + n;

                                    // Otherwise, display the correct tab:
                                    showTab(currentTab);
                                }
                             
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
