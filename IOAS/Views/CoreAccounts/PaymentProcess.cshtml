@model IOAS.Models.PaymentProcessVoucherModel
@{
    ViewBag.Title = "Payment Process";
    ViewBag.Subtitle = "Payment Process List";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
@using (Html.BeginForm("PaymentProcess", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formPP", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-4">
            <h3>Payment Process List</h3>
        </div>

        <div id="addnewpage" class="col-md-8 flt-nav-links">
            @if (Model.Mode != "V")
            {
                <a id="btnExecSP" href="javascript:void(0)"> <i class="ion-plus"></i>Start Payment</a>
            }
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment List</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Voucher Details</a></li>
                </ul>
                <div class="tab">
                    @Html.HiddenFor(m => m.BOADraftId)
                    @Html.HiddenFor(m => m.Mode)
                    <div class="row mt-lg mb-lg">
                        <div class="page-wrapper">
                            <div>
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group">
                                        <label class="required">Bank</label>
                                        @if (Model.BOADraftId > 0)
                                        {
                                            @Html.DropDownListFor(m => m.BankHead, new SelectList(ViewBag.BankHeadList, "id", "name"), "Select any", new { @Id = "SelBankHead", @class = "form-control", @disabled = "disabled" })
                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.BankHead, new SelectList(ViewBag.BankHeadList, "id", "name"), "Select any", new { @Id = "SelBankHead", @class = "form-control" })
                                        }
                                        @Html.HiddenFor(m => m.BankHead)
                                        @Html.ValidationMessageFor(m => m.BankHead)
                                    </div>
                                </div>
                                @*<div class="col-md-6">
                                                            <div class="form-group custom-form-group">
                                                                <label class="required">Posting Date</label>
                                                                @if (Model.Mode == "V")
                                                                {
                                                                    @Html.EditorFor(m => m.PostingDate, new { @class = "form-control" })
                                                                    @Html.HiddenFor(m => m.PostingDate)
                                                                    <script>
                                                                        $("#PostingDate").attr('disabled', 'disabled');
                                                                    </script>
                                                                }
                                                                else
                                                                {
                                                                    @Html.TextBox("PostingDate", String.Format("{0:dd-MMMM-yyyy}", Model.PostingDate), new { @class = "form-control required",@id = "PostingDate" })
                                                                    <script>
                                                                        var fDate = '@ViewBag.fromDate';
                                                                        var tDate = '@ViewBag.toDate';

                                                                        $("#PostingDate").datepicker
                                    ({
                                        dateFormat: 'dd-MM-yy',
                                        showStatus: true,
                                        showWeeks: true,
                                        minDate: fDate || new Date(),
                                        maxDate: tDate || new Date(),
                                        showOptions: {
                                            origin: ["top", "left"]
                                        }
                                    }).attr('readonly', 'readonly');
                                                                    </script>
                                                                }

                                                                @Html.ValidationMessageFor(m => m.PostingDate)
                                                            </div>
                                                        </div>*@
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="custom-jsgrid-normal">
                                        <div id="PaymentProcessList"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-md">

                                <div class="col-md-3 col-md-offset-9">
                                    <div class="form-group custom-form-group ">
                                        <label>Total </label>
                                        @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", @readonly = "readonly" })
                                    </div>
                                </div>

                            </div>
                            @*<div class="row">

                                    <div class="col-md-3 col-md-offset-9">
                                        <div class="form-group custom-form-group ">
                                            <a href="#" class="btn btn-primary pull-right">Proceed for Payment</a>
                                        </div>
                                    </div>

                                </div>*@
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="row">
                                <div class="col-md-6">

                                    <div class="form-group custom-form-group pt-frm-grp">
                                        <label>Total Bank Transfer</label>
                                        <h4 class="sb-dts mb-null">
                                            @Html.TextBoxFor(m => m.BankTransferTotal, new { @class = "form-control", @readonly = "readonly" })
                                        </h4>
                                        <a id="btnBankTransferDetail" href="javascript:void(0)" class="btn btn-primary pull-left mt-md">View Details</a>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group pt-frm-grp">
                                        <label>Total Cheque Payment</label>
                                        <h4 class="sb-dts mb-null">
                                            @Html.TextBoxFor(m => m.ChequeTotal, new { @class = "form-control", @readonly = "readonly" })
                                        </h4>
                                        <a id="btnChequeDetail" href="javascript:void(0)" class="btn btn-primary  mt-md">View Details</a>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="col-md-4">
                            <div class="reg-no">
                                <div class="form-group custom-form-group">
                                    @Html.HiddenFor(m => m.VoucherDate)
                                    @Html.HiddenFor(m => m.VoucherNumber)
                                    <label>Date: @Html.DisplayFor(m => m.VoucherDate) </label><br>
                                    <label>Payment Voucher Number </label>
                                    <h4 class="fn-s-lg">@Html.DisplayFor(m => m.VoucherNumber)</h4>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("PaymentProcessInitList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>
}
@Html.AntiForgeryToken()
<div id="popup"></div>
<script type="text/javascript">
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var modeOfPaymentList = @Html.Raw(Json.Encode(ViewBag.ModeOfPaymentList));
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
    });
    var DateField = function (config) {
        jsGrid.Field.call(this, config);
    };

    DateField.prototype = new jsGrid.Field({
        sorter: function (date1, date2) {
            return new Date(date1) - new Date(date2);
        },

        itemTemplate: function (value) {
            return new Date(value).toDateString();
        },

        filterTemplate: function () {
            var now = new Date();
            this._fromPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() - 1), changeYear: true });
            this._toPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() + 1), changeYear: true });
            return $("<div>").append(this._fromPicker).append(this._toPicker);
        },

        insertTemplate: function (value) {
            return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
        },

        editTemplate: function (value) {
            return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
        },

        insertValue: function () {
            return this._insertPicker.datepicker("getDate").toISOString();
        },

        editValue: function () {
            return this._editPicker.datepicker("getDate").toISOString();
        },

        filterValue: function () {
            return {
                from: this._fromPicker.datepicker("getDate"),
                to: this._toPicker.datepicker("getDate")
            };
        }
    });
    jsGrid.fields.date = DateField;
    var db;
    $("#PaymentProcessList").jsGrid({
        //paging: true,
        //pageIndex: 1,
        //pageSize: 5,
        editing: false,
        filtering: true,
        controller: {

            loadData: function (filter) {
                return $.grep(db, function (ow) {
                    return (!filter.PaymentType || ow.PaymentType.toLowerCase().indexOf(filter.PaymentType.toLowerCase()) > -1)
                    && (!filter.Status || ow.Status.toLowerCase().indexOf(filter.Status.toLowerCase()) > -1)
                    && (!filter.ReferenceNumber || ow.ReferenceNumber.toLowerCase().indexOf(filter.ReferenceNumber.toLowerCase()) > -1)
                   && (!filter.PayeeName || ow.PayeeName.toLowerCase().indexOf(filter.PayeeName.toLowerCase()) > -1);

                });
            }

        },

        fields: [
            { name: "SlNo", title: "S.No", editing: false, width: 50 },
            { type: "number", name: "PaymentPayeeId", title: "Id", visible: false },
            { type: "text", name: "ReferenceNumber", title: "Ref. Number", editing: false },
            { type: "text", name: "PaymentType", title: "Payment Type", editing: false },
            { type: "text", name: "PayeeName", title: "Payee Name", editing: false },
            { name: "PayableAmount", title: "Payable Amount", editing: false },
            {
                editButton: false, deleteButton: false, width: 120, title: "Mode of Payment",

                itemTemplate: function (value, item) {
                    var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                    if (item.Status == "Open") {
                        var $customSelect = $("<select name='ModeOfPayment'>")
                        .attr("class", "form-control").prop("selectedIndex", "")
                        $.each(modeOfPaymentList, function (index, itemData) {
                            $customSelect.append($('<option/>', {

                                value: itemData.id,
                                text: itemData.name
                            }));
                        });
                        if (item.SelModeOfPayment == null || item.SelModeOfPayment == 0)
                            $customSelect.val('2');
                        else
                            $customSelect.val(item.SelModeOfPayment);
                        return $result.add($customSelect);
                    }
                    else {
                        var $customLabel = $("<label name='Mode'>").html(item.ModeOfPayment)
                        return $result.add($customLabel);
                    }

                }
            },
            {type: "text", name: "Status", title: "Status", editing: false },
             {
                 type: "control", editButton: false, deleteButton: false, width: 120, title: "Action",

                 itemTemplate: function (value, item) {
                     var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                     if (item.Status == "Open") {
                         statusList = [{ id: "", name: "Select Action" }, { id: "Verify", name: "Verify" }, { id: "View", name: "View" }]
                     }
                     else {
                         statusList = [{ id: "", name: "Select Action" }, { id: "UnVerify", name: "UnVerify" }, { id: "View", name: "View" }]
                     }
                     var $customSelect = $("<select>")
                         .attr("class", "form-control").prop("selectedIndex", "")
                     $.each(statusList, function (index, itemData) {
                         $customSelect.append($('<option/>', {

                             value: itemData.id,
                             text: itemData.name
                         }));
                     });
                     $customSelect.change(function (e) {
                         var selVal = $(this).val();
                         if (selVal == "View") {
                             viewPaymentDetails("Single",$('#BOADraftId').val() || null,item.PaymentPayeeId,false,null)
                         }
                         else if (selVal == "Verify") {
                             var modeOfPayment = $(this).closest('tr').find('select[name="ModeOfPayment"]').val();
                             viewPaymentDetails("Verify",$('#BOADraftId').val() || null,item.PaymentPayeeId,false,modeOfPayment)
                         } else if (selVal == "UnVerify") {
                             var modeOfPayment = $(this).closest('tr').find('label[name="Mode"]').text();
                             alert(modeOfPayment);
                             viewPaymentDetails("UnVerify", $('#BOADraftId').val() || null, item.PaymentPayeeId, false, modeOfPayment)
                         }
                         $(this).val("");
                         return false;
                         e.stopPropagation();
                     });
                     return $result.add($customSelect);
                 },
                 _createFilterSwitchButton: function () {
                     return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                 }
             }


        ],

    });
    $("#PaymentProcessList").jsGrid("option", "filtering", false);
    loadDetails();
    function loadDetails() {
        var boaDraftId = $('#BOADraftId').val() || null;
        var bankHead = $('#SelBankHead').val() || 0;
        var mode = $('#Mode').val();
        var isViewMode = false;
        if(mode == "V")
            isViewMode = true;
        if(bankHead != 0){
            $('.loading-bg').removeClass('dis-none');
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetPaymentProcessList", "CoreAccounts")',
                data: {"bankHeadID" : bankHead,"boaDraftId" : boaDraftId,"isViewMode" : isViewMode},
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    db = result;
                    $("#PaymentProcessList").jsGrid({ data: db });
                    calculateAmt();
                    $('.loading-bg').addClass('dis-none');
                },
                error: function (err) {
                    $('.loading-bg').addClass('dis-none');
                    console.log("error : " + err);
                }
            });
        }
    }
    function calculateAmt(){
        var ttlCheque = 0, ttlBT = 0,ttlAmt = 0;
        $.each(db, function(index, data ) {
            if(data.Status != "Open" && data.SelModeOfPayment == 1)
                ttlCheque += parseFloat(data.PayableAmount) || 0;
            else if(data.Status != "Open" && data.SelModeOfPayment == 2)
                ttlBT += parseFloat(data.PayableAmount) || 0;
        });
        ttlAmt = ttlCheque + ttlBT;
        $('#TotalAmount').val(ttlAmt);
        $('#BankTransferTotal').val(ttlBT);
        $('#ChequeTotal').val(ttlCheque);
    }
    $('#btnExecSP').click(function(){
        var boaDraftId = $('#BOADraftId').val() || null;
        var bankHead = $('#SelBankHead').val() || 0;
        $.ajax({
            type: "GET",
            url: '@Url.Action("ExecutePaymentSP", "CoreAccounts")',
            data: {bankHeadID : bankHead,boaDraftId : boaDraftId},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                db = result;
                $("#PaymentProcessList").jsGrid({ data: db });
                calculateAmt();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    });
    $('#SelBankHead').change(function(){
        loadDetails();
    });
    $('#btnChequeDetail').click(function(){
        var draftId = $('#BOADraftId').val() || null;
        var mode = $('#Mode').val();
        var isEditMode = false;
        if(draftId != null && mode != "V")
            isEditMode = true;
        viewPaymentDetails("Cheque Payment",draftId,null,isEditMode,null)
    });
    $('#btnBankTransferDetail').click(function(){
        var draftId = $('#BOADraftId').val() || null;
        var mode = $('#Mode').val();
        var isEditMode = false;
        if(draftId != null && mode != "V")
            isEditMode = true;
        viewPaymentDetails("Bank Transfer",draftId,null,isEditMode,null)
    });
    function viewPaymentDetails(viewType,boaDraftId,payeeId,isEditMode,modeOfPayment){
        var token = $("input[name=__RequestVerificationToken]").val();
        var bankHead = $('#SelBankHead').val() || 0;
        var searchData = { "__RequestVerificationToken": token, "viewType": viewType, "bankHeadId": bankHead, "boaDraftId": boaDraftId, "payeeId": payeeId, "modeOfPayment": modeOfPayment, "isEditMode": isEditMode };
        var searchUnVerfiyData = { "boaDraftId": boaDraftId, "payeeId": payeeId, "modeOfPayment": modeOfPayment };
        if (viewType == 'UnVerify') {
            $.ajax({
                url: "@Url.Action("UnVerifyPaymentProcess", "CoreAccounts")",
                type: "POST",
                data: searchUnVerfiyData,
                contentType: "application/x-www-form-urlencoded",
                success: function (data) {
                    $("#popup").html(data);
                    $("#paymentDetailModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
        else {
            $.ajax({
                url: "@Url.Action("_PaymentDetails", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                success: function (data) {
                    $("#popup").html(data);
                    $("#paymentDetailModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
    }

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        var mode = $('#Mode').val();
        if(mode != "V"){
            if (n == (x.length - 1)) {
                document.getElementById("nextBtn").innerHTML = "Submit";
            } else {
                document.getElementById("nextBtn").innerHTML = "Next";
            }
        }else{
            if (n == (x.length - 1)) {
                document.getElementById("nextBtn").innerHTML = "Submit";
                $('#nextBtn').hide();
            } else {
                document.getElementById("nextBtn").innerHTML = "Next";
                $('#nextBtn').show();
            }
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function formSave() {
        var isValid = $('#formPP').valid();
        if (!isValid)
            return false;
        if (isValid)
            $('#formPP').submit();
    }
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            //var ttlVal = parseFloat($('#TotalAmount').val()) || 0;
            //if(ttlVal == 0){
            //    $("#alert").text("Please verify at least one payment from the list.");
            //    $('#Validation').modal('show');
            //    hadError = true;
            //}
        }
        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
