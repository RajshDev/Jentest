@model IOAS.Models.GeneralVoucherModel
@{
    ViewBag.Title = "General Voucher";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h4><b>General Voucher</b> </h4>
    </div>
</div>
<div class="row">
    <div class="white-bg ad-navbar">

        <div class="col-md-3 col-md-offset-9">
            <div class="reg-no custom-reg-no">
                <div class="form-group custom-form-group">
                    <label>Number</label>
                    <h4>@Html.DisplayFor(m => m.VoucherNumber)</h4>
                    @Html.HiddenFor(m => m.VoucherId)
                </div>
            </div>
        </div>
    </div>
</div>
<div class="vw-dts-bg">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-bordered mb-null">
                <thead>
                    <tr>
                        <th colspan="4">Payment Details</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="2">
                            <label>Category</label>
                            <h4>@Model.PaymentCategoryName</h4>
                        </td>
                        <td colspan="2">
                            <label>Remarks</label>
                            <h4>@Model.PaymentRemarks</h4>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <label>Bank</label>
                            <h4>@Model.BankName</h4>
                        </td>
                        <td colspan="2" class="reg-no">
                            <label class="lblval">Amount</label>
                            <h4 class="tatval">@Model.PaymentBankAmount</h4>
                            @Html.HiddenFor(m => m.PaymentBankAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculatePayTxTotal()", @autocomplete = "off" })
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>



</div>
<div class="vw-dts-bg">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-bordered mb-null">
                <thead>
                    <tr>
                        <th>Account Group</th>
                        <th>Account Head</th>
                        <th>Transaction Type</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody id="tbodyPayExpenseList">
                    @if (Model.PaymentExpenseDetail != null && Model.PaymentExpenseDetail.Count() > 0)
                    {
                        var count = 0;
                        foreach (var item in Model.PaymentExpenseDetail)
                        {
                            var accountGroup = "PaymentExpenseDetail[" + count + "].AccountGroupId";
                            var accountHead = "PaymentExpenseDetail[" + count + "].AccountHeadId";
                            var expDetailId = "PaymentExpenseDetail[" + count + "].BillExpenseDetailId";
                            var transType = "PaymentExpenseDetail[" + count + "].TransactionType";
                            var amt = "PaymentExpenseDetail[" + count + "].Amount";

                            <tr>
                                <td>

                                    @Html.Hidden("PaymentExpenseDetail.Index", @count)
                                    @Html.Hidden(@expDetailId, item.BillExpenseDetailId)
                                    @item.AccountGroupName
                                </td>
                                <td>

                                    @item.AccountHeadName
                                </td>
                                <td>

                                    @Html.Hidden(@transType, @item.TransactionType)
                                    @item.TransactionType

                                </td>
                                <td>
                                    @Html.Hidden(@amt, item.Amount, new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculatePayTxTotal()", @autocomplete = "off" })
                                    @item.Amount
                                </td>

                            </tr>
                            count++;

                        }
                    }
                    else
                    {
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>

                        </tr>
                    }


                </tbody>
            </table>
        </div>
    </div>

</div>
<div class="vw-dts-bg">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-bordered mb-null">
                <thead>
                    <tr>
                        <th>Group</th>
                        <th>Account Head</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody id="tbodyPayDeductionList">
                    @if (Model.PaymentDeductionDetail != null && Model.PaymentDeductionDetail.Count() > 0)
                    {
                        var count = 0;
                        foreach (var item in Model.PaymentDeductionDetail)
                        {
                            var amt = "PaymentDeductionDetail[" + count + "].Amount";
                            var groupId = "PaymentDeductionDetail[" + count + "].AccountGroupId";
                            var headId = "PaymentDeductionDetail[" + count + "].DeductionHeadId";
                            var deductDetailId = "PaymentDeductionDetail[" + count + "].BillDeductionDetailId";
                            var deductionHead = "PaymentDeductionDetail[" + count + "].DeductionHead";
                            var accountGroup = "PaymentDeductionDetail[" + count + "].AccountGroup";
                            <tr>
                                <td>@item.AccountGroup</td>
                                <td>@item.DeductionHead</td>
                                <td>
                                    @Html.Hidden(@amt, item.Amount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculatePayTxTotal()", @autocomplete = "off" })
                                    @Html.Hidden(@groupId, item.AccountGroupId)
                                    @Html.Hidden(@headId, item.DeductionHeadId)
                                    @Html.Hidden(@deductDetailId, item.BillDeductionDetailId)
                                    @Html.Hidden(@deductionHead, item.DeductionHead)
                                    @Html.Hidden(@accountGroup, item.AccountGroup)
                                    @item.Amount
                                </td>
                            </tr>
                            count++;

                        }
                    }
                    <tr>
                        <td class="reg-no">
                            <label class="lblval">Total Credit <span class="cr">(Cr)</span> :</label>
                            <h4 id="lblPaymentCreditAmount" class="tatval"></h4>
                            @Html.HiddenFor(m => m.PaymentCreditAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                        </td>
                        <td colspan="2" class="reg-no">
                            <label class="lblval">Total Debit <span class="dr">(Dr)</span> :</label>
                            <h4 id="lblPaymentDebitAmount" class="tatval"></h4>
                            @Html.HiddenFor(m => m.PaymentDebitAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                        </td>

                    </tr>
                </tbody>
            </table>
        </div>
    </div>

</div>

<div class="vw-dts-bg">
    <div class="row">
        <div class="col-md-12">
            @Html.Partial("_PaymentBreakUpView", Model.PaymentBreakDetail)
            @Html.Partial("_CommitmentDetailsView", Model.CommitmentDetail)
            @Html.Partial("_DocumentDetailView", Model.DocumentDetail)
        </div>
    </div>
  
</div>
<div class="row">
    @if (Model.PFInit != true)
    {
        <div class="col-md-12 text-center pd-tb-30">

            <input type="button" onclick="window.location.href='@Url.Action("GeneralVoucherList", "CoreAccounts")';" class="btn btn-default" value="Close" id="btnclose" />
        </div>
    }
    else
    {
        <div class="col-md-12 text-center pd-tb-30">

            <input type="button" onclick="window.location.href='@Url.Action("Dashboard", "Home")';" class="btn btn-default" value="Close" id="btnclose" />
        </div>
    }
</div>
<input type="hidden" id="currentRefId" value="@Model.VoucherId" />
<input type="hidden" id="processGuideLineId" value="@ViewBag.processGuideLineId" />
@Html.Partial("_ProcessStatus")
<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#srchFromDate, #srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    
    
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        //$('#divPaymentTDSAmount').addClass('dis-none');
        CalculatePayTxTotal();
        CalculatePaymentValue();
        CalculatePaymentBUTotal();
    });
    $('#PaymentCategory').change(function () {
        var cate = $(this).val();
        if (cate == '1') {
            $('select[name$=".CategoryId"],input[name$=".PaymentAmount"],select[name$=".ModeOfPayment"]').removeClass('required');
            removeCommitmentValidation();
        } else {
            setCommitmentValidation();
            $('select[name$=".CategoryId"],input[name$=".PaymentAmount"],select[name$=".ModeOfPayment"]').addClass('required');
        }
    });
    function CalculatePayTxTotal() {
        var ttlDrVal = 0;
        var ttlExpVal = parseFloat($('#PaymentBankAmount').val()) || 0;
        $('#tbodyPayExpenseList input[name$=".TransactionType"]').each(function (i, rowEle) {
            if ($(this).val() == 'Credit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val());
                if (!isNaN(parseVal)) {
                    ttlExpVal = ttlExpVal + parseVal;
                }
            } else if ($(this).val() == 'Debit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val());
                if (!isNaN(parseVal)) {
                    ttlDrVal = ttlDrVal + parseVal;
                }
            }
        });
        $('#tbodyPayDeductionList input[name$=".Amount"]').each(function (i, rowEle) {
            var parseVal = parseFloat($(this).val());
            if (!isNaN(parseVal))
                ttlDrVal = ttlDrVal + parseVal;
        });
        $('#PaymentDebitAmount').val(ttlDrVal);
        $('#PaymentCreditAmount').val(ttlExpVal);
        $('#lblPaymentDebitAmount').text(ttlDrVal);
        $('#lblPaymentCreditAmount').text(ttlExpVal);
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var ttlCrAmt = parseFloat($('#PaymentCreditAmount').val()) || 0;
        var ttlDrAmt = parseFloat($('#PaymentDebitAmount').val()) || 0;
        var payBUTtl = parseFloat($('#PaymentBUTotal').val()) || 0;
        var cate = $('#PaymentCategory').val();
        if (ttlCrAmt != ttlDrAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        } else if (ttlCrAmt != payBUTtl && cate != '1') {
            msg = "Not a valid entry.The Payable value and Payment Break Up Total value are not equal.";
        }
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
            hdList.push($(val).val());
        });

        hdList.sort();
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var ttlCrAmt = parseFloat($('#PaymentCreditAmount').val()) || 0;
        var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
        //var ttlGSTElg = parseFloat($('#GSTOffsetTotal').val()) || 0;
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        //var voucherVal = (ttlCrAmt - ttlGSTElg).toFixed(2);
        if (ttlCrAmt != commitmentAmt) {
            msg = 'There is a mismatch between the payment value and allocated commitment value. Please update the value to continue.';
        }
        return msg;
    }
    function formSave() {
        var cate = $('#PaymentCategory').val();
        if (cate != 1) {
            var validationMsg = ValidateCommitment();
            if (validationMsg != 'valid') {
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
                return false;
            }
        }
        var isValid = $('#formGV').valid();
        if (!isValid)
            return false;

        $('#formGV').submit();
    }

    $('input[name$="Amount"]').on("copy cut paste drop", function () {
        return false;
    });

    $(document).on('change', 'select[name$=".AccountGroupId"]', function () {
        var groupId = $(this).val();
        var ele = $(this).closest('tr');
        var select = ele.find("select[name$='.AccountHeadId']");
        select.empty();
        select.append($('<option/>', {
            value: "",
            text: "Select any",
        }));
        if (groupId != '') {
            $.getJSON("@Url.Action("GetAccountHead", "CoreAccounts")", { "accountGroupId": groupId, "isBank": false },
             function (locationdata) {
                 $.each(locationdata, function (index, itemData) {
                     select.append($('<option/>', {
                         value: itemData.id,
                         text: itemData.name,
                     }));
                 });
             });
        }
    });
    $('#btnAddPayExpense').click(function () {
        var cln = $('#tbodyPayExpenseList tr:first').clone().find("select,input").val("").end();
        var index = $('#tbodyPayExpenseList tr:last').find("input[name='PaymentExpenseDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='PaymentExpenseDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });

        var selectHead = $(cln).find("select[name$='.AccountHeadId']");
        selectHead.empty();
        selectHead.append($('<option/>', {
            value: "",
            text: "Select any",
        }));
        $('#tbodyPayExpenseList').append(cln);
    });
    $(document).on('click', 'a.removePayExpense', function () {
        if ($('#tbodyPayExpenseList tr').length != 1) {
            $(this).closest('tr').remove();
            CalculatePayTxTotal();
        }
    });
   
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
