@model IOAS.Models.FellowshipSalaryModel

@{
    ViewBag.Title = "FellowshipSalary";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}


@using (Html.BeginForm("FellowshipSalary", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formFSS", enctype = "multipart/form-data" }))
{

    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b> Monthly Fellowship</b> </h4>
        </div>
    </div>

    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">

            </div>
            <div class="col-md-3 ds-spl-bg">

            </div>

            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.FellowshipSalNo)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Beneficiary Details</a></li>
                    @*<li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>*@
                    <li><a href="javascript:void(0)"><span>02</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">
                                        <div class="row mb30">
                                            <div class="col-md-2">
                                                <label class="required">Month & Year</label>
                                                @Html.DropDownListFor(m => m.MonthYear, new SelectList(ViewBag.months, "Value", "Value"), "Select",
         new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.MonthYear)
                                                @Html.HiddenFor(m => m.HiddenMonthYear, new { @id = "hiddenmonth" })
                                                @Html.HiddenFor(m => m.FellowshipSalId, new { @id = "Fellowshipsalid" })
                                                @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                                            </div>

                                            <div class="col-md-4">
                                                <label>Remarks :</label>
                                                @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @id = "remark", @autocomplete = "off" })
                                            </div>

                                        </div>
                                        <div class="gray-bg br-rd">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="row m-b-sm">
                                                        <div class="col-md-6">
                                                            <h3 class="mt-xs">Payment Details</h3>
                                                        </div>

                                                    </div>
                                                    <div class="m-b-sm  custom-jsgrid-normal">
                                                        <div id="FellowShipList"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3 pull-right">
                                                <div class="reg-no custom-reg-no">
                                                    <div class="form-group custom-form-group">
                                                        <label>Total Amount</label>
                                                        @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", @id = "totalamount", @readonly = true })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="tab">
                        @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                    </div>*@
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("FellowshipSalaryList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}

<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

@*POPUP for ADD Taxes*@
<div class="modal fade" id="editmodel">

    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-4 ">
                        <div class="form-group custom-form-group">
                            <label>Fellowship No</label>
                            @*@Html.DisplayFor(m => m.FellowshipNo)*@
                            @Html.TextBoxFor(m => m.FellowshipNo, new { @class = "form-control", @id = "FellowshipNo", @readonly = true })
                            <input type="hidden" id="id" name="custId">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-2"></div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label>PI</label>
                            @*@Html.DisplayFor(m => m.PI)*@
                            @Html.TextBoxFor(m => m.PI, new { @class = "form-control", @id = "PI", @readonly = true })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label>Payment Value</label>
                            @Html.TextBoxFor(m => m.EditAmount, new { @class = "form-control", @id = "pay" })
                        </div>
                    </div>
                    <div class="col-md-2"></div>
                </div>

                <div class="row">
                    <div class="col-md-2"></div>
                    <div class="col-md-8 text-center">
                        <input type="submit" value="Submit" class="btn btn-primary" data-dismiss="modal" id="btnSubmit" />
                    </div>
                    <div class="col-md-2"> </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>
<div class="modal fade" id="DelModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="text-center">
                    Are you sure you want to remove ?
                    <input type="hidden" id="removeid">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger taxYes" name="YES" data-dismiss="modal" id="RemoveBtn">Yes</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal">NO</button>
            </div>
        </div>
    </div>
</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<script>

    $('input[name$=".InvDate"]').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate,#ReqDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $('#MonthYear').datepicker({ dateFormat: 'mm/yy' });
    var errMsg = '@TempData["errMsg"]';
    $(document).on('change', '#MonthYear', function ()
    {
        $('input[name$=".NoOfDays"]').val("");
    });
    $(document).ready(function ()
    {
        if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        //CalculatePaymentValue();
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
        $('#Source').change(function () {
            var selSource = $(this).val();
            var select = $("#SourceReferenceNumber");
            select.empty();
            $("#divRefNum, #divRefEmailDate").addClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
            if (selSource == '1') {
                $.getJSON("@Url.Action("GetWorkflowRefNumber","Proposal")",
                 function (locationdata) {
                     $.each(locationdata, function (index, itemData) {
                         select.append($('<option/>', {
                             value: itemData.id,
                             text: itemData.name,
                         }));
                     });
                 });
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            } else if (selSource == '3') {
                $.getJSON("@Url.Action("GetTapalRefNumber","Proposal")",
                function (locationdata) {
                    $.each(locationdata, function (index, itemData) {
                        select.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                });
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            }
            else if (selSource == '2') {
                $('#divRefEmailDate').removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('False');
            } else {
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            }
        });
    });



    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var overallExp = parseFloat($('#OverallExpense').val()) || 0;
        var netDrAmt = ttlExpAmt + ttldeductAmt;
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netDrAmt != crAmt || netCrAmt != crAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        //if (isNaN(netCrAmt) || isNaN(overallExp)) {
        //    msg = 'The credit value / overall expenses is not a valid entry.';
        //} else if (netCrAmt != overallExp) {
        //    msg = 'There is a mismatch between the credit value and overall expenses value. Please update the value to continue.';
        //}

        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function ValidateCommitment() {
        var msg = 'valid';
        //CalculatePaymentValue();
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var totalpayable = parseFloat($('#totalamount').val());
        //var eligtax = parseFloat($('#txtEligibleTaxValue').val());
        // var ttlAdvAmt = netPayAmt - eligtax;
        // var advPct = parseInt($("#AdvancePercentage").val());
        //  var offsetValue = $("input[name='GST']:checked").val();
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (isNaN(totalpayable) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / allocated commitment value is not a valid entry.';
        } else if (totalpayable != commitmentAmt) {
            msg = 'There is a mismatch between the payable amount and allocated commitment value. Commitment value should be equal to Net Total. Please update the value to continue.';
        }

        return msg;
    }
    $('#Source').change(function () {
        var selSource = $(this).val();
        var select = $("#SourceReferenceNumber");
        select.empty();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            $.getJSON("@Url.Action("GetWorkflowRefNumber","Proposal")",
             function (locationdata) {
                 fillMasterDropDown(select, locationdata);
             });
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            $.getJSON("@Url.Action("GetTapalRefNumber","Proposal")",
            function (locationdata) {
                fillMasterDropDown(select, locationdata);
            });
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function formSave() {
        var isValid = $('#formFSS').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }


        $('#formFSS').submit();

    }

    function AddNewExpense() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "MDY", "tSubCode": "1" },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                $(cln).find('#lblTransType').text(item.TransactionType);
                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }

    function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if (valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        } else {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }
    function GetTransactionDetails() {
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "FSS", "tSubCode": "1" },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyExpenseList tr:first');
                    $(trEle).find('input[name$=".Amount"]').val('');
                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEle).find('#lblTransType').text(item.TransactionType);
                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                } else {
                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".Amount"]').val('');
                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                    $(trEleNew).find("input,Select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });

                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(trEleNew);
                }
            });
            $.each(result.DeductionDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyDeductionList tr:first');
                    $(trEle).find('input').val('');
                    var amtEle = $(trEle).find('input[name$=".Amount"]');
                    amtEle.removeClass('required');
                    $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                } else {
                    var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find("input").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });
                    var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                    amtEle.removeClass('required');
                    $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                    $('#tbodyDeductionList').append(trEleNew);
                }
            });
            $('#NeedUpdateTransDetail').val('false');
            CalculateDeductionTotal();

        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            if ($('#NeedUpdateTransDetail').val().toLowerCase() == 'true') {
                GetTransactionDetails();
            }
            var credit = parseFloat($('#totalamount').val());
            $("#CreditorAmount").val(credit);
            CalculateDeductionTotal();
        }
        else if (currentTab == 1) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }
        else if (currentTab == 2) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }


        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }

//////////////////////////////////////////////////////////////////////////////

    var DateField = function (config) {
        jsGrid.Field.call(this, config);
    };
    DateField.prototype = new jsGrid.Field({
        sorter: function (date1, date2) {
            return new Date(date1) - new Date(date2);
        },

        itemTemplate: function (value) {
            return new Date(value).toDateString();
        },

        filterTemplate: function () {
            var now = new Date();
            this._fromPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() - 1), changeYear: true });
            this._toPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() + 1), changeYear: true });
            return $("<div>").append(this._fromPicker).append(this._toPicker);
        },

        insertTemplate: function (value) {
            return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
        },

        editTemplate: function (value) {
            return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
        },

        insertValue: function () {
            return this._insertPicker.datepicker("getDate").toISOString();
        },

        editValue: function () {
            return this._editPicker.datepicker("getDate").toISOString();
        },

        filterValue: function () {
            return {
                from: this._fromPicker.datepicker("getDate"),
                to: this._toPicker.datepicker("getDate")
            };
        }
    });
    jsGrid.fields.date = DateField;
    var db;

    $("#FellowShipList").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 5,
        editing: false,
        filtering: true,
        controller: {

            loadData: function (filter) {
                return $.grep(db, function (ow) {
                    return (!filter.FellowShipNumber || ow.FellowShipNumber.toLowerCase().indexOf(filter.FellowShipNumber.toLowerCase()) > -1)
                   && (!filter.PayeeName || ow.PayeeName.toLowerCase().indexOf(filter.PayeeName.toLowerCase()) > -1)
                   && (!filter.ProjectNumber || ow.ProjectNumber.toLowerCase().indexOf(filter.ProjectNumber.toLowerCase()) > -1);
                });
            }

        },

        fields: [
            {
                name: "SlNo", title: "S.No", editing: false, visible: true, width: 10
                //, itemTemplate: function (value, item) {
                //    var elementDiv = $("<div>");
                //    var inpEle = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].FellowShipId").attr("value", item.FellowShipId);
                //    elementDiv.append(inpEle);
                //    var inpEleHed = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].FellowShipNumber").attr("value", item.FellowShipNumber);
                //    elementDiv.append(inpEleHed);
                //    var inpEleAmt = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].PayeeName").attr("value", item.PayeeName);
                //    elementDiv.append(inpEleAmt);
                //    var inpEleId = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].PayeeId").attr("value", item.PayeeId);
                //    elementDiv.append(inpEleId);
                //    var inpEleTrns = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].ProjectNumber").attr("value", item.ProjectNumber);
                //    elementDiv.append(inpEleTrns);
                //    var inpEleCom = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].CommitmentNo").attr("value", item.CommitmentNo);
                //    elementDiv.append(inpEleCom);
                //    var inpEleAv = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].AvailBalance").attr("value", item.AvailBalance);
                //    elementDiv.append(inpEleAv);
                //    var inpEleFel = $("<input>").attr("type", "hidden").attr("name", "ListModel[" + item.SlNo + "].FellowShipValue").attr("value", item.FellowShipValue);
                //    elementDiv.append(inpEleFel);
                //    return elementDiv;
                //}

            },
            {
                type: "number", name: "FellowShipId", title: "Id", visible: false, align: "left"
            },
            { type: "number", name: "PayeeId", title: "Id", visible: false, align: "left" },
            { type: "text", name: "FellowShipNumber", title: "FellowShip Number ", editing: false, align: "left", width: 70 },
            { type: "text", name: "PayeeName", title: "PI", editing: false, align: "left", width: 70 },
            { type: "text", name: "ProjectNumber", title: "Project Number", editing: false, align: "left", width: 70 },
            { name: "CommitmentNo", title: "Commitment No", editing: false, align: "left", width: 70 },
            { name: "AvailBalance", title: "Comm.Ava.Bal during Payment", editing: false, align: "left", width: 70 },
            { name: "FellowShipValue", title: "Payment Value", type: "number", editing: false, align: "left", width: 70 },
            { name: "Balance", title: "Balance after Payment", editing: false, align: "left", width: 70 },
            {
                type: "control", editButton: false, deleteButton: false,


                _createFilterSwitchButton: function () {
                    return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                }
            }


        ],
    

    });

    $("#FellowShipList").jsGrid("option", "filtering", false);
    //loadDetails();


    $("#MonthYear").change(function () {
        var Month = $("#MonthYear").val();
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetFellowshipSalaryList", "CoreAccounts")',
            data: JSON.stringify({ 'Month': Month }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                db = result;
                var amt = 0;
                $("#FellowShipList").jsGrid({ data: db });
                $.each(result, function (i, v1) {
                    amt += v1.FellowShipValue;
                });
                $("#totalamount").val(amt);
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    });

     $(document).ready(function () {
         var Month = $("#hiddenmonth").val();
         var PaymentId = $("#Fellowshipsalid").val();
         if (Month != "") {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetEditFellowshipSalaryList", "CoreAccounts")',
                data: JSON.stringify({ 'PaymentId': PaymentId }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    db = result.ListModel;
                    var amt = 0;
                    $("#FellowShipList").jsGrid({ data: db });
                    $.each(result.ListModel, function (i, v1) {
                        amt += v1.FellowShipValue;
                    });
                    $("#totalamount").val(amt);
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
     });


    $('#btnSubmit').click(function () {
        var FellowshipId = $('#id').val();
        var amount = $('#pay').val();
        //var Month = $("#MonthYear").val();
        var Month = $("#hiddenmonth").val();

                    $.ajax({
                            type: "GET",
                            data: { 'FellowshipId': FellowshipId, 'amount': amount },
                            url: '@Url.Action("SaveFellowship", "CoreAccounts")',
                            //contentType: "application/json",
                            contentType: 'application/x-www-form-urlencoded',
                            success: function (result) {
                                if (result.status == true) {
                                    $('#alertSuccess').html("Fellowship amount has been updated successfully");
                                    $('#Success').modal('toggle');
                                        $.ajax({
                                            type: "GET",
                                            url: '@Url.Action("GetFellowshipSalaryList", "CoreAccounts")',
                                            data: JSON.stringify({ 'Month': Month }),
                                            contentType: "application/json; charset=utf-8",
                                            dataType: "json",
                                            success: function (result) {
                                                db = result;
                                                var amt = 0;
                                                $("#FellowShipList").jsGrid({ data: db });
                                                $.each(result, function (i, v1) {
                                                    amt += v1.FellowShipValue;
                                                });
                                                $("#totalamount").val(amt);
                                            },
                                            error: function (err) {
                                                console.log("error : " + err);
                                            }
                                        });
                                } else if (result.status == false) {
                                    $('#FailedAlert').html(result.msg);
                                    $('#Failed').modal('toggle');
                                }
                            }
                        })
    });

    $('#RemoveBtn').click(function () {
        var FellowshipId = $('#removeid').val();
        var Month = $("#MonthYear").val();
        var hiddenmonth = $("#hiddenmonth").val();
        if (hiddenmonth!="")
        {
        $.ajax({
            type: "GET",
            data: { 'FellowshipId': FellowshipId },
            url: '@Url.Action("EditModeRemove", "CoreAccounts")',
            //contentType: "application/json",
            contentType: 'application/x-www-form-urlencoded',
            success: function (result) {
                if (result.status == true) {
                    $('#alertSuccess').html("Fellowship amount has been removed successfully");
                    $('#Success').modal('toggle');
        } else if (result.status == false) {
                    $('#FailedAlert').html(result.msg);
                    $('#Failed').modal('toggle');
        }
        }
        })
        }
        else {
            $.ajax({
                type: "GET",
                data: { 'FellowshipId': FellowshipId },
                url: '@Url.Action("EditModeInactive", "CoreAccounts")',
                //contentType: "application/json",
                contentType: 'application/x-www-form-urlencoded',
                success: function (result) {
                    if (result.status == true) {
                        $('#alertSuccess').html("Fellowship amount has been removed successfully");
                        $('#Success').modal('toggle');
                    } else if (result.status == false) {
                        $('#FailedAlert').html(result.msg);
                        $('#Failed').modal('toggle');
                    }
                }
            })
        }
    });
</script>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>

