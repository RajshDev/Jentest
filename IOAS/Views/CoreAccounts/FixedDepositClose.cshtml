@model  IOAS.Models.FixedDepositClosedModel
@{
    ViewBag.Title = "FixedDepositClose";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}


<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h4><b>Fixed Deposit Close</b> </h4>
    </div>
</div>
@using (Html.BeginForm("FixedDepositClose", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formFdC", enctype = "multipart/form-data" }))
{
<div class="row">
    <div class="white-bg ad-navbar">

        <div class="col-md-3 col-md-offset-9">
            <div class="reg-no custom-reg-no">
                <div class="form-group custom-form-group">
                    <label>Number</label>
                    <h4>@Html.DisplayFor(m => m.FixedDepositClosedNumber)</h4>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="page-wrapper">
        <div class="col-md-12 mt30">
            <ul class="nav nav-pills custom-nav-pills">
                <li class="active"><a href="javascript:void(0)"><span>01</span>Fixed Deposit Details</a></li>
                <li><a href="javascript:void(0)"><span>02</span>Transaction Details</a></li>
                <li><a href="javascript:void(0)"><span>03</span>Document Details</a></li>
            </ul>
            <div class="tab">
                <div class="col-md-12 col-sm-12 m-b-sm">
                    <div class="row">
                        <div class="page-wrapper">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label class="required">FD Number</label>
                                        @Html.TextBoxFor(m => m.FDNumber, new { @class = "form-control", @required = "required", @readonly = "readonly", @id = "txtFDNum" })
                                        @Html.HiddenFor(m => m.FixedDepositId, new { @id = "hdnFixedDepositid" })
                                        @Html.HiddenFor(m => m.FixedDepositClosedId)
                                        @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                                        @Html.Hidden("TransactionTypeCode", "FDC")
                                        @Html.HiddenFor(m=>m.SubCode)
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label class="required">Account Type</label>
                                        @Html.DropDownListFor(m => m.AccountType, new SelectList(ViewBag.acctype, "id", "name"), "Select Account Type", new { @class = "form-control", @disabled = "disabled" })
                                        @Html.HiddenFor(m=>m.AccountType)
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label class="required">Account Number</label>
                                        @Html.DropDownListFor(m => m.BankAccountNumber, new SelectList(Enumerable.Empty<SelectListItem>(), "id", "name"), "Select Account Number", new { @id = "bankAccNum", @class = "form-control", @disabled = "disabled" })
                                        @Html.HiddenFor(m => m.BankAccountNumber)
                                        @Html.ValidationMessageFor(m => m.BankAccountNumber)
                                    </div>
                                </div>
                            </div>
                           <div class="row">
                               <div class="col-md-4">
                                   <div class="form-group custom-form-group">
                                       <label class="required">Deposit Amount</label>
                                       @Html.TextBoxFor(m => m.DepositAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @id = "depositAmt" , @readonly = "readonly" })
                                       @Html.ValidationMessageFor(m => m.DepositAmount)
                                   </div>
                               </div>
                               <div class="col-md-4">
                                   <div class="form-group custom-form-group">
                                       <label class="required">From Date</label>
                                       @Html.EditorFor(m => m.FDFromDate, new { @class = "form-control",@disabled = "disabled" })

                                       @Html.ValidationMessageFor(m => m.FDFromDate)
                                   </div>
                               </div>
                               <div class="col-md-4">
                                   <div class="form-group custom-form-group">
                                       <label class="required">To Date</label>
                                       @Html.EditorFor(m => m.FDTODate, new { @class = "form-control" , @disabled = "disabled" })
                                       @Html.ValidationMessageFor(m => m.FDTODate)
                                   </div>
                               </div>
                           </div>
                            <div class="row">

                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Rate of Interest</label>
                                        @Html.TextBoxFor(m => m.RateofInterest, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @id = "txtRateIntr", @readonly = "readonly" })
                                        @Html.ValidationMessageFor(m => m.RateofInterest)
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Notional Interest</label>
                                        @Html.TextBoxFor(m => m.TotalInterest, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @id = "txtTatIntr", @readonly = "readonly" })
                                        @Html.ValidationMessageFor(m => m.TotalInterest)
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Maturity Amount</label>
                                        @Html.TextBoxFor(m => m.MaturityAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @id = "txtMartyAmt", @readonly = "readonly" })
                                        @Html.ValidationMessageFor(m => m.MaturityAmount)
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Period</label>
                                        @Html.TextBoxFor(m => m.Period, new { @class = "form-control", @readonly = "readonly", @id = "txtPeriod" })
                                       
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label class="required">Fixed Deposit Number</label>
                                        @Html.TextBoxFor(m => m.FixedDepositNumber, new { @class = "form-control", @id = "txtFixedDepositNum", @readonly = "readonly" })
                                      
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Term Deposit</label><br />
                                        <b id="lbltermDuration"></b>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Interest Amount</label>
                                        @Html.TextBoxFor(m => m.ActualAmount, new { @class = "form-control", @id = "txtActualAmt" })
                                        @Html.ValidationMessageFor(m => m.ActualAmount)
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Remarks</label>
                                        @Html.TextBoxFor(m => m.Remarks, new { @class = "form-control", @id = "txtRemarks", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group custom-form-group">
                                        <label>Reson For Closing</label>
                                        @Html.TextBoxFor(m => m.ResonForCloseing, new { @class = "form-control", @id = "txtReson" })
                                       @Html.ValidationMessageFor(m => m.ResonForCloseing)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab">
                @Html.Partial("_TransactionDetails", Model)
            </div>
            <div class="tab">
                <div class="col-md-12 col-sm-12 m-b-sm">
                    <div class="">
                        @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                    </div>
                </div>
            </div>
            <div class="custom-nav-btn text-right">
                <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("FixedDepositCloseList", "CoreAccounts")';">Close</button>
            </div>
        </div>
        </div>
</div>
}
<script>
    function formSave() {
        var isValid = $('#formFdC').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }

        if (isValid)
            $('#formFdC').submit();

    }
    Calculdatediff();

    function Calculdatediff() {
        var msg = 'valid';
        var strDate = $("#FDFromDate").val();
        var clsDate = $("#FDTODate").val();
        if (strDate != '' && clsDate != '') {
            var startDate = moment(parseDate(strDate));
            var closeDate = moment(parseDate(clsDate));

            var mins = closeDate.diff(startDate, 'minutes');
            if (mins <= 0) {
                $('#alert').html("To date must be greater then from date");
                $('#Validation').modal('toggle');
                msg = "To date must be greater then from date";
            }
            var result = '';
            var resultD = '';
            var years = closeDate.diff(startDate, 'year');
            startDate.add(years, 'years');

            var months = closeDate.diff(startDate, 'months');
            startDate.add(months, 'months');

            var days = closeDate.diff(startDate, 'days');
            if (years > 1) {
                result = years + ' years ';
                resultD = "LONG TERM";
            } else if (years == 1) {
                result = years + ' year ';
                resultD = "LONG TERM";
            }
            else if (years < 1)
                resultD = "SHORT TERM";
            if (months > 1) {
                result = result + months + ' months ';
            } else if (months == 1) {
                result = result + months + ' month ';
            }
            if (days > 1) {
                result = result + days + ' days';
            } else if (days == 1) {
                result = result + days + ' day';
            }
            $('#lbltermDuration').html(resultD);
            $("#Period").val(result);
            return msg;
        }

    }
    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    var id = '@Model.BankAccountNumber';
    if (id != null || id != '') {
        var acid = '@Model.AccountType';
                                            $.getJSON("../CoreAccounts/GetAccountlist", { acctid: acid },
                                                                               function (locationdata) {
                                                                                   var ctgryselect = $("#bankAccNum");
                                                                                   ctgryselect.empty();

                                                                                   $.each(locationdata, function (index, itemData) {

                                                                                       ctgryselect.append($('<option/>', {
                                                                                           value: itemData.id,
                                                                                           text: itemData.name,
                                                                                       }));
                                                                                       $("#bankAccNum").val(id);

                                                                                   });
                                                                               });
                                        }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        //var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var overallExp = parseFloat($('#OverallExpense').val()) || 0;
        var netDrAmt = ttlExpAmt + ttldeductAmt;
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netDrAmt != crAmt || netCrAmt != crAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        //if (isNaN(netCrAmt) || isNaN(overallExp)) {
        //    msg = 'The credit value / overall expenses is not a valid entry.';
        //} else if (netCrAmt != overallExp) {
        //    msg = 'There is a mismatch between the credit value and overall expenses value. Please update the value to continue.';
        //}

        //var hdList = [];
        //$('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        //hdList.sort();
        //// duplicate check
        //for (var k = 1; k < hdList.length; ++k) {
        //    if (hdList[k] == hdList[k - 1]) {
        //        msg = "Duplicate account head exist in expense details. Please select a different head.";
        //    }
        //}
        return msg;
    }
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;
            // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            //var acctype = $("#ddlAcctType").val();
            //var accnum = $("#ddlAccNum").val();
            //if (acctype == '')
            //    return false;
            //if (accnum == '')
            //    return false;
            if ($('#NeedUpdateTransDetail').val().toLowerCase() == 'true') {
                GetTransactionDetails();
            }
            var nettotal = 0;
            var credit = parseFloat($('#txtActualAmt').val());
            var depamt = parseFloat($('#depositAmt').val());
            $("#CreditorAmount").val(depamt+credit);
            CalculateDeductionTotal();
        }

        else if (currentTab == 1) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }


        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }



        });
        return !hadError; // return the valid status

    }
    function AddNewExpense() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $('#SubCode').val('2');
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetailstrans", "CoreAccounts")",
            data: { "typeCode": "FDC", "tSubCode": "2" },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                $(cln).find('#lblTransType').text(item.TransactionType);
                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }
    function GetTransactionDetails() {
        //EmptyExpenseDeductionDetails();
        $('#SubCode').val('2');
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "FDC", "tSubCode": "2" },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();   
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
                $.each(result.DeductionDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyDeductionList tr:first');
                        $(trEle).find('input').val('');
                        var amtEle = $(trEle).find('input[name$=".Amount"]');
                        amtEle.removeClass('required');
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                        amtEle.removeClass('required');
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();

            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

</script>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>