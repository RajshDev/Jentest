@model IOAS.Models.InstituteSalaryPaymentModel

@{
    ViewBag.Title = "Institute Salary Payment";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("InstituteSalaryPayment", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formIMS", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Institute Salary Payment</b> </h4>
        </div>
    </div>

    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">

            </div>
            <div class="col-md-3 ds-spl-bg">
            </div>

            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.InstituteSalaryPaymentNo)</h4>
                        @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                        @Html.Hidden("TransactionTypeCode", "IMS")
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Beneficiary Details</a></li>
                    @*<li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>*@
                    <li><a href="javascript:void(0)"><span>02</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>Document Details</a></li>
                </ul>

                <div class="tab">
                <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">
                                        <div class="row mb30">
                                            <div class="col-md-4">
                                                <label>Remarks :</label>
                                                @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @id = "remarks" })
                                            </div>
                                            <div class="col-md-4">
                                                @*<label class="required"> Month & Year:</label>*@
                                                @Html.DropDownListFor(m => m.MonthYear, new SelectList(ViewBag.months, "Value", "Value"), "Select",
         new { @class = "form-control", @id = "month" })
                                                @Html.ValidationMessageFor(m => m.MonthYear)
                                                @Html.HiddenFor(m => m.HiddenMonthYear, new { @id = "hiddenmonth" })
                                                @Html.HiddenFor(m => m.InstituteSalaryPaymentId, new { @id = "paymentid" })
                                            </div>
                                            <div class="col-md-4">
                                                @Html.DropDownListFor(m => m.ProjectId, new SelectList(ViewBag.DistributionProject, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "txtsrchProjectid" })
                                                @*@Html.ValidationMessageFor(m => m.ProjectNumber)*@

                                            </div>
                                            
                                        </div>
                                        <div class="gray-bg br-rd">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="row m-b-sm">
                                                        <div class="col-md-6">
                                                            <h3 class="mt-xs">Payment Details(<a href="javascript:void(0)" class="DownBtn"><i class="ion-android-download"></i></a>)</h3>
                                                        </div>

                                                    </div>
                                                    <div class="m-b-sm  custom-jsgrid-normal">
                                                        <div id="PaymentList"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3 pull-right">
                                                <div class="reg-no custom-reg-no">
                                                    <div class="form-group custom-form-group">
                                                        <label>Total Amount</label>
                                                        @Html.TextBoxFor(m => m.Amount, new { @class = "form-control", @id = "amount", @autocomplete = "off", @readonly = true })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="tab">
                        @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                    </div>*@
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("InstituteSalaryPaymentList", "CoreAccounts" )';">Close</button>
                </div>

            </div>

        </div>
    </div>
}

<script>
    $('#MonthYear').datepicker({ dateFormat: 'mm/yy', minDate: 0, maxDate:0 });
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }
    function formSave() {
        var isValid = $('#formIMS').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }


        $('#formIMS').submit();

    }
    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var overallExp = parseFloat($('#OverallExpense').val()) || 0;
        var netDrAmt = ttlExpAmt + ttldeductAmt;
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netDrAmt != crAmt || netCrAmt != crAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        //if (isNaN(netCrAmt) || isNaN(overallExp)) {
        //    msg = 'The credit value / overall expenses is not a valid entry.';
        //} else if (netCrAmt != overallExp) {
        //    msg = 'There is a mismatch between the credit value and overall expenses value. Please update the value to continue.';
        //}

        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
       
        if (count <= 0) {
            
            return true;                
            }
        else if (currentTab == 0) {
            if ($('#NeedUpdateTransDetail').val().toLowerCase() == 'true') {
                GetTransactionDetails();
            }
            var credit = parseFloat($('#amount').val());
            $("#CreditorAmount").val(credit);
            CalculateDeductionTotal();
        }
        //else if (currentTab == 1) {
        //    var validationMsg = ValidateCommitment()
        //    if (validationMsg != 'valid') {
        //        hadError = true;
        //        $("#alert").text(validationMsg);
        //        $('#Validation').modal('show');
        //    } else {
        //        if ($('#NeedUpdateTransDetail').val().toLowerCase() == 'true') {
        //            GetTransactionDetails();
        //        }
        //        var credit = parseFloat($('#txtnettotal').val());
        //        $("#CreditorAmount").val(credit);
        //        CalculateDeductionTotal();

        //    }
        //}
        else if (currentTab == 1) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }
        else if (currentTab == 2) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }

        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }

    var selectPickerApiElement = function (el, choice, options, select) {
        $(el).find('select').selectpicker({
            liveSearch: true
        });
        $(el).children().eq(2).siblings().remove();
        if (choice == "add") {
            $(el).find('.selectpicker').append("<option>" + options + "</option>");
        } else if (choice == "all" && select != '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
            $(el).find('.selectpicker option[value=' + select + ']').attr('selected', 'selected');
        } else if (choice == "all" && select == '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
        } else if (choice == "empty") {
            $(el).find('.selectpicker').children().remove();
            $(el).find('.selectpicker').append("<option value=''>Select any</option>");
        } else {
            var selectOptionsLength = $(el).find('.selectpicker').children().length;
            for (var i = 1 ; i <= selectOptionsLength ; i++) {
                if (options == $(el).find('.selectpicker').children().eq(i).val()) {
                    $(el).find('.selectpicker').children().eq(i).remove();
                    break;
                } else {
                    continue;
                }

            }

        }
        $(el).find('select').selectpicker('refresh');
        return $(el).children().first().unwrap();

    }

    var DateField = function (config) {
        jsGrid.Field.call(this, config);
    };
    DateField.prototype = new jsGrid.Field({
        sorter: function (date1, date2) {
            return new Date(date1) - new Date(date2);
        },

        itemTemplate: function (value) {
            return new Date(value).toDateString();
        },

        filterTemplate: function () {
            var now = new Date();
            this._fromPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() - 1), changeYear: true });
            this._toPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() + 1), changeYear: true });
            return $("<div>").append(this._fromPicker).append(this._toPicker);
        },

        insertTemplate: function (value) {
            return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
        },

        editTemplate: function (value) {
            return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
        },

        insertValue: function () {
            return this._insertPicker.datepicker("getDate").toISOString();
        },

        editValue: function () {
            return this._editPicker.datepicker("getDate").toISOString();
        },

        filterValue: function () {
            return {
                from: this._fromPicker.datepicker("getDate"),
                to: this._toPicker.datepicker("getDate")
            };
        }
    });
    jsGrid.fields.date = DateField;
    var db;

    $("#PaymentList").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 5,
        editing: false,
        filtering: true,
        pageLoading: true,
        autoload: true,
        controller: {

            loadData: function (filter) {
                var searchData = [];
                searchData = {
                    Month: $('#month').val(),
                }
                filter.model = searchData;
                var deferred = $.Deferred();
                $.ajax({
                    type: "post",
                    url: 'GetInstituteSalaryGridList',
                    data: JSON.stringify(filter),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        var da = {
                            data: result.InstituteSalarylist,
                            itemsCount: result.TotalRecords
                        }
                        deferred.resolve(da);
                    },
                    error: function (err) {
                        console.log("error : " + err);
                    }

                });
                return deferred.promise();
            }

        },

        fields: [
           // {
        //        name: "Slno", title: "S.No", editing: false, width: 10,
        //        itemTemplate: function (value, item) {
        //var elementDiv = $("<div>");
                   
        //var inpEle = $("<input>").attr("type", "hidden").attr("name", "IMS[" + item.Slno + "].Type").attr("value", item.Type);
        //elementDiv.append(inpEle);
        //var inpEleHed = $("<input>").attr("type", "hidden").attr("name", "IMS[" + item.Slno + "].Amount").attr("value", item.Amount);
        //elementDiv.append(inpEleHed);
        //var inpEleAmt = $("<input>").attr("type", "hidden").attr("name", "IMS[" + item.Slno + "].CategoryId").attr("value", item.CategoryId);
        //elementDiv.append(inpEleAmt);
        //var inpEleTrns = $("<input>").attr("type", "hidden").attr("name", "IMS[" + item.Slno + "].UserId").attr("value", item.UserId);
        //elementDiv.append(inpEleTrns);
        //return elementDiv;}},
            {  name: "Category", title: "Category", editing: false, align: "left", width: 70 },
            { name: "Name", title: "Name", editing: false, align: "left", width: 70 },
            { type: "text",  name: "Type", title: "Type", editing: false, align: "left", width: 70 },
            { name: "UserId", title: "Type", editing: false, visible: false, align: "left", width: 70 },
            {  name: "CategoryId", title: "Type", editing: false, visible: false, align: "left", width: 70 },
            { name: "Amount", title: "Amount", editing: false, align: "left", width: 70 },

             {
                type: "control", editButton: false, deleteButton: false, title: "Action", width: 80,
                 @*itemTemplate: function (value, item) {
                    
                     var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                     statusList = [{ id: "", name: "Select Action" }, { id: "View", name: "View" }]
                     var $customSelect = $("<select>")
                         .attr("class", "form-control").prop("selectedIndex", "")
                     $.each(statusList, function (index, itemData) {
                         $customSelect.append($('<option/>', {
                             value: itemData.id,
                             text: itemData.name
                         }));
                     });
                    $customSelect.change(function (e) {
                         var selVal = $(this).val();
                         if (selVal == "Edit") {
                             var url = '@Url.Action("Honororium", "CoreAccounts")?HonorId=' + item.HonororiumId;
                             window.location.href = url;
                         }
                         $(this).val("");
                         return false;
                         e.stopPropagation();
                     });
                     return $result.add($customSelect);
                 },*@
                 _createFilterSwitchButton: function () {
                     return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                 }
             }
        ],

    });
    $("#PaymentList").jsGrid("option", "filtering", false);
    loadDetails();
    @*function loadDetails() {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetInstituteSalaryPaymentList", "CoreAccounts")',
            //data: JSON.stringify({ 'Month': Month }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                db = result;
                var amt = 0;
                $("#PaymentList").jsGrid({ data: db });
                $.each(result, function (i, v1) {
                    amt += v1.Amount;
                });
                $("#amount").val(amt);
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }*@    
    function loadDetails() {
        var input = [];
        input = {
            Month: $('#month').val(),
            
        },
        $("#PaymentList").jsGrid("search", input, pageIndex = 1, pageSize = 5);
    }
    $("#month").change(function () {

        var Month = $("#month").val();
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetInstituteSalaryAmount", "CoreAccounts")',
                data: JSON.stringify({ 'Month': Month }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    db = result;
                    var amt = db;             
                    $("#amount").val(amt);
                },
                error: function (err) {
                    console.log("error : " + err);
                }
        });
        loadDetails();
    });
    $(document).ready(function () {
        var Month = $("#hiddenmonth").val();
        var PaymentId = $("#paymentid").val();
        if (Month != "") {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetEditInstituteSalaryPaymentList", "CoreAccounts")',
                data: JSON.stringify({ 'PaymentId': PaymentId }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    db = result.IMS;
                    var amt = 0;
                    $("#PaymentList").jsGrid({ data: db });
                    $.each(result.IMS, function (i, v1) {
                        amt += v1.Amount;
                    });
                    $("#amount").val(amt);
                },
                error: function (err) {
                    console.log("error : " + err);
                }

            });
        }
        
    });
    function AddNewExpense() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "IMS", "tSubCode": "1" },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                $(cln).find('#lblTransType').text(item.TransactionType);
                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }

    function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if (valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        } else {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }
    function GetTransactionDetails() {
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "IMS", "tSubCode": "1" },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyExpenseList tr:first');
                    $(trEle).find('input[name$=".Amount"]').val('');
                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEle).find('#lblTransType').text(item.TransactionType);
                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                } else {
                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".Amount"]').val('');
                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                    $(trEleNew).find("input,Select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });

                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(trEleNew);
                }
            });
            $.each(result.DeductionDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyDeductionList tr:first');
                    $(trEle).find('input').val('');
                    var amtEle = $(trEle).find('input[name$=".Amount"]');
                    amtEle.removeClass('required');
                    $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                } else {
                    var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find("input").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });
                    var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                    amtEle.removeClass('required');
                    $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                    $('#tbodyDeductionList').append(trEleNew);
                }
            });
            $('#NeedUpdateTransDetail').val('false');
            CalculateDeductionTotal();

        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }

    $(document).on('click', 'a.DownBtn', function () {
        var ProjectNo = $("#prno").text();
        var url = '@Url.Action("GenerateAdminSalary", "Reports")';
        window.location.href = url;
    });


    function UpdateTransactionDetails() {

        $("#PaymentList").jsGrid(
    }

</script>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>


