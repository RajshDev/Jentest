@model IOAS.Models.ImprestPaymentModel

@{
    ViewBag.Title = "Imprest Master Close";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
        background: #fff;
        float: left;
    }

    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #fff;
        }

    .custom-nav-pills.nav-pills > li > a {
        color: rgba(255,255,255,0.5);
        cursor: default;
        background: transparent !important;
        border-color: transparent;
        border-top-color: transparent;
        padding: 10px 15px;
        margin: 0px 15px;
    }

        .custom-nav-pills.nav-pills > li > a span {
            width: 100%;
            float: left;
        }

    .custom-nav-pills.nav-pills > li.active > a, .custom-nav-pills.nav-pills > li.active > a:focus, .custom-nav-pills.nav-pills > li.active > a:hover {
        color: #333333;
        background-color: #fff !important;
    }

    .custom-st-fd-box {
        background: #f5f5f5;
        padding: 15px 0px;
        border-radius: 4px;
        display: inline-block;
    }

    .custom-st-fd-btn {
        color: #fff;
        font-size: 16px;
        margin-top: 15px;
        display: inline-block;
    }

    .custom-st-tb-th.table {
        border: 0px;
    }

        .custom-st-tb-th.table > tbody > tr > th {
            background: #3080e3;
            color: #fff;
            border: 0px solid #ccc;
        }

        .custom-st-tb-th.table > tbody > tr > td {
            border: 0px;
        }
</style>

<div class="row">
    @using (Html.BeginForm("ImprestPaymentClose", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formIMC", enctype = "multipart/form-data" }))
    {

        <div class="row hd-tt-bg">
            <div class="col-md-12">
                <h3>Imprest Master(Close)</h3>
            </div>
        </div>

        <div class="row">
            <div class="white-bg ad-navbar">
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-list-outline "></i>
                    </div>
                    <div class="ds-tt">
                        <span class="required">Request Reference</span>
                        @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Source)
                        @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                        @Html.HiddenFor(m => m.ImprestcardId)
                        @Html.HiddenFor(m => m.ImprestProjectDetailsId)
                        @Html.HiddenFor(m => m.CloseId)
                    </div>
                </div>
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-calendar-outline"></i>
                    </div>
                    <div class="ds-tt" id="divRefNum">
                        <span class="required">Ref Number (WF / Tapal)</span>
                        @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                        @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                        @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                        @Html.Hidden("SourceTapalOrWorkflow", "True")
                        @Html.HiddenFor(m => m.SubCode)
                        @Html.Hidden("TransactionTypeCode", "IMP")
                    </div>
                    <div class="dis-none ds-tt" id="divRefEmailDate">
                        <span class="required">Email Date</span>
                        @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                        <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                    </div>
                </div>


                <div class="col-md-3 col-md-offset-3">
                    <div class="reg-no custom-reg-no">
                        <div class="form-group custom-form-group">
                            <label>Number</label>
                            <h4>@Html.DisplayFor(m => m.ImprestNumber)</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="page-wrapper">
                <div class="col-md-12 mt30">
                    <ul class="nav nav-pills custom-nav-pills">
                        <li class="active"><a href="javascript:void(0)"><span>01</span>Details</a></li>
                        
                        <li><a href="javascript:void(0)"><span>02</span>Document Details</a></li>
                    </ul>

                    <div class="tab">
                        <div class="col-md-12 col-sm-12 m-b-sm">
                            <div class="row mb20">

                                <div class="col-md-12 mb-lg">

                                    <div class="white-bg">
                                        <div class="row">
                                            <h3>Card Details</h3>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label >PI : </label>
                                                    @Html.DisplayFor(m => m.NameofPI)
                                                  
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label >Account number : </label>
                                                    @Html.DisplayFor(m => m.ImprestBankACNumber)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label >Amount : </label>
                                                    @Html.DisplayFor(m => m.ImprestValue)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                @Html.Partial("_TransactionDetailsView", Model)
                                            </div>
                                        </div>
                                    </div>

                                </div>                            
                            </div>
                        </div>
                    </div>

                   
                    <div class="tab">
                        <div class="col-md-12 col-sm-12 m-b-sm">
                            <div class="">
                                @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                            </div>
                        </div>
                    </div>
                  

                    <div class="custom-nav-btn text-right">
                        @*<input type="submit" class="btn btn-primary" value="Save" name="Button" id="btnNewSave" />*@
                        <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                        <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                        <a href="@Url.Action("ImprestPaymentList", "CoreAccounts")" class="btn btn-primary">Close</a>
                    </div>

                </div>

            </div>
        </div>
    }
</div>


@Html.AntiForgeryToken()
<div id="popup"></div>
<script>
    var errMsg = '@ViewBag.errMsg';
    var tmperr = '@TempData["errMsg"]';
    if (tmperr != '') {
        $('input[name="NeedUpdateTransDetail"]').val(true);
    }
    var piList = '@Html.Raw(Json.Encode(ViewBag.PI))';
    var allocationHeads = '@Html.Raw(Json.Encode(ViewBag.allocatehead))'
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    @*var modelData = '@Html.Raw(Json.Encode(Model))'*@
    $(document).ready(function () {
        //get the relevant form
        //  var form = $('#frmSRB');

        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');

        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }

        CalculateDeductionTotal();
    
    });

    $("#FromDate, #ToDate, #txtDateofbirth, #txtEDateofbirth").datepicker
              ({
                  dateFormat: 'dd-MM-yy',
                  showStatus: true,
                  showWeeks: true,
                  changeYear: true,
                  yearRange: '-100:+0',
                  highlightWeek: true,
                  numberOfMonths: 1,
                  showAnim: "scale",
                  showOptions: {
                      origin: ["top", "left"]
                  }
              });


    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function noedit() {
        return false;
    }
    
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
		$("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
		if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function ValidateNumberOnly(e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            return false;
        }
    }
    function ValidateDecimalOnly(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
  
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
     //   var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#ttlCr').val()) || 0;
        var newvalue = parseFloat($('#txtNewImprestvalue').val());
        var enhancevalue = parseFloat($('#txtEnhanceImprestvalue').val());
        var ttlAdvAmt = 0;
        if (newvalue > 0)
        {
            ttlAdvAmt = newvalue;
        }
        else if (enhancevalue > 0)
        {
            ttlAdvAmt = enhancevalue;
        }

        //var netDrAmt = ttlExpAmt + ttldeductAmt;
        //var offsetValue = $("input[name='GST']:checked").val();
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netCrAmt != ttlExpAmt || netCrAmt != ttldeductAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        else if (isNaN(ttlExpAmt) || isNaN(ttlAdvAmt)) {
            msg = 'The requested imprest value / Transaction value is not a valid entry.';
        }
        //else if (ttlExpAmt != commitmentAmt) {
        //    msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
        //}

        var hdList = [];
        var hdJVList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
            var jv = $(this).closest('tr').find("input[name$='.IsJV']").val();
            if (jv.toLowerCase()== "true")
                hdJVList.push($(val).val());
            else
                hdList.push($(val).val());
        });
        hdList.sort();
        hdJVList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        //for (var k = 1; k < hdJVList.length; ++k) {
        //    if (hdJVList[k] == hdJVList[k - 1]) {
        //        msg = "Duplicate account head exist in expense details. Please select a different head.";
        //    }
        //}
        return msg;
    }
    
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            
        }
        else if (currentTab == 1) {

        }

        $(stepElements).each(function (idx, ele) {
            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }
        });
        return !hadError; // return the valid status

    }
   
    function formSave() {

        var isValid = $('#formIMC').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        if (isValid)
        {
            $('#formIMC').submit(function () {
                var id = $(this).attr('Id');

                $('button[type="submit"],#nextBtn,#btnSave').attr('disabled', 'true');
            });
            $('#formIMC').submit();
        }
    }

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>