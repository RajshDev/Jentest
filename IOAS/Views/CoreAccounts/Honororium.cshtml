@model IOAS.Models.HonororiumModel

@{
    ViewBag.Title = "Honororium";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("Honororium", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formHon", enctype = "multipart/form-data" }))
{

    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Honorarium</b> </h4>
        </div>
    </div>

    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                    new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.HonororiumId)
                    @Html.Hidden("TransactionTypeCode", "HON")
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")

                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>

            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.HonororiumNo)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Beneficiary Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">
                                        <div class="row mb30">
                                            <div class="col-md-3">
                                                <label class="required">Request received from:</label>
                                                @Html.DropDownListFor(m => m.RequestReceivedFrom, new SelectList(ViewBag.ReceviedFrom, "name", "name"), "Select any", new { @class = "form-control required" })
                                                @Html.ValidationMessageFor(m => m.RequestReceivedFrom)
                                            </div>

                                            <div class="col-md-2">
                                                <label class="required">Honorarium Date :</label>
                                                @Html.DropDownListFor(m => m.HonDate, new SelectList(ViewBag.HonDateList, "Value", "Value"), "----Select---", new { @class = "form-control required" })
                                                @Html.ValidationMessageFor(m => m.HonDate)
                                            </div>
                                            <div class="col-md-3">
                                                <label class="required">Bank</label>
                                                @Html.DropDownListFor(m => m.BankId, new SelectList(ViewBag.BankHeadList, "id", "name"), "Select any", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.BankId)
                                                @Html.HiddenFor(m => m.BankHeadId)
                                            </div>
                                            <div class="col-md-4">
                                                <label>Remarks :</label>
                                                @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @id = "remarks" })
                                            </div>
                                        </div>
                                        <div class="gray-bg br-rd">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="row m-b-sm">
                                                        <div class="col-md-2">
                                                            <h3 class="mt-xs">Payment Details</h3>
                                                        </div>
                                                        <div class="col-md-8">
                                                            <div class="form-group custom-form-group mb-null" style="display:flex;flex-flow:row;">




                                                                <input id="HonorFile" type="file" accept=".xls,.xlsx" @{ if (Model.PODetail != null) { @: disabled="disabled"
                                                                       } }>
                                                                <a id="btnImportHonor" href="javascript:void(0)" class="btn btn-default" @{ if (Model.PODetail != null) { @: disabled="disabled"
                                                                   } }>Import Excel</a>
                                                                <span id="downloadSpan" style="display:none">
                                                                    <a class="link" href="#">Download Result</a>
                                                                </span>
                                                                <span id="templateSpan" style="display:block">
                                                                    <a class="link" href="/Content/HonorariumImport/HonorariumImportTemplate.xlsx">Download Template</a>
                                                                </span>
                                                            </div>

                                                        </div>
                                                        <div class="col-md-2 text-right">

                                                            <a href="javascript:void(0)" id="btnAddHonor" class="btn btn-primary btnAddHonor">Add New</a>
                                                        </div>
                                                    </div>
                                                    <div class="m-b-sm scrl-table scrl-table-po-bl">
                                                        <table class="table table-bordered" id="thonorarium" style="width:1750px;max-width:3800px;">
                                                            <!--   -->
                                                            <thead>
                                                                <tr>
                                                                    <th colspan="10"></th>


                                                                </tr>
                                                            </thead>
                                                            <tbody id="tbodyHo">
                                                                <tr>
                                                                    <td style="width: 3800px;">Payee Type</td>
                                                                    <td style="width: 3800px;">Name</td>
                                                                    <td style="width: 3800px;">Amount</td>
                                                                    <td style="width: 3800px;">TDS</td>
                                                                    <td style="width: 3800px;">Net Amount</td>
                                                                    <td style="width: 3800px;">Bank Transfer</td>
                                                                    <td style="width: 3800px;" id="tdbank">Bank Name</td>
                                                                    <td style="width: 3800px;" id="tdbranch">Branch</td>
                                                                    <td style="width: 3800px;" id="tdacc">Account Number</td>
                                                                    <td style="width: 3800px;" id="tdacc">PAN</td>
                                                                    <td style="width: 3800px;" id="tdifsc">IFSC</td>
                                                                    <td style="width: 3800px;" id="tdtdsesc">TDS Head</td>
                                                                </tr>
                                                                @if (Model.PODetail != null)
                                                                {
                                                                    var count = 0;
                                                                    foreach (var item in Model.PODetail)
                                                                    {
                                                                        var payeetype = "PODetail[" + count + "].PayeeType";
                                                                        var name = "PODetail[" + count + "].Name";
                                                                        var amount = "PODetail[" + count + "].Amount";
                                                                        var tds = "PODetail[" + count + "].TDS";
                                                                        var netamount = "PODetail[" + count + "].NetAmount";
                                                                        var modeofpayment = "PODetail[" + count + "].PaymentMode";
                                                                        var bankname = "PODetail[" + count + "].BankName";
                                                                        var branch = "PODetail[" + count + "].Branch";
                                                                        var accno = "PODetail[" + count + "].AccountNo";
                                                                        var ifsc = "PODetail[" + count + "].IFSC";
                                                                        var tdsdrop = "PODetail[" + count + "].tdsdropdown";
                                                                        var noauto = "PODetail[" + count + "].NonAutoComplete";
                                                                        var usid = "PODetail[" + count + "].UserId";
                                                                        var pan = "PODetail[" + count + "].PAN";
                                                                        var hontds = "PODetail[" + count + "].HonororiumTdsSection";
                                                                        <tr id="trdetails" class="p-b-sm">
                                                                            <td>
                                                                                @Html.DropDownList(@payeetype, new SelectList(ViewBag.CategoryList, "name", "name", item.PayeeType), "Select any", new { @class = "form-control", @id = "payid", @required = "required" })
                                                                                @Html.ValidationMessage(@payeetype)
                                                                                @Html.Hidden("PODetail.Index", @count)

                                                                            </td>
                                                                            <td class="autonam">
                                                                                @Html.TextBox(@name, item.Name, new { @class = "form-control", @id = "txtname", @autocomplete = "off" })
                                                                                @Html.TextBox(@usid, item.UserId, new { @class = "form-control dis-none" })
                                                                                @Html.ValidationMessage(@usid)
                                                                                @Html.ValidationMessage(@name)
                                                                            </td>

                                                                            <td>
                                                                                @*Bug #7143 changes done by IC36775 19/08/2022*@
                                                                                @Html.TextBox(@amount, item.Amount, new { @type = "number", @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@amount)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@tdsdrop, new SelectList(ViewBag.TDS, "code", "name", item.tdsdropdown), new { @class = "form-control", @id = "TDSPercent" })
                                                                                @Html.TextBox(@tds, item.TDS, new { @class = "form-control dis-none", @readonly = true })
                                                                                @Html.ValidationMessage(@tds)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@netamount, item.NetAmount, new { @class = "form-control", @readonly = true })
                                                                                @Html.ValidationMessage(@netamount)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@modeofpayment, new SelectList(ViewBag.PaymentMode, "id", "name", item.PaymentMode), "Select PaymentMode", new { @class = "form-control", @id = "modeofpayment" })
                                                                                @Html.ValidationMessage(@modeofpayment)
                                                                            </td>
                                                                            <td id="bankname">
                                                                                @Html.TextBox(@bankname, item.BankName, new { @class = "form-control", @readonly = true })
                                                                                @Html.ValidationMessage(@bankname)
                                                                            </td>
                                                                            <td id="branch">
                                                                                @Html.TextBox(@branch, item.Branch, new { @class = "form-control", @readonly = true })
                                                                                @Html.ValidationMessage(@branch)
                                                                            </td>
                                                                            <td id="accno">
                                                                                @Html.TextBox(@accno, item.AccountNo, new { @class = "form-control", @readonly = true })
                                                                                @Html.ValidationMessage(@accno)
                                                                            </td>
                                                                            <td id="pan">
                                                                                @Html.TextBox(@pan, item.PAN, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@pan)
                                                                            </td>
                                                                            <td id="ifsc">
                                                                                @Html.TextBox(@ifsc, item.IFSC, new { @class = "form-control", @readonly = true })
                                                                                @Html.ValidationMessage(@ifsc)
                                                                            </td>
                                                                            <td id="honTDssec">
                                                                                @Html.DropDownList(@hontds, new SelectList(ViewBag.HonTdsSection, "id", "name", item.HonororiumTdsSection), "Select Tds Section", new { @class = "form-control", @id = "honTdsSection" })
                                                                                @Html.ValidationMessage(@hontds)
                                                                            </td>
                                                                            <td>
                                                                                @if (count == 0)
                                                                                {
                                                                                    <a href="javascript:void(0)" class="btn-circle dis-none removeHOItem"><i class="ion-trash-a"></i></a>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <a href="javascript:void(0)" class="btn-circle  removeHOItem"><i class="ion-trash-a"></i></a>
                                                                                }
                                                                            </td>
                                                                        </tr>
                                                                        count++;
                                                                    }

                                                                }

                                                                else
                                                                {
                                                                    <tr>
                                                                        <td>
                                                                            @Html.DropDownList("PODetail[0].PayeeType", new SelectList(ViewBag.CategoryList, "name", "name"), "Select any", new { @class = "form-control", @id = "payid", @required = "required" })
                                                                            @Html.Hidden("PODetail.Index", "0")
                                                                            @Html.ValidationMessage("PODetail[0].PayeeType")
                                                                        </td>
                                                                        <td class="autonam">
                                                                            @Html.TextBox("PODetail[0].Name", "", new { @class = "form-control", @id = "txtname", @autocomplete = "off" })
                                                                            @Html.TextBox("PODetail[0].UserId", "", new { @class = "form-control dis-none" })
                                                                            @Html.ValidationMessage("PODetail[0].UserId")
                                                                            @Html.ValidationMessage("PODetail[0].Name")

                                                                        </td>

                                                                        <td>
                                                                            @*Bug #7143 changes done by IC36775 19/08/2022*@
                                                                            @Html.TextBox("PODetail[0].Amount", "", new { @type = "number", @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @autocomplete = "off" })
                                                                            @Html.ValidationMessage("PODetail[0].Amount")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("PODetail[0].tdsdropdown", new SelectList(ViewBag.TDS, "code", "name"), new { @class = "form-control", @id = "TDSPercent" })
                                                                            @Html.TextBox("PODetail[0].TDS", "", new { @class = "form-control dis-none", @readonly = true })
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PODetail[0].NetAmount", "", new { @class = "form-control", @readonly = true })
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("PODetail[0].PaymentMode", new SelectList(ViewBag.PaymentMode, "id", "name"), "Select PaymentMode", new { @class = "form-control", @id = "modeofpayment" })
                                                                            @Html.ValidationMessage("PODetail[0].PaymentMode")
                                                                        </td>
                                                                        <td id="bankname">
                                                                            @Html.TextBox("PODetail[0].BankName", "", new { @class = "form-control", @readonly = true })
                                                                            @Html.ValidationMessage("PODetail[0].BankName")
                                                                        </td>
                                                                        <td id="branch">
                                                                            @Html.TextBox("PODetail[0].Branch", "", new { @class = "form-control", @readonly = true })
                                                                            @Html.ValidationMessage("PODetail[0].Branch")
                                                                        </td>
                                                                        <td id="accno">
                                                                            @Html.TextBox("PODetail[0].AccountNo", "", new { @class = "form-control", @readonly = true })
                                                                            @Html.ValidationMessage("PODetail[0].AccountNo")
                                                                        </td>
                                                                        <td id="pan">
                                                                            @Html.TextBox("PODetail[0].PAN", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("PODetail[0].PAN")
                                                                        </td>
                                                                        <td id="ifsc">
                                                                            @Html.TextBox("PODetail[0].IFSC", "", new { @class = "form-control", @readonly = true })
                                                                            @Html.ValidationMessage("PODetail[0].IFSC")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("PODetail[0].HonororiumTdsSection", new SelectList(ViewBag.HonTdsSection, "id", "name"), "Select Tds Section", new { @class = "form-control", @id = "honTdsSection" })

                                                                        </td>
                                                                        <td>
                                                                            <a href="javascript:void(0)" class="btn-circle dis-none removeHOItem"><i class="ion-trash-a"></i></a>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Total Amount(A)</label>
                                                    @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control tdAmt", @id = "txttotalamount", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.TotalAmount)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Total TDS(B)</label>
                                                    @Html.TextBoxFor(m => m.TotalTDS, new { @class = "form-control tdTds", @id = "txttotaltds", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.TotalAmount)
                                                </div>
                                            </div>

                                            <div class="col-md-3 pull-right">
                                                <div class="reg-no custom-reg-no">
                                                    <div class="form-group custom-form-group">
                                                        <label>Total Payable(C=A+B)</label>
                                                        @Html.TextBoxFor(m => m.NetPayableAmount, new { @class = "form-control tdPayable", @id = "txttotalpayable", @readonly = true })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="gray-bg br-rd">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="row m-b-sm">
                                                        <div class="col-md-6">
                                                            <h3 class="mt-xs">PCF</h3>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <a href="javascript:void(0)" id="btnAddPCF" class="btn btn-primary btnAddPCF">Add New</a>
                                                        </div>
                                                    </div>
                                                    <div class="m-b-sm scrl-table scrl-table-po-bl">
                                                        <table class="table table-bordered" style="width: 1280px;">
                                                            <thead>
                                                                <tr>
                                                                    <th colspan="5"></th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="tbodyPCF">
                                                                <tr>

                                                                    <td style="width: 250px;"> PI Name</td>
                                                                    <td style="width: 200px;">Amount</td>
                                                                    <td style="width: 150px;">OH</td>
                                                                    <td style="width: 200px;">Payable To PCF</td>
                                                                    <td style="width: 200px;">Payable To OH</td>
                                                                    <td></td>
                                                                </tr>
                                                                @if (Model.PCFDetail != null)
                                                                {
                                                                    var count = 0;
                                                                    foreach (var val in Model.PCFDetail)
                                                                    {
                                                                        var pcfname = "PCFDetail[" + count + "].PCFName";
                                                                        var pcfamount = "PCFDetail[" + count + "].PCFAmount";
                                                                        var ohdropdown = "PCFDetail[" + count + "].OHDropdown";
                                                                        var payabletopcf = "PCFDetail[" + count + "].PayableToPCF";
                                                                        var payabletooh = "PCFDetail[" + count + "].PayableToOH";
                                                                        var pcfusid = "PCFDetail[" + count + "].PCFUserId";
                                                                        <tr id="pcfdetails" class="p-b-sm">

                                                                            <td>
                                                                                @Html.TextBox(@pcfname, val.PCFName, new { @class = "form-control", @id = "pcftxtname", @autocomplete = "off" })
                                                                                @Html.TextBox(@pcfusid, val.PCFUserId, new { @class = "form-control dis-none" })
                                                                                @Html.ValidationMessage(@pcfusid)
                                                                                @Html.Hidden("PCFDetail.Index", @count)
                                                                            </td>
                                                                            <td>
                                                                                @*Bug #7143 changes done by IC36775 19/08/2022*@
                                                                                @Html.TextBox(@pcfamount, val.PCFAmount, new { @type = "number", @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@pcfamount)
                                                                            </td>

                                                                            <td>
                                                                                @Html.DropDownList(@ohdropdown, new SelectList(ViewBag.OH, "name", "name", val.OHDropdown), new { @class = "form-control", @id = "OHPercent" })
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@payabletopcf, val.PayableToPCF, new { @class = "form-control", @readonly = true })
                                                                                @Html.ValidationMessage(@payabletopcf)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@payabletooh, val.PayableToOH, new { @class = "form-control", @readonly = true })
                                                                                @Html.ValidationMessage(@payabletooh)
                                                                            </td>

                                                                            <td>
                                                                                @if (count == 0)
                                                                                {
                                                                                    <a href="javascript:void(0)" class="btn-circle dis-none removePCFItem"><i class="ion-trash-a"></i></a>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <a href="javascript:void(0)" class="btn-circle  removePCFItem"><i class="ion-trash-a"></i></a>
                                                                                }
                                                                            </td>
                                                                        </tr>
                                                                        count++;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <tr>

                                                                        <td>
                                                                            @Html.TextBox("PCFDetail[0].PCFName", "", new { @class = "form-control", @id = "pcftxtname ", @autocomplete = "off" })
                                                                            @Html.TextBox("PCFDetail[0].PCFUserId", "", new { @class = "form-control dis-none" })
                                                                            @Html.ValidationMessage("PCFDetail[0].PCFUserId")
                                                                            @Html.Hidden("PCFDetail.Index", "0")
                                                                        </td>
                                                                        <td>
                                                                            @*Bug #7143 changes done by IC36775 19/08/2022*@
                                                                            @Html.TextBox("PCFDetail[0].PCFAmount", "", new { @type = "number", @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @autocomplete = "off" })
                                                                            @Html.ValidationMessage("PCFDetail[0].PCFAmount")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("PCFDetail[0].OHDropdown", new SelectList(ViewBag.OH, "id", "name"), new { @class = "required form-control", @id = "OHPercent" })

                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PCFDetail[0].PayableToPCF", "", new { @class = "form-control", @readonly = true })
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PCFDetail[0].PayableToOH", "", new { @class = "form-control", @readonly = true })
                                                                        </td>
                                                                        <td>
                                                                            <a href="javascript:void(0)" class="btn-circle dis-none removePCFItem"><i class="ion-trash-a"></i></a>
                                                                        </td>
                                                                    </tr>

                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Total Payable To PCF(D)</label>
                                                    @Html.TextBoxFor(m => m.TotalPayableToPCF, new { @class = "form-control pcftdAmt", @id = "txtpcfamount", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.TotalAmount)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Total Payable To OH(E)</label>
                                                    @Html.TextBoxFor(m => m.TotalPayableToOH, new { @class = "form-control pcftdOH", @id = "txttotaloh", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.TotalAmount)
                                                </div>
                                            </div>

                                            <div class="col-md-3 pull-right">
                                                <div class="reg-no custom-reg-no">
                                                    <div class="form-group custom-form-group">
                                                        <label>Net Total(F=C+D+E)</label>
                                                        @Html.TextBoxFor(m => m.NetTotal, new { @class = "form-control tdNet", @id = "txtnettotal", @readonly = true })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("HonororiumList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}

<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

@Html.AntiForgeryToken()
<div id="popup"></div>

<script>
    $('input[name$=".InvDate"]').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);

    var errMsg = '@TempData["errMsg"]';

    $(document).ready(function () {
        if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        CalculatePaymentValue();
        $('.selectpicker').selectpicker({
            liveSearch: true
        });


        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }

        $('#Source').change(function () {
            var selSource = $(this).val();
            var select = $("#SourceReferenceNumber");
            select.empty();
            $("#divRefNum, #divRefEmailDate").addClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
            if (selSource == '1') {
                $.getJSON("@Url.Action("GetWorkflowRefNumber","Proposal")",
                    function (locationdata) {
                        $.each(locationdata, function (index, itemData) {
                            select.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    });
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            } else if (selSource == '3') {
                /**/
                $.getJSON("@Url.Action("GetTapalRefNumber","Proposal")",
                    /**/
                    function (locationdata) {
                        $.each(locationdata, function (index, itemData) {
                            select.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    });
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            }

            else if (selSource == '2') {
                $('#divRefEmailDate').removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('False');
            }
            else {

                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            }

        });
        //var piname = $('input[name$=".Name"]').val();
        //$('#lblVendorName').html(piname);

        $('select[name$=".PaymentMode"]').each(function () {
            var id = $(this).closest('tr').find('select[name$=".PaymentMode"]').val();
            if (id == 2) {
                $(this).closest('tr').find('input[name$=".BankName"],input[name$=".Branch"],input[name$=".AccountNo"],input[name$=".IFSC"]').addClass('required').prop("readonly", false);
            }
            else {
                $(this).closest('tr').find('input[name$=".BankName"],input[name$=".Branch"],input[name$=".AccountNo"],input[name$=".IFSC"]').removeClass('required');
            }
        });
        $('select[name$=".tdsdropdown"]').each(function () {
            var value = $(this).closest('tr').find('select[name$=".tdsdropdown"]').val();
            value = parseFloat(value) || 0;
            if (value > 0 && value != 20)
                $(this).closest('tr').find('input[name$=".PAN"]').prop("readonly", false).addClass('required');
            else {
                $(this).closest('tr').find('input[name$=".PAN"]').prop("readonly", true).removeClass('required');
                $(this).closest('tr').find('input[name$=".PAN"]').val("");
            }

        });
        $('#tbodyPCF').find(' input[name$=".PCFName"]').each(function () {
            $(this).closest('tr').find('input[name$=".PCFUserId"]').addClass('required');
            var ele = $(this).closest('tr').find('input[name$=".PCFName"]');
            // $(this).closest('tr').find('input[name$=".PCFName"]').addClass('required');
            aplyAutoCom(ele, "../CoreAccounts/LoadPIList", true)

        });
        $('#tbodyHo').find('select[name$=".PayeeType"]').each(function () {

            categoryChange($(this));

        });

        var BankId = $('#BankId :selected').val();

        if (BankId != '') {
            /**/
            $.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankId },
                /**/
                function (locationdata) {
                    var select = $("#srchProjectNumber");
                    select.empty();

                    $.each(locationdata, function (index, itemData) {

                        select.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name

                        }));
                    });
                    select.selectpicker('refresh');
                });

        }
    });



    $(document).on('change', 'select[name$=".tdsdropdown"]', function () {
        var value = $(this).closest('tr').find('select[name$=".tdsdropdown"]').val();
        value = parseFloat(value) || 0;
        var index = $(this).attr('name').match(/\d+/);
        var paymentmode = $('select[name="PODetail[' + index + '].PaymentMode"]').val() == "" ? 0 : $('select[name="PODetail[' + index + '].PaymentMode"]').val();

        //Bug #7202 -Changes done by IC36775 19/08/2022
        //if (value != 10 && value != 20 && !(value == 0 && paymentmode == 3))
        //{
        //    $(this).val('');
        //    $("#alert").text("This TDS percent not available");
        //    $('#Validation').modal('show');
        //    return;
        //}
        if (value != 10 && value != 20 && value != 0 && value != 20.8 && value != 31.2 && value != 34.32 && value != 35.88) {
            $(this).val('');
            $("#alert").text("This TDS percent not available");
            $('#Validation').modal('show');
            $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val("").end();
            return;
        }
        if (value == 0) {
            $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val("").end();
        }
        //Bug #7202 End of changes

        if (value > 0 && (value == 10 || value == 20 || value == 20.8 || value == 31.2 || value == 34.32 || value == 35.88)) {
            if (value == 10) {
                $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val(41);
            }
            else if (value == 20) {
                $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val(356);
            }
            else if (value == 20.8) {
                $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val(588);
            }
            else if (value == 31.2) {
                $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val(589);
            }
            else if (value == 34.32) {
                $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val(590);

            }
            else if (value == 35.88) {
                $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val(591);

            }

        }
        if (value > 0 && value != 20)
            $(this).closest('tr').find('input[name$=".PAN"]').prop("readonly", false).addClass('required');
        else {
            $(this).closest('tr').find('input[name$=".PAN"]').prop("readonly", true).removeClass('required');
            $(this).closest('tr').find('input[name$=".PAN"]').val("");
        }
    });

/* PaymentDetails CheckBox Realted Function */
    $(document).on('change', 'select[name$=".PaymentMode"]', function () {
        var id = $(this).closest('tr').find('select[name$=".PaymentMode"]').val();
        if (id == 2) {


            let PayeeType = $(this).closest('tr').find('select[name$=".PayeeType"]').val();
            let EmpId = $(this).closest('tr').find('input[name$=".UserId"]').val();

            console.log(EmpId + " / " + PayeeType);
            let bankdata = getBankDetails(EmpId, PayeeType, this);

            $(this).closest('tr').find('input[name$=".BankName"]').prop("readonly", false).addClass('required');
            $(this).closest('tr').find('input[name$=".Branch"]').prop("readonly", false).addClass('required');
            $(this).closest('tr').find('input[name$=".AccountNo"]').prop("readonly", false).addClass('required');
            $(this).closest('tr').find('input[name$=".IFSC"]').prop("readonly", false).addClass('required');
            //$(this).closest('tr').find('input[name$=".PAN"]').prop("readonly", false).addClass('required');

        }
        else {
            $(this).closest('tr').find('input[name$=".BankName"]').prop("readonly", true).val("").removeClass('required');
            $(this).closest('tr').find('input[name$=".Branch"]').prop("readonly", true).val("").removeClass('required');
            $(this).closest('tr').find('input[name$=".AccountNo"]').prop("readonly", true).val("").removeClass('required');
            $(this).closest('tr').find('input[name$=".IFSC"]').prop("readonly", true).val("").removeClass('required');
            // $(this).closest('tr').find('input[name$=".PAN"]').prop("readonly", true).val("").removeClass('required');


        }
    });

    $(document).on('keyup', 'input[name$=".Name"]', function () {
        if ($(this).val() == '') {
            $(this).closest('tr').find('input[name$=".UserId"]').val("");
        }
    });
CalculateDeductionTotal();
/* PaymentDetails Related ADDNew Function */
    $('#btnAddHonor').click(function () {
        var cln = $('#tbodyHo tr:nth-child(2)').clone().find("input[type!='checkbox']").val("").end();
        $(cln).find('select[type="hidden"][name$=".PaymentMode"],select[type="hidden"][name$=".PaymentMode"]').val("").end();
        $(cln).find('select[name$=".PaymentMode"],select[select=".PaymentMode"]').val("").end();
        $(cln).find('select[name$=".PayeeType"]').val("").end();
        $(cln).find('.tdAmt, .tdTds, .tdPayable').text('');
        $(cln).find('a.dis-none').removeClass('dis-none');
        var index = $('#tbodyHo tr:last').find("input[name='PODetail.Index']").val();
        //var index = $('#tbodyPO tr:last').find("input[name='PODetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='PODetail.Index']").val(index);
        // $(cln).find("input[name='PODetail[0].ModeOfPayment']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });

        $('#tbodyHo').append(cln);
    });

    $(document).on('click', 'a.removeHOItem', function () {
        $(this).closest('tr').remove();
        calculateamount();
    });

/* PCF Related ADDNew Function */
    $('#btnAddPCF').click(function () {

        var cln = $('#tbodyPCF tr:nth-child(2)').clone().find("input").val("").end();
        $(cln).find('.pcftdAmt, .pcftdOH, .tdNet').text('');
        $(cln).find('a.dis-none').removeClass('dis-none');
        var index = $('#tbodyPCF tr:last').find("input[name='PCFDetail.Index']").val();
        //var index = $('#tbodyPO tr:last').find("input[name='PODetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='PCFDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            if ($(this).attr("id"))
                $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });

        $('#tbodyPCF').append(cln);
    });

    $(document).on('click', 'a.removePCFItem', function () {
        $(this).closest('tr').remove();
        calculateamount();
    });


/* PaymentDetails Related AutoComplete Function and Validation */
$(document).on('change', 'select[name$=".PayeeType"]', function () {

var type = $(this).val();
var selectHead = $(this).closest('tr').find('select[name$=".PaymentMode"]');
selectHead.empty();
    if (type == "Others") {
        selectHead.append($('<option/>', {
            value: 0,
            text: 'Select Any',
        }));
        selectHead.append($('<option/>', {
            value: 1,
            text: 'Cheque',
        }));
        selectHead.append($('<option/>', {
            value: 2,
            text: 'Bank Transfer',
        }));
    } else {
        selectHead.append($('<option/>', {
            value: 0,
            text: 'Select Any',
        }));
        selectHead.append($('<option/>', {
            value: 1,
            text: 'Cheque',
        }));
        selectHead.append($('<option/>', {
            value: 2,
            text: 'Bank Transfer',
        }));
        selectHead.append($('<option/>', {
            value: 3,
            text: 'Salary',
        }));
    }

$(this).closest('tr').find('input[name$=".Name"]').val("")
$(this).closest('tr').find('input[name$=".UserId"]').val("")
categoryChange($(this));
});

    function categoryChange(el) {

        var selCat = $(el).val();
        if (selCat == "PI") {
            $(el).closest('tr').find('input[name$=".UserId"]').addClass('required');
            $(el).closest('tr').find('input[name$=".Amount"]').addClass('required');
            $(el).closest('tr').find('select[name$=".PaymentMode"]').addClass('required');
            var ele = $(el).closest('tr').find('input[name$=".Name"]');

            // $(el).closest('tr').find('input[name$=".Name"]').addClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadPIList", true)

        }
        else if (selCat == "Vendor Staff") {
            $(el).closest('tr').find('input[name$=".UserId"]').addClass('required');
            $(el).closest('tr').find('input[name$=".Amount"]').addClass('required');
            $(el).closest('tr').find('select[name$=".PaymentMode"]').addClass('required');
            var ele = $(el).closest('tr').find('input[name$=".Name"]');

            // $(el).closest('tr').find('input[name$=".Name"]').addClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadTandMList", true)
        }
        else if (selCat == "Institute Staff") {
            $(el).closest('tr').find('input[name$=".UserId"]').addClass('required');
            $(el).closest('tr').find('input[name$=".Amount"]').addClass('required');
            $(el).closest('tr').find('select[name$=".PaymentMode"]').addClass('required');
            var ele = $(el).closest('tr').find('input[name$=".Name"]');

            // $(el).closest('tr').find('input[name$=".Name"]').addClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadInstituteStaffList", true)
        }
        else if (selCat == "Adhoc Staff") {
            $(el).closest('tr').find('input[name$=".UserId"]').addClass('required');
            $(el).closest('tr').find('input[name$=".Amount"]').addClass('required');
            $(el).closest('tr').find('select[name$=".PaymentMode"]').addClass('required');
            var ele = $(el).closest('tr').find('input[name$=".Name"]');

            // $(el).closest('tr').find('input[name$=".Name"]').addClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadAdhocStaffList", true)
        }
        else if (selCat == "Student") {
            $(el).closest('tr').find('input[name$=".UserId"]').addClass('required');                       
            $(el).closest('tr').find('input[name$=".Amount"]').addClass('required');
            $(el).closest('tr').find('select[name$=".PaymentMode"]').addClass('required'); 
            var ele = $(el).closest('tr').find('input[name$=".Name"]');

            //  $(el).closest('tr').find('input[name$=".Name"]').addClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadStudentList", false);
        } else if (selCat == "Others") {
            $(el).closest('tr').find('input[name$=".UserId"]').removeClass('required');
            $(el).closest('tr').find('input[name$=".Name"]').addClass('required');
            $(el).closest('tr').find('select[name$=".PaymentMode"]').addClass('required');
            var autoComEle = $(el).closest('tr').find('input[name$=".Name"]');
            if (autoComEle.data('ui-autocomplete') != undefined)
                autoComEle.autocomplete("destroy");
            //$(el).closest('tr').find('#txtname').autocomplete("destroy");
            $(el).closest('tr').find('input[name$=".Amount"]').addClass('required');
            $(el).removeClass('required');
        }
        else {
            $(el).closest('tr').find('input[name$=".Name"],input[name$=".UserId"]').val('');
            var autoComEle = $(el).closest('tr').find('input[name$=".Name"]');
            if (autoComEle.data('ui-autocomplete') != undefined)
                autoComEle.autocomplete("destroy");
            $(el).closest('tr').find('input[name$=".Name"]').removeClass('required');
            $(el).closest('tr').find('input[name$=".UserId"]').removeClass('required');
            $(el).closest('tr').find('input[name$=".PayeeType"]').removeClass('required');
            $(el).closest('tr').find('input[name$=".Amount"]').removeClass('required');
        }
    }

function aplyAutoComplete(ele, url, setId) {
$(ele).autocomplete({
    select: function (event, ui) {
        event.preventDefault();
        $(ele).val(ui.item.label);

        console.log("Selected Emp:" + ui.item.value);
        if (setId == true) {
            let PayeeType = $(ele).closest('tr').find('select[name$=".PayeeType"]').val();
            $(ele).closest('tr').find('input[name$=".UserId"]').val(ui.item.value);
            $(ele).closest('tr').find('input[name$=".Name"]').val(ui.item.label);
            console.log(ui.item.value + " / " + PayeeType);
            let bankdata = getBankDetails(ui.item.value, PayeeType, ele);
            console.log(bankdata);
        } else if (setId == false) {
            $(ele).closest('tr').find('input[name$=".UserId"]').val('0');
            $(ele).closest('tr').find('input[name$=".Name"]').val(ui.item.label);
        }
    },
    focus: function (event, ui) {
        event.preventDefault();
        $(ele).val(ui.item.label);
    },
    source: function (request, response) {
        $.getJSON(url, { term: request.term },
            function (locationdata) {
                response(locationdata);
            });
    },
    minLength: 3
});
}


/* PCF Related AutoComplete Function and Validation */
$(document).on('click', 'input[name$=".PCFName"]', function () {
//   applyAutoComplete('input[name$=".PCFName"]', "../CoreAccounts/LoadPIList", false);
$(this).closest('tr').find('input[name$=".PCFUserId"]').addClass('required');
$(this).closest('tr').find('input[name$=".PCFAmount"]').addClass('required');
var ele = $(this).closest('tr').find('input[name$=".PCFName"]');

// $(this).closest('tr').find('input[name$=".PCFName"]').addClass('required');
aplyAutoCom(ele, "../CoreAccounts/LoadPIList", true)
})
function aplyAutoCom(ele, url, setId) {
$(ele).autocomplete({
    select: function (event, ui) {
        event.preventDefault();
        $(ele).val(ui.item.label);
        if (setId == true) {
            $(ele).closest('tr').find('input[name$=".PCFUserId"]').val(ui.item.value);
            $(ele).closest('tr').find('input[name$=".PCFName"]').val(ui.item.label);
        } else {
            $(ele).closest('tr').find('input[name$=".PCFUserId"]').val('0');
            $(ele).closest('tr').find('input[name$=".PCFName"]').val(ui.item.label);
        }
    },
    focus: function (event, ui) {
        event.preventDefault();
        $(ele).val(ui.item.label);
    },
    source: function (request, response) {
        $.getJSON(url, { term: request.term },
            function (locationdata) {
                response(locationdata);
            });
    },
    minLength: 3
});
}


/* PaymentDetails and PCF related Calculation (Net Total) */

    function calculateamount() {
        var totalnetamount = 0;
        var totalpayable = 0;
        var totaltds = 0;
        var TotalPayableToPCF = 0;
        var TotalPayableToOH = 0;
        var nettotal = 0;
        $('#tbodyHo tr').each(function (idx, val) {
            var amount = parseFloat($(this).closest('tr').find('input[name$=".Amount"]').val());
            var tdspercent = $(this).closest('tr').find('select[name$=".tdsdropdown"] option:selected').text();
            tdspercent.replace(/%/, "");
            tdspercent = parseFloat(tdspercent);
            var tds = parseFloat((amount * tdspercent) / 100) || 0;
            tds = Math.ceil(tds);
            var netamount = parseFloat(amount - tds);
            if (!isNaN(tds)) {
                $(this).find('input[name$=".TDS"]').val(tds);
                totaltds += tds;
            }
            if (!isNaN(netamount)) {
                $(this).find('input[name$=".NetAmount"]').val(netamount);
                totalnetamount += netamount;
            }
            if (!isNaN(totalnetamount)) {
                totalpayable = totalnetamount + totaltds;
            }
        });
        $('#tbodyPCF tr').each(function (idx, val) {
            var pcfamount = parseFloat($(this).closest('tr').find('input[name$=".PCFAmount"]').val());
            var ohpercent = parseFloat($(this).closest('tr').find('select[name$=".OHDropdown"]').val());
            var payabletoOH = parseFloat((pcfamount * ohpercent) / 100);
            var payabletoPCF = parseFloat(pcfamount - payabletoOH);
            if (!isNaN(payabletoOH)) {
                $(this).find('input[name$=".PayableToOH"]').val(payabletoOH);
                TotalPayableToOH += payabletoOH;
            }
            if (!isNaN(payabletoPCF)) {
                $(this).find('input[name$=".PayableToPCF"]').val(payabletoPCF);
                TotalPayableToPCF += payabletoPCF;
            }

        });

        if (!isNaN(totaltds)) {
            $("#txttotaltds").val(totaltds.toFixed(2));

        }
        if (!isNaN(totalnetamount)) {
            $("#txttotalamount").val(totalnetamount.toFixed(2));
        }
        if (!isNaN(totalpayable)) {
            $("#txttotalpayable").val(totalpayable.toFixed(2));

        }
        if (!isNaN(TotalPayableToOH)) {
            $("#txttotaloh").val(TotalPayableToOH.toFixed(2));

        }
        if (!isNaN(TotalPayableToPCF)) {
            $("#txtpcfamount").val(TotalPayableToPCF.toFixed(2));
        }
        if (!isNaN(TotalPayableToPCF)) {
            nettotal = TotalPayableToOH + TotalPayableToPCF + totalpayable;
            $("#txtnettotal").val(nettotal.toFixed(2));
            var credit = parseFloat($('#txtnettotal').val());
            $("#CreditorAmount").val(credit);
        }

        /* Honororoium Accounts Posting */


    }


    $(document).on('change', 'input[name$=".PCFAmount"]', function () {
        calculateamount();
    });
    $(document).on('change', 'select[name$=".OHDropdown"]', function () {
        calculateamount();
    });
    $(document).on('change', 'input[name$=".Amount"]', function () {
        calculateamount();
    });
    $(document).on('change', 'select[name$=".tdsdropdown"]', function () {
        calculateamount();
    });
    $(document).on('change', 'input[name$=".PAN"]', function () {
        var msg = 'valid';
        var inputvalues = $(this).closest('tr').find('input[name$=".PAN"]').val();
        if (inputvalues != "") {
            //  var regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
            // if (!regex.test(inputvalues))
            // {
            msg = "invalid PAN no";
            $("#alert").text(msg);
            $('#Validation').modal('show');
            // }
        }
    });
//function ValidatePAN() {
//    var msg = 'valid';
//    $('#tbodyHo tr').each(function (idx, val) {
//      var inputvalues = $(this).closest('tr').find('input[name$=".PAN"]').val();
//             if (inputvalues != "") {
//             var regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
//             if (!regex.test(inputvalues)) {
//                 return  msg= "invalid PAN no";
//            }
//        }
//    });
//};


    function ValidateDecimalOnly(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var overallExp = parseFloat($('#OverallExpense').val()) || 0;
        var netDrAmt = ttlExpAmt + ttldeductAmt;
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netDrAmt != crAmt || netCrAmt != crAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        //if (isNaN(netCrAmt) || isNaN(overallExp)) {
        //    msg = 'The credit value / overall expenses is not a valid entry.';
        //} else if (netCrAmt != overallExp) {
        //    msg = 'There is a mismatch between the credit value and overall expenses value. Please update the value to continue.';
        //}

        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function ValidateCommitment() {
        var msg = 'valid';
        CalculatePaymentValue();
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var totalpayable = parseFloat($('#txtnettotal').val());
        //var eligtax = parseFloat($('#txtEligibleTaxValue').val());
        // var ttlAdvAmt = netPayAmt - eligtax;
        // var advPct = parseInt($("#AdvancePercentage").val());
        //  var offsetValue = $("input[name='GST']:checked").val();
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (isNaN(totalpayable) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / allocated commitment value is not a valid entry.';
        } else if (totalpayable != commitmentAmt) {
            msg = 'There is a mismatch between the payable amount and allocated commitment value. Commitment value should be equal to Net Total. Please update the value to continue.';
        }

        return msg;
    }

    function ValidatePCFandPaymentDetails() {

        var msg = 'valid';
        var paymentpayeetype = $('select[name$=".PayeeType"]').val();
        var pcfname = $('input[name$=".PCFName"]').val();
        var amount = $('input[name$=".Amount"]').val();
        var pcfamount = $('input[name$=".PCFAmount"]').val();
        if ((paymentpayeetype != "") && (pcfname == "")) {
            $('select[name$=".PayeeType"]').each(function () {
                $(this).closest('tr').find('input[name$=".Amount"]').addClass('required');
            });
            $('input[name$=".PCFName"]').each(function () {
                $(this).closest('tr').find('input[name$=".PCFAmount"]').removeClass('required');
                $(this).closest('tr').find('input[name$=".PCFName"]').removeClass('required');
                $(this).closest('tr').find('input[name$=".PCFUserId"]').removeClass('required');
            });
        }
        else if ((pcfname != "") && (paymentpayeetype == "")) {
            $('select[name$=".PayeeType"]').each(function () {
                $(this).closest('tr').find('input[name$=".Amount"]').removeClass('required');
                $(this).closest('tr').find('input[name$=".PayeeType"]').removeClass('required');
            });
            $('input[name$=".PCFName"]').each(function () {
                $(this).closest('tr').find('input[name$=".PCFAmount"]').addClass('required');
            });
        }

        else if ((paymentpayeetype == "") || (pcfname == "")) {
            msg = "PCF or PaymentDetails Required";
        } else if ((pcfname != "") && (paymentpayeetype != "")) {
            $('select[name$=".PayeeType"]').each(function () {
                $(this).closest('tr').find('input[name$=".Amount"]').addClass('required');
            });
            $('input[name$=".PCFName"]').each(function () {
                $(this).closest('tr').find('input[name$=".PCFAmount"]').addClass('required');
            });;

        }
        return msg;
    }

    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            /**/
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            /**/
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            /**/
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            /**/
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function formSave() {
        var isValid = $('#formHon').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }

        if (isValid)
            $('#formHon').submit();

    }

    function AddNewExpense() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            /**/
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            /**/
            data: { "typeCode": "SMI", "tSubCode": "1" },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }


    function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if (valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        } else {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }
    function GetTransactionDetails() {
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            /**/
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            /**/
            data: { "typeCode": "HON", "tSubCode": "1" },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                $.each(result.DeductionDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyDeductionList tr:first');
                        $(trEle).find('input').val('');
                        var amtEle = $(trEle).find('input[name$=".Amount"]');
                        amtEle.removeClass('required');
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                        amtEle.removeClass('required');
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                $('#NeedUpdateTransDetail').val('false');

                UpdateTransactionDetails();

                CalculateDeductionTotal();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
    //Rajesh VS11764

    function UpdateTransactionDetails() {
        var totalnetamount = 0;
        var totalpayable = 0;
        var totaltds = 0;
        var TotalPayableToPCF = 0;
        var TotalPayableToOH = 0;
        var nettotal = 0;
        var Hosalary = 0;
        var HoBankcheque = 0;
        var HOtdsten = 0;
        var HOtdstwenty = 0;        
        var HOtdstwentyPointEight = 0;  
        var HOtdstwentyPointEight = 0;  
        var HOtdstwentyPointEight = 0;  
        var HOtdsthirtyPointTwo = 0;  
        var HOtdsthirtyPointThreeTwo = 0;  
        var HOtdsthirtyPointEightEight = 0;  




        $('#tbodyHo tr').each(function (idx, val) {
            var amount = parseFloat($(this).closest('tr').find('input[name$=".Amount"]').val());
            var tdspercent = $(this).closest('tr').find('select[name$=".tdsdropdown"] option:selected').text();
            var HOBanktran = $(this).find('select[name$=".PaymentMode"]').val();
            var HOTdsdrop = $(this).find('select[name$=".tdsdropdown"]').val();

            tdspercent.replace(/%/, "");
            tdspercent = parseFloat(tdspercent);
            var tds = parseFloat((amount * tdspercent) / 100) || 0;
            tds = Math.ceil(tds);
            var netamount = parseFloat(amount - tds);
            if (!isNaN(tds)) {
                totaltds += tds;
            }
            if (!isNaN(netamount)) {
                totalnetamount += netamount;
            }
            if (!isNaN(totalnetamount)) {
                totalpayable = totalnetamount + totaltds;
            }
            console.log(totalpayable);

            if (HOBanktran == 1 || HOBanktran == 2) {
                HoBankcheque += netamount;
            }
            else if (HOBanktran == 3) {
                Hosalary += netamount;
            }

            if (HOTdsdrop == 10) {
                HOtdsten += tds;
            }
            else if (HOTdsdrop == 20) {
                HOtdstwenty += tds;
            }
            else if (HOTdsdrop == 20.8) {
                HOtdstwentyPointEight += tds;
            }
            else if (HOTdsdrop == 31.2) {
                HOtdsthirtyPointTwo += tds;
            }
            else if (HOTdsdrop == 34.32) {
                HOtdsthirtyPointThreeTwo += tds;
            }
            else if (HOTdsdrop == 35.88) {
                HOtdsthirtyPointEightEight += tds;
            }      
        });

        $('#tbodyPCF tr').each(function (idx, val) {
            var pcfamount = parseFloat($(this).closest('tr').find('input[name$=".PCFAmount"]').val());
            var ohpercent = parseFloat($(this).closest('tr').find('select[name$=".OHDropdown"]').val());
            var payabletoOH = parseFloat((pcfamount * ohpercent) / 100);
            var payabletoPCF = parseFloat(pcfamount - payabletoOH);
            if (!isNaN(payabletoOH)) {

                TotalPayableToOH += payabletoOH;
            }
            if (!isNaN(payabletoPCF)) {
                TotalPayableToPCF += payabletoPCF;
            }
        });

        if (!isNaN(TotalPayableToPCF)) {
            nettotal = TotalPayableToOH + TotalPayableToPCF + totalpayable;
            var credit = parseFloat($('#txtnettotal').val());
            console.log(TotalPayableToOH);
            console.log(TotalPayableToPCF);

        }

        $('#tbodyExpenseList tr').each(function (idx, trval) {
            AccHead = ($(this).find('select[name$=".AccountHeadId"]').val());
            AccountGroupId = ($(this).find('select[name$=".AccountGroupId"]').val());

            if (AccountGroupId == 38) {
                ($(this).find('input[name$=".Amount"]').val(HoBankcheque.toFixed(2)));
            }
            else if (AccHead == 134) {
                ($(this).find('input[name$=".Amount"]').val(nettotal.toFixed(2)));
            }
            if (AccHead == 41) {
                ($(this).find('input[name$=".Amount"]').val(HOtdsten.toFixed(2)));
            }
            else if (AccHead == 356) {
                ($(this).find('input[name$=".Amount"]').val(HOtdstwenty.toFixed(2)));
            }  
            else if (AccHead == 588) {
                ($(this).find('input[name$=".Amount"]').val(HOtdstwentyPointEight.toFixed(2)));
            }
            else if (AccHead == 589) {
                ($(this).find('input[name$=".Amount"]').val(HOtdsthirtyPointTwo.toFixed(2)));

            }
            else if (AccHead == 590) {
                ($(this).find('input[name$=".Amount"]').val(HOtdsthirtyPointThreeTwo.toFixed(2)));

            }
            else if (AccHead == 591) {
                ($(this).find('input[name$=".Amount"]').val(HOtdsthirtyPointEightEight.toFixed(2)));

            }
            else if (AccHead == 316) {
                ($(this).find('input[name$=".Amount"]').val(Hosalary.toFixed(2)));
            }
            else if (AccHead == 141) {
                ($(this).find('input[name$=".Amount"]').val(TotalPayableToOH.toFixed(2)));
            }
            else if (AccHead == 316) {
                ($(this).find('input[name$=".Amount"]').val(Hosalary.toFixed(2)));
            }
            else if (AccHead == 139) {
                ($(this).find('input[name$=".Amount"]').val(TotalPayableToPCF.toFixed(2)));
            }
            //else if (AccHead == 319) {
            //    ($(this).find('input[name$=".Amount"]').val());
            //}
            //else if (AccHead == 320) {
            //    ($(this).find('input[name$=".Amount"]').val());
            //}
            //else if (AccHead == 377) {
            //    ($(this).find('input[name$=".Amount"]').val());
            //}
        });

        $('#tbodyExpenseList tr').each(function (idx, trval) {
            var Amt = ($(this).find('input[name$=".Amount"]').val());
            Amt = parseFloat(Amt) || 0;

            if (Amt == 0) {
                $(this).remove();
            }

            //if (Amt == "") {
            //    $(this).remove();
            //}
            //else if (Amt == "0.00") {
            //    $(this).remove();
            //}
            //else if (Amt == 0) {
            //    $(this).remove();
            //}

        });
    };
/* Tab Sections Start*/
var currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
            if (x.length == 2) {
                UpdateTransactionDetails();
            }
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);


    }


    @*function getBankDetails(EmployeeId, Category) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("StaffBankAccountDeatils", "CoreAccounts")",
            data: { "EmployeeId": EmployeeId, "Category": Category},
            dataType: "json",
            success: function (result) {
                console.log(result);
                }
            });

    };*@

    async function getBankDetails(EmployeeId, Category,ele) {
        let bankdata = await getBankDetailsAjax(EmployeeId, Category);
        console.log(bankdata);
        if ($.isEmptyObject(bankdata) == false || bankdata.length > 0) {
            $(ele).closest('tr').find('input[name$=".AccountNo"]').val(bankdata[0]["AccountNumber"]);
            $(ele).closest('tr').find('input[name$=".BankName"]').val(bankdata[0]["BankName"]);
            $(ele).closest('tr').find('input[name$=".Branch"]').val(bankdata[0]["Branch"]);
            $(ele).closest('tr').find('input[name$=".IFSC"]').val(bankdata[0]["IFSCCode"]);
            $(ele).closest('tr').find('input[name$=".PAN"]').val(bankdata[0]["PAN"]);
        }
        else {
            $(ele).closest('tr').find('input[name$=".AccountNo"]').val("");
            $(ele).closest('tr').find('input[name$=".BankName"]').val("");
            $(ele).closest('tr').find('input[name$=".Branch"]').val("");
            $(ele).closest('tr').find('input[name$=".IFSC"]').val("");
            $(ele).closest('tr').find('input[name$=".PAN"]').val("");
        }
    };
    function getBankDetailsAjax(EmployeeId, Category) {
          retval = true;
        $.ajax({
            type: "GET",
            async: false,
            url: "@Url.Action("StaffBankAccountDeatils", "CoreAccounts")",
            data: { "EmployeeId": EmployeeId, "Category": Category },
            dataType: "json",
            success: function (result) {
                retval = result;
                return result;
                }
            });
        return retval;
    };
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            if (content == '') {
                searchCommitment()
            }
            var validationMsg = ValidatePCFandPaymentDetails()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }

            $('select[name$=".tdsdropdown"]').each(function () {
                var value = $(this).val();
                var index = $(this).attr('name').match(/\d+/);
                var paymentmode = $('select[name="PODetail[' + index + '].PaymentMode"]').val() == "" ? 0 : $('select[name="PODetail[' + index + '].PaymentMode"]').val();

                //Bug #7202 -Changes done by IC36775 19/08/2022
                //if (value != 10 && value != 20 && !(value == 0 && paymentmode == 3))
                //{
                //    hadError = true;
                //    $("#alert").text("Selected TDS percent not available");
                //    $('#Validation').modal('show');
                //}

                if (value != 10 && value != 20 && value != 0 && value != 20.8 && value != 31.2 && value != 34.32 && value != 35.88  ) {
                    hadError = true;
                    $("#alert").text("Selected TDS percent not available");
                    $('#Validation').modal('show');
                    $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val("").end();
                }
                if (value == 0) {
                    $('select[name="PODetail[' + index + '].HonororiumTdsSection"]').val("").end();
                }
                //Bug #7202 End of changes
            });
            //var validationPANMsg = ValidatePAN()
            //if (validationPANMsg != 'valid') {
            //    hadError = true;
            //    $("#alert").text(validationPANMsg);
            //    $('#Validation').modal('show');
            //}
        }
        else if (currentTab == 1) {
            var validationMsg = ValidateCommitment()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            } else {
                if ($('#NeedUpdateTransDetail').val().toLowerCase() == 'true') {
                    GetTransactionDetails();
                }

                var credit = parseFloat($('#txtnettotal').val());
                $("#CreditorAmount").val(credit);
                //if(parseInt($("#AdvancePercentage").val()) == 100){
                CalculateDeductionTotal();
                //$("#CreditorAmount, #ttlCr").val($('#lblAdvTtlAmt').text());
                //}else{
                //    $("#CreditorAmount, #ttlCr").val($('#lblAdvNetAmt').text());
                //}
            }
        }
        else if (currentTab == 2) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }
        else if (currentTab == 3) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }

        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }



        });
        return !hadError; // return the valid status

    }

    var selectPickerApiElement = function (el, choice, options, select) {
        $(el).find('select').selectpicker({
            liveSearch: true
        });
        $(el).children().eq(2).siblings().remove();
        if (choice == "add") {
            $(el).find('.selectpicker').append("<option>" + options + "</option>");
        } else if (choice == "all" && select != '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0; i < options.length; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
            $(el).find('.selectpicker option[value=' + select + ']').attr('selected', 'selected');
        } else if (choice == "all" && select == '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0; i < options.length; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
        } else if (choice == "empty") {
            $(el).find('.selectpicker').children().remove();
            $(el).find('.selectpicker').append("<option value=''>Select any</option>");
        } else {
            var selectOptionsLength = $(el).find('.selectpicker').children().length;
            for (var i = 1; i <= selectOptionsLength; i++) {
                if (options == $(el).find('.selectpicker').children().eq(i).val()) {
                    $(el).find('.selectpicker').children().eq(i).remove();
                    break;
                } else {
                    continue;
                }

            }

        }
        $(el).find('select').selectpicker('refresh');
        return $(el).children().first().unwrap();

    }


$('#BankId').on("change", function () {
var BankHeadId = $(this).val();
$("#BankHeadId").val(BankHeadId);
$("#srchProjectType").val(1);
EmptyCommitmentSrchList()
EmptyCommitmentSelList()

/**/
$.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankHeadId },
        /**/
        function (locationdata) {
            var select = $("#srchProjectNumber");
            select.empty();

            $.each(locationdata, function (index, itemData) {

                select.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name

                }));
            });
            select.selectpicker('refresh');
        });

});

    $('#btnImportHonor').click(function () {

        var file = $('#HonorFile').val();
        var model = new FormData();
        if (file != "") {
            var extension = file.substr((file.lastIndexOf('.') + 1)).toLowerCase();
            switch (extension) {
                case 'xls':
                case 'xlsx':
                    isValidExten = true;
                    break;
                default:
                    isValidExten = false;
            }
            if (isValidExten == false) {
                messageBox("Please upload any one of these type file [xls, xlsx].", "warning");
                return false;
            }
            model.append("file", $('#HonorFile')[0].files[0]);
        }
        else {
            messageBox("Select any one of these type file [xls, xlsx].", "warning");
            return false;
        }
        $('.loading-bg').removeClass('dis-none');
        var ajaxOpts = {
            type: "POST",
            /**/
            url: '@Url.Action("ImportHonorarium", "Coreaccounts")',
            /**/
            data: model,
            contentType: false,//"application/x-www-form-urlencoded",
            dataType: "json",
            processData: false,
            success: function (result) {
                console.log(result.xlspath);
                if (result.xlspath != "") {

                    $(".link").attr("href", result.xlspath);
                    $('#downloadSpan').css('display', 'block')

                }
                if (result.status == "Valid") {
                    var responseData = result.data;
                    $("#thonorarium").find("tr:gt(2)").remove();

                    // Excel Data to Input
                    console.log(responseData);

                    $.each(responseData, function (idx, item) {
                        console.log(item);

                        $('#tbodyHO tr').remove();
                        var cln = $('#tbodyHo tr:nth-child(2)').clone().find("input[type!='checkbox']").val("").end();
                        $(cln).find('select[type="hidden"][name$=".PaymentMode"],select[type="hidden"][name$=".PaymentMode"]').val('testval').end();
                        $(cln).find('select[name$=".PaymentMode"],select[select=".PaymentMode"]').val("").end();
                        $(cln).find('select[name$=".PayeeType"]').val("").end();
                        $(cln).find('.tdAmt, .tdTds, .tdPayable').text(item.amount);
                        $(cln).find('a.dis-none').removeClass('dis-none');
                        var index = $('#tbodyHo tr:last').find("input[name='PODetail.Index']").val();
                        //var index = $('#tbodyPO tr:last').find("input[name='PODetail.Index']").val();
                        index = parseInt(index) + 1;
                        $(cln).find("input[name='PODetail.Index']").val(index);
                        // $(cln).find("input[name='PODetail[0].ModeOfPayment']").val(index);
                        $(cln).find("input, select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                            if ($(this).attr("id"))
                                $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                        });
                        $(cln).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                        });

                        //if(index < responseData.length -1)
                        { $('#tbodyHo').append(cln); }
                        var irow = index - 1;
                        $('[name="PODetail[' + irow + '].PayeeType"]').val(item.PayeeType)
                        $('[name="PODetail[' + irow + '].Name"]').val(item.Name)
                        $('[name="PODetail[' + irow + '].UserId"]').val(item.UserId)
                        $('[name="PODetail[' + irow + '].Amount"]').val(item.Amount)
                        $('[name="PODetail[' + irow + '].tdsdropdown"]').val(item.TDS * 100)
                        $('[name="PODetail[' + irow + '].NetAmount"]').val(item.NetAmount)
                        $('[name="PODetail[' + irow + '].PaymentMode"]').val(item.PaymentModeVal)

                        $('[name="PODetail[' + irow + '].BankName"]').val(item.BankName)
                        $('[name="PODetail[' + irow + '].Branch"]').val(item.Branch)
                        $('[name="PODetail[' + irow + '].AccountNo"]').val(item.AccountNo)
                        $('[name="PODetail[' + irow + '].PAN"]').val(item.PAN)
                        $('[name="PODetail[' + irow + '].IFSC"]').val(item.IFSC)
                        $('[name="PODetail[' + irow + '].HonororiumTdsSection"]').val(item.SelectedTdssectionID)



                    }

                    );
                    $("#thonorarium tr:last").remove();
                    calculateamount();
                    messageBox("Import Sucessfull", "success");
                }
                else {
                    $("#thonorarium").find("tr:gt(2)").remove();
                    var irow = 0;
                    $('[name="PODetail[' + irow + '].PayeeType"]').val("")
                    $('[name="PODetail[' + irow + '].Name"]').val("")
                    $('[name="PODetail[' + irow + '].UserId"]').val("")
                    $('[name="PODetail[' + irow + '].Amount"]').val("")
                    $('[name="PODetail[' + irow + '].tdsdropdown"]').val("")
                    $('[name="PODetail[' + irow + '].NetAmount"]').val("")
                    $('[name="PODetail[' + irow + '].PaymentMode"]').val("")

                    $('[name="PODetail[' + irow + '].BankName"]').val("")
                    $('[name="PODetail[' + irow + '].Branch"]').val("")
                    $('[name="PODetail[' + irow + '].AccountNo"]').val("")
                    $('[name="PODetail[' + irow + '].PAN"]').val("")
                    $('[name="PODetail[' + irow + '].IFSC"]').val("")
                    $('[name="PODetail[' + irow + '].HonororiumTdsSection"]').val("")
                    messageBox(result.status, "error");

                }
                requestRunning = false;
                $('.loading-bg').addClass('dis-none');
            },
            error: function (err) {
                requestRunning = false;
                $('.loading-bg').addClass('dis-none');
                console.log("error : " + err);
                messageBox("Error Occured While Reading Excel Data", "error");
            }
        };
        requestRunning = true;
        $.ajax(ajaxOpts);



    });


    function EmptyCommitmentSelList() {
        $('#tbodyCommitmentSelList tr').not(':first').remove();
        $('#tbodyCommitmentSelList tr td').not(':last').not(':nth-last-child(2)').html('');
        //$('#tbodyCommitmentSelList tr td:last').find("input").val("");
        $('#tbodyCommitmentSelList tr').find("input[name!='CommitmentDetail.Index']").val("");
        $('#CommitmentAmount').val('');
    }
    function EmptyCommitmentSrchList() {
        $('#tbodyCommitmentSrchList tr').not(':first').remove();
        $('#tbodyCommitmentSrchList tr td').not(':first').html('');
        $('#tbodyCommitmentSrchList tr td:first input').val('');
    }


</script>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
<style>
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>

