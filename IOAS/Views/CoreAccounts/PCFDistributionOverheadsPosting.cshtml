@model IOAS.Models.DistributionOHPostingModel
@{
    ViewBag.Title = "PCF and Distribution Overheads Posting";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("PCFDistributionOverheadsPosting", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formOHP", enctype = "multipart/form-data" }))
{
<div class="row hd-tt-bg">
    <div class="col-md-12">
        <h4><b>PCF and Distribution Overheads Posting</b> </h4>
    </div>
</div>
<div class="row">
    <div class="white-bg ad-navbar">
       
        <div class="col-md-3 col-md-offset-3 pull-right">
            <div class="reg-no custom-reg-no">
                <div class="form-group custom-form-group">
                    <label>Number</label>
                    <h4>@Html.DisplayFor(m => m.OverheadsPostingNumber)</h4>
                    @Html.HiddenFor(m => m.OverheadsPostingId)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.Hidden("TransactionTypeCode", "DOH")
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12 mt30">
        <ul class="nav nav-pills custom-nav-pills">
            <li class="active"><a href="javascript:void(0)"><span>01</span>Overheads Details</a></li>
            <li><a href="javascript:void(0)"><span>02</span>Transaction Details</a></li>
            @*<li><a href="javascript:void(0)"><span>03</span>Backend Credits</a></li>*@            
            @*<li><a href="javascript:void(0)"><span>04</span>Transaction</a></li>*@
        </ul>

        <div class="tab">
            <div class="col-md-12">
                <div class="row m-b-sm">
                    <div class="col-md-3">
                        <div class="form-group custom-form-group">
                            <label>Payment Type</label>
                            @Html.DropDownListFor(m => m.PaymentTypeId, new SelectList(ViewBag.PaymentType, "id", "name"), "Select any", new { @class = "form-control", @id = "txtpaymenttype", @onchange = "changepaymentnumber();" })
                            @Html.ValidationMessageFor(m => m.PaymentTypeId)
                            @Html.HiddenFor(m => m.PaymentTypeId)
                        </div>
                    </div>
                    <div class="col-md-3" id="paymentnum">
                        <div class="form-group custom-form-group">
                            <label>Payment Number</label>
                            @Html.DropDownListFor(m => m.PaymentNumberId, new SelectList(ViewBag.PaymentNumber, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "txtpaymentnumber", @onchange = "changepaymentnumber();" })
                            @Html.ValidationMessageFor(m => m.PaymentNumberId)
                        </div>
                    </div>
                    <div class="col-md-2 dis-none" id="RCVFromDate"> 
                        <div class="form-group custom-form-group">
                            <label>Receipts From</label>
                            @Html.TextBoxFor(m => m.ConsRCVFromDate, new { @class = "form-control", @id = "txtFromDate" })
                        </div>
                    </div>
                    <div class="col-md-2 dis-none" id="RCVToDate">
                        <div class="form-group custom-form-group">
                            <label>Receipts Upto</label>
                            @Html.TextBoxFor(m => m.ConsRCVToDate, new { @class = "form-control", @id = "txtToDate" })
                        </div>
                    </div>
                    <div class="col-md-2 dis-none mt20" id="RCVSelect">
                        <div class="form-group custom-form-group">
                            <a href="javascript:void(0)" id="btnSelect" class="btn btn-primary" onclick="selectrcv()">Select</a>                            
                        </div>
                    </div>
                    <div class="col-md-3" id="distprjnum">
                        <div class="form-group custom-form-group">
                            <label>Project Number</label>
                            @Html.TextBoxFor(m => m.ProjectNumber, new { @class = "form-control", @id = "txtProjectNumber" })
                            @Html.ValidationMessageFor(m => m.ProjectNumber)
                        </div>
                    </div>
                    <div class="col-md-3" id="distamt">
                        <div class="form-group custom-form-group">
                            <label>Total Distribution Amount</label>
                            @Html.TextBoxFor(m => m.TotalDistributionAmount, new { @class = "form-control", @id = "txtTtlDistributionAmount" })
                            @Html.ValidationMessageFor(m => m.TotalDistributionAmount)
                            @Html.HiddenFor(m => m.TotalCreditAmount)
                        </div>
                    </div>
                    @*<div class="col-md-6 text-right">
                        <a href="javascript:void(0)" id="btnAddHonor" class="btn btn-primary btnAddHonor">Add New</a>
                    </div>*@
                </div>
                <div class="dis-none" id="pcfdetails">
                    <div class="bl-lg-panel-box pb-null">
                        <div class="cmn-panel-box">
                            <div class="col-md-6">
                                <div class="form-group custom-form-group">
                                    <label>PCF</label>
                                </div>
                            </div>
                            @*<div class="col-md-2 pull-right">
                                <div class="form-group custom-form-group">
                                    <label>Total PCF Amount</label>
                                    @Html.TextBoxFor(m => m.TotalPCFAmount, new { @class = "form-control", @id = "txtTotalPCFValue" })
                                    @Html.ValidationMessageFor(m => m.TotalPCFAmount)
                                </div>
                            </div>*@
                            <div class="m-b-sm scrl-table scrl-table-po-bl">
                                <table class="table table-bordered" style="width: 1280px;">
                                    <thead>
                                        <tr>
                                            <th colspan="10"></th>
                                        </tr>
                                    </thead>
                                    <tbody id="tbodyPCF">
                                        <tr>
                                            <td style="width: 350px;">PI Name</td>
                                            <td style="width: 300px;">Project Number</td>
                                            <td style="width: 300px;">PCF Credit Bank</td>
                                            <td style="width: 200px;">PCF Amount</td>
                                        </tr>
                               @if (Model.PCFCreditDetails != null)
                                {
                                    var count = 0;
                                    foreach (var item in Model.PCFCreditDetails)
                                    {
                                        var projectid = "PCFCreditDetails[" + count + "].ProjectId";
                                        var piid = "PCFCreditDetails[" + count + "].PIId";
                                        var selid = "PCFCreditDetails[" + count + "].Id";
                                        var bankid = "PCFCreditDetails[" + count + "].BankId";
                                        var projectnum = "PCFCreditDetails[" + count + "].ProjectNumber";
                                        var piname = "PCFCreditDetails[" + count + "].NameofPI";
                                        var pcfamt = "PCFCreditDetails[" + count + "].Amount";


                                                <tr id="trdetails" class="p-b-sm">
                                                    <td>
                                                        @Html.TextBox(@piname, item.NameofPI, new { @class = "form-control", @autocomplete = "off", @readonly = true })
                                                        @Html.TextBox(@piid, item.PIId, new { @class = "form-control dis-none" })
                                                        @Html.ValidationMessage(@piname)
                                                        @Html.Hidden("PCFCreditDetails.Index", @count)
                                                    </td>                                                    
                                                    <td>
                                                        @Html.DropDownList(@selid, new SelectList(item.ProjectNumber, "id", "name", item.Id), new { @class = "form-control", @id = "txtprojectnumber" })
                                                        @Html.ValidationMessage(@selid)
                                                    </td>
                                                    <td>
                                                        @Html.DropDownList(@bankid, new SelectList(item.Bank, "id", "name", item.BankId), new { @class = "form-control", @id = "txtbank" })
                                                        @Html.ValidationMessage(@bankid)
                                                    </td>
                                                    <td>
                                                        @Html.TextBox(@pcfamt, item.Amount, new { @class = "form-control", @readonly = true })
                                                        @Html.ValidationMessage(@pcfamt)
                                                    </td>

                                                </tr>
                                        count++;
                                    }

                                }

                                else
                                {
                                            <tr>
                                                <td>
                                                    @Html.TextBox("PCFCreditDetails[0].NameofPI", "", new { @class = "form-control", @id = "txtPIName", @autocomplete = "off", @readonly = true })
                                                    @Html.Hidden("PCFCreditDetails.Index", "0")
                                                    @Html.ValidationMessage("PCFCreditDetails[0].NameofPI")
                                                    @Html.TextBox("PCFCreditDetails[0].PIId", "", new { @class = "form-control dis-none" })
                                                </td>
                                                <td>
                                                    @Html.DropDownList("PCFCreditDetails[0].Id", new SelectList(ViewBag.ProjectNumber, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessage("PCFCreditDetails[0].Id")
                                                </td>
                                                <td>
                                                    @Html.DropDownList("PCFCreditDetails[0].BankId", new SelectList(ViewBag.Bank, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessage("PCFCreditDetails[0].BankId")
                                                </td>
                                                <td>
                                                    @Html.TextBox("PCFCreditDetails[0].Amount", "", new { @class = "form-control", @autocomplete = "off" })
                                                    @Html.ValidationMessage("PCFCreditDetails[0].Amount")
                                                </td>
                                            </tr>
                                }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="dis-none" id="overheads">
                    <div class="bl-lg-panel-box pb-null">
                        <div class="cmn-panel-box">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="row m-b-sm">
                                        <div class="col-md-6">
                                            <h3 class="mt-xs">Overheads Details</h3>
                                        </div>
                                        @*<div class="col-md-6 text-right">
                                            <a href="javascript:void(0)" id="btnAddHonor" class="btn btn-primary btnAddHonor">Add New</a>
                                        </div>*@
                                    </div>

                                    <div class="m-b-sm scrl-table scrl-table-po-bl">
                                        <table class="table table-bordered" style="width: 1280px;">
                                            <thead>
                                                <tr>
                                                    <th colspan="10"></th>
                                                </tr>
                                            </thead>
                                            <tbody id="tbodyHo">
                                                <tr>

                                                    <td style="width: 350px;">Overheads Type</td>
                                                    <td style="width: 350px;">Overheads Amount</td>
                                                    <td style="width: 350px;">Project Number</td>
                                                    <td style="width: 350px;">Bank</td>

                                                </tr>
                                           @if (Model.OverheadsDetails != null)
                                            {
                                                var count = 0;
                                                foreach (var item in Model.OverheadsDetails)
                                                {
                                                    var selid = "OverheadsDetails[" + count + "].Id";
                                                    var bankid = "OverheadsDetails[" + count + "].BankId";
                                                    var overheadstypeid = "OverheadsDetails[" + count + "].OverheadsTypeId";
                                                    var totaloverheadsamt = "OverheadsDetails[" + count + "].TotalOverheadsValue";
                                                    var overheadstype = "OverheadsDetails[" + count + "].OverheadsType";
                                                    var overheadsamount = "OverheadsDetails[" + count + "].OverheadsAmount";
                                                    var overheadspercent = "OverheadsDetails[" + count + "].OverheadsPercent";
                                                    var ohprojectnumber = "OverheadsDetails[" + count + "].OHProjectNumber";


                                                        <tr id="trdetails" class="p-b-sm">
                                                            <td>
                                                                @Html.TextBox(@overheadstype, item.OverheadsType, new { @class = "form-control", @autocomplete = "off", @readonly = true })
                                                                @Html.ValidationMessage(@overheadstype)
                                                                @Html.TextBox(@overheadstypeid, item.OverheadsTypeId, new { @class = "form-control dis-none" })
                                                                @Html.Hidden("OverheadsDetails.Index", @count)
                                                            </td>
                                                            <td>
                                                                @Html.TextBox(@overheadsamount, item.OverheadsAmount, new { @class = "form-control", @readonly = true })
                                                                @Html.TextBox(@overheadspercent, item.OverheadsPercent, new { @class = "form-control dis-none" })
                                                                @Html.ValidationMessage(@overheadsamount)
                                                            </td>
                                                            <td>
                                                                    @Html.DropDownList(@selid, new SelectList(item.ProjectNumber, "id", "name", item.Id), new { @class = "form-control", @id = "txtprojectnumber" })
                                                                    @Html.ValidationMessage(@selid)
                                                            </td>
                                                            
                                                            <td>
                                                                @Html.DropDownList(@bankid, new SelectList(item.Bank, "id", "name", item.BankId), new { @class = "form-control", @id = "txtbank" })
                                                                @Html.ValidationMessage(@bankid)
                                                            </td>

                                                        </tr>
                                                    count++;
                                                }

                                            }

                                            else
                                            {
                                                    <tr>
                                                        <td>
                                                            @Html.TextBox("OverheadsDetails[0].OverheadsType", "", new { @class = "form-control", @id = "txtoverheadstype", @autocomplete = "off", @readonly = true })
                                                            @Html.Hidden("OverheadsDetails.Index", "0")
                                                            @Html.ValidationMessage("OverheadsDetails[0].OverheadsType")
                                                            @Html.TextBox("OverheadsDetails[0].OverheadsTypeId", "", new { @class = "form-control dis-none" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("OverheadsDetails[0].OverheadsAmount", "", new { @class = "form-control", @id = "txtoverheadsamount", @autocomplete = "off", @readonly = true })
                                                            @Html.TextBox("OverheadsDetails[0].OverheadsPercent", "", new { @class = "form-control dis-none" })
                                                            @Html.ValidationMessage("OverheadsDetails[0].OverheadsAmount")
                                                        </td>                                                       
                                                        <td>
                                                            @Html.DropDownList("OverheadsDetails[0].Id", new SelectList(ViewBag.ProjectNumber, "id", "name"), "Select any", new { @class = "form-control" })
                                                            @Html.ValidationMessage("OverheadsDetails[0].Id")
                                                        </td>
                                                                                                           
                                                        <td>
                                                            @Html.DropDownList("OverheadsDetails[0].BankId", new SelectList(ViewBag.Bank, "id", "name"), "Select any", new { @class = "form-control" })
                                                            @Html.ValidationMessage("OverheadsDetails[0].BankId")
                                                        </td>

                                                    </tr>
                                            }
                                            </tbody>
                                        </table>
                                    </div>
                                    @*<div class="col-md-2 pull-right">
                                        <div class="form-group custom-form-group">
                                            <label>Total Overheads value</label>
                                            @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", @id = "txtTotalOverheadsValue" })
                                            @Html.ValidationMessageFor(m => m.TotalAmount)
                                        </div>
                                    </div>*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="dis-none" id="others">
                    <div class="bl-lg-panel-box pb-null">
                        <div class="cmn-panel-box">
                            <div class="col-md-6">
                                <div class="form-group custom-form-group">
                                    <label>Others</label>
                                </div>
                            </div>
                            @*<div class="col-md-2 pull-right">
                                <div class="form-group custom-form-group">
                                    <label>Total PCF Amount</label>
                                    @Html.TextBoxFor(m => m.TotalPCFAmount, new { @class = "form-control", @id = "txtTotalPCFValue" })
                                    @Html.ValidationMessageFor(m => m.TotalPCFAmount)
                                </div>
                            </div>*@
                            <div class="m-b-sm scrl-table scrl-table-po-bl">
                                <table class="table table-bordered" style="width: 1280px;">
                                    <thead>
                                        <tr>
                                            <th colspan="10"></th>
                                        </tr>
                                    </thead>
                                    <tbody id="tbodyOther">
                                        <tr>
                                            <td style="width: 350px;">Type</td>
                                            <td style="width: 350px;">PI Name</td>
                                            <td style="width: 300px;">Project Number</td>
                                            <td style="width: 300px;">Credit Bank</td>
                                            <td style="width: 200px;">Amount</td>
                                        </tr>
                                        @if (Model.OtherShareDetails != null)
                                    {
                                        var count = 0;
                                        foreach (var item in Model.OtherShareDetails)
                                        {
                                            var head = "OtherShareDetails[" + count + "].Head";
                                            var piid = "OtherShareDetails[" + count + "].PIId";
                                            var selid = "OtherShareDetails[" + count + "].Id";
                                            var bankid = "OtherShareDetails[" + count + "].BankId";
                                            var piname = "OtherShareDetails[" + count + "].NameofPI";
                                            var amt = "OtherShareDetails[" + count + "].Amount";


                                                <tr id="trdetails" class="p-b-sm">
                                                    <td>
                                                        @Html.TextBox(@head, item.Head, new { @class = "form-control", @autocomplete = "off", @readonly = true })
                                                        @Html.ValidationMessage(@piname)

                                                    </td>
                                                    <td>
                                                        @Html.TextBox(@piname, item.NameofPI, new { @class = "form-control", @autocomplete = "off", @readonly = true })
                                                        @Html.TextBox(@piid, item.PIId, new { @class = "form-control dis-none" })
                                                        @Html.ValidationMessage(@piname)
                                                        @Html.Hidden("OtherShareDetails.Index", @count)
                                                    </td>
                                                    <td>
                                                        @Html.DropDownList(@selid, new SelectList(item.ProjectNumber, "id", "name", item.Id), new { @class = "form-control", @id = "txtprojectnumber" })
                                                        @Html.ValidationMessage(@selid)
                                                    </td>
                                                    <td>
                                                        @Html.DropDownList(@bankid, new SelectList(item.Bank, "id", "name", item.BankId), new { @class = "form-control", @id = "txtbank" })
                                                        @Html.ValidationMessage(@bankid)
                                                    </td>
                                                    <td>
                                                        @Html.TextBox(@amt, item.Amount, new { @class = "form-control", @readonly = true })
                                                        @Html.ValidationMessage(@amt)
                                                    </td>

                                                </tr>
                                            count++;
                                        }

                                    }

                                    else
                                    {
                                            <tr>
                                                <td>
                                                    @Html.TextBox("OtherShareDetails[0].Head", "", new { @class = "form-control", @id = "txtHeadName", @autocomplete = "off", @readonly = true })
                                                    @Html.ValidationMessage("OtherShareDetails[0].Head")
                                                </td>
                                                <td>
                                                    @Html.TextBox("OtherShareDetails[0].NameofPI", "", new { @class = "form-control", @id = "txtPIName", @autocomplete = "off", @readonly = true })
                                                    @Html.Hidden("OtherShareDetails.Index", "0")
                                                    @Html.ValidationMessage("OtherShareDetails[0].NameofPI")
                                                </td>
                                                <td>
                                                    @Html.DropDownList("OtherShareDetails[0].Id", new SelectList(ViewBag.ProjectNumber, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessage("OtherShareDetails[0].Id")
                                                    @Html.TextBox("OtherShareDetails[0].PIId", "", new { @class = "form-control dis-none" })
                                                </td>
                                                <td>
                                                    @Html.DropDownList("OtherShareDetails[0].BankId", new SelectList(ViewBag.Bank, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessage("OtherShareDetails[0].BankId")
                                                </td>
                                                <td>
                                                    @Html.TextBox("OtherShareDetails[0].Amount", "", new { @class = "form-control", @autocomplete = "off" })
                                                    @Html.ValidationMessage("OtherShareDetails[0].Amount")
                                                </td>
                                            </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="tab">
            @Html.Partial("_TransactionDetails", Model)
        </div>
            @*<input type="submit" class="btn btn-primary pull-right mb20" value="Submit and Post" name="Button" id="btnSave" />
            <a href="@Url.Action("PCFDistributionOverheadsPostingList", "CoreAccounts")" class="btn btn-primary pull-right">Close</a>*@
            <div class="custom-nav-btn text-right">
                <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("PCFDistributionOverheadsPostingList", "CoreAccounts")';">Close</button>
                @*<button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("Backendreceiptpost", "CoreAccounts")';">Post</button>*@
            </div>
        </div>
    </div>
    
    }
<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div class="loading-bg dis-none">
    @*<div class="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>*@
</div>
    @Html.AntiForgeryToken()
    <div id="popup"></div>
    <script>
        var errMsg = '@TempData["errMsg"]';
        var succMsg = '@TempData["succMsg"]';
        $('#SourceEmailDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy' }).attr('readonly', 'readonly');
        $('#txtFromDate, #txtToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
        $(document).ready(function () {
            if (succMsg != '') {
                $('#alertSuccess').html(succMsg);
                $('#Success').modal('toggle');
            }
            else if (errMsg != '') {
                $('#FailedAlert').html(errMsg);
                $('#Failed').modal('toggle');
            }
            $('.selectpicker').selectpicker({
                liveSearch: true,
            });

            var selSource = $('#Source').val();
            $("#divRefNum, #divRefEmailDate").addClass('dis-none');
            if (selSource == '1') {
                $("#divRefNum").removeClass('dis-none');
            } else if (selSource == '3') {
                $("#divRefNum").removeClass('dis-none');
            }
            else if (selSource == '2') {
                $('#divRefEmailDate').removeClass('dis-none');
            } else {
                $("#divRefNum").removeClass('dis-none');
            }
            $('select[name="ProjectType"]').val(@Model.ProjectType);
        });

        $('#formOHP').submit(function () {
            var id = $(this).attr('Id');

            $('button[type="submit"],#nextBtn,#btnSave').attr('disabled', 'true');
        });
        //function resetData() {
        //    $('#InvoiceDate,#ProjectNumber,#PIDepartmentName,#NameofPI,#SponsoringAgencyName,#Agencyregaddress,#Agencydistrict,#AgencyPincode').text('');
        //    $('#Agencycontactpersonmobile,#AgencycontactpersonEmail,#Agencycontactperson,#TAN,#PAN,#GSTNumber,#Agencystatecode,#Agencystate,#BankName,#BankAccountNumber').text('');
        //    $('#TaxableAmount,#CGST,#CGSTPercentage,#SGST,#SGSTPercentage,#IGST,#IGSTPercentage,#TotalTaxValue,#TotalTaxpercentage,#TotalInvoiceValue,#TotalCreditAmount').val('');
        //    $('#tbodyPreRec tr').remove();
        //}
        $('#Source').change(function () {
            var selSource = $(this).val();
            var select = $("#SourceReferenceNumber");
            select.empty();
            $("#divRefNum, #divRefEmailDate").addClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
            if (selSource == '1') {
                $.getJSON("@Url.Action("GetWorkflowRefNumber","Proposal")",
                 function (locationdata) {
                     fillMasterDropDown(select, locationdata);
                 });
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            } else if (selSource == '3') {
                $.getJSON("@Url.Action("GetTapalRefNumber","Proposal")",
                function (locationdata) {
                    fillMasterDropDown(select, locationdata);
                });
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            }
            else if (selSource == '2') {
                $('#divRefEmailDate').removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('False');
            } else {
                $("#divRefNum").removeClass('dis-none');
                $("#SourceTapalOrWorkflow").val('True');
            }
        });
        $('#txtpaymenttype').change(function () {
            var paymenttype = $(this).val();
            EmptyPCFDetails();
            EmptyOHDetails();
            EmptyOtherDetails();
            $(".loading-bg").removeClass('dis-none');

            if(paymenttype == 1)
            {
                $('#overheads').removeClass('dis-none');
                $('#others').removeClass('dis-none');
                $('#pcfdetails').removeClass('dis-none');
                $('#distprjnum').removeClass('dis-none');
                $('#distamt').removeClass('dis-none');
                $('#paymentnum').removeClass('dis-none');
                $('#RCVFromDate').addClass('dis-none');
                $('#RCVToDate').addClass('dis-none');
                $('#RCVSelect').addClass('dis-none');
                $('#NeedUpdateTransDetail').val('false');
                $.getJSON("@Url.Action("GetPaymentNumberList", "CoreAccounts")", { paymenttype: paymenttype },

            function (locationdata) {
                var select = $("#txtpaymentnumber");
                select.empty();
                $.each(locationdata, function (index, itemData) {
                    select.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                select.selectpicker('refresh');
            });
            }
            else if (paymenttype == 2)
            {
                $('#overheads').removeClass('dis-none');
                $('#others').addClass('dis-none');
                $('#pcfdetails').removeClass('dis-none');
                $('#distprjnum').addClass('dis-none');
                $('#paymentnum').removeClass('dis-none');
                $('#RCVFromDate').addClass('dis-none');
                $('#RCVToDate').addClass('dis-none');
                $('#RCVSelect').addClass('dis-none');
                $('#distamt').addClass('dis-none');
                $('#NeedUpdateTransDetail').val('true');
                $.getJSON("@Url.Action("GetPaymentNumberList", "CoreAccounts")", { paymenttype: paymenttype },

            function (locationdata) {
                var select = $("#txtpaymentnumber");
                select.empty();
                $.each(locationdata, function (index, itemData) {
                    select.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                select.selectpicker('refresh');
            });
            }
            else if (paymenttype == 3)
            {
                $('#overheads').removeClass('dis-none');
                $('#others').addClass('dis-none');
                $('#paymentnum').addClass('dis-none');
                $('#pcfdetails').addClass('dis-none');
                $('#distprjnum').addClass('dis-none');
                $('#distamt').addClass('dis-none');
                $('#RCVFromDate').removeClass('dis-none');
                $('#RCVToDate').removeClass('dis-none');
                $('#RCVSelect').removeClass('dis-none');
                $('#NeedUpdateTransDetail').val('true');
                
            }

            $('#txtProjectNumber').val('');
            $('#txtTtlDistributionAmount').val('');
            $(".loading-bg").addClass('dis-none');
        });

        function selectrcv()
        {
            var paymenttype = $('#txtpaymenttype').val();
            var rcvfromdate = $('#txtFromDate').val();
            var rcvtodate = $('#txtToDate').val();
            EmptyPCFDetails();
            EmptyOHDetails();
            EmptyOtherDetails();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetRCVDOHPaymentDetails", "CoreAccounts")",
                data: { "paytype": paymenttype, "fromdate": rcvfromdate, "todate": rcvtodate },
            traditional: true,
            dataType: "json",
            success: function (result) {

                $('#txtProjectNumber').val(result.ProjectNumber);
                $('#txtTtlDistributionAmount').val(result.TotalDistributionAmount);
                $('input[name="PaymentTypeId"]').val(result.PaymentTypeId);
                $.each(result.OverheadsDetails, function (i, item) {
                    //var amt = 0;
                    //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                    //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                    //    var parseVal = parseFloat($(elePayment).val());
                    //    if (!isNaN(parseVal))
                    //        amt = amt + parseVal;
                    //});
                    if (i == 0) {
                        var trEle = $('#tbodyHo tr:last');
                        $(trEle).find('input[name$=".OverheadsAmount"]').val(item.OverheadsAmount);
                        $(trEle).find('input[name$=".OverheadsType"]').val(item.OverheadsType);
                        $(trEle).find('input[name$=".OverheadsPercent"]').val(item.OverheadsPercent);
                        $(trEle).find('input[name$=".OverheadsTypeId"]').val(item.OverheadsTypeId);

                        $(trEle).find("input[name='OverheadsDetails.Index']").val(i);
                        if (result.PaymentTypeId == 1) {
                            $(trEle).find('input[name$=".OverheadsAmount"]').removeAttr("readonly");
                        }

                        var selectGroup = $(trEle).find('select[name$=".BankId"]');
                        selectGroup.empty();
                        $.each(item.Bank, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        var selectHead = $(trEle).find('select[name$=".Id"]');
                        selectHead.empty();
                        $.each(item.ProjectNumber, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        //if (item.OverheadsTypeId == 1 || item.OverheadsTypeId == 4 || item.OverheadsTypeId == 7 || item.OverheadsTypeId == 9 || item.OverheadsTypeId == 11 || item.OverheadsTypeId == 13 || item.OverheadsTypeId == 15 || item.OverheadsTypeId == 17 || item.OverheadsTypeId == 19 || item.OverheadsTypeId == 21) {
                        //    var selectHead = $(trEle).find('select[name$=".Id"]');
                        //    selectHead.empty();
                        //    selectHead.append($('<option/>', {
                        //        value: 0,
                        //        text: 'No Project',
                        //    }));
                        //}
                        //if (item.OverheadsTypeId == 2 || item.OverheadsTypeId == 3 || item.OverheadsTypeId == 5 || item.OverheadsTypeId == 8 || item.OverheadsTypeId == 10 || item.OverheadsTypeId == 12 || item.OverheadsTypeId == 14 || item.OverheadsTypeId == 16 || item.OverheadsTypeId == 18 || item.OverheadsTypeId == 20 || item.OverheadsTypeId == 22) {
                        //    var selectHead = $(trEle).find('select[name$=".Id"]');
                        //    selectHead.empty();
                        //    $.each(item.ProjectNumber, function (index, itemData) {
                        //        selectHead.append($('<option/>', {
                        //            value: itemData.id,
                        //            text: itemData.name,
                        //        }));
                        //    });
                        //}


                    } else {
                        var trEleNew = $('#tbodyHo tr:last').clone().find('input').val('').end();

                        $(trEleNew).find("input[name='OverheadsDetails.Index']").val(i);
                        $(trEleNew).find('input[name$=".OverheadsAmount"]').val(item.OverheadsAmount);
                        $(trEleNew).find('input[name$=".OverheadsType"]').val(item.OverheadsType);
                        $(trEleNew).find('input[name$=".OverheadsPercent"]').val(item.OverheadsPercent);
                        $(trEleNew).find('input[name$=".OverheadsTypeId"]').val(item.OverheadsTypeId);
                        if (result.PaymentTypeId == 1) {
                            $(trEleNew).find('input[name$=".OverheadsAmount"]').removeAttr("readonly");
                        }
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var selectGroup = $(trEleNew).find('select[name$=".BankId"]');
                        selectGroup.empty();
                        $.each(item.Bank, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        var selectHead = $(trEleNew).find('select[name$=".Id"]');
                        selectHead.empty();
                        $.each(item.ProjectNumber, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        //if (item.OverheadsTypeId == 1 || item.OverheadsTypeId == 4 || item.OverheadsTypeId == 7 || item.OverheadsTypeId == 9 || item.OverheadsTypeId == 11 || item.OverheadsTypeId == 13 || item.OverheadsTypeId == 15 || item.OverheadsTypeId == 17 || item.OverheadsTypeId == 19 || item.OverheadsTypeId == 21) {
                        //    var selectHead = $(trEleNew).find('select[name$=".Id"]');
                        //    selectHead.empty();
                        //    selectHead.append($('<option/>', {
                        //        value: 0,
                        //        text: 'No Project',
                        //    }));
                        //}
                        //if (item.OverheadsTypeId == 2 || item.OverheadsTypeId == 3 || item.OverheadsTypeId == 5 || item.OverheadsTypeId == 8 || item.OverheadsTypeId == 10 || item.OverheadsTypeId == 12 || item.OverheadsTypeId == 14 || item.OverheadsTypeId == 16 || item.OverheadsTypeId == 18 || item.OverheadsTypeId == 20 || item.OverheadsTypeId == 22) {
                        //    var selectHead = $(trEleNew).find('select[name$=".Id"]');
                        //    selectHead.empty();
                        //    $.each(item.ProjectNumber, function (index, itemData) {
                        //        selectHead.append($('<option/>', {
                        //            value: itemData.id,
                        //            text: itemData.name,
                        //        }));
                        //    });
                        //}

                        $('#tbodyHo').append(trEleNew);
                    }
                });
            }
        });
        }
        function changepaymentnumber() {
            var paymentnumber = $("#txtpaymentnumber").val();
            var paymenttype = $('#txtpaymenttype').val();
            $(".loading-bg").removeClass('dis-none');
            EmptyPCFDetails();
            EmptyOHDetails();
            EmptyOtherDetails();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetPCFDOHPaymentDetails", "CoreAccounts")",
                data: { "paytype": paymenttype, "paynumberid" : paymentnumber, },
                traditional: true,
                dataType: "json",
                success: function (result) {

                    $('#txtProjectNumber').val(result.ProjectNumber);
                    $('#txtTtlDistributionAmount').val(result.TotalDistributionAmount);
                    $('input[name="PaymentTypeId"]').val(result.PaymentTypeId);
                    $.each(result.OtherShareDetails, function (i, item) {

                        if (i == 0) {
                            var trEle = $('#tbodyOther tr:last');
                            $(trEle).find('input[name$=".Head"]').val(item.Head);
                            $(trEle).find('input[name$=".Amount"]').val(item.Amount);
                            $(trEle).find('input[name$=".NameofPI"]').val(item.NameofPI);
                            $(trEle).find('input[name$=".PIId"]').val(item.PIId);
                            $(trEle).find("input[name='OtherShareDetails.Index']").val(i);
                            var selectGroup = $(trEle).find('select[name$=".BankId"]');
                            selectGroup.empty();
                            $.each(item.Bank, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                            var selectHead = $(trEle).find('select[name$=".Id"]');
                            selectHead.empty();
                            $.each(item.ProjectNumber, function (index, itemData) {
                                selectHead.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                        } else {
                            var trEleNew = $('#tbodyOther tr:last').clone().find('input').val('').end();
                            $(trEleNew).find('input[name$=".Head"]').val(item.Head);
                            $(trEleNew).find('input[name$=".Amount"]').val(item.Amount);
                            $(trEleNew).find('input[name$=".NameofPI"]').val(item.NameofPI);
                            $(trEleNew).find('input[name$=".PIId"]').val(item.PIId);
                            $(trEleNew).find("input[name='OtherShareDetails.Index']").val(i);
                            $(trEleNew).find("input,Select").each(function () {
                                $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });

                            var selectGroup = $(trEleNew).find('select[name$=".BankId"]');
                            selectGroup.empty();
                            $.each(item.Bank, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                            var selectHead = $(trEleNew).find('select[name$=".Id"]');
                            selectHead.empty();
                            $.each(item.ProjectNumber, function (index, itemData) {
                                selectHead.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });
                            $('#tbodyOther').append(trEleNew);
                        }
                    });

                    $.each(result.PCFCreditDetails, function (i, item) {
                        //var amt = 0;
                        //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                        //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                        //    var parseVal = parseFloat($(elePayment).val());
                        //    if (!isNaN(parseVal))
                        //        amt = amt + parseVal;
                        //});

                        if (i == 0) {
                            var trEle = $('#tbodyPCF tr:last');
                            $(trEle).find('input[name$=".Amount"]').val(item.Amount);
                            $(trEle).find('input[name$=".NameofPI"]').val(item.NameofPI);
                            $(trEle).find('input[name$=".PIId"]').val(item.PIId);
                            $(trEle).find("input[name='PCFCreditDetails.Index']").val(i);
                            var selectGroup = $(trEle).find('select[name$=".BankId"]');
                            selectGroup.empty();
                            $.each(item.Bank, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                            var selectHead = $(trEle).find('select[name$=".Id"]');
                            selectHead.empty();
                            $.each(item.ProjectNumber, function (index, itemData) {
                                selectHead.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                        } else {
                            var trEleNew = $('#tbodyPCF tr:last').clone().find('input').val('').end();
                            $(trEleNew).find("input[name='PCFCreditDetails.Index']").val(i);
                            $(trEleNew).find('input[name$=".Amount"]').val(item.Amount);
                            $(trEleNew).find('input[name$=".NameofPI"]').val(item.NameofPI);
                            $(trEleNew).find('input[name$=".PIId"]').val(item.PIId);
                            $(trEleNew).find("input,Select").each(function () {
                                $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });

                            var selectGroup = $(trEleNew).find('select[name$=".BankId"]');
                            selectGroup.empty();
                            $.each(item.Bank, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                            var selectHead = $(trEleNew).find('select[name$=".Id"]');
                            selectHead.empty();
                            $.each(item.ProjectNumber, function (index, itemData) {
                                selectHead.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });
                            $('#tbodyPCF').append(trEleNew);
                        }
                    });

                    $.each(result.OverheadsDetails, function (i, item) {
                        //var amt = 0;
                        //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                        //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                        //    var parseVal = parseFloat($(elePayment).val());
                        //    if (!isNaN(parseVal))
                        //        amt = amt + parseVal;
                        //});
                        if (i == 0) {
                            var trEle = $('#tbodyHo tr:last');
                            $(trEle).find('input[name$=".OverheadsAmount"]').val(item.OverheadsAmount);
                            $(trEle).find('input[name$=".OverheadsType"]').val(item.OverheadsType);
                            $(trEle).find('input[name$=".OverheadsPercent"]').val(item.OverheadsPercent);
                            $(trEle).find('input[name$=".OverheadsTypeId"]').val(item.OverheadsTypeId);

                            $(trEle).find("input[name='OverheadsDetails.Index']").val(i);
                            if (result.PaymentTypeId == 1)
                            {
                                $(trEle).find('input[name$=".OverheadsAmount"]').removeAttr("readonly");
                            }

                            var selectGroup = $(trEle).find('select[name$=".BankId"]');
                            selectGroup.empty();
                            $.each(item.Bank, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });
                            if (item.OverheadsTypeId == 1 || item.OverheadsTypeId == 4 || item.OverheadsTypeId == 7 || item.OverheadsTypeId == 9 || item.OverheadsTypeId == 11 || item.OverheadsTypeId == 13 || item.OverheadsTypeId == 15 || item.OverheadsTypeId == 17 || item.OverheadsTypeId == 19 || item.OverheadsTypeId == 21) {
                                var selectHead = $(trEle).find('select[name$=".Id"]');
                                selectHead.empty();
                                selectHead.append($('<option/>', {
                                    value: 0,
                                    text: 'No Project',
                                }));
                            }
                            if (item.OverheadsTypeId == 2 || item.OverheadsTypeId == 3 || item.OverheadsTypeId == 5 || item.OverheadsTypeId == 8 || item.OverheadsTypeId == 10 || item.OverheadsTypeId == 12 || item.OverheadsTypeId == 14 || item.OverheadsTypeId == 16 || item.OverheadsTypeId == 18 || item.OverheadsTypeId == 20 || item.OverheadsTypeId == 22)
                            {
                                var selectHead = $(trEle).find('select[name$=".Id"]');
                                selectHead.empty();
                                $.each(item.ProjectNumber, function (index, itemData) {
                                    selectHead.append($('<option/>', {
                                        value: itemData.id,
                                        text: itemData.name,
                                    }));
                                });
                            }


                        } else {
                            var trEleNew = $('#tbodyHo tr:last').clone().find('input').val('').end();

                            $(trEleNew).find("input[name='OverheadsDetails.Index']").val(i);
                            $(trEleNew).find('input[name$=".OverheadsAmount"]').val(item.OverheadsAmount);
                            $(trEleNew).find('input[name$=".OverheadsType"]').val(item.OverheadsType);
                            $(trEleNew).find('input[name$=".OverheadsPercent"]').val(item.OverheadsPercent);
                            $(trEleNew).find('input[name$=".OverheadsTypeId"]').val(item.OverheadsTypeId);
                            if (result.PaymentTypeId == 1) {
                                $(trEleNew).find('input[name$=".OverheadsAmount"]').removeAttr("readonly");
                            }
                            $(trEleNew).find("input,Select").each(function () {
                                $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });
                            var selectGroup = $(trEleNew).find('select[name$=".BankId"]');
                            selectGroup.empty();
                            $.each(item.Bank, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });
                            if (item.OverheadsTypeId == 1 || item.OverheadsTypeId == 4 || item.OverheadsTypeId == 7 || item.OverheadsTypeId == 9 || item.OverheadsTypeId == 11 || item.OverheadsTypeId == 13 || item.OverheadsTypeId == 15 || item.OverheadsTypeId == 17 || item.OverheadsTypeId == 19 || item.OverheadsTypeId == 21){
                                var selectHead = $(trEleNew).find('select[name$=".Id"]');
                                selectHead.empty();
                                selectHead.append($('<option/>', {
                                    value: 0,
                                    text: 'No Project',
                                }));
                            }
                            if (item.OverheadsTypeId == 2 || item.OverheadsTypeId == 3 || item.OverheadsTypeId == 5 || item.OverheadsTypeId == 8 || item.OverheadsTypeId == 10 || item.OverheadsTypeId == 12 || item.OverheadsTypeId == 14 || item.OverheadsTypeId == 16 || item.OverheadsTypeId == 18 || item.OverheadsTypeId == 20 || item.OverheadsTypeId == 22){
                                var selectHead = $(trEleNew).find('select[name$=".Id"]');
                                selectHead.empty();
                                $.each(item.ProjectNumber, function (index, itemData) {
                                    selectHead.append($('<option/>', {
                                        value: itemData.id,
                                        text: itemData.name,
                                    }));
                                });
                            }

                            $('#tbodyHo').append(trEleNew);
                        }
                    });
                    if (result.PaymentTypeId == 1) {
                        $.each(result.ExpenseDetail, function (i, item) {
                            //var amt = 0;
                            //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                            //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                            //    var parseVal = parseFloat($(elePayment).val());
                            //    if (!isNaN(parseVal))
                            //        amt = amt + parseVal;
                            //});
                            if (i == 0) {
                                if (item.AccountHeadId != 317 && item.AccountHeadId != 144 && item.AccountHeadId != 140 && item.AccountHeadId != 149) {
                                var trEle = $('#tbodyExpenseList tr:first');
                                $('#tbodyExpenseList tr').not(':first').remove();
                                // $(trEle).find('input[name$=".Amount"]').attr("readonly", true);
                                $(trEle).find('select[name$=".AccountGroupId"]').attr("readonly", true);
                                $(trEle).find('select[name$=".AccountHeadId"]').attr("readonly", true);
                                $(trEle).find('input[name$=".Amount"]').val(item.Amount);
                                if (item.TransactionType == 'Debit') {
                                    $(trEle).find('input[name$=".TransactionType"]').val('Credit');
                                    $(trEle).find('#lblTransType').text('Credit');
                                    $(trEle).find('input[name$=".Amount"]').val(result.TotalCreditAmount);
                                }
                                if (item.TransactionType == 'Credit') {
                                    $(trEle).find('input[name$=".TransactionType"]').val('Debit');
                                    $(trEle).find('#lblTransType').text('Debit');
                                }

                                $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                                $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                                var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                                selectGroup.empty();
                                $.each(item.AccountGroupList, function (index, itemData) {
                                    if (itemData.id == 33) {
                                        selectGroup.append($('<option/>', {
                                            value: 38,
                                            text: 'Bank Accounts',
                                        }));
                                    }
                                    else {
                                        selectGroup.append($('<option/>', {
                                            value: itemData.id,
                                            text: itemData.name,
                                        }));
                                    }
                                });


                                var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                                selectHead.empty();
                                $.each(item.AccountHeadList, function (index, itemData) {
                                    if (itemData.id == 134) {
                                        selectHead.append($('<option/>', {
                                            value: 149,
                                            text: 'Canara Bank-16162-Consultancy',
                                        }));
                                    }
                                    else {
                                        selectHead.append($('<option/>', {
                                            value: itemData.id,
                                            text: itemData.name,
                                        }));
                                    }
                                });
                            }
                            } else {
                                if (item.AccountHeadId != 317 && item.AccountHeadId != 144 && item.AccountHeadId != 140 && item.AccountHeadId != 149) {

                                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                                  //  $(trEleNew).find('input[name$=".Amount"]').attr("readonly", true);
                                    $(trEleNew).find('select[name$=".AccountGroupId"]').attr("readonly", true);
                                    $(trEleNew).find('select[name$=".AccountHeadId"]').attr("readonly", true);
                                    $(trEleNew).find('input[name$=".Amount"]').val(item.Amount);
                                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                                    if (item.TransactionType == 'Debit') {
                                        $(trEleNew).find('input[name$=".TransactionType"]').val('Credit');
                                        $(trEleNew).find('#lblTransType').text('Credit');
                                        $(trEleNew).find('input[name$=".Amount"]').val(result.TotalCreditAmount);
                                    }
                                    if (item.TransactionType == 'Credit') {
                                        $(trEleNew).find('input[name$=".TransactionType"]').val('Debit');
                                        $(trEleNew).find('#lblTransType').text('Debit');
                                    }

                                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                                    $(trEleNew).find("input,Select").each(function () {
                                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                                    });
                                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                                    });

                                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                                    selectGroup.empty();
                                    $.each(item.AccountGroupList, function (index, itemData) {
                                        if (itemData.id == 33) {
                                            selectGroup.append($('<option/>', {
                                                value: 38,
                                                text: 'Bank Accounts',
                                            }));
                                        }
                                        else {
                                            selectGroup.append($('<option/>', {
                                                value: itemData.id,
                                                text: itemData.name,
                                            }));
                                        }
                                    });

                                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                                    selectHead.empty();
                                    $.each(item.AccountHeadList, function (index, itemData) {
                                        if (itemData.id == 134) {
                                            selectHead.append($('<option/>', {
                                                value: 149,
                                                text: 'Canara Bank-16162-Consultancy',
                                            }));
                                        }
                                        else {
                                            selectHead.append($('<option/>', {
                                                value: itemData.id,
                                                text: itemData.name,
                                            }));
                                        }
                                    });
                                    $(trEleNew).find('select[name$=".AccountGroupId"]').val(item.AccountGroupId)
                                    $(trEleNew).find('select[name$=".AccountHeadId"]').val(item.AccountHeadId)
                                    $('#tbodyExpenseList').append(trEleNew);
                                }
                            }
                            CalculateDeductionTotal();
                        });
                        $.each(result.DeductionDetail, function (i, item) {
                            if (i == 0) {
                                var trEle = $('#tbodyDeductionList tr:first');
                                $('#tbodyDeductionList tr').not(':first').remove();
                                $(trEle).attr("readonly", true);
                                $(trEle).find('input').val('');
                                var amtEle = $(trEle).find('input[name$=".Amount"]');
                                amtEle.removeClass('required');
                              //  $(trEle).find('input[name$=".Amount"]').attr("readonly", true);
                                $(trEle).find('input[name$=".AccountGroupId"]').attr("readonly", true);
                                $(trEle).find('input[name$=".DeductionHeadId"]').attr("readonly", true);
                                $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                                $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                                $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                                $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                                $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                                $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                            } else {
                                var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                                $(trEleNew).attr("readonly", true);
                                $(trEleNew).find("input").each(function () {
                                    $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                    $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                                });
                                $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                                });
                                var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                                amtEle.removeClass('required');
                            //    $(trEleNew).find('input[name$=".Amount"]').attr("readonly", true);
                                $(trEleNew).find('input[name$=".AccountGroupId"]').attr("readonly", true);
                                $(trEleNew).find('input[name$=".DeductionHeadId"]').attr("readonly", true);
                                $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                                $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                                $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                                $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                                $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                                $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                                $('#tbodyDeductionList').append(trEleNew);
                            }
                        });
                    }
                    $("input[name='TotalCreditAmount']").val(result.TotalCreditAmount)
                }
            });
            //$(".loading-bg").hide();
            $(".loading-bg").addClass('dis-none');
        };

        function EmptyOHDetails() {
            $('#tbodyHo tr').not(':last').not(':first').remove();
            $('#tbodyHo tr td').find('input, select').val('');
        }
        function EmptyPCFDetails() {
            $('#tbodyPCF tr').not(':last').not(':first').remove();
            $('#tbodyPCF tr td').find('input, select').val('');
        }
        function EmptyOtherDetails() {
            $('#tbodyOther tr').not(':last').not(':first').remove();
            $('#tbodyOther tr td').find('input, select').val('');
        }
        function AddNewExpense(){
            //var stateCode = $('#lblStateCode').html();
            //var BillType = $('#BillType').val();
            var subcode = $('#txtpaymenttype').val();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
                data: { "typeCode": "DOH","tSubCode" : subcode},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
        }
        function GetTransactionDetails() {
            var interstate_f = false;
            //var typecode = $('#transtypecode').val();
            var subcode = $('#txtpaymenttype').val();
            EmptyExpenseDeductionDetails();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
                data: { "typeCode": "DOH", "tSubCode" : subcode, },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    //var amt = 0;
                    //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                    //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                    //    var parseVal = parseFloat($(elePayment).val());
                    //    if (!isNaN(parseVal))
                    //        amt = amt + parseVal;
                    //});
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').removeAttr("readonly");
                        $(trEle).find('select[name$=".AccountGroupId"]').removeAttr("disabled");
                        $(trEle).find('select[name$=".AccountHeadId"]').removeAttr("disabled");
                        $(trEle).find('input[name$=".Amount"]').val(item.Amount);
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').removeAttr("readonly");
                        $(trEleNew).find('select[name$=".AccountGroupId"]').removeAttr("disabled");
                        $(trEleNew).find('select[name$=".AccountHeadId"]').removeAttr("disabled");
                        $(trEleNew).find('input[name$=".Amount"]').val(item.Amount);
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                $.each(result.DeductionDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyDeductionList tr:first');
                        $(trEle).find('input').val('');
                        var amtEle = $(trEle).find('input[name$=".Amount"]');
                        amtEle.removeClass('required');
                        $(trEle).find('input[name$=".Amount"]').removeAttr("readonly");
                        $(trEle).find('select[name$=".AccountGroupId"]').removeAttr("disabled");
                        $(trEle).find('select[name$=".DeductionHeadId"]').removeAttr("disabled");
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('input[name$=".Amount"]').val(item.Amount);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                        amtEle.removeClass('required');
                        $(trEleNew).find('input[name$=".Amount"]').removeAttr("readonly");
                        $(trEleNew).find('select[name$=".AccountGroupId"]').removeAttr("disabled");
                        $(trEleNew).find('select[name$=".DeductionHeadId"]').removeAttr("disabled");
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('input[name$=".Amount"]').val(item.Amount);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                var Name =  $("input[name='PIName']").val();
                // $("#CreditorAmount").val(StipendAmt);
                $('#lblVendorName').html(Name);
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
        //}
        }


        function calculatetotalamount() {
            var ttlohVal = 0, ttlpcfVal = 0, ttlothersVal = 0, total = 0;
            var paymenttype = $('#txtpaymenttype').val();
            $('#tbodyPCF input[name$=".Amount"]').each(function (i, rowEle) {
                var parseVal = parseFloat($(this).val()) || 0;
                ttlpcfVal = (ttlpcfVal + parseVal);
            });

            $('#tbodyHo input[name$=".OverheadsAmount"]').each(function (i, rowEle) {
                 var parseVal = parseFloat($(this).val()) || 0;
                 ttlohVal = parseFloat(ttlohVal + parseVal);
             });


            $('#tbodyOther input[name$=".Amount"]').each(function (i, rowEle) {
                var parseVal = parseFloat($(this).val()) || 0;
                ttlothersVal = ttlothersVal + parseVal;
            });
            if (paymenttype == 1) {
                total = $("input[name='TotalCreditAmount']").val()
            }
            else
            {
                total = (parseFloat(ttlpcfVal) + parseFloat(ttlohVal) + parseFloat(ttlothersVal))
            }
            $("#CreditorAmount").val(total);
        }
        /* Tab Sections Start*/
        var currentTab = 0; // Current tab is set to be the first tab (0)
        showTab(currentTab); // Display the crurrent tab
        function showTab(n) {
            // This function will display the specified tab of the form...
            var x = document.getElementsByClassName("tab");
            x[n].style.display = "block";
            $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
            //... and fix the Previous/Next buttons:
            if (n == 0) {
                document.getElementById("prevBtn").style.display = "none";
            } else {
                document.getElementById("prevBtn").style.display = "inline";
            }
            if (n == (x.length - 1)) {
                document.getElementById("nextBtn").innerHTML = "Submit";
            } else {
                document.getElementById("nextBtn").innerHTML = "Next";
            }
            //... and run a function that will display the correct step indicator:
            //fixStepIndicator(n)
        }

        function nextPrev(n) {
            // This function will figure out which tab to display
            var x = document.getElementsByClassName("tab");
            // Exit the function if any field in the current tab is invalid:
            if (n > 0 && !validateForm(n)) return false;
            if (currentTab + n < x.length) {
                // Hide the current tab:
                x[currentTab].style.display = "none";
                $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
            } else {
                // ... the form gets submitted:
                formSave();
                return false;
            }
            // Increase or decrease the current tab by 1:
            currentTab = currentTab + n;

            // Otherwise, display the correct tab:
            showTab(currentTab);
        }
        function ValidateTransaction() {
            var msg = 'valid';
            var netCrAmt = parseFloat($('#CreditorAmount').val());
            var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
            var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
            var crAmt = parseFloat($('#ttlCr').val()) || 0;
            var netDrAmt = ttlExpAmt + ttldeductAmt;
            var paymenttype = $('#txtpaymenttype').val();

            //var netDrAmt = ttlExpAmt + ttldeductAmt;
            //var offsetValue = $("input[name='GST']:checked").val();
            if (isNaN(netCrAmt)) {
                return 'The Credit value is not a valid entry.';
            }
            if (netDrAmt != crAmt) {
                msg = 'Not a valid entry. Credit and Debit value are not equal.';
            }
            //if (isNaN(netCrAmt) || isNaN(commitmentAmt)) {
            //    msg = 'The requested advance value / Transaction value is not a valid entry.';
            //}
            //else if (ttlAdvAmt != commitmentAmt) {
            //    msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
            //}

            //var groupNames = [];
            //$('#tbodyCommitmentSelList tr').find('input[name$=".HeadName"]').each(function () {
            //    var commitmentAmt = 0;
            //    var groupName = $(this).val();
            //    if(groupNames.indexOf(groupName) == -1){
            //        $("#tbodyCommitmentSelList [name$='.HeadName'][value='"+groupName+"']").each(function(){
            //            var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
            //            var parseVal = parseFloat($(elePayment).val());
            //            if (!isNaN(parseVal))
            //                commitmentAmt = commitmentAmt + parseVal;
            //        });
            //        var sumOfAmt = 0;
            //        if(!isNaN(commitmentAmt)){
            //            $('#tbodyExpenseList tr select[name$=".AccountGroupId"]').each(function () {
            //                if($(this).find("option:selected").text() == groupName){
            //                    var individualVal = $(this).closest('tr').find("input[name$='.Amount']").val();
            //                    individualVal = parseFloat(individualVal);
            //                    if(!isNaN(individualVal))
            //                        sumOfAmt = sumOfAmt + individualVal;
            //                }
            //            });
            //            if(commitmentAmt != sumOfAmt){
            //                msg = 'The amount enter for ' +groupName+ ' is not equal to commitment value.';
            //                return false;
            //            }
            //            groupNames.push(groupName)
            //        }else{
            //            msg = 'Commitment Payment Value is not valid.';
            //            return false;
            //        }
            //    }
            //});
            if (paymenttype != 3)
            {
                var hdList = [];
                var hdJVList = [];
                $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
                    var jv = $(this).closest('tr').find("input[name$='.IsJV']").val();
                    if (jv.toLowerCase()== "true")
                        hdJVList.push($(val).val());
                    else
                        hdList.push($(val).val());
                });
                hdList.sort();
                hdJVList.sort();
                // duplicate check
                for (var k = 1; k < hdList.length; ++k) {
                    if (hdList[k] == hdList[k - 1]) {
                        msg = "Duplicate account head exist in expense details. Please select a different head.";
                    }
                }
            }
            return msg;
        }
        function validateForm(n) {
            // This function deals with validation of the form fields
            var isValid = false;
            var hadError = false;
            var tabs = $(".tab");
            var currentTabEle = tabs[currentTab];
            var inputs = $(":input, textarea, select"); // get all the form inputs and selects
            var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
            var count = stepElements.length; // check that there are inputs
            if (count <= 0) {                // if there are not no reason to loop them
                return true;                 // this can be used to perform other action if there are no steps
            } else if (currentTab == 0) {
                if ($('#NeedUpdateTransDetail').val().toLowerCase() == 'true') {
                    GetTransactionDetails();
                }
                calculatetotalamount()

                $('input[name$=".OverheadsTypeId"]').each(function (idx, val) {
                    var overheadtypeid = $(this).val();
                    if (overheadtypeid == 2)
                    {
                        var ProjectId = $(this).closest('tr').find('select[name$=".Id"]').val() || 0;
                        if(ProjectId == 0)
                        {
                            if (validationMsg != 'valid') {
                                hadError = true;
                                $("#alert").text("No Project selected for Department. Please add or select atleast one project");
                                $('#Validation').modal('show');
                                return false;
                            }
                        }
                    }
                    if (overheadtypeid == 3) {
                        var ProjectId = $(this).closest('tr').find('select[name$=".Id"]').val() || 0;
                        if (ProjectId == 0) {
                            if (validationMsg != 'valid') {
                                hadError = true;
                                $("#alert").text("No Project selected for ICSR OverHeads. Please add or select atleast one project");
                                $('#Validation').modal('show');
                                return false;
                            }
                        }
                    }
                    if (overheadtypeid == 5) {
                        var ProjectId = $(this).closest('tr').find('select[name$=".Id"]').val() || 0;
                        if (ProjectId == 0) {
                            if (validationMsg != 'valid') {
                                hadError = true;
                                $("#alert").text("No Project selected for Staff Welfare. Please add or select atleast one project");
                                $('#Validation').modal('show');
                                return false;
                            }
                        }
                    }
                    if (overheadtypeid == 8) {
                        var ProjectId = $(this).closest('tr').find('select[name$=".Id"]').val() || 0;
                        if (ProjectId == 0) {
                            if (validationMsg != 'valid') {
                                hadError = true;
                                $("#alert").text("No Project selected for ICSR OverHeads. Please add or select atleast one project");
                                $('#Validation').modal('show');
                                return false;
                            }
                        }
                    }

                });
            }
            else if (currentTab == 1) {
                var validationMsg = ValidateTransaction()
                if (validationMsg != 'valid') {
                    hadError = true;
                    $("#alert").text(validationMsg);
                    $('#Validation').modal('show');
                }
                CalculateDeductionTotal();

            }
            else if (currentTab == 2) {

            }

            $(stepElements).each(function (idx, ele) {

                if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                    isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                    if (!isValid) { hadError = true; } // set our flag if there was an error
                }

            });
            return !hadError; // return the valid status

        }
        function formSave(){

            var isValid = $('#formOHP').valid();
            if (!isValid)
                return false;

            if (isValid)
                $('#formOHP').submit();
        };

        $('#TaxableAmount').on("copy cut paste drop", function () {
            return false;
        });



    </script>
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
