@model IOAS.Models.GeneralVoucherModel
@{
    ViewBag.Title = "General Voucher";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("GeneralVoucher", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formGV", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>General Voucher</b> </h4>
        </div>
    </div>
    <div class="row">

        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.BillId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @*@Html.DropDownListFor(m => m.SourceReferenceNumber, new SelectList(ViewBag.SourceRefNumberList, "id", "name"), "Select any",
        new { @class = "form-control" })*@
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                    @Html.Hidden("TransactionTypeCode", "STM")
                    @Html.Hidden("varProjectClearingPayable")
                    @Html.Hidden("varProjectCreditors_Dr")
                    @Html.Hidden("varProjectCreditors_Cr")
                    @Html.Hidden("varTDSGST_Payable")
                    @Html.Hidden("varTDSIT_Payable")
                    @Html.Hidden("varCGSTInput")
                    @Html.Hidden("varSGSTInput")
                    @Html.Hidden("varIGSTInput")
                    @Html.Hidden("tdsAmount")
                    @Html.Hidden("tdsVendorIdFinder")

                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>
            <div class="col-md-3 col-md-offset-9">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.VoucherNumber)</h4>
                        @Html.HiddenFor(m => m.VoucherId)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Document Details</a></li>
                </ul>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Category</label>
                                                    @Html.DropDownListFor(m => m.PaymentCategory, new SelectList(ViewBag.PaymentCategoryList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PaymentCategory)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.PaymentRemarks, new { @class = "form-control", @rows = "3" })
                                                    @Html.ValidationMessageFor(m => m.PaymentRemarks)

                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bank</label>
                                                    @Html.DropDownListFor(m => m.PaymentBank, new SelectList(ViewBag.BankList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PaymentBank)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Amount</label>
                                                    @Html.TextBoxFor(m => m.PaymentBankAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculatePayTxTotal()", @autocomplete = "off" })
                                                    @Html.ValidationMessageFor(m => m.PaymentBankAmount)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="gray-bg br-rd">
                                            <h3 class="mt-null col-md-6"></h3>
                                            <div class="col-md-6 text-right mb-md">
                                                <a href="javascript:void(0)" id="btnAddPayExpense" class="btn btn-primary">Add New</a>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="m-b-sm">
                                                        <table class="table table-bordered">
                                                            <thead>
                                                                <tr>
                                                                    <th class="required">Account Group</th>
                                                                    <th class="required">Account Head</th>
                                                                    <th class="required">Transaction Type</th>
                                                                    <th class="required" style="width:200px;">Amount</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="tbodyPayExpenseList">
                                                                @if (Model.PaymentExpenseDetail != null && Model.PaymentExpenseDetail.Count() > 0)
                                                                {
                                                                    var count = 0;
                                                                    foreach (var item in Model.PaymentExpenseDetail)
                                                                    {
                                                                        var accountGroup = "PaymentExpenseDetail[" + count + "].AccountGroupId";
                                                                        var accountHead = "PaymentExpenseDetail[" + count + "].AccountHeadId";
                                                                        var expDetailId = "PaymentExpenseDetail[" + count + "].BillExpenseDetailId";
                                                                        var transType = "PaymentExpenseDetail[" + count + "].TransactionType";
                                                                        var amt = "PaymentExpenseDetail[" + count + "].Amount";
                                                                        <tr>
                                                                            <td>
                                                                                @Html.DropDownList(@accountGroup, new SelectList(ViewBag.AccountGroupList, "id", "name", item.AccountGroupId), new { @class = "form-control required" })
                                                                                @Html.ValidationMessage(@accountGroup)
                                                                                @Html.Hidden("PaymentExpenseDetail.Index", @count)
                                                                                @Html.Hidden(@expDetailId, item.BillExpenseDetailId)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@accountHead, new SelectList(item.AccountHeadList, "id", "name", item.AccountHeadId), new { @class = "form-control required" })
                                                                                @Html.ValidationMessage(@accountHead)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@transType, new SelectList(ViewBag.TransactionTypeList, "name", "name", item.TransactionType), new { @class = "form-control required", @onchange = "CalculatePayTxTotal()" })
                                                                                @Html.ValidationMessage(@transType)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@amt, item.Amount, new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculatePayTxTotal()", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@amt)
                                                                            </td>
                                                                            <td>
                                                                                <a href="javascript:void(0)" class="removePayExpense btn-circle"><i class="ion-close-round"></i></a>
                                                                            </td>
                                                                        </tr>
                                                                        count++;

                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <tr>
                                                                        <td>
                                                                            @Html.DropDownList("PaymentExpenseDetail[0].AccountGroupId", new SelectList(ViewBag.AccountGroupList, "id", "name"), "Select any", new { @class = "form-control required" })
                                                                            @Html.ValidationMessage("PaymentExpenseDetail[0].AccountGroupId")
                                                                            @Html.Hidden("PaymentExpenseDetail.Index", "0")
                                                                            @Html.Hidden("PaymentExpenseDetail[0].BillExpenseDetailId")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("PaymentExpenseDetail[0].AccountHeadId", new SelectList(ViewBag.AccountHeadList, "id", "name"), "Select any", new { @class = "form-control required" })
                                                                            @Html.ValidationMessage("PaymentExpenseDetail[0].AccountHeadId")
                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("PaymentExpenseDetail[0].TransactionType", new SelectList(ViewBag.TransactionTypeList, "name", "name"), "Select any", new { @class = "form-control required", @onchange = "CalculatePayTxTotal()" })
                                                                            @Html.ValidationMessage("PaymentExpenseDetail[0].TransactionType")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PaymentExpenseDetail[0].Amount", "", new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculatePayTxTotal()", @autocomplete = "off" })
                                                                            @Html.ValidationMessage("PaymentExpenseDetail[0].Amount")
                                                                        </td>
                                                                        <td>
                                                                            <a href="javascript:void(0)" class="removePayExpense btn-circle"><i class="ion-close-round"></i></a>
                                                                        </td>
                                                                    </tr>
                                                                }


                                                            </tbody>
                                                        </table>

                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="gray-bg br-rd">
                                            <h3 class="mt-null">Taxes</h3>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="m-b-sm">
                                                        <table class="table table-bordered">
                                                            <thead>
                                                                <tr>
                                                                    <th>Group</th>
                                                                    <th>Account Head</th>
                                                                    <th>Amount</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="tbodyPayDeductionList">
                                                                @if (Model.PaymentDeductionDetail != null && Model.PaymentDeductionDetail.Count() > 0)
                                                                {
                                                                    var count = 0;
                                                                    foreach (var item in Model.PaymentDeductionDetail)
                                                                    {
                                                                        var amt = "PaymentDeductionDetail[" + count + "].Amount";
                                                                        var groupId = "PaymentDeductionDetail[" + count + "].AccountGroupId";
                                                                        var headId = "PaymentDeductionDetail[" + count + "].DeductionHeadId";
                                                                        var deductDetailId = "PaymentDeductionDetail[" + count + "].BillDeductionDetailId";
                                                                        var deductionHead = "PaymentDeductionDetail[" + count + "].DeductionHead";
                                                                        var accountGroup = "PaymentDeductionDetail[" + count + "].AccountGroup";
                                                                        <tr>
                                                                            <td>@item.AccountGroup</td>
                                                                            <td>@item.DeductionHead</td>
                                                                            <td>
                                                                                @Html.TextBox(@amt, item.Amount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculatePayTxTotal()", @autocomplete = "off" })
                                                                                @Html.Hidden(@groupId, item.AccountGroupId)
                                                                                @Html.Hidden(@headId, item.DeductionHeadId)
                                                                                @Html.Hidden(@deductDetailId, item.BillDeductionDetailId)
                                                                                @Html.Hidden(@deductionHead, item.DeductionHead)
                                                                                @Html.Hidden(@accountGroup, item.AccountGroup)
                                                                            </td>
                                                                        </tr>
                                                                        count++;

                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-3  col-md-offset-6">
                                                    <div class="form-group custom-form-group ">
                                                        <label>Total Credit <span class="cr">(Cr)</span> :</label>
                                                        @Html.TextBoxFor(m => m.PaymentCreditAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                                                    </div>
                                                </div>
                                                <div class="col-md-3 ">
                                                    <div class="form-group custom-form-group ">
                                                        <label>Total Debit <span class="dr">(Dr)</span> :</label>
                                                        @Html.TextBoxFor(m => m.PaymentDebitAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        @Html.Partial("_PaymentBreakUp", Model.PaymentBreakDetail)

                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>
                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("GeneralVoucherList", "CoreAccounts")';">Close</button>
                </div>
            </div>
        </div>
    </div>

}
<div id="popup"></div>
<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#srchFromDate, #srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);

    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        var selSource = $('#Source').val();
        $('#divPaymentTDSAmount').addClass('dis-none');
        CalculatePaymentValue();
        CalculatePaymentBUTotal();
        CalculatePayTxTotal();
        updatevendorsName();       
        var PaymentBank = $('#PaymentBank :selected').val();

        if (PaymentBank != '')
        {
            $.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: PaymentBank },
        function (locationdata) {
            var select = $("#srchProjectNumber");
            select.empty();

            $.each(locationdata, function (index, itemData) {

                select.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name

                }));
            });
            select.selectpicker('refresh');
        });

        }

        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
    });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    $('#PaymentCategory').change(function () {
        removeValidation();
    });
    function removeValidation() {
        var cate = $('#PaymentCategory').val();
        if (cate == '1' || cate == '4') {
            $('select[name$=".CategoryId"],input[name$=".PaymentAmount"],select[name$=".ModeOfPayment"]').removeClass('required');
            removeCommitmentValidation();
        } else {
            setCommitmentValidation();
            $('select[name$=".CategoryId"],input[name$=".PaymentAmount"],select[name$=".ModeOfPayment"]').addClass('required');
        }
    }
    function CalculatePayTxTotal() {
        var ttlDrVal = 0;
        var ttlExpVal = parseFloat($('#PaymentBankAmount').val()) || 0;
        $('#tbodyPayExpenseList select[name$=".TransactionType"]').each(function (i, rowEle) {
            if ($(this).val() == 'Credit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val());
                if (!isNaN(parseVal)) {
                    ttlExpVal = ttlExpVal + parseVal;
                }
            } else if ($(this).val() == 'Debit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val());
                if (!isNaN(parseVal)) {
                    ttlDrVal = ttlDrVal + parseVal;
                }
            }
        });
        $('#tbodyPayDeductionList input[name$=".Amount"]').each(function (i, rowEle) {
            var parseVal = parseFloat($(this).val());
            if (!isNaN(parseVal))
                ttlDrVal = ttlDrVal + parseVal;
        });
        $('#PaymentDebitAmount').val(ttlDrVal);
        $('#PaymentCreditAmount').val(ttlExpVal);
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var ttlCrAmt = parseFloat($('#PaymentCreditAmount').val()) || 0;
        var ttlDrAmt = parseFloat($('#PaymentDebitAmount').val()) || 0;
        var payBUTtl = parseFloat($('#PaymentBUWOITAmount').val()) || 0; //parseFloat($('#PaymentBUTotal').val()) || 0;
        var bankVal = parseFloat($('#PaymentBankAmount').val()) || 0;
        var cate = $('#PaymentCategory').val();
        if (ttlCrAmt != ttlDrAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        } else if (bankVal != payBUTtl && (cate != '1' && cate != '4')) {
            msg = "Not a valid entry.The Payable value and Payment Break Up Total value are not equal.";
        }
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
            var jv = $(this).closest('tr').find("input[name$='.IsJV']").val();
            hdList.push($(val).val());
        });

        hdList.sort();
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function ValidateCommitment() {
        var msg = 'valid';
        //var ttlCrAmt = parseFloat($('#PaymentCreditAmount').val()) || 0;
        var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
        //var ttlGSTElg = parseFloat($('#GSTOffsetTotal').val()) || 0;
        var ttlDrVal = 0;
        $('#tbodyPayExpenseList select[name$=".TransactionType"]').each(function (i, rowEle) {
            if ($(this).val() == 'Debit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val());
                if (!isNaN(parseVal)) {
                    ttlDrVal = ttlDrVal + parseVal;
                }
            }

        });
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        //var voucherVal = (ttlCrAmt - ttlGSTElg).toFixed(2);
        if (ttlDrVal != commitmentAmt) {
            msg = 'There is a mismatch between the payment value and allocated commitment value. Please update the value to continue.';
        }
        return msg;
    }
    function formSave() {
        var cate = $('#PaymentCategory').val();
        if (cate != 1 && cate != 4) {
            var validationMsg = ValidateCommitment();
            if (validationMsg != 'valid') {
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
                return false;
            }
        }
        var isValid = $('#formGV').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        $('#formGV').submit();
    }

    $('input[name$="Amount"]').on("copy cut paste drop", function () {
        return false;
    });

    $(document).on('change', 'select[name$=".AccountGroupId"]', function () {
        var groupId = $(this).val();
        var ele = $(this).closest('tr');
        var select = ele.find("select[name$='.AccountHeadId']");
        select.empty();
        select.append($('<option/>', {
            value: "",
            text: "Select any",
        }));
        if (groupId != '') {
            $.getJSON("@Url.Action("GetAccountHead", "CoreAccounts")", { "accountGroupId": groupId, "isBank": false },
             function (locationdata) {
                 $.each(locationdata, function (index, itemData) {
                     select.append($('<option/>', {
                         value: itemData.id,
                         text: itemData.name,
                     }));
                 });
             });
        }
    });
    $('#btnAddPayExpense').click(function () {
        var cln = $('#tbodyPayExpenseList tr:first').clone().find("select,input").val("").end();
        var index = $('#tbodyPayExpenseList tr:last').find("input[name='PaymentExpenseDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='PaymentExpenseDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });

        var selectHead = $(cln).find("select[name$='.AccountHeadId']");
        selectHead.empty();
        selectHead.append($('<option/>', {
            value: "",
            text: "Select any",
        }));
        $('#tbodyPayExpenseList').append(cln);
    });
    $(document).on('click', 'a.removePayExpense', function () {
        if ($('#tbodyPayExpenseList tr').length != 1) {
            $(this).closest('tr').remove();
            CalculatePayTxTotal();
        }
    });
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    
    
    //Fuction Created for vendor alert popup by Rajesh

    //TDSLimit is previous amount
    //TDSLimit return values from database stored procedure
    //editCal is last payment amount
    //editCal return values from Model
    //curTableTol is the current value you edit
    //curTableTol return from UI Screen 
    //vendorId is vendor id  
    //vendorId return from UI Screen
    //vendorname is vendor name 
    //vendorname we see only the vendorid behind that vendor name will be there we fetch data from screeen  
     function getpan(vendorId, CategoryId) {
         retval = true;
        $.ajax({
            type: "GET",
            async: false,
            url: "@Url.Action("GetPanNumberOnly", "CoreAccounts")",
            data: { "vendorId": vendorId, "CategoryId": CategoryId},
            dataType: "json",
            success: function (result) { 
                retval = result;
                return result;
                }              
            });
        return retval;
    };

    //vendor_id, vendor_name, vendor_oldValue, vendor_newValue, vendor_pan
    function validatetds(vendorId, vendorName, editCal, curTableTol,vendorPan) {
        retval = true;
        $.ajax({
            type: "GET",
            async: false,
            url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
            data: { "vendorId": vendorId, "poNumberRequired": true, "transTypeCode": 'ADV', "TDSRequired": true },
            dataType: "json",
            success: function (result) { 
                               
                var holeAmt = (parseFloat(result.TDSLimit) - parseFloat(editCal)) + parseFloat(curTableTol)
                //if (parseFloat((result.TDSLimit - TotalInvoice) + CurrentValue)
                if (holeAmt>5000000){

                    //store the hole value and set popup message
                    console.log('start1');
                    console.log(holeAmt);
                    // hide value                   
                    tmpVendor = $("#tdsVendorIdFinder").val();
                    tmpVendor = tmpVendor + vendorName + "(" +vendorPan +") Total payment is Rs." + (parseFloat(holeAmt).toFixed(2)) + "<br>";    
                                     
                   $("#tdsVendorIdFinder").val(tmpVendor);                  
                    return vendorId;
                }
                else {
                    return 0;
                }
            }
            });
        return retval;
    };
    async function validatetds1(vendorId, vendorName, settleAmt) {
        return new Promise(function (fullfilled, reject) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
                data: { "vendorId": vendorId, "poNumberRequired": true, "transTypeCode": 'ADV', "TDSRequired": true },
                dataType: "json",
                success: function (result) {

                    if (result.TDSLimit === '' || result.TDSLimit === null)
                        result.TDSLimit = 0;
                    if (settleAmt === '' || settleAmt === null)
                        settleAmt = 0;

                    if (result.TDSLimit + settleAmt > 5000000) {
                        retval = false;

                        console.log(vendorName);
                        fullfilled(vendorName)
                    }
                    else {
                        fullfilled("");
                    }
                },
                error: function (result) {
                    reject("");
                }
            });

        });
    }
    async function updatevendorsName() {
        var p = $.when();
        var tdsres;
        var vendors = [];
        var vendorsfinal = [];

        //clear hidden field        
        $("#tdsAmount").val("");
        $("#tdsVendorIdFinder").val("");
        console.log("Trigger Start");
        $('#tbodyPaymentBU tr').each(function (idx, val) {
            var isThatVendor = $(this).find('select[name$=".CategoryId"]').val()
            console.log(isThatVendor);
            if (isThatVendor == 4 || isThatVendor == 9) {

                var Payment = $(this).find('input[name$="PaymentAmount"]').val();
                var tdsPayment = $(this).find('input[name$="TDSPayable"]').val();
                var vendorName = $(this).find('input[name$="autoComplete"]').val();
                var vendorIds = $(this).find('input[name$="UserId"]').val();
                if (tdsPayment === '' || tdsPayment === null)
                    tdsPayment = 0;
                if (Payment === '' || Payment === null)
                    Payment = 0;
                var curTableTol = parseFloat(Payment) + parseFloat(tdsPayment);
                //console.log(curTableTol);
                //console.log(idx);
                //console.log(vendorIds);
                //console.log(vendorName);
                //console.log(tdsPayment);
                //console.log(Payment);

                var jsdata = @Html.Raw(Json.Encode(Model.PaymentBreakDetail));
                //var FinalTotval = $('#PaymentBUTotal').val()
                console.log(jsdata);
                vendorId = 0;
                var editCal = 0;
                TDSPayable = 0;
                var panno = "";
                for (let i = 0; i < jsdata.length; i++) {
                    if (jsdata[i]["UserId"] == vendorIds) {
                        editCal = jsdata[i]["PaymentAmount"];
                        if (editCal === '' || editCal === null)
                            editCal = 0;
                        TDSPayable = jsdata[i]["TDSPayable"]
                        console.log(TDSPayable);
                        if (TDSPayable === '' || TDSPayable === null)
                            TDSPayable = 0;

                        editCal = parseFloat(TDSPayable) + parseFloat(editCal);
                        console.log(editCal);
                        break;
                    }
                };
                panno = getpan(vendorIds, isThatVendor);
                if (panno != '' && panno !=null) {
                    vendors.push({ id: vendorIds, name: vendorName, oldValue: editCal, newValue: curTableTol, Panno: panno, tdsval: 0 }); 
                }
                console.log(panno );
                

               // tdsres = validatetds(vendorIds, vendorName, editCal, curTableTol);
                console.log(tdsres);
            }
        });

        //Vendor Data Consolidated
        for (let vendor in vendors) {
            vendor_id = vendors[vendor].id;
            vendor_name = ""; //vendors[vendor].name;
            vendor_oldValue = 0;
            vendor_newValue = 0;
            vendor_pan = vendors[vendor].Panno;

            for (let chkvendor in vendors) {
                if (vendors[chkvendor].Panno == vendor_pan) {
                    if (vendor_name == "")
                        vendor_name = vendor_name.concat(vendors[chkvendor].name);
                    else
                        if (vendor_name.includes(vendors[chkvendor].name) == false) {
                            vendor_name = vendor_name.concat(", ", vendors[chkvendor].name);
                        }
                    vendor_oldValue = vendor_oldValue + vendors[chkvendor].oldValue;
                    vendor_newValue = vendor_newValue + vendors[chkvendor].newValue;
                }
            }

            // console.log(vendor_id,vendor_oldValue,vendor_newValue);
            let vendorexist = false;
            for (let chkvendor in vendorsfinal) {
                //   console.log(vendorsfinal[chkvendor].id,vendor_id);
                if (vendorsfinal[chkvendor].Panno == vendor_pan) {
                    vendorexist = true; break;
                }
            }

            if (vendorexist == false) {
                vendorsfinal.push({ id: vendor_id, name: vendor_name, oldValue: vendor_oldValue, newValue: vendor_newValue, Panno: vendor_pan, tdsval: 0 });
            }
        }
        console.log(vendorsfinal);

        for (let vendor in vendorsfinal) {
            vendor_id = vendorsfinal[vendor].id;
            vendor_name = vendorsfinal[vendor].name;
            vendor_oldValue = vendorsfinal[vendor].oldValue;
            vendor_newValue = vendorsfinal[vendor].newValue;
            vendor_pan = vendorsfinal[vendor].Panno;

            tdsres = validatetds(vendor_id, vendor_name, vendor_oldValue, vendor_newValue, vendor_pan);
            console.log(tdsres);
        }


        var alertmsg = $("#tdsVendorIdFinder").val();

        if ($("#tdsVendorIdFinder").val() != '') {
            alertmsg = alertmsg + " <br> hence 194Q is applicable for goods.";
            $('#FailedAlert').html(alertmsg);
            $('#Failed').modal('show');
        }


    }
    async function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var SettleAmt = $('#lblAdvTtlAmt').text() || 0;
            var vendorid = $('#VendorId').val() || 0;

            await updatevendorsName();
            var validationMsg = ValidateTransaction()
            
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            var cate = $('#PaymentCategory').val();
            if (content == '' && cate != '1' && cate != '4') {
                searchCommitment();
            } else if (cate == '1' || cate == '4') {
                removeValidation();
            }
        }
        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }


    $('#PaymentBank').on("change", function () {
        var BankHeadId = $(this).val();
        $("#PaymentBank").val(BankHeadId);
        $("#srchProjectType").val(1);
        EmptyCommitmentSrchList()
        EmptyCommitmentSelList()

        $.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankHeadId },
        function (locationdata) {
            var select = $("#srchProjectNumber");
            select.empty();

            $.each(locationdata, function (index, itemData) {

                select.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name

                }));
            });
            select.selectpicker('refresh');
        });

    });



    function EmptyCommitmentSelList() {
        $('#tbodyCommitmentSelList tr').not(':first').remove();
        $('#tbodyCommitmentSelList tr td').not(':last').not(':nth-last-child(2)').html('');
        //$('#tbodyCommitmentSelList tr td:last').find("input").val("");
        $('#tbodyCommitmentSelList tr').find("input[name!='CommitmentDetail.Index']").val("");
        $('#CommitmentAmount').val('');
    }
    function EmptyCommitmentSrchList() {
        $('#tbodyCommitmentSrchList tr').not(':first').remove();
        $('#tbodyCommitmentSrchList tr td').not(':first').html('');
        $('#tbodyCommitmentSrchList tr td:first input').val('');
    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
