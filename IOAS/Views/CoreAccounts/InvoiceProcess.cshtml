@model IOAS.Models.InvoiceModel
@{
    ViewBag.Title = "Invoice Process";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

<style>
    .txt-red {
        color: red;
    }

    .txt-green {
        color: green;
    }
</style>
<script src="@Url.Content("~/Scripts/CoreAccounts/InvoiceProcess.js")"></script>
<div class="row hd-tt-bg">
    <div class="col-md-4">
        <h3>Invoice Process</h3>
    </div>
    @*<div class="col-md-4">
            <div class="search-btn">
                <input type="text" value="" placeholder="Search" class="form-control">
                <a href="#" id="btnsearch" class="btn"> <i class="ion-search"></i></a>
            </div>

        </div>*@
    <div id="addnewpage" class="col-md-8 flt-nav-links">

        <a href="Javascript:void(0)" id="btnFilter" class="pull-right"> <i class="ion-android-funnel"></i>Filters</a>
        @*<a href="#" id="btnaddnew" data-toggle="modal" data-target="#AddNewEntryModel"> <i class="ion-plus"></i>Add New</a>*@

    </div>
</div>
<div class="row" id="ProjectInvoice">
    @using (Html.BeginForm("InvoiceProcess", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formPI", enctype = "multipart/form-data" }))
    {
        <div class="row">
            <div class="white-bg ad-navbar">
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-list-outline "></i>
                    </div>
                    <div class="ds-tt">
                        <span>Invoice Number & Date</span>
                        <h4 id="lblInvNo">@Html.DisplayFor(m => m.InvoiceNumber)</h4>
                        <h4 id="Invdate">@Html.DisplayFor(m => m.Invoicedatestrng, new { @class = "form-control", @disabled = "disabled" })</h4>
                        @Html.Hidden("Invoicedatestrng")
                        @Html.Hidden("InvoiceDate")
                        @Html.Hidden("InvoiceId")
                        @Html.Hidden("InvoiceNumber")
                        @Html.Hidden("InvoiceDraftId")
                        @Html.Hidden("CurrentAvailPjctBalance")

                    </div>
                </div>
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-list-outline "></i>
                    </div>
                    <div class="ds-tt">
                        <span>Project No</span>
                        <h4 id="txtprojectnumber">@Html.DisplayFor(m => m.ProjectNumber, new { @class = "form-control" })</h4>
                        @Html.Hidden("ProjectID")
                        @Html.HiddenFor(m => m.ProjectType)
                    </div>
                </div>

                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-calendar-outline"></i>
                    </div>
                    <div class="ds-tt">
                        <span>Department Name:</span>
                        <h4 id="txtPIdepartment">@Html.DisplayFor(m => m.PIDepartmentName, new { @class = "form-control", @readonly = true }) </h4>
                    </div>
                </div>

                <div class="col-md-2 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-android-open"></i>
                    </div>
                    <div class="ds-tt">
                        <span>PI Name:</span>
                        <h4 id="txtPIname">@Html.DisplayFor(m => m.NameofPI, new { @class = "form-control", @readonly = true })</h4>
                        @Html.Hidden("PIId")
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="white-bg ad-navbar mt-m-xs">

                <div class="col-md-4">
                    <h4><span>Sanction No : </span><b id="txtsanctionordernumber">@Html.DisplayFor(m => m.SanctionOrderNumber, new { @class = "form-control", @readonly = true })</b></h4>
                </div>
                <div class="col-md-4">
                    <h4><span>Sanction Value : </span><b id="txtsanctionvalue" class="fn-lg">@Html.DisplayFor(m => m.Sanctionvalue, new { @class = "form-control", @readonly = true })</b></h4>
                </div>
                <div class="col-md-4">
                    <h4><span>Total Receipt Value : </span><b id="txttotalreceiptval" class="fn-lg">@Html.DisplayFor(m => m.TotalReceiptValue, new { @class = "form-control", @id = "txttotalreceiptvalue", @readonly = true })</b></h4>
                </div>
                <div class="col-md-4">
                    <h4><span>Total Opening Receipt Value : </span><b id="txttotalopenreceiptval" class="fn-lg">@Html.DisplayFor(m => m.TotalOpenBalReceiptValue, new { @class = "form-control", @id = "txtopenbalreceiptvalue", @readonly = true })</b></h4>
                </div>
                <div class="col-md-4">
                    <h4><span>Total Open Invoice Value : </span><b id="txttotalopeninvval" class="fn-lg">@Html.DisplayFor(m => m.TotalOpenInvoiceValue, new { @class = "form-control", @id = "txttotalopeninvval", @readonly = true })</b></h4>
                </div>
                <div class="col-md-4">
                    <h4><span>Current Financial Year : </span><b id="txtcurrentfinyear" class="fn-lg">@Html.DisplayFor(m => m.CurrentFinancialYear, new { @class = "form-control", @readonly = true })</b></h4>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="page-wrapper">
                <div class="col-md-12">
                    <div class="white-bg">
                        <div class="row">
                            <div class="col-md-6">
                                <h3>Invoice Details</h3>
                                <div class="form-group custom-form-group">
                                    <label class="required">PO Number : </label>
                                    <h4>@Html.TextBoxFor(m => m.PONumber, new { @class = "form-control", @required = "required", @id = "txtPONumber" }) </h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PONumber) </div>
                                    @Html.Hidden("TaxStatus")
                                    @Html.Hidden("CurrentFinyearId")
                                    @Html.Hidden("CurrentFinancialYear")
                                    @Html.Hidden("ProjectClassification")
                                </div>

                                <div class="form-group custom-form-group dis-none" id="divinvtype">
                                    <label>Invoice Type :</label>
                                    @Html.DropDownListFor(m => m.InvoiceType, new SelectList(ViewBag.TypeofInvoice, "codevalAbbr", "CodeValDetail"), "Select Invoice Type",
                                    new { @class = "form-control" })
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.TypeofInvoice)</div>                                    
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Service Type :</label>
                                    @Html.DropDownListFor(m => m.ServiceType, new SelectList(ViewBag.typeofservice, "id", "name"), "Select Service Type",
                                    new { @class = "form-control", @required = "required", @id = "txtservicetype" })
                                    @*@Html.TextAreaFor(m => m.ServiceTypeName, new { @class = "form-control", @id = "txtservicetype" })*@
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>SAC: </label>
                                    @Html.TextBoxFor(m => m.SACNumber, new { @class = "form-control", @required = "required", @id = "txtSACNumber", @readonly = true }) @*@Html.Hidden("SACNumber")*@
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.SACNumber) </div>
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Reverse Charge </label>
                                    @Html.CheckBoxFor(m => m.ReverseCharge)
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Description of Services :</label>
                                    @Html.TextAreaFor(m => m.DescriptionofServices, new { @class = "form-control", @rows = "3", @id = "txtdescriptionofservice" })
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Taxable Value (INR) :</label>
                                    @Html.TextBoxFor(m => m.TaxableValue, new { @class = "form-control", @onchange = "calculatetaxamount();", @required = "required", @id = "taxablevalue" })
                                </div>
                               
                                        <div class="form-group custom-form-group" id="Accgroup">
                                            <label>Account Group :</label>
                                            @Html.DropDownListFor(m => m.AccountGroupId, new SelectList(ViewBag.AccGroupId, "id", "name"), "Select Account Group",
                                    new { @class = "form-control", @id = "txtAccountGroupId" })
                                            
                                            <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.AccountGroupId)</div>
                                        </div>
                                    
                                        <div class="form-group custom-form-group" id="AccId">
                                            <label>Account Head :</label>
                                            @Html.DropDownListFor(m => m.AccountHeadId, new SelectList(ViewBag.AccHeadId, "HeadId", "Head"), "Select Account HeadId",
                                    new { @class = "form-control", @id = "txtAccountHeadId" })
                                            <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.AccountHeadId)</div>

                                        </div>
                                    
                                
                                <div id="divExp_Currency" class="form-group custom-form-group">
                                    <label>Currency :</label>
                                    @Html.DropDownListFor(m => m.SelCurr, new SelectList(ViewBag.Currency, "id", "name"), "Select Currency",
                                        new { @class = "form-control" })
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.SelCurr)</div>
                                    @Html.Hidden("CurrencyCode")
                                </div>
                                <div id="divExp_CurrencyVal" class="form-group custom-form-group">
                                    <label>Invoice Value in Foreign Currency: </label>
                                    @Html.TextBoxFor(m => m.ForeignCurrencyValue, new { @class = "form-control", @id = "txtForeignCurrencyValue", @onchange = "validateforeigncurrency()" })
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.ForeignCurrencyValue) </div>
                                    @Html.Hidden("AllocatedForeignCurrencyValue")
                                    @Html.Hidden("PrevinvForeignCurrencyValue")
                                </div>
                                <div id="divIndianSEZ_TaxCategory" class="form-group custom-form-group dis-none">
                                    <div class="form-group custom-form-group">
                                        <label>Indian SEZ Tax Category :</label>
                                        @Html.DropDownListFor(m => m.IndianSEZTaxCategory, new SelectList(ViewBag.IndianSEZTaxCategoryList, "id", "name"), "Select Tax Category",
                                        new { @class = "form-control" })
                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.IndianSEZTaxCategory)</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div id="divinstalment" class="form-group custom-form-group mb20 mt46 dis-none">
                                    <label>Instalment: </label>
                                    @Html.TextBoxFor(m => m.Instalmentnumber, new { @class = "form-control", @id = "instalmentnumber", @readonly = true })
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.Instalmentnumber)</div>
                                    @Html.Hidden("Instalmentnumber")
                                    @Html.Hidden("Instlmntyr")
                                </div>

                                <div class="tx-dts">
                                    <h3>Tax Details</h3>
                                    <div class="row">
                                        <label class="col-md-4">CGST :</label>
                                        <h4 class="sb-dts col-md-4">@Html.TextBoxFor(m => m.CGST, new { @class = "form-control", @id = "CGSTamount", @onkeypress = "return isNumberKey(event)", @readonly = true }) </h4>
                                        <h4 class="sb-dts col-md-4">
                                            @Html.TextBoxFor(m => m.CGSTPercentage, new { @class = "form-control", @id = "CGSTpercent", @readonly = true })

                                        </h4>
                                    </div>
                                    <div class="row">
                                        <label class="col-md-4">SGST :</label>
                                        <h4 class="sb-dts col-md-4">@Html.TextBoxFor(m => m.SGST, new { @class = "form-control", @id = "SGSTamount", @onkeypress = "return isNumberKey(event)", @readonly = true }) </h4>
                                        <h4 class="sb-dts col-md-4">
                                            @Html.TextBoxFor(m => m.SGSTPercentage, new { @class = "form-control", @id = "SGSTpercent", @readonly = true })

                                        </h4>
                                    </div>
                                    <div class="row">
                                        <label class="col-md-4">IGST :</label>
                                        <h4 class="sb-dts col-md-4">@Html.TextBoxFor(m => m.IGST, new { @class = "form-control", @id = "IGSTamount", @onkeypress = "return isNumberKey(event)", @readonly = true }) </h4>
                                        <h4 class="sb-dts col-md-4">
                                            @Html.TextBoxFor(m => m.IGSTPercentage, new { @class = "form-control", @id = "IGSTpercent", @readonly = true })

                                        </h4>
                                    </div>
                                    <div class="row dts-bm">
                                        <label class="col-md-4">Total Tax :</label>
                                        <h4 class="sb-dts col-md-4">@Html.TextBoxFor(m => m.TotalTaxValue, new { @class = "form-control", @id = "Totaltaxamount", @onkeypress = "return isNumberKey(event)", @readonly = true }) </h4>
                                        <h4 class="sb-dts col-md-4">
                                            @Html.TextBoxFor(m => m.TotalTaxpercentage, new { @class = "form-control", @id = "Totaltaxpercent", @readonly = true })
                                            @Html.Hidden("TotalTaxpercentage")
                                            @Html.Hidden("TotalTaxpercentageId")
                                            @Html.Hidden("HiddenTotalTaxpercentage")
                                        </h4>
                                    </div>


                                </div>

                                <div class="form-group custom-form-group mt30">
                                    <label><b>Total Invoice Value (INR) : </b></label>
                                    <h4 class="fn-s-lg" id="totalinvoicevalue"> @Html.DisplayFor(m => m.TotalInvoiceValue, new { @class = "form-control", @readonly = true })</h4>
                                    @Html.Hidden("TotalInvoiceValue")
                                    @Html.Hidden("AvailableBalance")
                                    @Html.Hidden("Sanctionvalue")
                                    @Html.Hidden("CurrentInvoiceValue")
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.TotalInvoiceValue)</div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="page-wrapper">
                <div class="col-md-6">
                    <div class="white-bg">
                        <div class="at-panel-box mb20">
                            <div class="at-panel-list">

                                <div class="form-group custom-form-group">
                                    <label>Agency Registered Name: </label>
                                    <h4>@Html.TextBoxFor(m => m.SponsoringAgencyName, new { @class = "form-control", @id = "txtSponsoringAgencyName" })</h4>
                                    @Html.Hidden("SponsoringAgency")
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.SponsoringAgencyName)</div>
                                </div>

                                <div class="form-group custom-form-group">
                                    <label>Agency Communication Address: </label>
                                    <h4>@Html.TextAreaFor(m => m.CommunicationAddress, new { @class = "form-control", @id = "txtCommunicationAddress" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.CommunicationAddress)</div>
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Agency Contact Person: </label>
                                    <h4>@Html.TextBoxFor(m => m.Agencycontactperson, new { @class = "form-control" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.Agencycontactperson)</div>
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Agency Contact No: </label>
                                    <h4>@Html.TextBoxFor(m => m.Agencycontactpersonmobile, new { @class = "form-control" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.Agencycontactpersonmobile)</div>
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Agency Email: </label>
                                    <h4>@Html.TextBoxFor(m => m.AgencycontactpersonEmail, new { @class = "form-control" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.AgencycontactpersonEmail)</div>
                                </div>
                                <div id="divExp_Country" class="form-group custom-form-group">
                                    <label class="required">Country: </label>
                                    <h4>
                                        @Html.DropDownListFor(m => m.AgencyCountryId, new SelectList(ViewBag.countryList, "CountryID", "CountryName"),
                                 new { @class = "form-control" })
                                    </h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.AgencyCountryId)</div>
                                </div>
                                <div id="divExp_Place" class="form-group custom-form-group">
                                    <label class="required">Place: </label>
                                    <h4>@Html.TextBoxFor(m => m.ForeignAgencyPlace, new { @class = "form-control" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.ForeignAgencyPlace)</div>
                                </div>
                                <div id="divNonExp_Dis" class="form-group custom-form-group">
                                    <label class="required" id="agncydstrlbl">Agency District: </label>
                                    <h4>@Html.TextBoxFor(m => m.Agencydistrict, new { @class = "form-control" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.Agencydistrict)</div>
                                </div>
                                <div id="divNonExp_PIN" class="form-group custom-form-group">
                                    <label class="required" id="agncypincodelbl">Agency Pin Code: </label>
                                    <h4>@Html.TextBoxFor(m => m.AgencyPincode, new { @class = "form-control" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.AgencyPincode)</div>

                                </div>
                                <div id="divNonExpTAN" class="form-group custom-form-group">
                                    <label>Agency TAN: </label>
                                    <h4>@Html.TextBoxFor(m => m.TAN, new { @class = "form-control" })</h4>
                                    @Html.Hidden("TANReq")
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.TAN)</div>
                                </div>
                                <div id="divNonExp_Container1" class="pd-null">
                                    <div class="form-group custom-form-group">
                                        <label class="required">Agency State: </label>
                                        <h4>
                                            @Html.DropDownListFor(m => m.AgencystateId, new SelectList(ViewBag.state, "id", "name"),
                                 new { @class = "form-control", @id = "txtRegAgencyState" })
                                        </h4>
                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.AgencystateId)</div>
                                    </div>

                                    <div class="form-group custom-form-group">
                                        <label class="required">Agency State Code: </label>
                                        <h4>@Html.TextBoxFor(m => m.Agncystatecode, new { @class = "form-control", @id = "txtAgencyStateCode", @readonly = true })</h4>
                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.Agncystatecode)</div>
                                    </div>

                                    <div class="form-group custom-form-group" id="divGSTIN">
                                        <label>Agency GSTIN: </label>
                                        <h4>@Html.TextBoxFor(m => m.GSTNumber, new { @class = "form-control", @id = "txtGSTIN" })</h4>
                                        @Html.Hidden("GSTNReq")
                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.GSTNumber)</div>
                                    </div>

                                    <div class="form-group custom-form-group" id="divPAN">
                                        <label>Agency PAN: </label>
                                        <h4>@Html.TextBoxFor(m => m.PAN, new { @class = "form-control", @id = "txtAgencyPAN" })</h4>
                                        @Html.Hidden("PANReq")
                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PAN)</div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-5">
                    <div class="white-bg">
                        <div class="at-panel-box mb20">
                            <div class="at-panel-list">

                                <div class="form-group custom-form-group">
                                    <label>IRN Number: </label>
                                    <h4>@Html.TextBoxFor(m => m.IRNno, new { @class = "form-control", @id = "txtIRNno" })</h4>

                                    @*<div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.IRNno)</div>*@
                                </div>

                                <div class="form-group custom-form-group">
                                    <label class="required">Application Number: </label>
                                    <h4>@Html.TextAreaFor(m => m.IRNApplicationNo, new { @class = "form-control", @id = "txtIRNApplicationNo" })</h4>
                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.IRNApplicationNo)</div>
                                </div>
                                <div class="form-group custom-form-group">
                                    <label>Application Date: </label>
                                    <h4>@Html.TextBoxFor(m => m.IRNApplicationDate, new { @class = "form-control", @id = "txtIRNApplicationDate", @readonly = true })</h4>
                                    @*<div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.IRNApplicationDate)</div>*@
                                </div>
                                <div class="form-group custom-form-group">
                                    <label class="required">Attachment (Only pdf): </label>
                                    <input type="file" name="IRNAttachmentFile" id="txtIRNAttachmentFile" />
                                    @*<div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.IRNAttachmentFile)</div>*@
                                </div>
                                <div class="form-group">
                                    <a href="@Url.Action("ShowDocument","Project",new { file = Model.IRNAttachmentName, filepath = Model.IRNAttachmentPath })" target="_blank">@Model.IRNAttachmentActualName</a>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div class="row text-center mt-20">
            <input type="submit" class="btn btn-primary" value="Approve and Post" name="Button" id="btnSave" />
            <input type="submit" class="btn btn-primary" id="btnupdate" name="Button" value="Update Invoice"  formaction="ProjectInvoice"  formmethod="post"   formenctype="multipart/form-data"/>
            <a href="@Url.Action("InvoiceProcess", "CoreAccounts")" class="btn btn-primary">Close</a>
        </div>

    }
</div>
<div class="row mt30" id="gridlist">

    <div class="col-md-12">
        <div class="page-wrapper">
            <div class="custom-jsgrid-normal">
                <div id="gridInvoiceList"></div>
            </div>
        </div>
    </div>
</div>
@if (ViewBag.succMsg != null)
{
    <div id="myModal" class="modal fade modal-success" role="dialog">
        <div class="modal-dialog modal-sm">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="window.location.href='@Url.Action("InvoiceProcess", "CoreAccounts")';">&times;</button>
                    <i class="ion-android-checkmark-circle"></i>
                    <h3 class="modal-title">Saved successfully</h3>
                </div>
                <div class="modal-body">

                    <p>@ViewBag.succMsg</p>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="window.location.href='@Url.Action("InvoiceProcess", "CoreAccounts")';">Close</button>
                </div>
            </div>

        </div>
    </div>

    <script>
        $(document).ready(function () {
            $('#myModal').modal('show');
        });

    </script>

}


<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="popupFilter" class="filter-popup">
    <div class="">
        <div class="filter-content">
            <div class="white-bg">
                <div class="form-group custom-form-group">
                    <h3>Filter by</h3>
                </div>
                <div class="form-group custom-form-group">
                    @Html.DropDownListFor(m => m.SearchField.ProjectType, new SelectList(ViewBag.projecttype, "codevalAbbr", "CodeValDetail"), "Project type", new { @id = "srchPrjcttype", @class = "form-control" })
                </div>
                <div class="form-group custom-form-group">
                    @Html.TextBoxFor(m => m.SearchField.ProjectNumber, new { @id = "projectnumber", @placeholder = "Project Number", @class = "form-control" })
                </div>
                <div class="form-group custom-form-group">
                    @Html.TextBoxFor(m => m.SearchField.ProjectTitle, new { @id = "projecttitle", @placeholder = "Project Title", @class = "form-control" })
                </div>
                <div class="form-group custom-form-group">
                    @Html.TextBoxFor(m => m.SearchField.InvoiceNumber, new { @id = "invcenumber", @placeholder = "Invoice Number", @class = "form-control" })
                </div>
                <div class="form-group custom-form-group">
                    @Html.TextBoxFor(m => m.SearchField.PIName, new { @id = "srchPIName", @placeholder = "PI Name", @class = "form-control" })
                    @*@Html.DropDownListFor(m => m.SearchField.PIName, new SelectList(ViewBag.PI, "id", "name"), "PI Name", new { @id = "srchPIName", @class = "form-control" })*@
                </div>

                <div id="DivCrtdDate" class="form-group custom-form-group">
                    <label class="full-width">Invoice Date</label>
                    <label class="half-form">From Date </label>
                    <label class="half-form">To Date </label>
                    @Html.TextBoxFor(m => m.SearchField.InvoiceFromDate, new { @id = "InvoiceFromDate", @class = "form-control half-form" })
                    @Html.TextBoxFor(m => m.SearchField.InvoiceToDate, new { @id = "InvoiceToDate", @class = "form-control half-form" })
                </div>
                <div class="form-group custom-form-group mt30 text-center">
                    <a id="btnReset" href="javascript:void(0)">Reset</a>
                </div>
                <div class="form-group custom-form-group mt30 text-center">
                    <button id="btnSearch" type="button" class="btn btn-primary mr10">Search</button>
                    <button name="btnClose" type="button" class="btn btn-default">Close</button>
                </div>

            </div>
        </div>

    </div>

    <a href="javascript:void(0)" name="btnClose" class="close-btn"><i class="ion-android-cancel"></i></a>

</div>
<link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
<script>
        var errMsg = '@ViewBag.errMsg';
    @*var modelData = '@Html.Raw(Json.Encode(Model))';*@

        $(document).ready(function () {
            //get the relevant form
            //  var form = $('#frmSRB');
            $('.selectpicker').selectpicker({
                liveSearch: true
            });
            $('.selectpicker').selectpicker('refresh');
            if (errMsg != '') {
                $('#FailedAlert').html(errMsg);
                $('#Failed').modal('toggle');
                var jsonData = JSON.parse(modelData);
                $('#addnewpage').hide();
                $('#ProjectInvoice').show();
                $('#gridlist').hide();
                $('#viewdoc').hide();
                $('#popupFilter').hide();
                //fillData(jsonData);
               // calculatetaxamount();
            } else {
                $('#ProjectInvoice').hide();
                $('#viewdoc').hide();
                $('#popupFilter').hide();
            }
        });

        $("#InvoiceFromDate, #InvoiceToDate").datepicker
           ({
               dateFormat: 'dd-MM-yy',
               showStatus: true,
               showWeeks: true,
               changeYear: true,
               yearRange: '-100:+0',
               highlightWeek: true,
               numberOfMonths: 1,
               showAnim: "scale",
               showOptions: {
                   origin: ["top", "left"]
               }
           });
        $('input[id^="SearchBy_"]').change(function () {
            var value = $(this).val();
            if (value == 'SODate') {
                $('#DivSODate').show();
                $('#DivCrtdDate').hide();
            }
            else {
                $('#DivCrtdDate').show();
                $('#DivSODate').hide();
            }
            $('#FromSODate').val('');
            $('#ToSODate').val('');
            $('#InvoiceFromDate').val('');
            $('#InvoiceToDate').val('');
        });

        $('a[name="btnClose"],button[name="btnClose"]').click(function () {
            $('#popupFilter').css("display", "none");
        });
        $("#btnFilter").click(function () {
            $('#popupFilter').css("display", "Block");
        });
        //$('#ProjectInvoice').hide();
        //$('#gridlist').show();
        $('#btnaddnew').on('click', function () {
            //$('#propslnum').val();
            //$('#prpslid').hide();
            //$('#docid').hide();
            //$('#copiid').hide();
            $('#addnewpage').hide();
            $('#ProjectInvoice').show();
            $('#gridlist').hide();
            //  $('#gridsearchlist').hide();
            //$('#saveproject').show();
            //$('#updateproject').hide();
            $('#viewdoc').hide();
            // $('#createuserid').show();
            // $('#editproposal').hide();
        });

        $('#Prjcttype').prop("selectedIndex", 0);
        $('#datepickerid').val("");
        $('#txtprpslsrc').val("");
        $('#txtprjcttitle').val("");
        $('#Agncy').prop("selectedIndex", 0);
        $('#txtprpslval').val("");
        $('#txtprjctduratn').val("");
        $('#txtpersonapplied').val("");
        $('#schemename').prop("selectedIndex", 0);
        $('#txtremarks').val("");
        $('#tentstartdatepickerid').val("");
        $('#startdatepickerid').val("");
        $('#tentclosedatepickerid').val("");
        $('#closedatepickerid').val("");
        $('#Prpsalapproveddatepickerid').val("");
        $('#SOdatepickerid').val("");
        $('#inputdatepickerid').val("");

        $('#SanctionOrderDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+0' });
        $('#ProposalApprovedDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+0' });

        $('#TentativeStartdate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
        $('#Startdate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
        $('#TentativeClosedate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
        $('#Closedate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
        $('#Inputdate').datepicker({ maxDate: 0, minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+0' });

        $('#department').prop("selectedIndex", 0);
        $('#PI').prop("selectedIndex", 0);
        $('#txtPIemail').val("");

        $('#copidepartment').prop("selectedIndex", 0);
        $('#CoPI').prop("selectedIndex", 0);
        $('#txtcopiemail').val("");

        $('#doctype').prop("selectedIndex", 0);
        $('#docname').val("");

        $('#projectopening').hide();
        $('#saveproject').hide();
        $('#updateproject').hide();
        // $('#gridsearchlist').hide();
        $('#viewdoc').hide();

        function isNumberKey(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode != 46 && charCode > 31
              && (charCode < 48 || charCode > 57))
                return false;

            return true;
        }
        function noedit() {
            return false;
        }
        $("#txtRegAgencyState").change(function () {
            var State = $(this).val();
            var getstatecode = 'LoadStateCode';
            $.ajax({
                type: "POST",
                url: getstatecode,
                data: { state: State },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: function (result) {
                    $("#txtAgencyStateCode").val(result.name);
                    //  $('input[name="AgencystateId"]').val(result.id)
                },
                error: function (err) {
                    console.log("error1 : " + err);
                }
            });
            var servicetype = $("#txtservicetype").val();
            var statecode = State;
            var projecttype = $('input[name="ProjectType"]').val();
            var invoicetype = $('select[name="InvoiceType"]').val();
            var taxstatus = $('input[name="TaxStatus"]').val();
            var gettaxpercentage = 'LoadTaxpercentage';
            $.ajax({
                type: "POST",
                url: gettaxpercentage,
                data: { servicetype: servicetype },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: function (result) {
                    $("#Totaltaxpercent").val(result.name + "%");
                    $('input[name="TotalTaxpercentageId"]').val(result.id);
                    $('input[name="SACNumber"]').val(result.code);
                    $('#HiddenTotalTaxpercentage').val(result.name);
                    resetTaxRate();
                },
                error: function (err) {
                    console.log("error1 : " + err);
                }
            });
        });


$('#btnSave').on('click', function (d) {
    d.preventDefault();

    $('#btnSave').attr('disabled', 'disabled');
    $('#btnSave').attr('readonly', true);
            var validator = $("#formPI").validate();
            for (var i = 0; i < validator.errorList.length; i++) {
                console.log(validator.errorList[i]);
            }
            var isValid = $('#formPI').valid();
            var statecode = $('input[name="Agncystatecode"]').val() || 0;
            var invtype = $('select[name="InvoiceType"]').val() || 0;
            var taxstatus = $('input[name="TaxStatus"]').val() || 0;
            if (invtype == 1) {
                var foreigncurrencyvalue = parseFloat($('input[name="ForeignCurrencyValue"]').val()) || 0;
                var previnvforeigncurrencyvalue = parseFloat($('input[name="PrevinvForeignCurrencyValue"]').val()) || 0;
                var allocforeigncurrencyvalue = parseFloat($('input[name="AllocatedForeignCurrencyValue"]').val()) || 0;
                var balanceavailable = allocforeigncurrencyvalue - previnvforeigncurrencyvalue;
                if (foreigncurrencyvalue > balanceavailable) {
                    $('#MsgValidation').html("Foreign currency value cannot exceed the available foreign currency value.");
                    $('#ValidationModal').modal('toggle');
                    return false;
                    $('#btnSave').removeAttr('disabled');
                    $('#btnSave').removeAttr('readonly');
                }
            }
            if (taxstatus == 1) {
                if (invtype == 2) {
                    if (statecode <= 0) {
                        $('#MsgValidation').html("State code has to be a valid entry. Please check and resubmit");
                        $('#ValidationModal').modal('toggle');
                        $('#btnSave').removeAttr('disabled');
                        $('#btnSave').removeAttr('readonly');
                        return false;
                    }
                    $('input[name="AgencystateId"]').attr('required', 'required');
                    //$('input[name="PAN"]').attr('required', 'required');
                    //$('input[name="GSTNumber"]').removeAttr('required');
                }
                if (invtype == 4) {
                    if (statecode <= 0) {
                        $('#MsgValidation').html("State code has to be a valid entry. Please check and resubmit");
                        $('#ValidationModal').modal('toggle');
                        $('#btnSave').removeAttr('disabled');
                        $('#btnSave').removeAttr('readonly');
                        return false;
                    }
                    $('input[name="AgencystateId"]').attr('required', 'required');
                    //$('input[name="PAN"]').removeAttr('required');
                    //$('input[name="GSTNumber"]').removeAttr('required');
                }
                if (invtype == 3) {
                    if (statecode <= 0) {
                        $('#MsgValidation').html("State code has to be a valid entry. Please check and resubmit");
                        $('#ValidationModal').modal('toggle');
                        $('#btnSave').removeAttr('disabled');
                        $('#btnSave').removeAttr('readonly');
                        return false;
                    }
                    $('input[name="AgencystateId"]').attr('required', 'required');
                    //$('input[name="PAN"]').attr('required', 'required');
                    //$('input[name="GSTNumber"]').attr('required', 'required');
                }
                if (invtype == 1) {
                    $('input[name="AgencystateId"]').removeAttr('required');
                    //$('input[name="PAN"]').removeAttr('required');
                    //$('input[name="GSTNumber"]').removeAttr('required');
                }
            }
            if (!isValid)
            {
                $('#btnSave').removeAttr('disabled');
                $('#btnSave').removeAttr('readonly');
                return false;
            }
                

            if (invtype != 1) {
                var totalinvoicevalue = parseFloat($('input[name="TotalInvoiceValue"]').val());
                var Instalmentvalue = parseFloat($('input[name="Instalmentvalue"]').val()) || 0;
                var AvailableInvoicevalue = parseFloat($('input[name="AvailableBalance"]').val()) || 0;
                var thisinvoicevalue = parseFloat($('input[name="CurrentInvoiceValue"]').val());
                var taxablevalue = parseFloat($('input[name="TaxableValue"]').val());
                var Sanctionvalue = parseFloat($('input[name="Sanctionvalue"]').val());
                var ttlprojectavailbalance = parseFloat($('input[name="CurrentAvailPjctBalance"]').val()) || 0;
                if (Instalmentvalue > 0) {
                    var availableinstalmentbalance = Instalmentvalue - taxablevalue
                    if (availableinstalmentbalance < 0) {
                        $('#MsgValidation').html("Invoice value cannot exceed the current instalment.");
                        $('#ValidationModal').modal('toggle');
                        $('#btnSave').removeAttr('disabled');
                        $('#btnSave').removeAttr('readonly');
                        return false;
                    }
                }
                if (Instalmentvalue == 0) {
                    //var availableinvoicebalance = AvailableInvoicevalue + thisinvoicevalue - taxablevalue
                    //if (availableinvoicebalance < 0) {
                    //    $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms. ");
                    //    $('#ValidationModal').modal('toggle');
                    //    return false;
                    //}
                    if (taxablevalue > ttlprojectavailbalance) {
                        $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms.");
                        $('#ValidationModal').modal('toggle');
                        $('#btnSave').removeAttr('disabled');
                        $('#btnSave').removeAttr('readonly');
                        return false;
                    }
                }
                if (taxablevalue > ttlprojectavailbalance) {
                    $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms.");
                    $('#ValidationModal').modal('toggle');
                    $('#btnSave').removeAttr('disabled');
                    $('#btnSave').removeAttr('readonly');
                    return false;
                }
            }
            // var isValid = $(this).closest("form").valid();
            if (isValid)
            {
            
                $('#formPI').submit();
            }
               

        });
$('#btnupdate').on('click', function (d) {
    debugger;
            d.preventDefault();

            var isValid = $('#formPI').valid();

            var validator = $("#formPI").validate();
            for (var i = 0; i < validator.errorList.length; i++) {
                console.log(validator.errorList[i]);
            }
            var isValid = $('#formPI').valid();
            var statecode = $('input[name="Agncystatecode"]').val() || 0;
            var invtype = $('select[name="InvoiceType"]').val() || 0;
            var taxstatus = $('input[name="TaxStatus"]').val() || 0;
            if (invtype == 1) {
                var foreigncurrencyvalue = parseFloat($('input[name="ForeignCurrencyValue"]').val()) || 0;
                var previnvforeigncurrencyvalue = parseFloat($('input[name="PrevinvForeignCurrencyValue"]').val()) || 0;
                var allocforeigncurrencyvalue = parseFloat($('input[name="AllocatedForeignCurrencyValue"]').val()) || 0;
                var balanceavailable = allocforeigncurrencyvalue - previnvforeigncurrencyvalue;
                if (foreigncurrencyvalue > balanceavailable) {
                    $('#MsgValidation').html("Foreign currency value cannot exceed the available foreign currency value.");
                    $('#ValidationModal').modal('toggle');
                    return false;
                }
            }
            if (taxstatus == 1) {
                if (invtype == 2) {
                    if (statecode <= 0) {
                        $('#MsgValidation').html("State code has to be a valid entry. Please check and resubmit");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                    $('input[name="AgencystateId"]').attr('required', 'required');
                    //$('input[name="PAN"]').attr('required', 'required');
                    //$('input[name="GSTNumber"]').removeAttr('required');
                }
                if (invtype == 4) {
                    if (statecode <= 0) {
                        $('#MsgValidation').html("State code has to be a valid entry. Please check and resubmit");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                    $('input[name="AgencystateId"]').attr('required', 'required');
                    //$('input[name="PAN"]').removeAttr('required');
                    //$('input[name="GSTNumber"]').removeAttr('required');
                }
                if (invtype == 3) {
                    if (statecode <= 0) {
                        $('#MsgValidation').html("State code has to be a valid entry. Please check and resubmit");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                    $('input[name="AgencystateId"]').attr('required', 'required');
                    //$('input[name="PAN"]').attr('required', 'required');
                    //$('input[name="GSTNumber"]').attr('required', 'required');
                }
                if (invtype == 1) {
                    $('input[name="AgencystateId"]').removeAttr('required');
                    //$('input[name="PAN"]').removeAttr('required');
                    //$('input[name="GSTNumber"]').removeAttr('required');

                }
            }
            if (!isValid)
                return false;

            if (invtype != 1) {
                var totalinvoicevalue = parseFloat($('input[name="TotalInvoiceValue"]').val());
                var Instalmentvalue = parseFloat($('input[name="Instalmentvalue"]').val()) || 0;
                var AvailableInvoicevalue = parseFloat($('input[name="AvailableBalance"]').val()) || 0;
                var thisinvoicevalue = parseFloat($('input[name="CurrentInvoiceValue"]').val());
                var taxablevalue = parseFloat($('input[name="TaxableValue"]').val());
                var Sanctionvalue = parseFloat($('input[name="Sanctionvalue"]').val());
                var ttlprojectavailbalance = parseFloat($('input[name="CurrentAvailPjctBalance"]').val()) || 0;
                if (Instalmentvalue > 0) {
                    var availableinstalmentbalance = Instalmentvalue - taxablevalue
                    if (availableinstalmentbalance < 0) {
                        $('#MsgValidation').html("Invoice value cannot exceed the current instalment.");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                }
                if (Instalmentvalue == 0) {
                    //var availableinvoicebalance = AvailableInvoicevalue + thisinvoicevalue - taxablevalue
                    //if (availableinvoicebalance < 0) {
                    //    $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms. ");
                    //    $('#ValidationModal').modal('toggle');
                    //    return false;
                    //}
                    if (taxablevalue > ttlprojectavailbalance) {
                        $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms.");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                }
                if (taxablevalue > ttlprojectavailbalance) {
                    $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms.");
                    $('#ValidationModal').modal('toggle');
                    return false;
                }
            }
            // var isValid = $(this).closest("form").valid();
            if (isValid) {
                var Model = formToJSON($('#formPI'));
                var Details = { "model": Model }
                var searchdata = JSON.stringify(Details);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ProjectInvoice", "CoreAccounts")',
                    async: true,
                    //data: Model,
                    //async: true,

                    contentType: 'application/json',
                    dataType: "json",
                    data: searchdata,
                    success: function (result) {
                        if (result[0].Value == "Success") {
                            var msg = "Invoice has been created successfully";
                            var url = '@Url.Action("InvoiceProcess", "CoreAccounts")?msg=' + msg;
                            window.location.href = url;
                            //$('#alertSuccess').html("LC has been created successfully.");
                            //$('#Success').modal('toggle');

                        } else if (result[0].Value == "Updated") {
                            var msg = "Invoice has been updated successfully."
                            var url = '@Url.Action("InvoiceProcess", "CoreAccounts")?msg=' + msg;
                            window.location.href = url;
                            //$('#alertSuccess').html("LC has been updated successfully.");
                            //$('#Success').modal('toggle');
                        }
                        else if (result[0].Value == "Not Updated") {
                            var msg = "server not responding .try again after sometime"
                            var url = '@Url.Action("InvoiceProcess", "CoreAccounts")?msg=' + msg;
                            window.location.href = url;
                            //$('#alertSuccess').html("LC has been updated successfully.");
                            //$('#Success').modal('toggle');
                        }
                    }
                });
            }
            //$('#formPI').submit();

        });
        function formToJSON(f) {
            var fd = $(f).serializeArray();
            var d = {};
            $(fd).each(function () {
                if (d[this.name] !== undefined) {
                    if (!Array.isArray(d[this.name])) {
                        d[this.name] = [d[this.name]];
                    }
                    d[this.name].push(this.value);
                } else {
                    d[this.name] = this.value;
                }
            });
            return d;
        }
        $('#btnDraft').on('click', function (d) {
            d.preventDefault();
            var isValid = $('#formPI').valid();
            if (!isValid)
                return false;
            // var isValid = $(this).closest("form").valid();

            if (isValid)
                $('#formPI').submit();

        });


        function ValidateNumberOnly(e) {
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                return false;
            }
        }
        function ValidateDecimalOnly(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode != 46 && charCode > 31
              && (charCode < 48 || charCode > 57))
                return false;

            return true;
        }
        $("#txtservicetype").change(function () {
            var servicetype = $(this).val();
            var gettaxpercentage = 'LoadTaxpercentage';
            $.ajax({
                type: "POST",
                url: gettaxpercentage,
                data: { servicetype: servicetype },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: function (result) {
                    $("#Totaltaxpercent").val(result.name + "%");
                    $('input[name="TotalTaxpercentageId"]').val(result.id);
                    //  $("#txtSACNumber").val(result.code);
                    $('input[name="SACNumber"]').val(result.code);
                    $('#HiddenTotalTaxpercentage').val(result.name);
                    resetTaxRate();
                },
                error: function (err) {
                    console.log("error1 : " + err);
                }
            });
        });
       function loadServiceDetails(){
            $("#txtservicetype").each(function () {
                var servicetype = $(this).val();
                var statecode = $('input[name="Agncystatecode"]').val();
                var projecttype = $('input[name="ProjectType"]').val();
                var invoicetype = $('select[name="InvoiceType"]').val();
                var taxstatus = $('input[name="TaxStatus"]').val();
                var gettaxpercentage = 'LoadTaxpercentage';
                $.ajax({
                    type: "POST",
                    url: gettaxpercentage,
                    data: { servicetype: servicetype },
                    //contentType: "application/json; charset=utf-8",
                    //dataType: "json",
                    success: function (result) {
                        $("#Totaltaxpercent").val(result.name + "%");
                        $('input[name="TotalTaxpercentageId"]').val(result.id);
                        //  $("#txtSACNumber").val(result.code);
                        $('input[name="SACNumber"]').val(result.code);
                        $('#HiddenTotalTaxpercentage').val(result.name);
                        resetTaxRate();
                    },
                    error: function (err) {
                        console.log("error1 : " + err);
                    }
                });
            });
        }
        //function calculatetaxamount() {
        //    var taxablevalue = parseFloat($('input[name="TaxableValue"]').val());
        //    var statecode = $("#txtRegAgencyState").val(); //$('input[name="Agncystatecode"]').val();
        //    var totaltaxpercent = $("#Totaltaxpercent").val();
        //    if (taxablevalue != null && taxablevalue != "") {
        //        var totaltaxpercentvalue = parseInt(totaltaxpercent, 10);
        //        if (statecode == 33) {
        //            var Totalamount = taxablevalue * totaltaxpercentvalue / 100 || 0;
        //            var CGSTamount = (Totalamount / 2).toFixed(2);
        //            var SGSTamount = (Totalamount / 2).toFixed(2);
        //            var IGSTamount = 0;
        //            $("#CGSTamount").val(CGSTamount);
        //            $("#SGSTamount").val(SGSTamount);
        //            $("#IGSTamount").val(IGSTamount);
        //            $("#Totaltaxamount").val((Totalamount).toFixed(2));
        //            var taxamount = parseFloat(Totalamount);
        //            var totalinvoicevalue = taxablevalue + taxamount;
        //            $("#totalinvoicevalue").html((totalinvoicevalue).toFixed(0));
        //            $('input[name="TotalInvoiceValue"]').val((totalinvoicevalue).toFixed(0));
        //        }
        //        if (statecode != 33) {
        //            var Totalamount = taxablevalue * totaltaxpercentvalue / 100 || 0;
        //            $("#CGSTamount").val(0);
        //            $("#SGSTamount").val(0);
        //            $("#IGSTamount").val((Totalamount).toFixed(2));
        //            $("#Totaltaxamount").val((Totalamount).toFixed(2));
        //            var taxamount = parseFloat(Totalamount);
        //            var totalinvoicevalue = taxablevalue + taxamount;
        //            $("#totalinvoicevalue").html((totalinvoicevalue).toFixed(0));
        //            $('input[name="TotalInvoiceValue"]').val((totalinvoicevalue).toFixed(0));
        //        }
        //    }
        //    if (taxablevalue == null || taxablevalue == "") {
        //        $("#CGSTamount").val("0");
        //        $("#SGSTamount").val("0");
        //        $("#IGSTamount").val("0");
        //        $("#Totaltaxamount").val("0");
        //        var taxamount = 0;
        //        var totalinvoicevalue = taxablevalue + taxamount;
        //        $("#totalinvoicevalue").html((totalinvoicevalue).toFixed(0));
        //        $('input[name="TotalInvoiceValue"]').val((totalinvoicevalue).toFixed(0));
        //    }
    //}
       function calculatetaxamount() {

           var taxablevalue = $('input[name="TaxableValue"]').val();
           var statecode = $("#txtRegAgencyState").val() || 0;
           var totaltaxpercent = $("#Totaltaxpercent").val();
           if (taxablevalue != null && taxablevalue != "") {
               var totaltaxpercentvalue = parseInt(totaltaxpercent, 10);
               if (statecode == 33) {
                   var cgstpercentage = $("#CGSTpercent").val();
                   var sgstpercentage = $("#SGSTpercent").val();
                   //var cgstpercent = parseInt(cgstpercentage, 10);
                   //var sgstpercent = parseInt(sgstpercentage, 10);
                   var cgstpercent = parseFloat(cgstpercentage);
                   var sgstpercent = parseFloat(sgstpercentage);
                   //var Totalamount = parseFloat(taxablevalue * totaltaxpercentvalue / 100).toFixed(2) || 0;
                   //var CGSTamount = Totalamount / 2;
                   //var SGSTamount = Totalamount / 2;
                   var CGSTamount = Math.ceil(taxablevalue * cgstpercent / 100) || 0;
                   var SGSTamount = Math.ceil(taxablevalue * sgstpercent / 100) || 0;
                   var Totalamount = CGSTamount + SGSTamount;
                   var IGSTamount = 0;
                   $("#CGSTamount").val(CGSTamount);
                   $("#SGSTamount").val(SGSTamount);
                   $("#IGSTamount").val(IGSTamount);
                   $("#Totaltaxamount").val(Totalamount);
                   var taxamount = parseFloat($("#Totaltaxamount").val());
                   var totalinvoicevalue = parseFloat(taxablevalue) + taxamount;
                   totalinvoicevalue = Math.ceil(totalinvoicevalue)
                   $("#totalinvoicevalue").html(totalinvoicevalue);
                   $('input[name="TotalInvoiceValue"]').val(totalinvoicevalue);
               }
               if (statecode != 33) {
                   //var Totalamount = (taxablevalue * totaltaxpercentvalue / 100).toFixed(2) || 0;
                   var Totalamount = Math.ceil(taxablevalue * totaltaxpercentvalue / 100) || 0;
                   $("#CGSTamount").val(0);
                   $("#SGSTamount").val(0);
                   $("#IGSTamount").val(Totalamount);
                   $("#Totaltaxamount").val(Totalamount);
                   var taxamount = parseFloat($("#Totaltaxamount").val());
                   var totalinvoicevalue = parseFloat(taxablevalue) + taxamount;
                   totalinvoicevalue = Math.ceil(totalinvoicevalue)
                   $("#totalinvoicevalue").html(totalinvoicevalue);
                   $('input[name="TotalInvoiceValue"]').val(totalinvoicevalue);
               }
           }
           if (taxablevalue == null || taxablevalue == "") {
               $("#CGSTamount").val("0");
               $("#SGSTamount").val("0");
               $("#IGSTamount").val("0");
               $("#Totaltaxamount").val("0");
           }
       }
        function validateforeigncurrency() {

            var foreigncurrencyvalue = parseFloat($('input[name="ForeignCurrencyValue"]').val()) || 0;
            var previnvforeigncurrencyvalue = parseFloat($('input[name="PrevinvForeignCurrencyValue"]').val()) || 0;
            var allocforeigncurrencyvalue = parseFloat($('input[name="AllocatedForeignCurrencyValue"]').val()) || 0;
            var balanceavailable = allocforeigncurrencyvalue - previnvforeigncurrencyvalue;
            if (foreigncurrencyvalue > balanceavailable) {
                $('#MsgValidation').html("Foreign currency value cannot exceed the available foreign currency value.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
        }

        $("#SelCurr").change(function () {
            var currencyid = $(this).val();
            var getcurrencycode = 'GetCurrencyCodeById';
            $.ajax({
                type: "POST",
                url: getcurrencycode,
                data: { CurrencyId: currencyid },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: function (result) {
                    $('input[name="CurrencyCode"]').val(result);
                },
                error: function (err) {
                    console.log("error1 : " + err);
                }
            });
        });
        $("#taxablevalue").change(function () {
            var servicetype = $(this).val();
            var invtype = $('select[name="InvoiceType"]').val();
            if (invtype != 1) {
                var totalinvoicevalue = parseFloat($('input[name="TotalInvoiceValue"]').val());
                var Instalmentvalue = parseFloat($('input[name="Instalmentvalue"]').val()) || 0;
                var AvailableInvoicevalue = parseFloat($('input[name="AvailableBalance"]').val()) || 0;
                var thisinvoicevalue = parseFloat($('input[name="CurrentInvoiceValue"]').val());
                var taxablevalue = parseFloat($('input[name="TaxableValue"]').val());
                var Sanctionvalue = parseFloat($('input[name="Sanctionvalue"]').val());
                var ttlprojectavailbalance = parseFloat($('input[name="CurrentAvailPjctBalance"]').val()) || 0;
                if (Instalmentvalue > 0) {
                    var availableinstalmentbalance = Instalmentvalue - taxablevalue
                    if (availableinstalmentbalance < 0) {
                        $('#MsgValidation').html("Invoice value cannot exceed the current instalment.");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                }
                if (Instalmentvalue == 0) {
                    //var availableinvoicablebalance = AvailableInvoicevalue;
                    //if (availableinvoicablebalance < taxablevalue) {
                    //    $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms. ");
                    //    $('#ValidationModal').modal('toggle');
                    //    return false;
                    //}
                    if (taxablevalue > ttlprojectavailbalance) {
                        $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms.");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                }
                if (taxablevalue > ttlprojectavailbalance) {
                    $('#MsgValidation').html("Your invoice value is more than the allowed limit as per the sanction order terms.");
                    $('#ValidationModal').modal('toggle');
                    return false;
                }

            }
        });

        function ResetForm() {
            $('#srchPrjcttype').val('');
            $('#invcenumber').val('');
            $('#projectnumber').val('');
            $('#srchPIName').val('');
            $('#projecttitle').val('');
            $('#InvoiceFromDate').val('');
            $('#InvoiceToDate').val('');
        }
        $('#btnReset').click(function () {
            ResetForm();
            getData(1);
        });
        $('#btnSearch').on('click', function () {
            // var token = $("input[name=__RequestVerificationToken]").val();
            getData();

        });
        var searchInvoiceURL = 'SearchInvoiceList';
        function getData() {
            var Projecttype = $('#srchPrjcttype').val();
            var Invoicenumber = $('#invcenumber').val();
            var Projectnumber = $('#projectnumber').val();
            var NameofPI = $('#srchPIName').val();
            var prjcttitle = $('#projecttitle').val();
            //  var SearchBy = $('input[name^="SearchField.SearchBy"]:checked').val();

            var FromDate = $('#InvoiceFromDate').val();
            var ToDate = $('#InvoiceToDate').val();

            if (Projecttype == "") {
                Projecttype = 0;
            }
            if (Projectnumber == "") {
                Projectnumber = null;
            }
            if (Invoicenumber == "") {
                Invoicenumber = null;
            }
            if (NameofPI == "") {
                NameofPI = null;
            }
            if (prjcttitle == "") {
                prjcttitle = null;
            }
            if (FromDate == "") {
                FromDate = null;
            }
            if (ToDate == "") {
                ToDate = null;
            }
            //  var searchdata = { "__RequestVerificationToken": token, "ProjectType": Projecttype,"ProposalNumber": Proposalnumber, "PIname": PIName, "Searchby": SearchBy, "FromSOdate": FromSODate, "ToSOdate": ToSODate, "Fromdate": FromDate, "Todate": ToDate };
            var searchdata = {
                ProjectType: Projecttype,
                InvoiceNumber: Invoicenumber,
                InvoiceFromDate: FromDate,
                InvoiceToDate: ToDate,
                ProjectNumber: Projectnumber,
                PIName: NameofPI,
                ProjectTitle: prjcttitle
            };

            $.ajax({
                type: "GET",
                url: searchInvoiceURL,
                data: searchdata,
                //data: { "ProjectType": Projecttype, "ProposalNumber": Proposalnumber, "FromSOdate": FromSODate, "ToSOdate": ToSODate, },
                contentType: "application/x-www-form-urlencoded",
                // dataType: "json",
                success: function (result) {
                    // dataProposal = result;
                    $("#gridInvoiceList").jsGrid({ data: result });
                    $('#ProjectInvoice').hide();
                    $('#gridlist').show();
                    $('#popupFilter').hide();

                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });

        }
        //function fillData(result) {
        //    $('#ProjectInvoice').show();
        //    $('#gridlist').hide();
        //    $("#Invdate").html(result.Invoicedatestrng);
        //    $('input[name="Invoicedatestrng"]').html(result.Invoicedatestrng);
        //    $('input[name="Invoicedatestrng"]').val(result.Invoicedatestrng);
        //    $('input[name="InvoiceDate"]').val(result.InvoiceDate);
        //    $('input[name="InvoiceId"]').val(result.InvoiceId);
        //    $('input[name="InvoiceNumber"]').val(result.InvoiceNumber);
        //    $('input[name="ProjectID"]').val(result.ProjectID);
        //    $('input[name="ProjectType"]').val(result.ProjectType);
        //    $('select[name="ServiceType"]').val(result.ServiceType);
        //    $('input[name="TaxStatus"]').val(result.TaxStatus);

        //    $('#InvoiceType').val(result.InvoiceType);
        //    $('input[name="AvailableBalance"]').val(result.AvailableBalance);
        //    $('input[name="Sanctionvalue"]').val(result.Sanctionvalue);
        //    $('select[name="AgencystateId"]').val(result.AgencystateId);
        //    $('#txtCommunicationAddress').val(result.CommunicationAddress);
        //    $('#txtSponsoringAgencyName').val(result.SponsoringAgencyName);
        //    $('#txtRegAgencyState').val(result.AgencystateId);
        //    $("#txtRegAgencyState").val(result.Agncystatecode);
        //    $('#txtGSTIN').val(result.GSTNumber);
        //    $('#txtAgencyPAN').val(result.PAN);
        //    $('#txttotalreceiptval').html(result.TotalReceiptValue);
        //    $('#txttotalopenreceiptval').html(result.TotalOpenBalReceiptValue);
        //    $('#txttotalopeninvval').html(result.TotalOpenInvoiceValue);

        //    $('input[name="PONumber"]').val(result.PONumber);
        //    $('#txtprojectnumber').html(result.ProjectNumber);

        //    $('#txtPIname').html(result.NameofPI);
        //    $('#txtPIdepartment').html(result.PIDepartmentName);
        //    $('#txtsanctionordernumber').html(result.SanctionOrderNumber);
        //    $('#txtsanctionvalue').html(result.Sanctionvalue);
        //    $('#txtcurrentfinyear').html(result.CurrentFinancialYear);
        //    //$('#txtinvoicetype').val(result.InvoiceTypeName);
        //    //  $('#txtservicetype').val(result.ServiceTypeName);
        //    $('#txtSACNumber').val(result.SACNumber);

        //    $('#txtdescriptionofservice').val(result.DescriptionofServices);
        //    $('#taxablevalue').val(result.TaxableValue);
        //    $('#txtForeignCurrencyValue').val(result.ForeignCurrencyValue);
        //    $('#AllocatedForeignCurrencyValue').val(result.AllocatedForeignCurrencyValue);
        //    $('#PrevinvForeignCurrencyValue').val(result.PrevinvForeignCurrencyValue);
        //    //$('#txtCurrencyCode').text(result.CurrencyCode);
        //    //$('#CurrencyCode').val(result.CurrencyCode);
        //    $('input[name="CurrencyCode"]').val(result.CurrencyCode);
        //    $('#SelCurr').val(result.SelCurr);
        //    $('#txtForeignCurrencyValue').val(result.ForeignCurrencyValue);
        //    $('#totalinvoicevalue').val(result.TotalInvoiceValue);
        //    $('input[name="TotalInvoiceValue"]').val(result.TotalInvoiceValue);
        //    $('#totalinvoicevalue').html(result.TotalInvoiceValue);
        //    $('#instalmentnumber').val(result.Instalmentnumber);
        //    $('input[name="Instlmntyr"]').val(result.Instlmntyr);
        //    $('#SGSTamount').val(result.SGST);
        //    $('#SGSTpercent').val(result.SGSTPercentage);
        //    $('input[name="SGSTPercentage"]').val(result.SGSTPercentage);
        //    $('#CGSTamount').val(result.CGST);
        //    $('#CGSTpercent').val(result.CGSTPercentage);
        //    $('input[name="CGSTPercentage"]').val(result.CGSTPercentage);
        //    $('#IGSTamount').val(result.IGST);
        //    $('#IGSTpercent').val(result.IGSTPercentage);
        //    $('input[name="IGSTPercentage"]').val(result.IGSTPercentage);
        //    // $('#Totaltaxamount').val(result.TotalTaxValue);
        //    $('input[name="TotalTaxValue"]').val(result.TotalTaxValue);
        //    $('#Totaltaxpercent').val(result.TotalTaxpercentage);

        //    $('input[name="SponsoringAgency"]').val(result.SponsoringAgency);

        //    $('#ForeignAgencyPlace').val(result.ForeignAgencyPlace);
        //    $('#IndianSEZTaxCategory').val(result.IndianSEZTaxCategory);
        //    changeInvoiceType();
        //    //$('#txtAgencyRegname').html(result.SponsoringAgencyName);
        //    //$('#txtAgencyAddress').html(result.Agencyregaddress);
        //    //$('#txtAgencyDistrict').html(result.Agencydistrict);
        //    //$('#txtPincode').html(result.AgencyPincode);

        //    //$('#txtState').html(result.Agencystate);
        //    //$('#txtStatecode').html(result.Agencystatecode);
        //    //$('#txtGSTIN').html(result.GSTNumber);
        //    //$('#txtPAN').html(result.PAN);

        //    //$('#txtTAN').html(result.TAN);
        //    //$('#txtAgencycontactperson').html(result.Agencycontactperson);
        //    //$('#txtAgencypersonemail').html(result.AgencycontactpersonEmail);
        //    //$('#txtAgencypersonmobile').html(result.Agencycontactpersonmobile);

        //    //$('#txtBankname').html(result.BankName);
        //    //$('#txtBankAccountNumber').html(result.BankAccountNumber);
        //    //$('#txtAgencypersonemail').html(result.AgencycontactpersonEmail);
        //    //$('#txtAgencypersonmobile').html(result.Agencycontactpersonmobile);
        //    //$('#Availablebalanceamount').html(result.AvailableBalance);
        //}


        function resetByInvoiceType() {
            var invType = $('#InvoiceType').val() || 0;
            if (invType == 1) {
                $('div[id^="divExp_"]').removeClass('dis-none');
                $('div[id^="divNonExp_"]').addClass('dis-none');
            } else {
                $('div[id^="divNonExp_"]').removeClass('dis-none');
                $('div[id^="divExp_"]').addClass('dis-none');
            }
            if (invType == 2) {
                $('#divIndianSEZ_TaxCategory').removeClass('dis-none');
            } else {
                $('#divIndianSEZ_TaxCategory').addClass('dis-none');
            }
        }
        $('#IndianSEZTaxCategory').change(function () {
            resetTaxRate();
        });
        $("#InvoiceType").change(function () {
            changeInvoiceType();
            $('#IndianSEZTaxCategory').val('');
        });
        function changeInvoiceType() {
            resetByInvoiceType();
            var type = $("#InvoiceType").val() || 0;
            var pan = $('#txtAgencyPAN').val() || '';
            var tan = $('#TAN').val() || '';
            var projecttype = $('input[name="ProjectType"]').val();
            if (type != 1) {
                if (pan == '') {
                    $('#TANReq').val('true');
                } else {
                    $('#TANReq').val('false');
                }
                if (tan == '') {
                    $('#PANReq').val('true');
                } else {
                    $('#PANReq').val('false');
                }
                if (type != 4) {
                    $('#GSTNReq').val('true');
                } else {
                    $('#GSTNReq').val('false');
                }
            }
            else {
                $('#TANReq').val('false');
                $('#PANReq').val('false');
                $('#GSTNReq').val('false');
            }
            if (type == 0 || type == null) {
                $('#TANReq').val('false');
                $('#PANReq').val('false');
                $('#GSTNReq').val('false');
            }
            resetTaxRate();
            if (projecttype == 1)
            {
                $('#Agencydistrict').removeAttr('required');
                $('#AgencyPincode').removeAttr('required');
                $('#txtCommunicationAddress').removeAttr('required');
                $('#AgencycontactpersonEmail').removeAttr('required');
                $('#agncydstrlbl').removeClass('required');
                $('#agncypincodelbl').removeClass('required');
            }
            if(projecttype == 2)
            {
                $('#Agencydistrict').attr('required', 'required');
                $('#AgencyPincode').attr('required', 'required');
                $('#txtCommunicationAddress').attr('required', 'required');
                $('#AgencycontactpersonEmail').attr('required', 'required');
                $('#agncydstrlbl').addClass('required');
                $('#agncypincodelbl').addClass('required');
            }

        }
        $('#txtAgencyPAN').blur(function () {
            var type = $('#InvoiceType').val() || 0;
            var pan = $('#txtAgencyPAN').val() || '';
            if (type != 1) {
                if (pan == '') {
                    $('#TANReq').val('true');
                } else {
                    $('#TANReq').val('false');
                }
            }
            if (type == 0 || type == null)
            {
                $('#TANReq').val('false');
            }
        });
        $('#TAN').blur(function () {
            var type = $('#InvoiceType').val() || 0;
            var tan = $('#TAN').val() || '';
            if (type != 1) {
                if (tan == '') {
                    $('#PANReq').val('true');
                } else {
                    $('#PANReq').val('false');
                }
            }
            if (type == 0 || type == null) {
                $('#TANReq').val('false');
            }
        });
        function resetTaxRate() {
            var taxrate = parseFloat($("#HiddenTotalTaxpercentage").val()) || 0;
            var statecode = $("#txtRegAgencyState").val() || 0;
            var projecttype = $('input[name="ProjectType"]').val();
            var invoicetype = $('#InvoiceType').val();
            var taxstatus = $('input[name="TaxStatus"]').val();
            var indSEZTaxStatus = $('#IndianSEZTaxCategory').val() || 0;
            if (projecttype == 2) {
                //if (taxstatus == 2 || taxstatus == 3 || taxstatus == 4 || indSEZTaxStatus == 2 || invoicetype == 1 || invoicetype == 5) {
                if (invoicetype == 4 || invoicetype == 3 || indSEZTaxStatus == 1) {
                    if (statecode == 33) {
                        var spitAmt = 0;
                        if (taxrate > 0)
                            spitAmt = taxrate / 2;
                        $("#CGSTpercent").val(spitAmt + "%");
                        $("#SGSTpercent").val(spitAmt + "%");
                        $("#IGSTpercent").val("NA");
                        $("#Totaltaxpercent").val(taxrate + "%");
                    } else {
                        $("#CGSTpercent").val("NA");
                        $("#SGSTpercent").val("NA");
                        $("#IGSTpercent").val(taxrate + "%");
                        $("#Totaltaxpercent").val(taxrate + "%");
                    }
                }
                else {
                    $("#CGSTpercent").val(0 + "%");
                    $("#SGSTpercent").val(0 + "%");
                    $("#IGSTpercent").val("NA");
                    $("#Totaltaxpercent").val(0 + "%");
                }
            }
            if (projecttype == 1) {
                $("#CGSTpercent").val(0 + "%");
                $("#SGSTpercent").val(0 + "%");
                $("#IGSTpercent").val("NA");
                $("#Totaltaxpercent").val(0 + "%");
            }
            calculatetaxamount();
        }
</script>
