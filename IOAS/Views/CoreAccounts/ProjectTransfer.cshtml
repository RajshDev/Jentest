@model IOAS.Models.ProjectTransferModel
@{
    ViewBag.Title = "Direct Fund Transfer";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("ProjectTransfer", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formPFT", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Direct Fund Transfer</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.ProjectTransferId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>

            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.TransferNumber)</h4>
                        @Html.HiddenFor(m => m.ProjectTransferId)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                </ul>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">

                        
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-6">
                                    <div class="bl-lg-panel-box">
                                        <div class="bl-lg-panel-box-hd mb-null">
                                            <div>
                                                <h3 class="fn-s-bold">From details</h3>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mt-md">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Project</label>
                                                        @Html.TextBox("DebitProject", Model.DebitProject, new { @class = "form-control", @id = "DebitProject" })
                                                        @Html.TextBox("DebitProjectId", Model.DebitProjectId, new { @class = "form-control dis-none", @id = "DebitProjectId" })
                                                        @Html.ValidationMessage("DebitProjectId")
                                                    </div>

                                                </div>
                                                
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Bank</label>
                                                        @Html.DropDownListFor(m => m.DebitBank, new SelectList(ViewBag.BankList, "id", "name"), "Select any", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.DebitBank)
                                                        @Html.HiddenFor(m => m.BankHeadId)
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mt-md">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Amount</label>
                                                        @Html.TextBoxFor(m => m.DebitAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "changeCreditAmount()" })
                                                        @Html.ValidationMessageFor(m => m.DebitAmount)
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Debit Ledger</label>
                                                        @Html.DropDownListFor(m => m.CreditLedgerId, new SelectList(ViewBag.CreditLedger, "id", "name"), "Select any", new { @class = "form-control",@id= "CreditLedgerId" })
                                                        @Html.ValidationMessageFor(m => m.CreditLedgerId)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-6">
                                    <div class="bl-lg-panel-box">
                                        <div class="bl-lg-panel-box-hd mb-null">
                                            <div>
                                                <h3 class="fn-s-bold">To details</h3>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mt-md">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Project</label>
                                                        @Html.TextBox("CreditProject", Model.CreditProject, new { @class = "form-control", @id = "CreditProject" })
                                                        @Html.TextBox("CreditProjectId", Model.CreditProjectId, new { @class = "form-control dis-none", @id = "CreditProjectId" })
                                                        @Html.ValidationMessage("CreditProjectId")
                                                    </div>
                                                </div>
                                                
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Bank</label>
                                                        @Html.DropDownListFor(m => m.CreditBank, new SelectList(ViewBag.BankList, "id", "name"), "Select any", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.CreditBank)
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mt-md">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Amount</label>
                                                        @Html.TextBoxFor(m=>m.CreditAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(m=>m.CreditAmount)
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Credit Ledger</label>
                                                        @Html.DropDownListFor(m => m.DebitLedgerId, new SelectList(ViewBag.DebitLedger, "id", "name"), "Select any", new { @class = "form-control", @id = "DebitLedgerId" })
                                                        @Html.ValidationMessageFor(m => m.DebitLedgerId)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-12 col-sm-12 m-b-sm">
                                <div class="page-wrapper mt-md">
                                    <div class="col-md-6">
                                        <div class="form-group custom-form-group">
                                            <label>Remarks</label>
                                            @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @rows = "3" })
                                            @Html.ValidationMessageFor(m => m.Remarks)
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group custom-form-group">
                                            <label>Attachements</label>
                                            <input type="file" id="Document" name="Document">
                                            @Html.ValidationMessage("Document")
                                            <a href="@Url.Action("ShowDocument","Project",new { file = Model.DocumentName, filepath = Model.DocumentPath })" target="_blank">@Model.DocumentActualName</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                        </div>
                    </div>
                </div>
                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("ProjectTransferList", "CoreAccounts")';">Close</button>
                </div>
            </div>
        </div>
    </div>

}
<div id="popup"></div>
<script>
    $('#SourceEmailDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy' }).attr('readonly', 'readonly');

    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#srchFromDate, #srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);

    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
        applyProjectAutoComplete($('#CreditProject'), $('#CreditProjectId'));
        applyProjectAutoComplete($('#DebitProject'), $('#DebitProjectId'));
        CalculatePaymentValue();
    });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function changeCreditAmount() {
        $('#CreditAmount').val($('#DebitAmount').val())
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var ttlCrAmt = parseFloat($('#CreditAmount').val()) || 0;
        var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
        //var ttlGSTElg = parseFloat($('#GSTOffsetTotal').val()) || 0;
        var debtPId = parseInt($('#DebitProjectId').val()) || 0;
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var pId = parseInt($(this).find('input[name$=".ProjectId"]').val()) || 0;
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (debtPId != pId)
                msg = "Please select debit project commitment."
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        //var voucherVal = (ttlCrAmt - ttlGSTElg).toFixed(2);
        if (ttlCrAmt != commitmentAmt) {
            msg = 'There is a mismatch between the payment value and allocated commitment value. Please update the value to continue.';
        }
        return msg;
    }
    function formSave() {
         var validationMsg = ValidateCommitment();
            if (validationMsg != 'valid') {
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
                return false;
            }
            var isValid = $('#formPFT').valid();
        if (!isValid)
            return false;

        $('#formPFT').submit();
    }

    $('input[name$="Amount"]').on("copy cut paste drop", function () {
        return false;
    });

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            var projId = $('#DebitProjectId').val();
            $('#srchHiddenProjectId').val(projId);
            if (projId == '')
                return false;
            if (content == '') {
                searchCommitment(projId);
            }
        }
        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }
    function loadLedger(Credit_f, ICSR_f) {

        $.ajax({
            type: "POST",
            data: JSON.stringify({ 'Credit_f': Credit_f, 'ICSR_f': ICSR_f }),
            url: '@Url.Action("LoadIcsrohLedger", "CoreAccounts")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (locationdata) {
                var select;
                if (Credit_f == true)
                    select = $("#CreditLedgerId");
                else
                    select = $("#DebitLedgerId");
                select.empty();
                $.each(locationdata, function (index, itemData) {
                    select.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name
                    }));
                });
                select.selectpicker('refresh');
            },
        })

    }

    function CheckisICSRproject(Credit_f, ProjId) {
        $.ajax({
            type: "POST",
            data: JSON.stringify({ 'ProjId': ProjId }),
            url: '@Url.Action("CheckIcsrohProject", "CoreAccounts")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                loadLedger(Credit_f, result);
            },
        })
    }


    $("#CreditProject").change(function () {
        var ProjId = $("#CreditProjectId").val();
        if (ProjId == null || ProjId == '' || ProjId == undefined) {
            ProjId = 0;
        }
        $.getJSON("@Url.Action("Loadbankbyproject", "Project")", { ProjectId: ProjId },
       function (locationdata) {
           var select = $("#CreditBank");
           select.empty();
           $.each(locationdata, function (index, itemData) {

               select.append($('<option/>', {
                   value: itemData.id,
                   text: itemData.name

               }));
           });
           select.selectpicker('refresh');
       });

        CheckisICSRproject(false, ProjId);
    });

    $("#DebitProject").change(function () {

        var ProjId = $("#DebitProjectId").val();
        if (ProjId == null || ProjId == '' || ProjId == undefined) {
            ProjId = 0;
        }
        $.getJSON("@Url.Action("Loadbankbyproject", "Project")", { ProjectId: ProjId },
       function (locationdata) {
           var select = $("#DebitBank");
           select.empty();
           $.each(locationdata, function (index, itemData) {

               select.append($('<option/>', {
                   value: itemData.id,
                   text: itemData.name

               }));
           });
           select.selectpicker('refresh');
       });

        CheckisICSRproject(true, ProjId);


    });


    $('#DebitBank').on("change", function () {
        var BankHeadId = $(this).val();
        $("#BankHeadId").val(BankHeadId);
        $("#srchProjectType").val(1);
        EmptyCommitmentSrchList()
        EmptyCommitmentSelList()

        $.getJSON("@Url.Action("LoadProjecttitlebybankid", "Project")", { projecttype: 1, bankid: BankHeadId },
        function (locationdata) {
            var select = $("#srchProjectNumber");
            select.empty();

            $.each(locationdata, function (index, itemData) {

                select.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name

                }));
            });
            select.selectpicker('refresh');
        });

    });



    function EmptyCommitmentSelList() {
        $('#tbodyCommitmentSelList tr').not(':first').remove();
        $('#tbodyCommitmentSelList tr td').not(':last').not(':nth-last-child(2)').html('');
        //$('#tbodyCommitmentSelList tr td:last').find("input").val("");
        $('#tbodyCommitmentSelList tr').find("input[name!='CommitmentDetail.Index']").val("");
        $('#CommitmentAmount').val('');
    }
    function EmptyCommitmentSrchList() {
        $('#tbodyCommitmentSrchList tr').not(':first').remove();
        $('#tbodyCommitmentSrchList tr td').not(':first').html('');
        $('#tbodyCommitmentSrchList tr td:first input').val('');
    }

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
