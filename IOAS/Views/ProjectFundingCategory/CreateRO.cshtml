@model IOAS.Models.CreateROModel
@{
    ViewBag.Title = "Create RO";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
@Styles.Render("~/bundles/JSGridCss")
@Scripts.Render("~/bundles/JSGrid")
<script src="@Url.Content("~/Scripts/ProjectFundingCategory/ProjectFundingCategory.js")"></script>
<style>
    .auto-com-z-index {
        z-index: 10000;
    }
</style>


@using (Html.BeginForm("CreateRO", "ProjectFundingCategory", FormMethod.Post, new { @class = "", role = "form", @id = "formRO", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">

        <div class="col-md-12">
            <h4><b>Create Release Order</b> </h4>
        </div>
    </div>

    <div class="row">

        <div class="vw-dts-bg">
            <div class="row">
                <div class="col-md-12">
                    <table class="table table-bordered mb-null">
                        <thead>
                            <tr><th colspan="5">Project Details</th></tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <label>Project Title</label>
                                    <h4>@Html.DisplayFor(m => m.ProjTitle)</h4>
                                    @Html.HiddenFor(m => m.ProjId)
                                </td>
                                <td colspan="4">
                                    <label>Project Number</label>
                                    <h4>@Html.DisplayFor(m => m.ProjectNumber)</h4>
                                </td>
                                <td colspan="4">
                                    <label>Agency Name</label>
                                    <h4>@Html.DisplayFor(m => m.AgencyName)</h4>
                                </td>
                            </tr>

                            <tr>
                                <td>
                                    <label>Actual Start Date</label>
                                    <h4>@Html.DisplayFor(m => m.ActualStartDate)</h4>
                                </td>
                                @*<td class="reg-no">*@
                                <td>
                                    <label>Actual Closing Date</label>
                                    <h4>@Html.DisplayFor(m => m.ActualCloseDate)</h4>
                                </td>
                                <td colspan="4">
                                    <label>SanctionValue</label>
                                    <h4>@Html.DisplayFor(m => m.SanctionValue)</h4>
                                    @Html.HiddenFor(m => m.SanctionValue)
                                    @Html.HiddenFor(m => m.ROAprvId)
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <h3 class="spl-title" style="margin-bottom:-15px;">
            Release Order Type &nbsp;&nbsp;
            @Html.RadioButtonFor(m => m.isRO, "RO", new { @id = "is_RO", @Checked = "Checked" })<span></span> &nbsp; RO  &nbsp;&nbsp;
            @Html.RadioButtonFor(m => m.isTemp, "Temp", new { @id = "is_Temp" }) <span></span> &nbsp; Temp RO
        </h3>
    </div>
    <div id="RO">
        <div class="row">
            <div class="page-wrapper">
                <div class="scrl-table scrl-table-po-bl white-bg">
                    <div class="col-md-6">
                        <b>Add New RO</b>
                    </div>
                    <div class="col-md-6 text-right" style="margin-bottom:10px;">
                        <button type="button" id="btnAddRODetails" class="btn-primary btn">Add RO</button>
                    </div>
                    <div class="row">
                        <div class="page-wrapper">
                            <div class="scrl-table scrl-table-po-bl">
                                <table class="table table-bordered mb-null" style="width:inherit">
                                    <thead></thead>
                                    <tbody id="tbodyRO">
                                        <tr>
                                            <td>RO Number</td>
                                            <td>Existing Value</td>
                                            <td>Edited Value</td>
                                            <td>New Value</td>
                                            <th></th>
                                        </tr>

                                        @if ((Model != null) && (Model.RODetails != null && Model.RODetails.Count > 0))
                                        {
                                            var count = 0;
                                            foreach (var item in Model.RODetails)
                                            {

                                                var RO_Id = "RODetails[" + count + "].RO_Id";
                                                var RONumber = "RODetails[" + count + "].RONumber";
                                                var existingValue = "RODetails[" + count + "].ExistingValue";
                                                var editedValue = "RODetails[" + count + "].EditedValue";
                                                var newValue = "RODetails[" + count + "].NewValue";
                                                count++;
                                                <tr class="p-b-sm">
                                                    <td>
                                                        @Html.TextBox(@RONumber, item.RONumber, new { @class = "form-control", @autocomplete = "off" })
                                                        @Html.ValidationMessage(@RONumber)
                                                        @Html.Hidden("RODetails.Index", @count)
                                                        @Html.Hidden(@RO_Id, item.RO_Id)

                                                    </td>
                                                    <td>
                                                        @Html.TextBox(@existingValue, item.ExistingValue, new { @class = "form-control exist", @readonly = true })
                                                        @Html.ValidationMessage(@existingValue)
                                                    </td>
                                                    <td>
                                                        @Html.TextBox(@editedValue, item.EditedValue, new { @class = "form-control edited", @onkeypress = "return isNumberKey(event);", @onkeyup = "calculateROSum();",@onchange ="totalSum();",  @autocomplete = "off" })
                                                        @Html.ValidationMessage(@editedValue)
                                                    </td>
                                                    <td>
                                                        @*@Html.TextBox(@newValue, item.NewValue, new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onchange = "calculateamount()" })*@
                                                        @*@Html.TextBox(@newValue, item.NewValue, new { @class = "form-control ",  @onkeypress = "return isNumberKey(event);", @readonly = "true"  })*@
                                                        @Html.TextBox(@newValue, item.NewValue, new { @class = "form-control ", @readonly = "true"})
                                                        @Html.ValidationMessage(@newValue)
                                                    </td>
                                                    <td>
                                                        <a href="javascript:void(0)" class="btn-circle dis-none removeDetail"><i class="ion-trash-a"></i></a>
                                                    </td>
                                                </tr>
                                            }

                                        }
                                        else
                                        {
                                            <tr id="inputROId">
                                                <td>
                                                    @Html.TextBox("RODetails[0].RONumber", "", new { @class = "form-control", @id = "RONumber", @autocomplete = "off" })
                                                    @Html.ValidationMessage("RODetails[0].RONumber")
                                                    @Html.Hidden("RODetails.Index", 0)

                                                </td>
                                                <td>
                                                    @Html.TextBox("RODetails[0].ExistingValue", "", new { @class = "form-control exist", @id = "oldROvalue", @onchange = "totalSum();", @readonly = true, @onkeyup = "calculateROSum() ;" })
                                                    @Html.ValidationMessage("RODetails[0].ExistingValue")
                                                </td>
                                                <td>
                                                    @Html.TextBox("RODetails[0].EditedValue", "", new { @class = "form-control edited", @id = "ROeditedvalue", @onkeypress = "return isNumberKey(event);", @onkeyup = "calculateROSum();", @onchange = "totalSum();", @autocomplete = "off" })
                                                    @Html.ValidationMessage("RODetails[0].EditedValue")
                                                </td>
                                                <td>
                                                    @Html.TextBox("RODetails[0].NewValue", "", new { @class = "form-control ", @id = "ROnewvalue", @onkeypress = "return isNumberKey(event);", @readonly = "true", @onkeyup = "calculateROSum();" })
                                                    @Html.ValidationMessage("RODetails[0].NewValue", new { @id = "RoErrorMessage" })

                                                </td>
                                                <td>
                                                    <a href="javascript:void(0)" class="btn-circle dis-none removeDetail" id="removeRODetail"><i class="ion-trash-a"></i></a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="TempRO">
        <div class="row">
            <div class="page-wrapper">
                <div class="scrl-table scrl-table-po-bl white-bg">
                    <table class="table table-bordered mb-null " style="width:inherit">
                        <thead></thead>
                        <tbody id="tbodyTempRO">
                            <tr>
                                <th colspan="4"><b>Add New TempRO </b></th>
                            </tr>
                            <tr>
                                <td> Temp RO Number</td>
                                <td> Existing Value</td>
                                <td> Edited Value</td>
                                <td> New Value</td>

                            </tr>
                            <tr>
                                <td>
                                    @Html.TextBoxFor(m => m.TempRODetails.TempRONumber, new { @class = "form-control", @id = "TempRONumber", @readonly = true })
                                    @Html.ValidationMessageFor(m => m.TempRODetails.TempRONumber)
                                    @Html.HiddenFor(m => m.TempRODetails.RO_Id)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.TempRODetails.ExistingValue, new { @class = "form-control", @readonly = true, @onkeypress = "return isNumberKey(event);", @onkeyup = "calculateTempROSum();", @onchange = "totalSum();" })
                                    @Html.ValidationMessageFor(m => m.TempRODetails.ExistingValue)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.TempRODetails.EditedValue, new { @class = "form-control", @onkeypress = "return isNumberKey(event);", @onkeyup = "calculateTempROSum();", @onchange = "totalSum();", @autocomplete = "off" })
                                    @Html.ValidationMessageFor(m => m.TempRODetails.EditedValue)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.TempRODetails.NewValue, new { @class = "form-control ", @readonly = true })
                                    @Html.ValidationMessageFor(m => m.TempRODetails.NewValue)
                                </td>

                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="scrl-table scrl-table-po-bl">
                <table class="table table-bordered mb-null white-bg " style="width:inherit;">
                    <thead></thead>
                    <tbody style="float:right;">
                        <tr>
                            <td colspan="4"><b> <label class="required"> Total RO Details: </label></b></td>
                        </tr>
                        <tr>
                            <td>Total Edited Value</td>
                            <td>
                                @Html.TextBoxFor(m => m.TotalEditedValue, new { @class = "form-control", @id = "TotalEditedValue", @readonly = true, @onchange = "return isNumberKey(event);" })
                                @Html.ValidationMessageFor(m => m.TotalEditedValue)
                            </td>
                            <td> Total New Value</td>

                            <td>
                                @Html.TextBoxFor(m => m.TotalNewValue, new { @class = "form-control", @id = "TotalNewValue", @readonly = true, @onchange = "return isNumberKey(event);" })
                                @Html.ValidationMessageFor(m => m.TotalNewValue)
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>


    <div class="modal-footer">
        <div class="text-center">
            <input type="submit" class="btn btn-primary " value="submit" id="btnCreateRO" />
            <input type="reset" onclick="window.location.href='@Url.Action("ProjectOpening", "Project")';" value="close" class="btn btn-default" />
        </div>
    </div>
}
<div id="popup"></div>
<link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>

<script>

        var errMsg = '@TempData["errMsg"]';
            var succMsg = '@TempData["succMsg"]';

    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }

        $('#RO').show();
        $('#TempRO').hide();
        //$('#TempRONumber').val('TEMPRO_');
        //TEMPRO_SP22230739CYDSTX002505
        /*Edit Region*/
        if (window.location.href.indexOf("aprvdId") > -1) {
            var txtTempVal = $('#TempRODetails_EditedValue').val();
            if (txtTempVal != '') {
                $("#is_RO").removeAttr('checked');
                $('#is_RO').attr("disabled", true);
                $("#is_Temp").attr("checked", true);
                $('#TempRO').show();
                $('#RO').hide();

            }
            else
            {
                $("#is_Temp").prop('disabled', true);
                $("#is_Temp").removeAttr('checked');
                $("#is_RO").attr('checked', true);
                $('#TempRO').hide();
                $('#RO').show();
            }

            /*to remove btn Add RO in edit*/
            $('#btnAddRODetails').hide();
            $('#tbodyRO tr').each(function (idx, val) {
                //$(this).closest('tr').find('#removeRODetail').hide();
                $(this).closest('tr').closest('a').hide();
            });

        }
        else
        {
            $('#TotalEditedValue').val('');
            $('#TotalNewValue').val('');
            $('#TempRODetails_EditedValue').val('');
        }
        totalSum();
        calculateROSum();

        var RODetails = @Html.Raw(Json.Encode(Model.RODetails));
            $.each(RODetails, function (i, result) {
                if (i == 0) {

                    var trEle = $('#tbodyRO tr:nth-child(2)');
                    $('#tbodyRO tr').not(':first,:nth-child(2)').remove();
                    $(trEle).find("input[name='RODetails.Index']").val(i);
                    //$(trEle).find("input[name='RODetails.Index']").val(i);

                    trEle.find('input[name$=".RONumber"]').val(result.RONumber);
                    trEle.find('input[name$=".ExistingValue"]').val(result.ExistingValue);
                    trEle.find('input[name$=".EditedValue"]').val(result.EditedValue);
                    trEle.find('input[name$=".NewValue"]').val(result.NewValue);
                    trEle.find('input[name$=".RO_Id"]').val(result.RO_Id);
                }
                else {

                    var trEleNew = $('#tbodyRO tr:nth-child(2)').clone();
                    //$('#tbodyRO tr').not(':first,:nth-child(2)').remove();
                    $(trEleNew).find('a.dis-none').removeClass('dis-none');
                    $(trEleNew).find("input[name='RODetails.Index']").val(i);
                    $(trEleNew).find("input").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                    });

                    trEleNew.find('input[name$=".RONumber"]').val(result.RONumber);
                    trEleNew.find('input[name$=".ExistingValue"]').val(result.ExistingValue);
                    trEleNew.find('input[name$=".EditedValue"]').val(result.EditedValue);
                    trEleNew.find('input[name$=".NewValue"]').val(result.NewValue);
                    trEleNew.find('input[name$=".RO_Id"]').val(result.RO_Id);
                $('#tbodyRO').append(trEleNew);
            }
        });
    });
/*Add the new row for RO details*/
    $('#btnAddRODetails').click(function () {

        //var cln = $('#tbodyRO tr:nth-child(2)').clone().find("input").val("").end();
        var cln = $('#tbodyRO tr:last').clone().find("input").val("").end();

        $(cln).find('a.dis-none').removeClass('dis-none');

        var index = $('#tbodyRO tr:last').find("input[name='RODetails.Index']").val();
        index = parseInt(index) + 1;

        $(cln).find("input[name='RODetails.Index']").val(index);
        $(cln).find("input").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
            $(this).find('input[name$="' + index + '].EditedValue"]').val("");
            $(this).find('input[name$="' + index + '].ExistingValue"]').val("") ;
            $(this).find('input[name$="' + index + '].NewValue"]').val("") ;
        });

        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });

        $('#tbodyRO').append(cln);
    });
    $(document).on('click', 'a.removeDetail', function () {
        $(this).closest('tr').remove();
            });

    $('#is_RO').bind("click", function () {
        $('#RO').show();
        $('#TempRO').hide();
        $('#is_Temp').attr('checked', false);
        $('#TempRO').addClass('dis-none');
        $('#RO').removeClass('dis-none');
        calculateROSum();
        //totalSum();
        var ROExistingValue = $('#TempRODetails_ExistingValue').val();

        /*If it is not edit screen*/
        if (!(window.location.href.indexOf("aprvdId") > -1)) {
            if (ROExistingValue == 0) {
                //$('#TempRONumber').val('');
                $('#TempRODetails_EditedValue').val('');
                $('#TempRODetails_ExistingValue').val('');
                $('#TempRODetails_NewValue').val('');
                $('#TotalEditedValue').val('');
                $('#TotalNewValue').val('');
            }
        }
    });

    $('#is_Temp').bind("click", function () {
            $('#TempRO').show();
            $('#RO').hide();
            $('#is_RO').attr('checked', false);
            $('#RO').removeClass('dis-none');
            $('#TempRO').removeClass('dis-none');
        calculateTempROSum();
        //totalSum();

        var RoExistingVal = $('#RODetails_0__ExistingValue').val();
        /*If it is not edit screen - i.e update RO screen*/
        if (!(window.location.href.indexOf("aprvdId") > -1)) {
            if (RoExistingVal == 0) {
                $('#tbodyRO tr').find("input").val("").end();
                $('#TotalEditedValue').val('');
                $('#TotalNewValue').val('');
            }
        }
    });

    /*Allows +ve / -ve Number*/
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        //if (charCode != 46 && charCode > 31
        //    && (charCode < 48 || charCode > 57))
        //    return false;

        if (charCode != 109 && charCode > 31 && (charCode < 48 || charCode > 57) && charCode != 46) {
            return false;
        }
        return true;

    }
    /*Sum of Existing and edited value = new value*/
    function calculateROSum() {
        var ExistingVal = 0;
        var NewVal = 0;
        var EditedVal = 0;
        var resExistingVal = 0;
        var resEditedVal = 0;
        $('#tbodyRO tr').each(function (idx, val) {
                ExistingVal = parseFloat($(this).closest('tr').find('input[name$=".ExistingValue"]').val());
                EditedVal = parseFloat($(this).closest('tr').find('input[name$=".EditedValue"]').val());
                NewVal = parseFloat($(this).closest('tr').find('input[name$=".NewValue"]').val());

            if (!isNaN(ExistingVal))
                resExistingVal = ExistingVal;
            if (!isNaN(EditedVal))
                resEditedVal = EditedVal;


            if (!isNaN(resExistingVal) || !isNaN(resEditedVal)) {
                NewVal = resExistingVal + resEditedVal;
                $(this).find('input[name$=".NewValue"]').val(NewVal);
            }
        });
        totalSum();
    }


    /*Function to calculate total Edited value and New Value*/
            function totalSum() {
                var result = 0;
                var totResult = 0;

                $('#tbodyRO tr').each(function (idx, val) {
                    var txtROEditedValue = parseFloat($(this).closest('tr').find('input[name$=".EditedValue"]').val());
                    var totalRONewValue = parseFloat($(this).closest('tr').find('input[name$=".NewValue"]').val());
                    if (!isNaN(txtROEditedValue))
                        result += txtROEditedValue;
                    if (!isNaN(totalRONewValue))
                        totResult += totalRONewValue;
                    console.error(totResult);
                    if (!isNaN(result)) {
                        $("#TotalEditedValue").val(result.toFixed(0));
                    }
                    if (!isNaN(totResult)) {
                        $("#TotalNewValue").val(totResult.toFixed(0));
                    }

                    var EditedVal = parseFloat($('#TempRODetails_EditedValue').val());
                    var ExistingVal = parseFloat($('#TempRODetails_ExistingValue').val());
                   
                    if (!isNaN(ExistingVal) && ExistingVal > 0) {
                        console.error('in');
                        //var NewVal = parseFloat($('#TempRODetails_NewValue').val());
                        var totEditVal = parseFloat($("#TotalEditedValue").val());
                        var totNewValue = parseFloat($("#TotalNewValue").val());
                        //TempRo offset
                        
                            if (!isNaN(totEditVal) <= !isNaN(ExistingVal)) {

                                $('#TempRODetails_EditedValue').val(-totEditVal);
                                $('#TempRODetails_NewValue').val(ExistingVal - totEditVal);
                                totNewValue += (-totEditVal);
                            }
                            else if (!isNaN(totEditVal) >= !isNaN(ExistingVal)) {
                                $('#TempRODetails_EditedValue').val(-ExistingVal)
                                $('#TempRODetails_NewValue').val(0);
                                totNewValue += (-EditedVal)
                            }
                            else
                            {
                                @*console.error($('#TempRODetails_EditedValue').val());
                                var TempRODetails = @Html.Raw(Json.Encode(Model.TempRODetails));
                                $.each(TempRODetails, function (i, result) {if (i == 0) {
                                    $('#TempRODetails_EditedValue').val(result.EditedValue);
                                }});*@
                            }

                        //if (!isNaN(totEditVal)) {
                        //    $("#TotalEditedValue").val(totEditVal.toFixed(0));
                        //}
                        if (!isNaN(totNewValue)) {
                            $("#TotalNewValue").val(totNewValue.toFixed(0));
                        }
                         //calculateTempROSum();
                    }
                });

    }
            /*Function to calculate Temp RO values*/

            function calculateTempROSum() {
                var ExistingVal = 0;
                var NewVal = 0;
                var EditedVal = 0;
                var resExistingVal = 0;
                var resEditedVal = 0;
                $('#tbodyTempRO tr').each(function (idx, val) {
                    ExistingVal = parseFloat($('#TempRODetails_ExistingValue').val());
                    EditedVal = parseFloat($('#TempRODetails_EditedValue').val());
                    NewVal = parseFloat($('#TempRODetails_NewValue').val());

                    if (!isNaN(ExistingVal))
                        resExistingVal = ExistingVal;
                    if (!isNaN(EditedVal))
                        resEditedVal = EditedVal;
                    if (!isNaN(resExistingVal) || !isNaN(resEditedVal)) {
                        NewVal = resExistingVal + resEditedVal;
                        $(this).find('input[name$=".NewValue"]').val(NewVal);
                    }
                });
              //totalSum();
            }

</script>
