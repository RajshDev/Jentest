@model IOAS.Models.InternalProjectModel
@{
    ViewBag.Title = "InternalProject";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
        background: #fff;
        float: left;
    }

    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #fff;
        }

    .custom-nav-pills.nav-pills > li > a {
        color: rgba(255,255,255,0.5);
        cursor: default;
        background: transparent !important;
        border-color: transparent;
        border-top-color: transparent;
        padding: 10px 15px;
        margin: 0px 15px;
    }

        .custom-nav-pills.nav-pills > li > a span {
            width: 100%;
            float: left;
        }

    .custom-nav-pills.nav-pills > li.active > a, .custom-nav-pills.nav-pills > li.active > a:focus, .custom-nav-pills.nav-pills > li.active > a:hover {
        color: #333333;
        background-color: #fff !important;
    }

    .custom-st-fd-box {
        background: #f5f5f5;
        padding: 15px 0px;
        border-radius: 4px;
        display: inline-block;
    }

    .custom-st-fd-btn {
        color: #fff;
        font-size: 16px;
        margin-top: 15px;
        display: inline-block;
    }

    .custom-st-tb-th.table {
        border: 0px;
    }

        .custom-st-tb-th.table > tbody > tr > th {
            background: #3080e3;
            color: #fff;
            border: 0px solid #ccc;
        }

        .custom-st-tb-th.table > tbody > tr > td {
            border: 0px;
        }
</style>
<div class="row hd-tt-bg">
    <div class="col-md-4 pull-left">
        <h3>Internal Project Opening</h3>
    </div>
</div>
@using (Html.BeginForm("InternalProject", "Project", FormMethod.Post, new { @class = "", role = "form", @id = "formCPR", enctype = "multipart/form-data" }))

{
    <div class="page-wrapper">
        <div class="white-bg">
            <div class="row">
                <div class="col-sm-offset-8">
                    <div class="reg-no">
                        <div class="form-group custom-form-group ">
                            <label> Project Number </label>
                            @Html.TextBoxFor(m => m.ProjectNumber, new { @class = "form-control", @id = "projectnum", @onkeypress = "return noedit();", @readonly = true })

                            @Html.ValidationMessageFor(m => m.ProjectNumber)

                            @Html.Hidden("Projectid")
                            @Html.Hidden("ProjectNumber")
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">Faculty code</label>
                            @Html.DropDownListFor(m => m.FacultyCode, new SelectList(ViewBag.FacultyCodeList, "id", "name"), "Select any", new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.FacultyCode)
                        </div>
                    </div>
                    <div id="divCentre" class="col-md-4 dis-none">
                        <div class="form-group custom-form-group">
                            <label class="required">Centre</label>
                            @Html.DropDownListFor(m => m.SelCentre, new SelectList(ViewBag.CentreList, "id", "name"), "Select any", new { @class = "form-control", @onchange = "GetNumberingFormat();" })
                            @Html.ValidationMessageFor(m => m.SelCentre)
                        </div>
                    </div>
                    <div id="divLab" class="col-md-4 dis-none">
                        <div class="form-group custom-form-group">
                            <label class="required">Lab</label>
                            @Html.DropDownListFor(m => m.SelLab, new SelectList(ViewBag.LabList, "id", "name"), "Select any", new { @class = "form-control", @onchange = "GetNumberingFormat();" })
                            @Html.ValidationMessageFor(m => m.SelLab)
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">Financial Year</label>
                            @Html.DropDownListFor(m => m.FinancialYear, new SelectList(ViewBag.finYearList, "id", "name",ViewBag.refFinYear), "Select Financial Year",
        new { @class = "form-control", @required = "required", @onchange = "GetNumberingFormat();" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.FinancialYear)</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">PI Name</label>
                            @Html.TextBoxFor(m => m.PIName, new { @class = "form-control", @id = "pIName", @autocomplete = "off", @onpaste = "return false" })
                            @Html.HiddenFor(m => m.PINameId, new { @id = "piNameId", @required = "required", @autocomplete = "off" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.PINameId)</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">Sanction value</label>
                            @Html.TextBoxFor(m => m.SanctionValue, new { @class = "form-control", @required = "required", @onkeypress = "return isNumberKey(event)" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SanctionValue)</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">Agency Name</label>
                            @Html.TextBoxFor(m => m.AgencyName, new { @class = "form-control", @id = "agencyName", @autocomplete = "off", @onpaste = "return false" })
                            @Html.HiddenFor(m => m.AgencyNameId, new { @id = "agencyNameId", @required = "required", @autocomplete = "off" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.AgencyNameId)</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">Start Date</label>
                            @Html.EditorFor(m => m.StartDate, new { @class = "form-control" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.StartDate)</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">Close Date</label>
                            @Html.EditorFor(m => m.ClosingDate, new { @class = "form-control" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.ClosingDate)</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-4">
                        <div class="form-group custom-form-group">
                            <label class="required">Type</label>
                            @Html.DropDownListFor(m => m.SponsoredFundingType, new SelectList(ViewBag.Type, "id", "name"), "Select Type", new { @class = "form-control", @onchange = "GetNumberingFormat();" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SponsoredFundingType)</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group custom-form-group">
                            <label class="required">Project Classification</label>
                            @Html.DropDownListFor(m => m.ProjectClassification, new SelectList(ViewBag.InternalClassfication, "id", "name"), "Select Classification", new { @class = "form-control" })
                            <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.ProjectClassification)</div>
                        </div>
                    </div>
                    <div class="col-md-5 dis-none" id="lblPrjNoFormat">
                        <div class="reg-no">

                            <label> Created Project Numbering Format </label>
                            <h4 id="lblPrjNo"></h4>

                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-12">
                <div class="form-group custom-form-group ">
                    <label class="required"> Project title </label>
                    @Html.TextBoxFor(m => m.ProjectTitle, new { @class = "form-control", @required = "required", @id = "ProjectTitle" })

                    @Html.ValidationMessageFor(m => m.ProjectTitle)

                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h3 class="spl-title">Co Investigator Details</h3>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div id="CoPidivContent">
                        <div class="row">
                            <label class="col-md-3 fn-normal">Department of Co PI</label>
                            <label class="col-md-3 fn-normal">Name of Co PI </label>
                            <label class="col-md-3 fn-normal">Email </label>
                        </div>
                        <div class="m-b-sm row" id="CopiprimaryDiv">
                            <div class="col-md-3" id="copidprt">
                                @Html.DropDownList("CoPIDepartment", new SelectList(ViewBag.deprtmnt, "code", "name"), "Select any", new { @class = "form-control", @id = "copidepartment" })
                            </div>
                            <div class="col-md-3 bost-sel-ht-sm" id="copinam">
                                @Html.DropDownList("CoPIname", new SelectList(ViewBag.PI, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "CoPI" })
                                @Html.Hidden("CoPIid")

                            </div>
                            <div class="col-md-3" id="copimail">
                                @Html.TextBox("CoPIEmail", "", new { @class = "form-control", @id = "CoPIEmail" })
                            </div>
                            <div class="col-md-1">
                                <button class="dis-none btn-sm btn btn-danger" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                            </div>
                        </div>
                        <div class="row p-b-sm">
                            <div class="col-md-12">
                                <h4 class="text-right">
                                    <button type="button" id="btnAddCoPI" class="btn-primary btn pull-left"><i class="ion-android-add"></i>Add</button>
                                </h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div id="DocdivContent">
                        <div class="row">
                            <div class="col-md-12">
                                <label class="col-md-3 fn-normal">Attachment type</label>
                                <label class="col-md-3 fn-normal">Attachment Name </label>
                                <label class="col-md-3 fn-normal">Attachment</label>
                            </div>
                        </div>

                        <div class="m-b-sm row" id="DocprimaryDiv">
                            <div class="col-md-12">
                                <div class="col-md-3">
                                    @Html.DropDownList("DocType", new SelectList(ViewBag.Docmenttype, "id", "name"), "Select Document Type",
                   new { @class = "form-control", @id = "doctype" })
                                    @Html.Hidden("Docid")

                                </div>
                                <div class="col-md-3">
                                    <input class="form-control" name="AttachName" id="docname" value="" type="text">

                                </div>
                                <div class="col-md-3">
                                    <input type="file" name="file" id="docfile" />&nbsp;&nbsp;&nbsp;
                                    @Html.ValidationMessageFor(m => m.DocPath)

                                </div>
                                <div class="col-md-2 doclink mt6">
                                    <a href="#" class="link1" target="_blank"></a>
                                    @Html.Hidden("DocPath", "", new { @class = "HiddenDocPath" })
                                    @Html.Hidden("DocName", "", new { @class = "HiddenDocName" })
                                </div>

                                <div class="col-md-1">
                                    <button class="dis-none btn-sm btn btn-danger" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                </div>
                            </div>
                        </div>
                        <div class="row p-b-sm">
                            <div class="col-md-12">
                                <h4 class="text-right">
                                    <button type="button" id="btnAddDoc" class="btn-primary btn pull-left"><i class="ion-android-add"></i>Add</button>
                                </h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center pd-tb-30">
            <input type="submit" class="btn btn-primary mr10" value="Submit" name="Button" id="btnPCFSave" />
            <button type="button" class="btn btn-default" onclick="window.location.href='@Url.Action("InternalProjectList", "Project")';">Close</button>
        </div>
    </div>
}
<script type="text/javascript">
    var faccode =@Html.Raw(Json.Encode(Model.FacultyCode));
    $('.selectpicker').selectpicker({
        liveSearch: true
    });

    var selectPickerApiElement = function (el, choice, options, select) {
        $(el).find('select').selectpicker({
            liveSearch: true
        });
        $(el).children().eq(2).siblings().remove();
        if (choice == "add") {
            $(el).find('.selectpicker').append("<option>" + options + "</option>");
        } else if (choice == "all" && select != '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0; i < options.length; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
            $(el).find('.selectpicker option[value=' + select + ']').attr('selected', 'selected');
        } else if (choice == "all" && select == '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0; i < options.length; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
        } else if (choice == "empty") {
            $(el).find('.selectpicker').children().remove();
            $(el).find('.selectpicker').append("<option value=''>Select any</option>");
        } else {
            var selectOptionsLength = $(el).find('.selectpicker').children().length;
            for (var i = 1; i <= selectOptionsLength; i++) {
                if (options == $(el).find('.selectpicker').children().eq(i).val()) {
                    $(el).find('.selectpicker').children().eq(i).remove();
                    break;
                } else {
                    continue;
                }

            }

        }
        $(el).find('select').selectpicker('refresh');
        return $(el).children().first().unwrap();

    }
    if(faccode!="")
    {
        GetFacalityCode();
    }
    $('#ClosingDate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-10:+50' });
    var errorMsg = '@ViewBag.errMsg';
    $(document).on('click', '#pIName', function () {
        applyAutoComplete($('#pIName'), $('#piNameId'), "../CoreAccounts/LoadPIList", undefined, undefined, undefined);
        GetNumberingFormat();
    });
    $(document).on('click', '#agencyName', function () {
        applyAutoComplete($('#agencyName'), $('#agencyNameId'), "../project/LoadAgencytList", undefined, undefined, undefined);
        GetNumberingFormat();
    });
    if (errorMsg != '') {
        $('#FailedAlert').html(errorMsg);
        $('#Failed').modal('toggle');
    }
    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }
    function GetFacalityCode() {
        var selVal = $('#FacultyCode').val();
        $('#divCentre,#divLab').addClass('dis-none');
        if (selVal == "2") {
            $('#divCentre').removeClass('dis-none');
        }
        else if (selVal == "4") {
            $('#divLab').removeClass('dis-none');
        }

    }
    $("#FacultyCode").change(function () {
        var selVal = $(this).val();
        $('#divCentre,#divLab').addClass('dis-none');
        if (selVal == "2") {
            $('#divCentre').removeClass('dis-none');
        }
        else if (selVal == "4") {
            $('#divLab').removeClass('dis-none');
        }
        else
        {
            $('#SelCentre,#SelLab').prop('selectedIndex',0);
            GetNumberingFormat();
        }
    });
    $('#btnPCFSave').click(function (d) {
        d.preventDefault();
        var isValid = $('#formCPR').valid();
        var agyId = $('#agencyNameId').val();
        var piId = $('#piNameId').val();
        if(piId==0||piId==null||piId=="")
        {
            isValid = false;
            $('#alert').html("Please select PI Name");
            $('#Validation').modal('toggle');
            return false;
        }
        if(agyId==0||agyId==null||agyId=="")
        {
            isValid = false;
            $('#alert').html("Please select Agency Name");
            $('#Validation').modal('toggle');
            return false;
        }
        var strDate = $("#StartDate").val();
        var clsDate = $("#ClosingDate").val();
        if (strDate != '' && clsDate != '') {
            var startDate = moment(parseDate(strDate));
            var closeDate = moment(parseDate(clsDate));

            var mins = closeDate.diff(startDate, 'minutes');
            if (mins <= 0) {
                $('#alert').html("Close Date must be greater than start date.");
                $('#Validation').modal('toggle');
                return false;
            }
        }

        // to validate if copi department or copiname is left unselected when either one of them is selected
        var copideptvalues = [];
        var copinamvalues = [];

         //var Piname= $("#PI").val();
        $('select[name="CoPIDepartment"]').each(function (idx, val) { copideptvalues.push($(val).val()); });
        $('select[name="CoPIname"]').each(function (idx, val) { copinamvalues.push($(val).val()); });
        //// Sort it
        copideptvalues.sort();
        copinamvalues.sort();

        for (var k = 0; k < copideptvalues.length; ++k) {
            if ((copideptvalues[k] > 0) && (copinamvalues[k] == null || copinamvalues[k] == 0)) {
                $('#MsgValidation').html("Please fill Co PI name.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
            if ((copideptvalues[k] == null || copideptvalues[k] == 0) && (copinamvalues[k] > 0)) {
                $('#MsgValidation').html("Please fill Department of selected Co PI.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
            //if (copinamvalues[k] == piname) {
            //    $('#MsgValidation').html("Co PI should not be the PI what you have declared. Please rectify and submit again.");
            //    $('#ValidationModal').modal('toggle');
            //    return false;
            //}

        }



        // duplicate check
        for (var k = 1; k < copinamvalues.length; ++k) {
            if (copinamvalues[k] == copinamvalues[k - 1]) {
                $('#alert').html("Co PI already selected. Please select a different Co PI.");
                $('#Validation').modal('toggle');
                return false;
            }
        }

        // to validate if attachment type or attachment name is not left blank when either one of them is filled
        var doctypevalues = [];
        var docnamevalues = [];
        $('select[name="DocType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        $('input[name="AttachName"]').each(function (idx, val) { docnamevalues.push($(val).val()); });
        //// Sort it
        doctypevalues.sort();
        docnamevalues.sort();

        for (var k = 0; k < doctypevalues.length; ++k) {
            //if ((doctypevalues[k] > 0) && ((docnamevalues[k] == null) || docnamevalues[k] == "")) {
            //    $('#MsgValidation').html("Please fill Attachment name.");
            //    $('#ValidationModal').modal('toggle');
            //    return false;
            //}
            if ((docnamevalues[k] != null && docnamevalues[k] != "") && (doctypevalues[k] == null || doctypevalues[k] == 0)) {
                $('#alert').html("Please select Attachment type.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
        }
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
            isValid = true;
        }

        if (isValid)
            $('#formCPR').submit();
    });
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function noedit() {
        return false;
    }

    $('#btnAddDoc').click(function () {
        var cln = $("#DocprimaryDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $(cln).find('.doclink').addClass('dis-none');
        $(cln).insertBefore($('#DocdivContent').find('.p-b-sm'));

    });

    $('#btnAddCoPI').click(function () {
        var cln = $("#CopiprimaryDiv").clone().find("input").val("").end();
        var cloneElement = $("#CopiprimaryDiv").find('#CoPI').parent().clone();
        cln.find('#CoPI').parent().replaceWith(selectPickerApiElement($(cloneElement), "empty", [], ''));
        $(cln).find('.dis-none').removeClass('dis-none');
        $(cln).insertBefore($(this).closest('#CoPidivContent').find('.p-b-sm'));
    });

    $(document).on('click', '#DocdivContent button[name="removeButton"]', function () {
        $(this).parent().parent("Div").remove();
    });

    $(document).on('click', '#CoPidivContent button[name="removeButton"]', function () {
        $(this).parent().parent("Div").remove();
    });

    //Co Investigator Details
    
    $(document).on('change', 'select[name="CoPIDepartment"]', function () {
        var Departmentid = $(this).val();
        var select = $(this).closest('#CopiprimaryDiv').find('select[name="CoPIname"]');
        $(select).empty().selectpicker('refresh');
        //$(select).selectpicker("destroy");
        console.log(Departmentid);
        $.getJSON("@Url.Action("LoadPIByDepartment", "Account")", { Departmentid: Departmentid },
                    function (locationdata) {
                        // $(select).selectpicker("destroy");
                        $.each(locationdata, function (index, itemData) {
                            $(select).append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name
                            })).selectpicker('refresh');
                        });
                    });

    });

     $(document).on('change', 'select[name="CoPIname"]', function () {
        var CoPIid = $(this).val();
         var CoPIEmail = $(this).closest('#CopiprimaryDiv').find('input[name="CoPIEmail"]');
        if (CoPIid > 0) {
            $.getJSON("@Url.Action("LoadPIEmailById", "Account")", { Profid: CoPIid },
                    function (locationdata) {
                        CoPIEmail.val(locationdata.name);
                    });
        }
        else {
            var Copiid = 0;
            $.getJSON("../Account/LoadPIEmailById", { Profid: Copiid },
                    function (locationdata) {
                        CoPIEmail.val(locationdata.name);
                    });
        }
    });


    //Fill Attachment in Edit Mode

    var Docname = @Html.Raw(Json.Encode(Model.DocName));
    var Attachname = @Html.Raw(Json.Encode(Model.AttachName));
    var Doctype =@Html.Raw(Json.Encode(Model.DocType));
    var Docpath = @Html.Raw(Json.Encode(Model.DocPath));
    var DocID = @Html.Raw(Json.Encode(Model.Docid));
    //var proj = result.MainProjectList;
    $.each(Docname, function (i, val) {

        if (i == 0) {
            document.getElementsByName('DocType')[0].value = Doctype[0];
            document.getElementsByName('AttachName')[0].value = Attachname[0];
            document.getElementsByName('Docid')[0].value = DocID[0];
            document.getElementsByClassName('link1')[0].text = Docname[0];
            document.getElementsByClassName('HiddenDocName')[0].value = Docname[0];
            document.getElementsByClassName('HiddenDocPath')[0].value = Docpath[0];
            document.getElementsByClassName('link1')[i].href = "ShowDocument?file=" + Docpath[0] + "&filepath=~%2FContent%2FSupportDocuments%2F";

        } else {
            var cln = $("#DocprimaryDiv").clone().find("input").val("").end();
            $(cln).find('.dis-none').removeClass('dis-none');
            $(cln).insertBefore($('#DocdivContent').find('.p-b-sm'));
            document.getElementsByName('DocType')[i].value = Doctype[i];
            document.getElementsByName('AttachName')[i].value = Attachname[i];
            document.getElementsByName('Docid')[i].value = DocID[i];
            document.getElementsByClassName('link1')[i].text = Docname[i];
            document.getElementsByClassName('HiddenDocName')[i].value = Docname[i];
            document.getElementsByClassName('HiddenDocPath')[i].value = Docpath[i];
            document.getElementsByClassName('link1')[i].href = "ShowDocument?file=" + Docpath[i] + "&filepath=~%2FContent%2FSupportDocuments%2F";
        }
    });

    function GetNumberingFormat()
    {
        var InputData = [];
        InputData = {
            Prjcttype:null,
            FacultyCode: $('#FacultyCode').val() || null,
            SelCentre: $('#SelCentre').val() || null,
            SelLab: $('#SelLab').val() || null,
            SelCor: $('#SelCor').val() || null,
            Department: $('#department').val() || null,
            PIname: $('#piNameId').val() || null,
            Agencyid: $('#agencyNameId').val() || null,
            ConsFundingCategory: null,
            SponsoredProjectTypeCode: $('#SponsoredFundingType').val() || null,
            FinancialYear: $('#FinancialYear').val()||null
        }
        modelData = InputData;
        $.ajax({
            type: "Post",
            url: 'GetInternalProjectNumbering',
            data: JSON.stringify(modelData),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                console.log(result);
                if (result != "")
                {
                    if($('#projectnum').val()==null||$('#projectnum').val()=="")
                    {
                        $('#lblPrjNoFormat').removeClass('dis-none');
                        $('#lblPrjNo').text(result);

                    }
                    else
                    {
                        $('#lblPrjNoFormat').addClass('dis-none');
                    }
                }

            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
    $(document).on('change', 'input[name="file"]', function () {
        var file = $(this).val();
        if (file != "") {
            var extension = file.substr((file.lastIndexOf('.') + 1)).toLowerCase();
            switch (extension) {
                case 'pdf':
                    isValidExten = true;
                    break;
                default:
                    isValidExten = false;
            }
            if (isValidExten == false) {
                $('#alert').html("Please upload pdf file.");
                $('#Validation').modal('toggle');
                $(this).val('');
                return false;
            }

        }
    });
       
    var CoPIname =@Html.Raw(Json.Encode(Model.CoPIname));
    var CoPIEmail  =@Html.Raw(Json.Encode(Model.CoPIEmail));
    var CoPIDepartment =@Html.Raw(Json.Encode(Model.CoPIDepartment));
    var piList = '@Html.Raw(Json.Encode(ViewBag.PI))';
    $.each(CoPIname, function (i, val) {
        if (i == 0) {
            ////document.getElementsByName('CoPIDepartment')[0].value = CoPIDepartment[0];   
            //$('[name="CoPIDepartment').eq(0).val(CoPIDepartment[0]).trigger('change');
            //document.getElementsByName('CoPIname')[0].value = CoPIname[0];
            ////$('[name="CoPIname').eq(0).val(CoPIname[0])
            ////document.getElementsByName('CoPIEmail')[0].value = CoPIEmail[0];
            //$('[name="CoPIEmail').eq(0).val(CoPIEmail[0])
            var select = $("#CoPI");
            select.empty();
            select.append($('<option/>', {
                value: '0',
                text: 'Select any'
            }));
            $.each(JSON.parse(piList), function (index, itemData) {
                if (itemData.code == CoPIDepartment[0]) {
                    select.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name
                    }));
                }
            });
            $('#CoPI').val(CoPIname[0]);
            select.selectpicker('refresh');
            document.getElementsByName('CoPIname')[0].value = CoPIname[0];
            document.getElementsByName('CoPIDepartment')[0].value = CoPIDepartment[0];
            document.getElementsByName('CoPIEmail')[0].value = CoPIEmail[0];
        }       
        else
        {
            var cln = $("#CopiprimaryDiv").clone().find("input").val("").end();
            var cloneElement = $("#CopiprimaryDiv").find('#CoPI').parent().clone();
            var dptPIs = []
            $.each(JSON.parse(piList), function (index, itemData) {
                //console.log(itemData.code);
                console.log(CoPIDepartment[0]);
                if (itemData.code == CoPIDepartment[i]) {
                    dptPIs.push(itemData);

                }
            });
            cln.find('#CoPI').parent().replaceWith(selectPickerApiElement($(cloneElement), "all", dptPIs, CoPIname[i]));
            $(cln).find('.dis-none').removeClass('dis-none');
            $(cln).insertBefore($('#CoPidivContent').find('.p-b-sm'));
            // document.getElementsByName('CoPIDepartment')[i].value = CoPIDepartment[i];
            //$('[name="CoPIDepartment').eq(i).val(CoPIDepartment[i]).trigger('change');
            //document.getElementsById('CoPIname')[i].value = CoPIname[i];
            
            //$('[id="CoPI').eq(i).val(CoPIname[i])
            document.getElementsByName('CoPIname')[i].value = CoPIname[i];
            document.getElementsByName('CoPIDepartment')[i].value = CoPIDepartment[i];
            document.getElementsByName('CoPIEmail')[i].value = CoPIEmail[i];
        }
    });
</script>
<link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
