

@model IOAS.Models.CommonPaymentModel
    
    <h3>Transaction Details</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Account Group</th>
                <th>Account Head</th>
                <th>Transaction Type</th>
                <th style="width:200px;">Amount</th>
            </tr>
        </thead>
        <tbody id="tbodyExpenseList">
            @if (Model.ExpenseDetail != null && Model.ExpenseDetail.Count() > 0)
        {
            var count = 0;
            foreach (var item in Model.ExpenseDetail)
            {
                var accountGroup = "ExpenseDetail[" + count + "].AccountGroupId";
                var accountGroupName = "ExpenseDetail[" + count + "].AccountGroupName";
                var accountHead = "ExpenseDetail[" + count + "].AccountHeadId";
                var accountHeadName = "ExpenseDetail[" + count + "].AccountHeadName";
                var expDetailId = "ExpenseDetail[" + count + "].BillExpenseDetailId";
                var transType = "ExpenseDetail[" + count + "].TransactionType";
                var amt = "ExpenseDetail[" + count + "].Amount";
                    <tr>
                        <td>
                            @*@Html.DropDownList(@accountGroup, new SelectList(item.AccountGroupList, "id", "name", item.AccountGroupId), new { @class = "form-control required" })*@
                            <h4>@item.AccountGroupName</h4>
                            @Html.Hidden("ExpenseDetail.Index", @count)
                            @Html.Hidden(@expDetailId, item.BillExpenseDetailId)
                        </td>
                        <td>
                            @*@Html.DropDownList(@accountHead, new SelectList(item.AccountHeadList, "id", "name", item.AccountHeadId), new { @class = "form-control required" })*@
                            <h4>@item.AccountHeadName</h4>
                        </td>
                        <td>
                            <h4 id="lblTransType">@item.TransactionType</h4>
                            @Html.Hidden(@transType, item.TransactionType)

                        </td>
                        <td>
                            @Html.Hidden(@amt, item.Amount, new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateDeductionTotal()", @autocomplete = "off" })
                            <h4>@item.Amount</h4>
                        </td>

                    </tr>
                count++;

            }
        }
        else
        {
                <tr>
                    <td>
                        @*@Html.DropDownList("ExpenseDetail[0].AccountGroupId", new SelectList(ViewBag.AccountGroupList, "id", "name"), "Select any", new { @class = "form-control required" })*@
                       
                        @Html.Hidden("ExpenseDetail.Index", "0")
                        @Html.Hidden("ExpenseDetail[0].BillExpenseDetailId")
                    </td>
                    <td>
                        @*@Html.DropDownList("ExpenseDetail[0].AccountHeadId", new SelectList(ViewBag.AccountHeadList, "id", "name"), "Select any", new { @class = "form-control required" })*@

                    </td>
                    <td>
                        <h4 id="lblTransType"></h4>
                        @Html.Hidden("ExpenseDetail[0].TransactionType")
                        @Html.ValidationMessage("ExpenseDetail[0].TransactionType")
                    </td>
                    <td>
                        @Html.Hidden("ExpenseDetail[0].Amount", "", new { @class = "form-control required", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateDeductionTotal()", @autocomplete = "off" })

                    </td>

                </tr>
        }
            @*<tr>
                <td colspan="3">
                    <div class="reg-no reg-adj">
                        <label>Total Value <span class="cr">(Cr)</span> :</label>
                        @Html.HiddenFor(m => m.ExpenseAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                        @Html.DisplayFor(m => m.ExpenseAmount)
                    </div>
                </td>
            </tr>*@

        </tbody>
    </table>
    <h3 class="mt-null">Tax</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Deduction Head</th>
                <th>Account Head</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody id="tbodyDeductionList">
            @if (Model.DeductionDetail != null && Model.DeductionDetail.Count() > 0)
            {
                var count = 0;
                foreach (var item in Model.DeductionDetail)
                {
                    var amt = "DeductionDetail[" + count + "].Amount";
                    var groupId = "DeductionDetail[" + count + "].AccountGroupId";
                    var headId = "DeductionDetail[" + count + "].DeductionHeadId";
                    var deductDetailId = "DeductionDetail[" + count + "].BillDeductionDetailId";
                    var deductionHead = "DeductionDetail[" + count + "].DeductionHead";
                    var accountGroup = "DeductionDetail[" + count + "].AccountGroup";
                    <tr>
                        <td>@item.DeductionHead</td>
                        <td>@item.AccountGroup</td>
                        <td>
                            @Html.Hidden(@amt, item.Amount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateDeductionTotal()", @autocomplete = "off" })
                            <h4>@item.Amount</h4>
                            @Html.Hidden(@groupId, item.AccountGroupId)
                            @Html.Hidden(@headId, item.DeductionHeadId)
                            @Html.Hidden(@deductDetailId, item.BillDeductionDetailId)
                            @Html.Hidden(@deductionHead, item.DeductionHead)
                            @Html.Hidden(@accountGroup, item.AccountGroup)
                        </td>
                    </tr>
                    count++;

                }
            }
            else
            {
                <tr>

                    <td></td>
                    <td></td>
                    <td>
                        @Html.Hidden("DeductionDetail[0].Amount", "", new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onblur = "CalculateDeductionTotal()", @autocomplete = "off" })
                        @Html.ValidationMessage("DeductionDetail[0].Amount")
                        @Html.Hidden("DeductionDetail[0].AccountGroupId")
                        @Html.Hidden("DeductionDetail[0].DeductionHeadId")
                        @Html.Hidden("DeductionDetail[0].BillDeductionDetailId")
                        @Html.Hidden("DeductionDetail[0].DeductionHead")
                        @Html.Hidden("DeductionDetail[0].AccountGroup")
                    </td>
                </tr>
            }
            <tr>
                
                    <td colspan="3">
                        
                            <label>Total Value <span class="cr">(Cr)</span> :</label>
                            @Html.HiddenFor(m => m.DeductionAmount, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                            @Html.DisplayFor(m => m.DeductionAmount)
                          
                    </td>
                    
                    </tr>
            <tr><td></td>
                <td class="reg-no">
                   
                        <label class="lblval">Total Debit <span class="dr">(Dr)</span> :</label>
                        @*<input value="" id="ttlCr" class="form-control" readonly="readonly" autocomplete="off" type="text">*@
                    <h4 id="ttlCr" class="tatval"></h4>    
                   
                      
                    </td>
                <td class="reg-no">
                   
                        <label class="lblval">Total Credit <span class="cr">(Cr)</span> :</label>
                        @*<input value="" id="ttlDr" class="form-control" readonly="readonly" autocomplete="off" type="text">*@
                        <h4 id="ttlDr" class="tatval"></h4>
                   
                </td>
                
            </tr>
        </tbody>
    </table>

</div>


<script type="text/javascript">
    function CalculateDeductionTotal() {
        var ttlExpVal = 0, ttlDrVal = 0, ttlDedtVal = 0;
        $('#tbodyExpenseList input[name$=".TransactionType"]').each(function (i, rowEle) {
            if ($(this).val() == 'Credit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val());
                if (!isNaN(parseVal))
                    ttlExpVal = ttlExpVal + parseVal;
            } else if ($(this).val() == 'Debit') {
                var parseVal = parseFloat($(this).closest('tr').find("input[name$='.Amount']").val());
                if (!isNaN(parseVal))
                    ttlDrVal = ttlDrVal + parseVal;
            }
        });
        //$('#tbodyExpenseList input[name$=".Amount"]').each(function (i, rowEle) {
        //    var parseVal = parseFloat($(this).val());
        //    if (!isNaN(parseVal))
        //        ttlExpVal = ttlExpVal + parseVal;
        //});
        //$('#ExpenseAmount').val(ttlExpVal);
        $('#tbodyDeductionList input[name$=".Amount"]').each(function (i, rowEle) {
            var parseVal = parseFloat($(this).val());
            if (!isNaN(parseVal))
                ttlDedtVal = ttlDedtVal + parseVal;
        });
        $('#ExpenseAmount').val(ttlExpVal);
        $('#DeductionAmount').val(ttlDedtVal);
        $('#ttlDr').text(ttlExpVal);
        $('#ttlCr').text(ttlDrVal + ttlDedtVal);
        //$("#CreditorAmount").val(parseFloat($('#lblAdvTtlAmt').text()));
    }
    function EmptyExpenseDeductionDetails() {
        $('#tbodyDeductionList tr').not(':first').remove();
        $('#tbodyDeductionList tr td').find('input, select').val('');
        $('#tbodyDeductionList tr td').find('h4').html('');
        $('#tbodyExpenseList tr').not(':first').remove();
        $('#tbodyExpenseList tr td').find('input').val('');
        $('#tbodyDeductionList tr td').not(':last').html('');
    }
    $('#btnAddExpense').click(function () {
        AddNewExpense();
    });
    $('#btnReset').click(function () {
        GetTransactionDetails();
    });
    $(document).on('click', 'a.removeExpense', function () {
        if ($('#tbodyExpenseList tr').length != 1) {
            $(this).closest('tr').remove();
            CalculateDeductionTotal();
        }
    });
    $(document).on('change', 'select[name$=".AccountGroupId"]', function () {
        var groupId = $(this).val();
        var select = $(this).closest('tr').find("select[name$='.AccountHeadId']");
        select.empty();
        if (groupId != '') {
            $.getJSON("@Url.Action("GetAccountHead", "CoreAccounts")", { "accountGroupId": groupId },
             function (locationdata) {
                 $.each(locationdata, function (index, itemData) {
                     select.append($('<option/>', {
                         value: itemData.id,
                         text: itemData.name,
                     }));
                 });
             });
        }
    });
    @*$(document).on('change', 'select[name$=".AccountHeadId"]', function () {
        var headId = $(this).val();
        var ele = $(this).closest('tr');
        var groupId = $(this).closest('tr').find("select[name$='.AccountGroupId']").val();
        if (headId != '') {
            $.getJSON("@Url.Action("GetTransactionType", "CoreAccounts")", { "accountGroupId": groupId, "accountHeadId": headId, "typeCode": "ADV", "tSubCode": "1" },
             function (data) {
                 ele.find('input[name$=".TransactionType"]').val(data);
                 ele.find('#lblTransType').text(data);
             });
        } else {
            ele.find('input[name$=".TransactionType"]').val('');
            ele.find('#lblTransType').text('');
        }
    });*@
</script>